<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>洛克菲勒留给儿子的38封信</title>
      <link href="/2023/07/18/luo-ke-fei-le-liu-gei-er-zi-de-38-feng-xin/"/>
      <url>/2023/07/18/luo-ke-fei-le-liu-gei-er-zi-de-38-feng-xin/</url>
      
        <content type="html"><![CDATA[<p>《洛克菲勒留给儿子的38封信》</p><h2><span id="第一封起点不决定终点">第一封：起点不决定终点</span></h2><p>格言：我们的命运由我们的行动决定，而绝非完全由我们的出身决定。</p><p>　享有特权而无力量的人是废物，受过教育而无影响的人是一堆一文不值的垃圾。</p><p>(men of privilege without power are waste-material.men of </p><p>enlightenment without influence ate the poorest kind of rubbish.)</p><p>july　20，1897</p><p>亲爱的约翰：</p><p>　 你希望我能永远同你一起出航，这听起来很不错，但我不是你永远的船长.上帝为我们创造双脚，是要让我们靠自己的双脚走路。</p><p>也许你尚未做好独自前行的准备，但你需要知道，我所置身的那个充满挑战与神奇的商业世界，是你新生活的出发地，你将从那里开始参加你不曾享用而又关乎你未来的人生盛宴。至于你如何使用摆放在你生命面前的刀叉，和如何品味命运天使奉上的每一道菜肴，那完全要靠你自己。</p><p>当然，我期望你在不远的将来就能卓尔不群，并胜我一筹。而我决定将你留在我身边，无非是想把你带到你事业生涯的高起点，让你无须艰难攀爬便可享有迅速腾达的机会。<br>　<br>这当然没有什么值得你庆幸和炫耀的，更无须你感激。美利坚合众国的建国信念是人人生而平等，但这种平等是权利与法律意义上的平等，与经济和文化优势无关。想想看，我们这个世界就如同一座高山，当你的父母生活在山顶上时，注定你不会生活在山脚下；当你的父母生活在山脚下时，注定你不会生活在山顶上。在多数情况下，父母的位置决定了孩子的人生起点。</p><p>但这并不意味着，每个人的起点不同，其人生结果也不同。在这个世界上，永远没有穷、富世袭之说，也永远没有成、败世袭之说，有的只是我奋斗我成功的真理。我坚信，我们的命运由我们的行动决定，而绝非完全由我们的出身决定。</p><p>就像你所知道的那样，在我小的时候，家境十分贫寒，记得我刚上中学时所用的书本都是好心的邻居为我买的，我的人生开始时也只是一个周薪只有5元钱的簿记员，但经由不懈的奋斗我却建立了一个令人艳羡的石油王国。在他人眼里这似乎是个传奇，我却认为这是对我持之以恒、积极奋斗的回报，是命运之神对我艰苦付出的奖赏。</p><p>约翰，机会永远都会不平等，但结果却可能平等。在历史上，无论是在政界还是在商界，尤其在商界，白手起家的事例俯拾皆是，他们都曾因贫穷而少有机会，他们却都因奋斗而功成名就。然而，历史上也充斥着富家子弟拥有所有优势，却走向失败的事例。麻州的一项统计数字说，十七个有钱人的孩子里面，竟然没有一个在离开这个世界时还是富翁。</p><p>而在很久以前，社会上便流传着一个讽刺富家子弟无能的故事，说在费城的一个小酒吧里，一位客人谈起某位百万富翁，说：“他是白手起家的百万富翁。”“是啊，”旁边一位比较精明的先生回答说，：“他继承了两千万，然后他把这笔钱变成了一百万。”</p><p>这是一个令人痛心的故事。但在我们今天这年社会，富家子弟正处在一种不进则退的窘境之中，他们中的很多人注定要受人同情和怜悯，甚至要下地狱。</p><p>家族的荣耀与成功的历史，不能保证其子孙后代的未来将会美好。我承认早期的优势的确大有帮助，但它不能保证最后会赢得胜利。我曾不止一次地思考这个对富家子弟而言带有悲哀性的问题，我似乎觉得，富家子弟开始承担了优势，却很少有机会去学习和发展生存所需要的技巧。而出身低贱的人因迫切需要解救自身，便会积极发挥创意和能力，且珍视和抢占各种机会。我还观察到，富家子弟缺乏贫贱之人的那种要拯救自己的野心，也只得祈祷上帝赐予他成就了。</p><p>所以，在你和你的姐姐们很小的时候，我就有意识地不让你们知道你们的父亲是个富人，我向你们灌输最多的是诸如节俭、个人奋斗等价值观念，因为我知道给人带来伤害最快捷的途径就是给钱，它可以让人腐化堕落、飞扬跋扈、不可一世，失去最美好的快乐。我不能用财富埋葬我心爱的孩子，愚蠢地让你们成为不思进取、只知依赖父母的果实的无能者。</p><p>　一个真正快乐的人，是能够享受他的创造的人。那些像海绵一样，只取不予的人，只会失去快乐。</p><p>　我相信没有不渴望过上快乐、高贵生活的人，但真正懂得高贵快乐生活从何而来的人却不多。在我看来，高贵快乐的生活，不是来自高贵的血统，也不是来自高贵的生活方式，而是来自高贵的品格——自立精神，看看那些赢得世人尊重、处处施展魅力的高贵的人，我们就知道自立的可贵。</p><p>　约翰，你的每一个举动都会成为我挂念。但与这种挂念相比，我更对你充满信心，相信你优异的品格——比世界上任何财富都更有价值的品格，将帮助你铺设出一条美好的前程，并将助你拥有成功而又充实的人生。</p><p>　但你需要强化这样的信念：起点可能影响结果，但不会决定结果。能力、态度、性格、抱负、手段、经验和运气之类的因素，在人生和商业世界里扮演着极为重要的角色。你的人生刚刚开始，但一场人生之战就在你面前。我能深切地感觉到你想成为这场战争的胜者，但你要知道，每个人都有追求胜利的意志，只有决心做好准备的人才会赢得胜利。</p><p>　我的儿子，享有特权而无力量的人是废物，受过教育而无影响的人是一堆一文不值的垃圾。找到自己的路，上帝就会帮你！</p><p>爱你的父亲</p><h2><span id="第二封运气靠策划">第二封：运气靠策划</span></h2><p>格言：每个人都是他自己命运的设计者和建筑师。 </p><p>　我不靠天赐的运气活着，但我靠策划运气发达。 </p><p>　等待运气的时候，要知道如何引导运气；设计运气，就是设计人生。 </p><p>(he who marches in rank and file has already eared my contempt.he </p><p>has been given a large brain by mistake，since for him the spinal </p><p>cord would suffice.) </p><p>january20，1900 </p><p>亲爱的约翰： </p><p>有些人注定要成为令人眩目的王者或伟人，因为他们非凡的才能，譬如，老麦考密克先生，他长着一颗能制造运气的脑袋，知道如何将收割机变成收割钞票的镰刀。 </p><p>在我眼里，老麦考密克永远是位野心勃勃且具商业才能的实业巨子，他用收割机解放了美国农民，同时也把自己送入全美最富有者的行列。法国人似乎更喜欢他，盛赞他为“对世界最有贡献的人”。哦，这真是一个意外的收获。 </p><p>这位原本只能做个普通农具商的商界奇才，说过的一句深奥的名言：“运气是设计的残余物质。” </p><p>这句话听起来的确让人颇费脑筋，它是指运气是策划和策略的结果？还是指运气是策划之后剩余的东西呢？我的经验告诉我，这两种意义都存在，换句话说，我们创造自己的运气，我们任何行动都不可能把运气完全消除，运气是策划过程中难以摆脱的福音。 </p><p>麦考密克洞悉了运气的真谛，打开了运气过来的大门。所以，我对麦考密克收割机能行销全球，成为日不落产品，丝毫不感到奇怪。 </p><p>然而，在我们这个世界上，很难找到像麦考密克先生那样善于策划运气的人，也很难找到不相信运气的人，和不误解运气的人。 </p><p>在凡夫俗子眼里，运气永远是与生俱来的，只要发现有人在职务上得升迁、在商海中势如破竹，或在某一领域取得成功，他们就会很随便、甚至用轻蔑的口气说：“这个人的运气真好，是好运帮了他！”这种人永远不能窥见一个让自己赖以成功的伟大真理：每个人都是他自己命运的设计师和建筑师。 </p><p>我承认，就像人不能没有金钱一样，人不能没有运气。但是，要想有所作为就不能等待运气光顾。我的信条是：我不靠天赐的运气活着，但我靠策划运气发达。我相信好的计划会左右运气，甚至在任何情况下，都能成功地影响运气。我在石油界实施的变竞争为合作的计划恰恰验证了这一点。 </p><p>在那项计划开始前，炼油商们各自为战，利欲熏心，结果引发了毁灭性的竞争。这种竞争对消费者来说当然是个福音，但油价下跌对炼油商却是个灾难。那时候绝大多数炼油商做的都是亏本生意，正一个一个滑入破产的泥潭。 </p><p>我很清楚，要想重新有利可图并将钱永远地赚下去，就必须驯服这个行业，让大家理性行事。我把它视为一种责任，然而这很难做到，这需要一个计划——一个将所有炼油业务置于我麾下的计划。 </p><p>约翰，要在获取利益的猎场上成为好猎手，你需要勤于思考、做事小心，能够看到事物中一切可能存在的危险和机遇，同时又要像一个棋手那样研究所有可能危及你霸主地位的各种战略。我彻底研究了形势并评估了自己的力量，决定将大本营科利佛兰作为我发动统治石油工业战争的第一战场，待征服在那里的二十几家竞争对手之后，再迅速行动，开辟第二战场，直至将那些对手全部征服，建立石油业和新秩序。 </p><p>就像战场上的指挥官，选择攻击什么样的目标，要首先知道选择什么样的火器才最奏效一样，要想成功实现将石油业统一到我麾下的计划，需要一个彻底解决问题的手段，那就是钱，我需要大量的钱去买下那些制造生产过剩的炼油厂。但我手头上的那点资金不足以实现我的计划，所以我决定组建股份公司，把行业外的投资者拉进来。很快我们以百万资产在俄亥俄注册成立了标准石油公司，第二年资本大幅扩张了三倍半。但何时动手却是个学问。 </p><p>富有远见的商人总善于从每次灾难中寻找机会，我就是这样做的。在我们开始征服之旅前，石油业一片混乱，一天比一天没有希望，科利佛兰百分之九十的炼油商已经快被日益剧烈的竞争压垮发，如果不把厂子卖掉，他们就只能眼睁睁地看着自己走向灭亡。这是收购对手的最好时机。 </p><p>在此时采取收购行动，似乎不太道德，但这的确与良知无关。企业就如战场，战略目标的意义就是要造成对己方最有利的状态。出于战略上考虑，我选择的第一个征服目标不是不堪一击的小公司，而是最强劲的对手克拉克-佩恩公司。这家公司在科利佛兰很在名望，且野心勃勃，想要吃掉我的明星炼油厂。 </p><p>但在对手决定之前，我总要先下手为强。我主动约见克拉克-佩恩公司最大的股东，我中学时代的老朋友，奥利弗·佩恩先生，我告诉他，石油业混乱、低迷的时代该结束了，为保护无数家庭赖以生存的这个行业，我要建立一个庞大、高绩效的石油公司，并欢迎他入伙。我的计划打动了佩恩，最后他们同意以40万元的价格出售公司。 </p><p>我知道克拉克-佩恩公司根本不值这个价钱，但我没有拒绝他们，吃掉克拉克-佩恩公司就意味着我将取得世界最大炼油商的地位，将为迅速把科利佛兰的炼油商捏合在一起充当强力先锋。 </p><p>这一招果然十分奏效。在以后不到两个月的时间里，就有二十二家竞争对手归于标准石油公司的麾下，并最终让我成为了那场收购战的大赢家。而这又给我势不可挡的动力，在此后三年时间里，我连续征服了费城、匹兹堡、巴尔的摩的炼油商，成为了全美炼油业的惟一主人。 </p><p>今天想来，我真是幸运，如果当时我只感叹自己时运不济，随波逐流，我或许早已被征服掉了。但我策划出了我的运气。 </p><p>世界上什么事都可以发生，就是不会发生不劳而获的事，那些随波逐流、墨守成规的人，我不屑一顾。他们的大脑被错误的思想所盘踞，以为能全身而退就值得沾沾自喜。 </p><p>约翰，要想让我们的好运连连，我们必须要精心策划运气，而策划运气，需要好的计划，好的计划一定是好的设计，好的设计一定能够发挥作用。你需要知道，在构思好的设计时，要首先考虑两个基本的先决条件，第一个条件是知道自己的目标，譬如你要做什么，甚至你要成为什么样的人；第二个条件是知道自己拥有什么资源，譬如地位、金钱、人际关系，乃至能力。 </p><p>这两个基本条件的顺序并非绝对不能改变，你可能先有一个构想、一个目标，才开始寻找适于这些资源的目标。还可以把它们混合一处，形成第三和第四种方法，例如拥有某种目标和某种资源，为实现目标，你必须选择性地创造一些资源，也可能拥有一些资源和某个目标，你必须根据这些资源，提高或降低目标。 </p><p>你根据资源调整目标或根据目标调整资源之后，就有了一个基础——可以据以构思设计的结构，剩下的东西就是用手段与时间去填充，和等待运气的来临了。 </p><p>你需要记住，我的儿子，设计运气，就是设计人生。所以在你等待运气的时候，你要知道如何引导运气。试试看吧。 </p><p>爱你的父亲</p><h2><span id="第三封天堂与地狱比邻">第三封：天堂与地狱比邻</span></h2><p>格言：我们劳苦的最高报酬，不在于我们所获得的，而在于我们会因此成为什么。</p><p>　如果你视工作为一种乐趣，人生就是天堂；如果你视工作为一种义务，人生就是地狱。</p><p>（with this faith we will be able to hew out of the mountain of </p><p>despair a stone of hope。）</p><p>november9，1897</p><p>亲爱的约翰：</p><p>有一则寓言很有意味，也让我感触良多。那则寓言说：</p><p>在古老的欧洲，有一个人在他死的时候，发现自己来到一个美妙而又能享受一切的地方。他刚踏进那片乐土，就有个看似侍者模样的人走过来问他：“先生，您有什么需要吗？在这里您可以拥有一切您想要的：所有美味佳肴，所有可能的娱乐以及各式各样的消遣，其中不乏妙龄美女，都可以让您尽情享用。”</p><p>这个人听了以后，感到有些惊奇，但非常高兴，他暗自窃喜：这不正是我在人世间的梦想嘛！一整天他都在品尝所有的佳肴美食，同时尽享美色的滋味。然而，有一天，他却对这一切感到索然无味了，于是他就对侍者说：“我对这一切感到很厌烦，我需要做一些事情。你可以给我找一份工作做吗？</p><p>他没想到，他所得到的回答却是摇头：“很抱歉，我的先生，这是我们这里惟一不能为您做的。这里没有工作可以给您。”</p><p>这个人非常沮丧，愤怒地挥动着手说：“这真是太糟糕了！那我干脆就留在地狱好了！”</p><p>“您以为，您在什么地方呢？”那位侍者温和地说。</p><p>约翰，这则很富幽默感的寓言，似乎告诉我：失去工作就等于失去快乐。但是令人遗憾的是，有些人却要在失业之后，才能体会到这一点，这真不幸！</p><p>我可以很自豪的说，我从未尝过失业的滋味，这并非我运气 ，而在于我从不把工作视为毫无乐趣的苦役，却能从工作中找到无限的快乐。</p><p>我认为，工作是一项特权，它带来比维持生活更多的事物。工作是所有生意的基础，所有繁荣的来源，也是天才的塑造者。工作使年轻人奋发有为，比他的父母做得更多，不管他们多么有钱。工作以最卑微的储蓄表示出来，并奠定幸福的基础。工作是增添生命味道的食盐。但人们必须先爱它，工作才能给予最大的恩惠、获致最大的结果。</p><p>我初进商界时，时常听说，一个人想爬到高峰需要很多牺牲。然而，岁月流逝，我开始了解到很多正爬向高峰的人，并不是在“付出代价”。他们努力工作是因为他们真正地喜爱工作。任何行业中往上爬的人都是完全投入正在做的事情，且专心致志。衷心喜爱从事的工作，自然也就成功了。</p><p>热爱工作是一种信念。怀着这个信念，我们能把绝望的大山凿成一块希望的磐石。一位伟大的画家说得好，“痛苦终将过去，但是美丽永存”。</p><p>但有些人显然不够聪明，他们有野心，却对工作过分挑剔，一直在寻找“完美的”雇主或工作。事实是，雇主需要准时工作、诚实而努力的雇员，他只将加薪与升迁机会留给那些格外努力、格外忠心、格外热心、花更多的时间做事的雇员，因为他在经营生意，而不是在做慈善事业，他需要的是那些更有价值的人。</p><p>不管一个人的野心有多么大，他至少要先起步，才能到达高峰。一旦起步，继续前进就不太困难了。工作越是困难或不愉快，越要立刻去做。如果他等的时间越久，就变得越困难、可怕，这有点像打枪一样，你瞄的时间越长，射击的机会就越渺茫。</p><p>我永远也忘不了做我第一份工作——簿记员的经历，那时我虽然每天天刚蒙蒙亮就得去上班，而办公室里点着的鲸油灯又很昏暗，但那份工作从未让我感到枯燥乏味，反而很令我着迷和喜悦，连办公室里的一切繁文缛节都不能让我对它失去热心。而结果是雇主不断地为我加薪。</p><p>收入只是你工作的副产品，做好你该做的事，出色完成你该完成的工作，理想的薪金必然会来。而更为重要的是，我们劳苦的最高报酬，不在于我们所获得的，而在于我们会因此成为什么。那些头脑活跃的人拼命劳作决不是只为了赚钱，使他们工作热情得以持续下去的东西要比只知敛财的欲望更为高尚——他们是在从事一项迷人的事业。</p><p>老实说我是一个野心家，从小我就想成为巨富。对我来说，我受雇的休伊特-塔特尔公司是一个锻炼我的能力、让我一试身手的好地方。它代理各种商品销售，拥有一座铁矿，还经营着两项让它赖以生存的技术，那就是给美国经济带来革命性变化的铁路与电报。它把我带进了妙趣横生、广阔绚烂的商业世界，让我学会了尊重数字与事实，让我看到了运输业的威力，更培养了我作为商人应具备的能力与素养。所有的这些都在我以后的经商中发挥了极大效能。我可以说，没有在休伊特-塔特尔公司的历练，在事业上我或许要走很多弯路。</p><p>现在，每当想起休伊特和塔特尔两位先生时，我的内心就不禁涌起感恩之情，那段工作生涯是我一生奋斗的开端，为我打下了奋起的基础，我永远对那三年半的经历感激不尽。</p><p>所以，我从未像有些人那样抱怨他的雇主，说：“我们只不过是奴隶，我们被雇主压在尘土上，他们却高高在上，在他们美丽的别墅里享乐；他们的保险柜里装满了黄金，他们所拥有的每一块钱，都是压榨我们这些诚实的工人得来的。”我不知道这些抱怨的人是否想不定期：是谁给了你就业的机会？是谁给了你建设家庭的可能？是谁让你得到了发展自己的可能？如果你已经意识到了别人对你的压榨，那你为什么不结束压榨，一走了之？</p><p>工作台是一种态度，它决定了我们快乐与否。同样都是石匠，同样在雕塑石像，如果你问他们：“你在这做什么？”他们中的一个人可能就会说：“你看到了嘛，我正在凿石头，凿完这块我就可以回家了。”这种人永远视工作为惩罚，在他嘴里最常吐出的一个字就是“累”。</p><p>另一个人可能会说：“你看到了嘛，我正在做雕像。这是一份很辛苦的工作，但是酬劳很高。毕竟我有太太和四个孩子，他们需要温饱。”这钟人永远视工作为负担，在他嘴里经常吐出来的一句话就是“养家糊口”。</p><p>第三个人可能会放下锤子，骄傲地指着石雕说：“你看到了嘛，我正在做一件艺术品。”这种人永远以工作为荣，工作为乐，在他嘴里最常吐出的一句话是“这个工作很有意义”。</p><p>天堂也地狱都有由自己建造。如果你赋予工作意义，不论工作大小，你都会感到快乐，自我设定的成绩不论高低，都会使人对工作产生乐趣。如果你不喜欢做的话，任何简单的事都会变得困难、无趣，当你叫喊着这个工作很累人时，即使你不卖力气，你也会感到精疲力竭，反之就大不相同。事情就是这样。</p><p>约翰，如果你视工作为一种乐趣，人生就是天堂；如果你视工作为一种义务，人生就是地狱。检视一下你的工作态度，那会让我们都感觉愉快。</p><p>爱你的父亲</p><h2><span id="第四封现在就去做">第四封：现在就去做</span></h2><p>格言：机会是靠机会得来的。 </p><p>　坏习惯能摆布我们，左右成败。它很容易养成，但却很难伺候。 </p><p>　成功地将一个好主意付诸实践，比在家空想出一千个好主意要有价值得多。 </p><p>（to conquer you have need to do，to do again，ever to do！and your </p><p>safety is insured。） </p><p>december24，1897 </p><p>亲爱的约翰： </p><p>聪明人说的话总能让我记得很牢。有位聪明人说得好，“教育涵盖了许多方面，但是他本身不教你任何一面。”这位聪明人向我们展示了一条真理：如果你不采取行动，世界上最实用、最美丽、最可行的哲学也无法行得通。 </p><p>我一直相信，机会是靠机会得来的。再好的构想都有缺陷，即使是很普通的计划，但如果确实执行并且继续发展，都会比半途而废的好计划要好得多，因为前者会贯彻始终，后者却前功尽弃。所以我说，成功没有秘诀，要在人生中取得正面结果，有过人的聪明智慧、特别的才艺当然好，没有也无可厚非，只要肯积极行动，你就会越来越接近成功。 </p><p>遗憾的是，很多人并没有记取这个最大的教训，结果将自己沦为了平庸之辈。看看那些庸庸碌碌的普通人，你就会发现，他们都有在被动的活着，他们说的远比做的多，甚至只说不做。但他们几乎个个都是找借口的行家，他们会找各种借口来拖延，直到最后他们证明这件事不应该、没有能力去做或已经来不及了为止。 </p><p>与这类人相比，我似乎聪明、狡猾了许多。盖茨先生吹捧我是个主动做事、自动自发的行动者。我很乐意这样的吹捧，因为我没有辜负它。积极行动是我身上的另一个标识，我从不喜欢纸上谈兵或流于空谈。因为我知道，没有行动就没有结果，世界上没有哪一件东西不是由一个个想法付诸实施所得来的。人只要活着，就必须考虑行动。 </p><p>很多人都承认，没有智慧的基础的知识是没用的，但更令人沮丧的是即使空有知识和智慧，如果没有行动，一切仍属空谈。行动与充分准备其实可视为物体的两面。人生必须适可而止。做太多的准备却迟迟不去行动，最后只会徒然浪费时间。换句话说，事事必须有节制，我们不能落入不断演练、计划的圈套，而必须承认现实：不论计划有多周详，我们仍然不可能准确预测最后的解决方案。 </p><p>我当然不否认计划非常重要，计划是获得有利结果的第一步，但计划并非行动，也无法代替行动。就如同打高尔夫球一样，如果没有打过第一洞，便无法到达第二洞。行动解决一切。没有行动，什么都不会发生。我们无论如何也买不到万无一失的保险，但我们可以做到的是下定决心去实行我们的计划。 </p><p>缺乏行动的人，都有一个坏习惯：喜欢维持现状，拒绝改变。我认为这是一种深具欺骗和自我毁灭效果的坏习惯，因为一切都在变化之中，正如人会生死一样，没有不变的事物。但因内心的恐惧——对未知的恐惧，很多人抗拒改变，哪怕现状多么不令他满意，他都不敢向前跨出一步。看看那些本该事业有成，却一事无成的人，你就知道不同情他们是件很难的事。 </p><p>是的，每个人在决定一件大事时，心里都会或多或少有些担心、恐惧，都会面对到底要不要做的困扰。但“行动派”会用决心燃起心灵的火花，想出各种办法来完成他们地心愿，更有勇气克服种种困难。 </p><p>很多缺乏行动的人大都很天真，喜欢坐等事情自然发生。他们天真地以为，别人会关心他们的事。事实上，除了自己以外，别人对他们不大感兴趣，人们只对自己的事情感兴趣。例如一桩生意，我们获利比重越高，就要越主动采取行动，因为成败与别人的关系不大，他们不会在乎的。这时候，我们最好把它推一把，如果我们怠惰、退缩，坐等别人采取主动来推动事情的话，结果必定会令人失望。 </p><p>一个人只有自己依靠自己，他才不会让自己失望，并能增加自己控制命运的机会。聪明人只会去促使事情发生。 </p><p>人生中最令人感到挫折的，莫过于想做的事太多，结果不但没有足够的时间去做，反而想到每件事的步骤繁多，而被做不到的情绪所震慑，以致一事无成。我们必须承认，时间有限，任何人都无法做完所有的事情。聪明人知道，并非所有的行动都会产生好的结果，只有明智的行动才能带来有意义的结果，所以聪明人只会汲取做了以后获得正面效果的工作，做与完成最大目标有关的工作，而且专心致志，所以聪明人总能做出最有价值的贡献，并捞到很多好处。 </p><p>要吃掉大象需要一口一口的吃，做事也是一样，想完成所有的事情，只会让机会溜掉。我的座右铭是：洛克菲勒对紧急事件采取不公平待遇。 </p><p>很多人都是自己使自己变成一个被动者的，他们想等到所有的条件都十全十美，也就是时机对了以后才行动。人生随时都是机会，但是几乎没有十全十美的。那些被动的人平庸一辈子，恰恰是因为他们一定要等到每一件事情都百分之百的有利，万无一失以后才去做。这是傻瓜的做法。我们必须向生命妥协相信手上的正是目前需要的机会，才会将自己挡在陷入行动前永远痴痴等待的泥沼之外。 </p><p>我们追求完美，但是人类的事情没有一件绝对完美，只有接近完美。等到所有条件都完美以后才去做，只能永远等下去，并将机会拱手让给他人。那些要等到所有事情都已经准备妥当才出发的人，将永远也离不开家。要想变成“我现在就去做”的那种人，就是停止一切白日梦，时时想到现在，从现在就开始做。诸如“明天”、“下礼拜”、“将来”之类的句子，跟“永远不可能做到”意义相同。 </p><p>每个人都有失去自信，怀疑自己能力的时候，尤其是在逆境中的时候。但真正懂得行动艺术艺术的人，却可以用坚强的毅力克服它，会告诉自己每个人都有失败的时候，有失败得很惨的时候，会告诉自己不论事前做了多少准备、思考多久，真正着手做的时候，都有难免会犯错误。然而，被动的人，并不把失败视为学习和成长的机会，却总在告诫自己：或许我真的不行了，以致失去了积极参与未来的行动。 </p><p>很多人都相信心想事成，但我却将其视为慌言。好主意一毛钱能买一打，最初的想法只是一连串行动的起步，接下来需要第二阶段的准备、计划和第三阶段的行动。在我们这个世界上从来不缺少有想法有主意的人，但懂得成功地将一个好主意付诸实现比在家空想出一千个好主意要有价值得多的人却很少。 </p><p>人们用来判断你的能力的真正基础，不是你脑子里装了多少东西，而是你的行动。人们都信任脚踏实地的人，他们都会想：这个人敢说敢做，一定知道怎么做最好。我还没听过有人因为没有打扰别人、没有采取行动或要等别人下令才做事而受到赞扬的。那些在工商界、政府、军队中的领袖，都是很能干又肯干的人、百分之百主动的人。那些站在场外袖手旁观的人永远当不成领导人物。 </p><p>不论是自动自发者还是被动的人，都是习惯使然。习惯有如绳索，我们每天纺织一根绳索，最后它粗大得无法折断。习惯的绳索不是带领我们到高峰就是引领我们到低谷，这主得看好习惯或坏习惯了。坏习惯能摆布我们、左右成败，它很容易养成，但却很难伺候。好习惯很难养成，但很容易维持下去。 </p><p>要有现在就做的习惯，最重要的是要有积极主动的精神，戒除精神散漫的习惯，要决心做个主动的人，要勇于做事，不要等到万事俱备以后才去做，永远没有绝对完美的事。培养行动的习惯，不需要特殊的聪明智慧或专门的技巧，只需要努力耕耘，让好习惯在生活中开花结果即可。 </p><p>儿子，人生就是一场伟大的战役，为了胜利，你需要行动，再行动，永远行动！这样，你的安全就能得到保障。 </p><p>祝圣诞节快乐！我想没有比在此时送给你这封信，更好的圣诞礼物了。 </p><p>爱你的父亲</p><h2><span id="第五封要有竞争的决心">第五封：要有竞争的决心</span></h2><p>格言：我不迎接战争，我摧毁竞争者。</p><p>　即使输了，唯一该做的就是光明磊落的去输。</p><p>　拐杖不能取代强健有力的双脚，我们要靠自己的双脚站起来。</p><p>（these is no retreat but in submission and savvy！ our chains are </p><p>forged！ the war is inevitable，and let it come）</p><p>february19，1901</p><p>亲爱的约翰：</p><p>我有一个不好的消息要告诉你，本森先生去世了，就在昨晚。我很难过。</p><p>本森先生是我昔日的劲敌，也是我为数不多的受我尊重的对手之一，他卓尔不群的才干、顽强的意志和优雅的风度留给我深刻的印象。</p><p>直到今天，我还记得在我们结盟之后，他跟我开的那个玩笑，他说：“洛克菲勒先生，您是一个毫不手软而又完美的掠夺者，输给那些坏蛋，会让我非常难过，因为那就像遭遇了抢劫，但与您这种循规蹈矩的人交手，不管输赢，都会让人感到快乐。”</p><p>当时，我分不清本森是在恭维我还是在赞美我，我告诉他：“本森先生，如果你能把掠夺者换成征服者，我想我会乐意接受的。”他笑了。</p><p>我非常敬佩那些在大敌当前依然英勇奋战的勇士，本森先生就是这样的人。本森在屯我为敌前，我刚刚击败了全美最大的铁路公司——宾州铁路公司，并成功制服了全美第四家也是最后一家大型铁路公司——巴尔的摩·俄亥俄铁路公司。就这样，连同我最忠实的盟友——伊利铁路公司和纽约中央铁路公司，全美四大铁路公司全都成为了我手中驯服的工具。</p><p>与此同时，标准石油公司的输油管道一点一点延伸到油田，更让我获得了连接油井和铁路干线所有主要输油线的绝对控制权。</p><p>坦率的说，那时我的势力已经延伸到采油、炼油、运输、市场等石油行业的各个角落，如果我说我手中握有采油商、炼油商的生杀大权，绝非大话，我可以让他们腰缠万贯，也可以让他们一钱不值。但的确有人无视我的权威，例如本森先生。</p><p>本森先生是个有雄心的商人，他要铺设一条从布拉德福德油田到威廉斯波特的输油管道，去拯救那些惟恐被我击垮，而急欲摆脱我束缚的独立石油生产商们，当然，想从中大捞一把的念头更支配着他勇闯我的领地。</p><p>这条连接宾州东北部与西部的输油管线，从一开始就以惊人的速度在向前铺进。这引起我极大关注。约翰，任何竞争都不是一场轻松的游戏，而是活力十足、需要密切注意、不断做出决定的游戏，否则，稍不留神你就输了。</p><p>本森先生在制造麻烦，我必须让他住手。起初我用了一套显然并不高明的手法与本森开始较量：我用高价买下一块沿宾州州界由北向南的狭长土地，企图阻止本森前进的步伐，但本森采取绕行的办法，化解了我打出的重拳，结果我成了无所作为的地主，却让那里的农民一夜暴富。接着我动用了盟友的力量，要求铁路公司绝不能让任何输油管道跨越他们的铁路，本森如法炮制，再次成功突围。最后我想借助政府的力量来阻击本森，但没有成功，只眼睁睁地看着本森成为英雄。</p><p>我知道，我遇到了难以征服的劲敌，但他无法动摇我竞争的决心，因为那条长达110英里的管道是我最大的威胁，如果任由原油在那里毫无阻碍的流淌，流到纽约，那么本森他们就将取代我成为纽约炼油业的新主人，同量也将使我失去对布拉德福德油田的控制。这是我不能允许的。</p><p>当然，我并不想赶尽杀绝，困死他们，我真正的目标是希望不用太高的价格，就能得到我想要的东西——不能让本森他们胡来，破坏我费尽心计才建立起来的市场秩序，毁了我对石油定的控制权，这可是我的生命。所以，当那条巨蛇即将开始涌动的时候，我向本森提议，我想买他们的股票。但很不幸，他们拒绝了。</p><p>这激怒了我们很多人。主管公司管道运输业务的奥戴先生要用武力毁了它，以惩罚那些不知好歹的家伙。我厌恶这种邪恶而下作的想法，只有无能的人才会干这类令人不齿的勾当，我告诉奥戴：杀了你那个愚蠢的想法！我从来没有想到会输，但是即使输了，惟一该做的就是光明磊落地去输。</p><p>如果谁能在背后搞鬼而没有被人抓到，他几乎一定会获得竞争优势。但是，邪恶和不道德的行为非常危险，它会让他丧失尊严，甚至可能坐牢。而任何欺骗和不道德的行为都无法持久，都不能成为可靠的企业策略，这只全破坏大局，使未来变得愈发困难，甚至不可能再有机会。我们一定要讲究规矩，因为规矩可以创造关系，关系会带来长久的业务，好的交易会创造更多的交易，否则，我们将提前结束我们的好运。</p><p>就我本性而言，我不迎接竞争，我摧毁竞争者。但我不需要不光明的胜利，我要赢得美满、彻底而体面。就在本森洋洋得意，享受他成功快乐的时候，我向他发动了一系列令他难以招架的攻势。我派人给储油罐生产商送去大批定单，要求他们保证生产、按时交货，令他们无暇顾及其他客户，包括本森，没有储油罐，采油商只能将开采的原油倾泻到荒野上，那么本森先生秘接受的就不是待运的石油，而是大声的抱怨了。与此同时，我大幅降低管道运输价格，将大批靠本森运送原油的炼油商吸引过来，变为了我们的客户，而在此前我已迅速收购了在纽约的几家炼油厂以阻止它们成为本森一伙的客户。</p><p>一个优秀的指挥官，不会攻打与他无关的碉堡，而是要全力摧毁那个足以攻陷全城的碉堡。我的每一轮攻击都打在致使本森先生无油可运之处，我成为了胜利者。在那条被称为全最长的输油管道建成未足一年，本森先生投降了，他主动提出与我讲和。我知道这不是他们的本意，但他们很清楚，如果再与我继续对抗下去，等待他们的就只能败得更惨。</p><p>约翰，每一场至关重要的竞争都是一场决定命运的大战，“后退就是投降！后退就将沦为奴隶！”战争既已不可避免，那就让它来吧！而在这个世界上，竞争一刻都不会停止，我们也便没有休息的时候。我们所能做的，就是带上钢铁般的决心，走向纷至沓来的各种挑战和竞争，而且要情绪高昂并乐在其中，否则，就不会产生好的结果。</p><p>要想在竞争中获胜，较为关键的是你要保持警觉，当你不断地看到对手想削弱你的时候，那就是竞争的开始。这时你需要知道自己拥有什么，也需要知道友善、温情可能会害了你，而后就是动用所有的资源的技巧，去赢得胜利了。</p><p>当然，要想在竞争中获胜，勇气只是赢得胜利的一方面，还要有实力。拐杖不能取代强健有力的双脚，我们要靠自己的双脚站起来，如果你的脚不够强壮，不能支持你，你不是放弃和认输，而是应该努力去磨练、强化、发展双脚，让它们发挥力量。</p><p>我想本森先生在天堂上也会同意我的观点的。</p><p>爱你的父亲</p><h2><span id="第六封为前途抵押">第六封：为前途抵押</span></h2><p>格言：借钱是为了创造好运。 </p><p>　不论是要赢得财富，还是要赢得人生，优秀的人在竞技中想的不是输了我会怎样，而是要成为胜利者我应该做什么。 </p><p>（we are continually faced by greater opportunities brilliantly </p><p>disguised as insoluble problems） </p><p>april 18，1899 </p><p>亲爱的约翰： </p><p>我能够理解，为什么你用借我的钱去股市闯荡总让你感觉有些不安。因为你想赢，却又怕在那个冒险的世界里输，而输掉的钱不是你的，是借来的，还得支付利息。 </p><p>这种输不起的感受，在我创业之初，乃至较有成就之后，似乎一直都在统治着我，以致每次借款前，我都会在谨慎与冒险之间徘徊，苦苦挣扎，甚至夜不能眠，躺在床上就开始算计如何偿还欠款。 </p><p>常有人说，冒险的人经常失败。但白痴又何尝不是如此？在我恐惧失败过后，我总能打起精神，决定去再次借钱。事实上，为了进步我没有其他道路可寻，我不得不去银行贷款。 </p><p>儿子，呈现在我们眼前的，经常是巧妙化解棘手问题的大好良机。借钱不是件坏事，它不会让你破产，只要你不把它看成像救生圈一样，只在危机的时候使用，而把它看成是一种有力的工具，你就可以用它来开创机会。否则，你就会掉入恐惧失败的泥潭，让恐惧束缚住你本可大展鸿图的双臂，而终无大成。 </p><p>我所熟知或认识的富翁中间，只靠自己一点一滴、日积月累挣钱发达的人少之又少，更多的人是因借钱而发财，这其中的道理并不深奥，一块钱的买卖远远比不上一百块钱的买卖赚得多。 </p><p>不论是要赢得财富，还是要赢得人生，优秀的人在竞技中想的不是输了我会怎样，而是要成为胜利者我应该做什么。 </p><p>借钱是为了创造好运。如果抵押一块土地就能借得足够的现金，让我独占一块更大的地方，那么我会毫不迟疑地抓住这个机会。在科利佛兰时，我为扩张实力、夺得科利佛兰炼油界头把交椅地位，我曾多次欠下巨债，甚至不惜把我的企业抵押给银行，结果是我成功了，我创造了令人震惊的成就。 </p><p>儿子，人生就是不断抵押的过程，为前途我们抵押青春，为幸福我们抵押生命。因为如果你不敢逼近底线，你就输了。为成功我们抵押冒险不值得吗？ </p><p>谈到抵押，我想告诉你，在我从银行家手里接过巨款时，我抵押出去的不光是我的企业，还有我的诚实。我视合同、契约为神圣的东西，我严格遵守合同，从不拖欠债务。我对投资人、银行家、客户，包括竞争对手，从不忘以诚相待，在同他们讨论问题时我都坚持讲真话，从不捏造或含糊其辞，我坚信谎言在阳光下就会显形。 </p><p>付出诚实的回报是巨大的，在我没有走出科利佛兰前，那些了解我品行的银行家们，曾一次次把我从难以摆脱的危机中拯救出来。 </p><p>我清楚地记得，有一天，我的一个炼油厂突然失火，损失惨重。由于保险公司迟迟不能赔付保险金，而我又急需一笔钱重建瓦砾中的企业，我只得向银行追加贷款。现在一想起那天银行贷款的情景就让我激动不已。本来在那些缺乏远见的银行家眼里，炼油业早已是高风险行业，向这个行业提供资金不亚于是在赌博，再加上我的炼油厂刚刚被毁于一炬，所以有些银行董事对我追加贷款犹豫不决，不肯立即放贷。 </p><p>就在这时，你们中的一个善良的人，斯蒂尔曼先生，让一名职员提来他自己的保险箱，向着其他几位董事大手一挥说：“听我说，先生们，洛克菲勒先生和他的合伙人都是非常优秀的年轻人。如果他们想借更多的钱，我恳请诸位要毫不犹豫地借给他们。如果你希望更保险一些，这是就有，想拿多少就拿多少。”我用诚实征服了银行家。 </p><p>儿子，诚实是一种方法，一种策略。因为我支付诚实，所以我赢得了银行家乃至更多人的信任，也因为它度过一道道难关，踏上了快速的成功之路。 </p><p>今天，我无须再求助于任何一家银行，我就是我自己的银行，但我永远都在感激那些曾鼎力帮助过我的银行家们。 </p><p>你的未来可能是管理企业，你需要知道，经营企业的目的是要赚钱。扩大企业能够赚钱，但是把企业拿出去抵押也是管理和运用金钱的重要事项。如果你只注重一种功能，而忽视另一种功能，就会招致失败；在最糟糕的情形下，可能会造成财务崩溃，在较好的情形下，也许会错失很多机会。 </p><p>管理和运用金钱跟决心赚钱不同，需要有不同的信念。要管理和运用金钱，你必须乐于亲自动手、亲自管理数字，不能只是空谈管理和策略。上帝表现在细节之中。如果你忽视发这些细节，或是超脱细节，把这种“杂事”授权给别人去做，就等于至少忽视了你事业经营的一半重要责任。细节永远不应该妨碍热情，成功的做法是你要记住两点：一个是战术，另一个是战略。 </p><p>儿子，你正朝着赢得一场伟大人生的位置前进，这是你一直以来的目标，你需要勇敢，再勇敢。 </p><p>爱你的父亲</p><h2><span id="第七封最可怕的是精神破产">第七封：最可怕的是精神破产</span></h2><p>格言：只要不变成习惯，失败是件好事。</p><p>　你利用了机会，就是在剥夺别人的机会，保证自己。</p><p>　一旦避免失败变成你做事的动机，你就走上了怠惰无力的路。</p><p>（an optimist sees an opportunity in every calamity， a pessimist </p><p>sees a calamity in every opportunity.）</p><p>november 19， 1899</p><p>亲爱的约翰：</p><p>你近来的情绪过于低落了，这很是让我难过。我能真切地感受到，你还在为那笔让你赔进一百万的投资感到耻辱和羞愧。以至终日闷闷不乐、忧心忡忡。其实，这大可不必，一次失败并不能说明什么，更不会在你的脑门上贴上无能者的标签。</p><p>快乐起来，我的儿子。你需要知道，这个世界上的每个人都没有顺遂的人生；相反，却要时刻与失败比邻而居。也许正因为这个世界上有太多太多无奈的失败，追求卓越才变得魅力十足，让人竞相追逐，甚至不惜以生命为代价。即便如此，失败还是要来。</p><p>我们的命运也依然如是。只是与有些人不同，我把失败当作一杯烈酒，咽下去的上苦涩，吐出来的却是精神。</p><p>在我信誓旦旦跨入商界，跪下来恳祈上帝保佑我们新开办的公司之时，一场灾难性的风暴便袭击了我们。当时我们签订了一笔合同，要购进一大批豆子，准备大赚一把，但没有想到一场突然“来访”的霜冻击碎了我们的美梦，到手的豆子毁了一半，而且有失德行的供货商还在里面掺加了沙土和细小的豆叶、豆秸。这注定是一笔要做砸了的生意。但我知道，我不能沮丧，更不能沉浸在失败之中，否则，我就会离我的目标、梦想越来越远。</p><p>天下没有白吃的午餐，更不可能维持现状，如果静止不动，就是退步，但要前进，必须乐于做决定和冒险。那笔生意失败之后，我再次向我的父亲借债，尽管不很不情愿这么做。而且，为使自己在经营上胜人一筹，我告诉我的合伙人克拉克先生，我们必须宣传自己，通过报纸广告让我们的潜在客户知道，我们能够提供大笔的预付款，并能提前供应大量的农产品。</p><p>结果，胆识加勤奋拯救了我们，那一年我们非但没有受“豆子事件”的影响，反而让我们赚到了一笔可观的纯利。</p><p>人人都厌恶失败，然而，一旦避免失败变成你做事的动机，你就走上了怠惰无力之路。这非常可怕，甚至是种灾难。因为这预示着人可能要丧失原本可能有的机会。</p><p>儿子，机会是稀少的东西，人们因机会而发迹、富有，看看那些穷人你就知道，他们不是无能的蠢材，他们也不是不努力，他们是苦于没有机会。你需要知道，我们生活在弱肉强食的丛林之中，在这里你不是吃人就是补被别人吃掉，逃避风险几乎就是保证破产；而你利用了机会，就是在剥夺别人的机会，保证着自己。</p><p>害怕失败就不敢冒险，不敢冒险就会错失眼前的机会。所以，我的儿子，为了避免丧失机会、保住竞争的资格，我们支付失败与挫折是值得的！</p><p>失败是走上更高地位的开始。我可以说，我能有今天的成就，是踩着失败的螺旋阶梯升上来的，是在失败中崛起的。我是一个聪明的“失败者”，我知道向失败学习，从失败的经验中汲取成功的因子，用自己不曾想到的手段，去开创新事业。所以我想说，只要不变成习惯，失败是件好事。</p><p>我的座右铭是：人始终要保持活力、永远坚强、坚毅，不论遭遇怎样的失败与挫折，这是我惟一能做的事情。我自己能够理解，我做什么才会让自己感到快乐，什么东西值得自己为之效命。根本的期望，就像清洁工手中的扫把，将扫尽你成功之路上的所有垃圾。儿子，你自己根本的期望在哪里？只要你不丢掉它，成功必将到来。</p><p>乐观的人在苦难中会看到机会，悲观的人在机会中会看到苦难。儿子，记住我深信不已的成功公式：</p><p>梦想+失败+挑战=成功之道。</p><p>当然，失败有它的杀伤力，它可以让人萎靡、颓废，丧失斗志和意志力。重要的是你将失败看作什么。天才发明家托马斯·爱迪生先生，在用电灯照亮摩根先生的办公室前，共做了一万多次实验，在他那里，失败是成功的试验田。 </p><p>十年前，《纽约太阳报》一位年轻记者采访了他，那位少经世事的年轻人问他：“爱迪生先生，您目前的发明曾经失败过一万次，您对些有什么看法？”爱迪生对失败一词很不受用，他以长者口吻跟那位记者说：“年轻人，你的人生旅程才刚刚开始，所以我告诉你一个对你未来很有帮助的启示，我没有失败过一万次，我只是发明了一万种行不通的方法。”精神的力量永远如此巨大。</p><p>儿子，你要宣布精神破产，你就会输掉一切。你需要知道，人的事业就如同浪潮，如果你踩到浪头，功名随之而来；而一旦错失，则终其一生都将受困于浅滩与悲哀。失败是一种学习经历，你可让它变成墓碑，也可以让它变成踏脚石。</p><p>没有挑战就没有成功，不要因为一次失败就停下脚步，战胜自己，你就是最大的胜者！</p><p>我对你很有信心。</p><p>爱你的父亲</p><h2><span id="第八封只有放弃才会失败">第八封：只有放弃才会失败</span></h2><p>格言：世界上没有一样东西可取代毅力。 </p><p>　除非你放弃，否则你就不会被打垮。 </p><p>　有太多的人高估他们所欠缺的，却又低估了他们所拥有的。 </p><p>（too many people overvalue what they are not and undervalue what </p><p>they are.） </p><p>february12，1909 </p><p>亲爱的约翰： </p><p>今天是伟大的一日！ </p><p>今天，合众国上下怀着一种特有的感念之情，来纪念那颗伟大而又罕有的灵魂——无愧于上帝与人类的先总统亚伯拉罕·林肯先生。我相信林肯受之无愧。 </p><p>在我真实的记忆中，没有谁能比林肯更伟大。他编织了一段合众国成功而又令人动容的历史，他用不屈不挠的精神与勇气以及宽厚仁爱之心，使四百万最卑下的黑奴获得解放，同时击碎了二千七百万另一肤色的合众国公民灵魂上的枷锁，结束了因种族仇恨而使灵魂堕落、扭曲和狭隘的罪恶历史。他避免了国家被毁灭的灾难，将一切不同语言、宗教、肤色和种族组合成为一个崭新的国家。合众国因他获得了自由，因他而幸运地踏上了正直公平的康庄大道。 </p><p>林肯是上世纪最伟大的英雄，今天，在他百年诞辰之际，举国上下追思他为合众国所做的一切，就是一个最好的证明。 </p><p>然而，当我们重现并感激他的光辉伟业之时，我们更应汲取并光大其人生所具有的特殊教益——执着的决心与勇气。我想我们纪念他的最好方式就是效法他，让他从不放弃的精神光照美国。 </p><p>在我心中，林肯永远是不被困难吓倒、不屈不挠的化身。他生下来就一贫如洗，曾被赶出家园。他第一次经商就失败了，第二次经商败得更惨，以致用去十几年的时间他才还清了债务。他的从政之路同样坎坷，他第一次竞选州议员就遭失败，并丢掉了工作。幸运的是，他第二次竞选成功了。但接下来是丧失亲人的痛苦的竞选州参议员发言人的失败在等待着他。然而他依然没有灰心，在以后竞选中他曾六度失败，但每次失败过后他仍是力争上游，直至当选美国总统。 </p><p>每个人都有历尽沧桑和饱受无情打击的时候，却很少有人能像林肯那样百折不回。每次竞选失败过后，林肯都会激励自己：“这不过是滑了一跤而已，并不是死了爬不起来了。”这些词汇是克服困难的力量，更是林肯终于享有盛名的利器。 </p><p>林肯的一生书写了一个伟大的真理：除非你放弃，否则你就不会被打垮。 </p><p>功成名就是一连串的奋斗。那些伟大的人物，几乎都受过一连串的无情打击，他们每个人都险些宣布投降，但是他们因为坚持到底，终于获得了辉煌的成果。例如伟大的希腊演说家德莫森，他因为口吃，而生性害臊羞怯。他父亲死后给他留下一块土地，希望他能过上富裕的生活，但当时希腊的法律规定，他必须在声明拥有土地之权之前，先在公开的辩论中赢得所有权。很不幸，因为口吃加上害羞使他惨败，结果丧失了那块土地。但他没有被击倒，而是发愤努力战胜自己，结果他创造了人类空前未有的演讲高潮。历史忽略了那位取得他财产的人，但几个世纪以来，整个欧洲都记得一个伟大的名字——德莫森。 </p><p>有太多人高估他们所欠缺的，却又低估他们所拥有的，以至丧失了成为胜利者的机会。这是个悲剧。 </p><p>林肯的一生就是化挫折为胜利的伟大见证。没有不经失败的幸运儿，重要的是不要因失败而变成一位懦夫。如果我们尽了最大努力仍然不达目的，我们所应做的就是汲取教训，力求在接下来的努力中表现得更好就行了。 </p><p>坦率地说，我无心与林肯总统比较，但我有他些许的精神，我痛恨生意失败、失去金钱，但是真正使我关心的是，我害怕在以后的生意中，会太谨慎而变成懦夫。如果真是那样，那我的损失就更大了。 </p><p>对一般人而言，失败很难使他们坚持下去，而成功则容易继续下去。但在林肯那里这是个例外，他会利用种种挫折志失败，来驱使他更上一层楼。因为他有钢铁般的毅力。他有一句话说得好：“你无法在天鹅绒上磨利剃刀。” </p><p>世界上没有一样东西可取代毅力。才干也不可以。怀才不遇者比比皆是，一事无成的天才很普遍；教育也不可以。世上充满了学无所用的人。只有毅力和决心无往不利。 </p><p>当我们继续迈向高峰时，我们必须记住：每一级阶梯都供我们踩足够的时间，然后再踏上更高一层，它不是供我们休息之用。我们在途中不免疲倦与灰心，但就像一个拳击手所说的，你要再战一回合才能得胜。碰到困难时，我们要再战一回合。每一个人的内在都有无限的潜能，除非我们知道它在哪里，并坚持用它，否则毫无价值。 </p><p>伟大的机会不假外求，然而，我们得努力工作才能把握它。俗语说：“打铁趁热。”的确不错。毅力与努力都重要。每一个“不”的回答都使我们愈来愈接近“是”的回答。“黎明之前总是最黑暗”，这句话并非口头禅，我们努力工作发挥技巧屯才能时，成功的一天终会到来。 </p><p>今天，我们在感激、赞美林肯总统的时候我们不能忘记的是要用他一生的事迹来激励自己。即使这样做了，我们顶天立地的一天仍未到来，我们依然是个大赢家。因为我们已经有了知识，也懂得面对人生，那是更大的成功。 </p><p>爱你的父亲</p><h2><span id="第九封信念是金">第九封：信念是金</span></h2><p>格言：信心的大小决定了成就的大小。</p><p>　只要相信我们能够成功，我们就会赢得成功。</p><p>　我从来不相信失败是成功之母，我相信信心是成功之父。</p><p>（the force which have lighted my way，and time after time have </p><p>given me new courage to face life cheerfully，have been confidence.）</p><p>june7，1903</p><p>亲爱的约翰：</p><p>你说得很对，雄才大略的智慧可以创造奇迹。然而，现实是创造奇迹的人总是寥若晨星，而泛泛之流却在辈出。</p><p>耐人寻味的是，人人都想要大有所为。每一个人都想要获得一些最美好的东西。每一个人都不喜欢巴结别人，过着平庸的日子，也没有人喜欢觉得自己是二流人物，或觉得自己是被迫进入这种境况的。</p><p>难道我们没有雄才大略的智慧吗？不！最实用的成功智慧早已写在《圣经》之中，那就是“坚定不移的信心足可移山”。可为什么还有那么多失败者呢？我想那是因为真正相信自己能够移出的人不多，结果，真正做到的人也不多。</p><p>绝大多数的人都视那句圣言为荒谬的想法，认为那是根本不可能的。我以为这些不会得救的人犯了一个常识性的错误，他们错把信心当成了“希望”。不错，我们无法用“希望”移动一座高山，无法靠“希望”取得胜利或平步青云，也不能靠希望而拥有财富和地位。</p><p>但是，信心的力量却能帮助我们移动一座山岳，换名话说，只要相信我们能够成功。你也许认为我将信心的威力神奇或神秘化了，不！信心产生相信“我确实能做到”的态度，相信“我确实能做到”的态度能产生创造成所必备的能力、技巧与精力。每当你相信“我能做到”时，自然就会想出“如何解决”的方法，成功就诞生在成功解决问题之中。这就是信心发威的过程。</p><p>每一个人都“希望”有一天能登上最高阶层，享受随之而来的成功果实。但是他们绝大多数偏偏都不具备必需的信心与决心，他们也便无法达到顶点。也因为他们相信达不到，以致找不到登上巅峰的途径，他们的作为也就一直停留在一般人的水准。</p><p>但是，我少部分人真的相信他们总有一天会成功。他们抱着“我就要登上巅峰”的心态来进行各项工作，并且凭着坚强的信心而达到目标。我以为我就是他们其中的一员。当我还是一个穷小子的时候，我就自信我一定会成为天下最富有的人，强烈的自信激励我想出各种可行的计划、方法、手段和技巧，一步步攀上了石油王国的顶峰。</p><p>我从不相信失败是成功之母，我相信信心是成功之父。胜利是一种习惯，失败也是一种习惯。如果想成功，就得取得持续性的胜利。我不喜欢取得一量的胜利，我要的是持续性胜利，只有这样我才能成为强者。信心激发了我成功的动力。</p><p>相信会有伟大的结果，是所有伟大的事业、书籍、剧本，以及科学新知背后的动力。相信会成功，是已经成功的人所拥有的一项基本而绝对必备的要素。但失败者慷慨地丢掉了这些。</p><p>我曾与许多在生意场中失败过的人谈话，听过无数失败的理由与借口。这些失败者在说话的时候，时常会在无意中说：“老实说，我并不以为它会行得通。”“我在开始进行之前就感到不安了。”“事实上，我对这件事情的失败并不会太惊奇。”</p><p>采取“我暂且试试看，但我想还是不会有什么结果”的态度，最后一定会招致失败。“不信”是消极的力量。当你心中不以为然或产生怀疑时，你就会想出各种理由来支持你的“不信”。怀疑、不信、潜意识要失败的倾向，以及不是很想成功，都是失败的主因。心中存疑，就会失败。相信会胜利，就必定成功。</p><p>信心的大小决定了成就的大小。庸庸碌碌、过一天算一天的人，自信为做不了什么事，所以他们仅能得到很少的报酬。他们相信不能做出伟大的事情，他们就真的不能。他们认为自己很不重要，他们所做的每一件事都显得无足轻重。久而久之，连他们的言行举止也会表现得缺乏自信。如果他们不能将自信抬高，他们就能在自我评估中畏缩，变得愈来愈渺小。而且他们怎么看待自己，也会使别人怎看待他们，于是这种人在众人的眼光下又会变得更渺小。</p><p>那些积极向前的人，肯定自己有更大的价值，他就能得到很高的报酬。他相信他能处理艰巨的任务，真的就能做到。他所做的每一件事情，他的待人接物，他的个性、想法和见解，都显示出他是专家，他是一位不可或缺的重要人物。</p><p>照亮我的道路，不断给我勇气，让我愉快正视生活的理想的，就是信心。在任何时候，我都不忘增强信心能力。我用成功的信念取代失败的念头。当我面临困境时，想到的是“我会赢”，而不是“我可能会输”。当我与人竞争时，我想到的是“我跟他们一样好”，而不是“我无法跟他们相比”。机会出现时，我想到的是“我能做到”，而不是“我不能做到”。</p><p>每个人迈向成功的第一个步骤，也是不能漏掉的基本步骤，就是要相信自己，要相信自己一定能够成功。要让关键性的想法“我会成功”支配我们的各种思考过程。成功的信念会激发我信的心智创造出获得成功的计划。失败的意念正好相反，使我们去想一些会导致失败的念头。</p><p>我定期提醒自己：你比你想象的还要好。成功的人并不是超人。成功不需要超人的智力，不是看运气，也没有什么神秘之处。成功的人只是相信自己、肯定自己所作所为的平凡人。永远不要、绝对不要廉价出售自己。</p><p>每个人都是他思想的产物，想的是小的目标，就可预期成果也是微小的。想到伟大的目标就会赢得重大的成功。而伟大的创意与大计划通常比小的创意与计划要来得容易，至少不会更困难。</p><p>那些能够在商业、传教、写作、演戏，以及其他成就的追求上达到最高峰的人，都是因为能够踏实、有恒地奉行一个自我发展与成长的计划。这项训练计划会为他们带来一系列的报酬：获得家人更尊敬的报酬；获得朋友与同事赞美的报酬；能觉得自己很有用的报酬；成为重要人物的报酬；收入增加、生活水准提高的报酬。</p><p>成功——成就——就是生命的最终目标。她需要我信用积极的思考去呵护。当然，在任何时候我想都不能让信念出问题。</p><p>爱你的父亲</p><h2><span id="第十封忠诚于自己">第十封：忠诚于自己</span></h2><p>格言：我可以欺骗敌人，但决不欺骗自己。 </p><p>　要求我以诚相待的人，是想在我这里捞到好处。 </p><p>　命运给予我们的不是失望之酒，而是机会之杯。 </p><p>（our destiny offers not the cup of despair，but the　chalice of </p><p>opportunity.） </p><p>november29，1899 </p><p>亲爱的约翰： </p><p>心情好一点了吗？如果还没有，我想，你需要了解点什么。 </p><p>你需要知道，在这个世界上，绝大多数的人都不免受一种特殊力量的驱使，这种力量可以轻而易举地剥落紧裹我们人性的外衣，将我们完全裸露在阳光下，并公正地将我们圈定在纯洁与肮脏的图版上，以致让我们所有的辩护都变得苍白无力，无论我们多么伶牙利齿，它就是检验我们人性的试金石：利益。 </p><p>换句话说，利益是光照人性的影子，在它面前，一切与道德、伦理有关的本质都将现形，且一览无余。也许你认为我的话有些绝对，但我的经历就是这样告诉我的。 </p><p>我不是人类史学家，我不知道他们将对人之所以高尚与丑恶做出何种解释，但我的人生历程让我坚信：利益似乎无坚不摧，它可以把本可彼此平静度日的人、种族、国家，拉将在一起，彼此尔虞我诈，刺刀见红。在那些骗局、陷阱乃至诽谤、污蔑和诋毁，以及残酷无情的血腥争斗和强盗式的掠夺中，你都会发现追逐利益的影子。在这个意义上，与其说我们是自己心灵的主人，倒不如说我们是利益的奴隶更准确。 </p><p>我可以断言，在这个世界上，除去神，没有不追逐利益的人。自你走入人与人往来的那一刻起，一场旷日持久的人生谋利游戏就开始了。在这场游戏中，人人都是你的敌人，包括你自己，你需要与自己的弱点对抗，并与所有将快乐建筑在你痛苦之上的恶行而战。所以，当我看破这一切之后，我一直坚守着一个原则：我可以欺骗敌人，但决不欺骗自己。回击正在射杀我的敌人，永远不会让我的良心不安。 </p><p>儿子，请不要误会我，我无意要将我们这个世界涂上一层令人压抑、窒息的灰色；事实上，我渴望友谊、真诚、善良和一切能滋润我心灵的美好情感，我也相信它们一定存在。然而，很遗憾，在追名逐利的商场中，我难以得到这种满足，却要经常遭遇出卖和欺骗的打击。直到今天，我还能清晰地记得数次被骗的经历，那才叫刻骨铭心呐。 </p><p>最令我痛心的一次被骗发生在科利佛兰。当时炼油业因生产过剩几乎无利可图，很多炼油商已经跌落到破产的国缘。还有，科利佛兰远离油田，这就意味着与那些处在油田的炼油厂相比，我们因要付出高昂的长途运输费用而使自己外于不平等的地位。我决心改变它，要大规模收购在死亡线上挣扎的炼油厂，形成合力、统一行动，让每个人的钱包都鼓起来。 </p><p>我告诉那些濒临倒闭的炼油厂主，我们在科利佛兰处于不利地位，为共同保护自己，我们必须要做些什么。我认为我的计划很好，请认真想一想。如果你感兴趣，我们会很高兴与你共同磋商。也由于善良的愿望和战略上和考虑，我买下了许多毫无价值的工厂，它们就像陈旧的垃圾，只配扔到废铁堆里。 </p><p>但有些人竟然如此邪恶、自私和忘恩负义，他们拿到我的钱后便与我为敌，肆无忌惮地撕毁与我达成的协议，卷土重来，用废铁变成金子的钱购置设备，重操旧业，并公开敲诈我，要我买下他们的工厂。这些人都曾要求我诚实，让我出个好价钱收购他们瘫痪的工厂，我做到了，然而，结果却令人痛心。在那一刻我的心情糟透了，我甚至自责我不该太诚实，不该太善良，否则我也不会落到四面楚歌、一筹莫展的境地。 </p><p>最令我不可接受的，是在谋利游戏中，今天的朋友会变成明天的敌人。这种情形常有发生，我的两位教友就曾无节制地多次蒙骗我。看在上帝的份上，我不想历数他们的罪恶。但我可以告诉你，当我知道我一直被他们欺骗的时候，我震惊了，我不明白与我一同祷告、虔诚地发誓要摈弃骄傲、纵欲和贪婪之心的人，何以如此卑鄙！ </p><p>历经种种欺骗与谎言，我无奈地告诉自己：你只能相信自己，只有如此，你才不会被人蒙骗。我知道这种略带敌意的心态不好，但这个世界有太多太多的欺骗，提防是我们不可或缺的生存技能。 </p><p>跟混蛋打交道，会让你变得聪明。那些邪恶的“老师”教会了我许多东西，如果现在谁要想欺骗我，我估计会比翻越科罗拉大峡谷还要难，因为那些魔鬼帮我建立了一套与人打交道的法则，我想这套法则对你会有所帮助： </p><p>我只有在对自己有利无害的情况下，才表现自己的感情；我可以让对手教导我，但我永远不教导对手，无论我对那件事了解有多深；凡事三思而决，不管别人如何催促，不考虑周全决不行动；我有自己的真理，只对自己负责；小心那些要求我以诚相待的人，他们是想在我这里捞到好处。 </p><p>我知道，欺骗只是谋利游戏中的策略，并不能解决问题。但我更知道，谋利游戏在夜以继日地进行，所以，我必须从早到晚保持警惕并且明白：在这场游戏中，人人都是敌人，因为每个人都先顾及自己的利益，不管是否对他人有利。重要的是如何保护自己，并随时随地地备战。 </p><p>儿子，命运给予我们的不是失望之酒，而是机会之杯，振作起来！发生在华尔街的那件事，并没有什么了不得，那只是你太相信别人而已。不过，你需要知道，好马不会在同一个地方跌倒两次。 </p><p>爱你的父亲</p><h2><span id="第十一封贪心大有必要">第十一封：贪心大有必要</span></h2><p>格言：让每一个念头都服从于利益动机。</p><p>　我是我生命的重心，我决定什么适合我。</p><p>　命运要由自己去开创，真心希望的东西一定要想方设法去得到。</p><p>（simplicity is an uptightness of soul that has no reference to </p><p>self；it is different from sincerity，and it is a still higher </p><p>virtue.）</p><p>may 6，1918</p><p>亲爱的约翰：</p><p>不要理会说我贪心的那些人。</p><p>多少年来我都在享受着这个在别人看来似乎并不太美妙的“颂扬”——贪心。这份对我特别的颂扬，最早出现在我的事业如日中天之时，那时洛克菲勒的名字已不再仅仅是代表一个人的符号，而是财富的象征，一个庞大的商业帝国的象征。</p><p>我记得当时有很多人、很多报纸都加入了如此“颂扬”我的行列。但这样的颂扬并没有让我的心跳加快，尽管我知道这样的颂扬无非是要诋毁我，无非是要为我创建的商业帝国刷上一层令人生厌的铜臭。</p><p>但我知道，在人的本性中早就潜藏着一种力量，一种丛生于缺少能力与意志之地的力量，那就是嫉妒。当你超越了他们的时候，他们就会嫉恨你，就会用带有贬义的字眼指责你，甚至编造谎言的手法来诋毁你，同量在你面前还要表现得非常高傲——在我看来，那并非是高傲，它恰恰是虚弱。有意思的是，当你远不如他们，生活得潦倒不堪时，他们又会讥笑你，讥笑你无能、愚蠢，甚至会把你贬低得没有任何做人的尊严。我的儿子，这就是人之本性！</p><p>上帝没有赋予我改变人类本性的使命，我也没有闲心去阻止某些人要“恭维”我贪心，我所能做的就是让嫉妒我的人继续嫉妒！尽管我知道，如果我能将我所创造的财富让那些做如此恭维我的人带走，他们也将带走那份恭维，但我不能！我相信，除非中了什么魔法，任何人都不能！</p><p>绅士永远不会与无知者争辩，我当然不会同那些“恭维”我贪心的人论战，但我抑制不住蔑视他们无知的情绪。冷静地回溯历史，检视人类的脚印，我们就能得出这样的结论：没有一个社会不是建立在贪心之上。那些要诋毁我的人，看似道德的守望者，他们有谁不想独占自己拥有的东西？有谁不想掌控所有好的东西？有谁不想控制每个人都需要的一切？虚伪的人总是那些多。</p><p>没有不贪心的人。如果你有一颗橄榄，你就会想拥有一整颗的橄榄树。我行走于人世已近八十年，我见过不会吃牛排的人，却没有见过一个不贪心的人，尤其是在商界，功利、拜金的背后只印着一个单词，那就是贪心。我相信，在未来不贪心的人仍将是地球上的稀有者。谁会停止对美好事物的追求和占有呢。</p><p>阿奇博尔德先生说我是能够闻到终点线味道的赛马，一但那样我便会开始冲刺。我知道这多少有点奉承我的味道，但在我心里，我的确早就给贪心留好了位置。</p><p>在我读商业学校时，我的一位老师说过一句让我终生难忘的话，这句话可以说改变了我的命运，他说：“贪心没有什么不好，我认为贪心是件好事，人人都可以贪心。从贪心开始，才会有希望！”</p><p>当我的老师在讲坛上喊出这番极其煽动和刺激性的话语时，台下的同学们为之哗然。因为只要想一想“贪心”的意义，就知道这个字眼完全违背大多数人从小习得的道德观念，这种道德观融于宗教、社会、伦理、政治和法律等各个层面，它所具有的标尺般的作用，无疑要给这个字眼打上肮脏的烙印。</p><p>但当我走向社会、踏上创造财富之旅后，我才深深地体认到，那份学费花得真是值得，我老师的主张相当具有洞见。就像那些演化家所告诉我们的那样，自然界不是仁慈、无私的地方，而是强者为王、适者生存的天地，我们这个所谓的文明社会也同样如此。如果你不贪心，或许你就会被别人贪掉，毕竟可口的甜点不是很多。</p><p>如果你要想创造财富成就，创造非凡的人生，我的感受，已不是“贪心是件好事”可以了得，而是贪心大有必要！</p><p>贪心的潜台词，就是我要，我要的更多，独占才好！有谁不曾在心底做此呐喊？为政者会说，我要掌权，我要由州长再做总统。经商者会说，我要赚钱，我要赚更多的钱。为人父母者会说，我希望我的儿子能有所成就，永远过着富足、幸福的生活。诸如此类，不一而足。只是囿于道德、尊严，顾及脸面，人们才将贪心紧紧地遮掩起来，才使得贪心成为禁忌的观念。</p><p>事实上，只要追逐名利的世界一天不被毁灭，只要幸福一天不变得像空气那样唾手可得，人类就一天不能停止贪心。</p><p>那些爱扒粪的人，总视贪心为恶魔。但在我看来，打开我们贪心之锁，并不同于打开潘多拉盒子，释放出无时无刻有在跳动的贪心，就等于释放出了我们生命的潜能。我由一个周薪只有五美元的簿记员到今天美国最富有的人，是贪心让我实现了这个奇迹。贪心是推动我创造财富的力量，正如它是推动社会演进的强大动力一样。</p><p>在我使用贪心一词时，你或许希望我把它换成抱负。不，我们都处在一个贪心的世界之中，我认为使用贪心较使用抱负更纯朴。纯朴是灵魂中一种正直无私的素质，它与真诚不同，比真诚更高尚。</p><p>在与山姆·安德鲁斯先生合办石油公司之初，我的贪心就在膨胀，每天晚上在睡觉前，我都在忠告自己：我要成为科利佛兰最大的炼油商，让流淌的油溪化成一捆捆的钞票，我要让每一个念头都服从于利益动机，帮我成为石油之王。在最初的那段日子里，我事必躬亲，终日劳碌。我指挥炼油，组织铁路运输，苦思冥想如何节省成本，如何扩大石油副产品市场。我永远忘不了那段让我忍饥挨饿、夜以继日奔波在外的日子。</p><p>我的儿子，命运要由自己去开创，真心希望的东西一定要想方设法去得到。成功与失败的间距并不像人们想象的那么在仅仅是一念而已，那就是看谁有强烈的贪心，谁具有这种力量，谁就能焕发并施展出自己的全部力量，尽力而为，超越自己。我每一个前进的步伐都能让我感受到贪心的力量！贪心不仅能让一个人的能力发挥到极致，也逼得他献出一切，排除所有障碍，全速前进。</p><p>很多功能都曾问我同一个问题：“洛克菲勒先生，是什么支持你走上了财富之颠？”我不能表露真实心声，因为贪心为人们所不齿。然而，事实是支撑我成为一代巨富的支架，就是我唤起了我的贪心，更膨胀了我的贪心。</p><p>每个人的内心都深藏着一颗活泼、灵敏、有力量的贪心。但你必须热爱她，告诉自己我要贪心，叮嘱自己我要，我要的更多，她才会出来玩耍，助你成功。</p><p>没有任何力量可以阻止我解禁贪心，因为我追求成功。贪心之下实现的成功并非罪恶，成功是一种高尚的追求，如果能以高尚的行为去获得成功，对人类的贡献会远比贫困时所能做的更多，我做到了！</p><p>看一看今天我们所做的善举吧，将巨额财富投向教育、医学、教会和那些穷困的人，绝不是我一时心血来潮的个人施舍，那是一项伟大的慈善事业，世界正因为我的成功而变得美好。看来贪心很不错，更不是罪恶。</p><p>就此而言，如果那些说我贪心的人不是出于诋毁我的目的，我会欣然接受他们对我做出的如此评判。</p><p>约翰，我是我生命的重心，我决定什么适合我，所以我不在乎那些人说什么，我的心依然安宁。在有些人那里我似乎永远都是一个动机卑鄙的商人，即使我投资于惠泽民众的慈善事业，也会被他们视为一种诡计，怀疑我有追逐私利的动机，而丝毫看不到我无私的公益精神，更有甚者说我如此乐善好施是为什么赎罪，这真是滑稽。</p><p>我想非常真诚地告诉你，你的父亲永远不会让你感到羞愧，装在我口袋里的每一分钱都是干净的，我之所以成为富人，是我超群的心智和强烈的事业心得到的回报。我坚信上帝赏罚分明，我的钱是上帝赐予的。而我所以能一直财源滚滚，如有天助，这是因为上帝知道我会把钱返还给社会，造福我的同胞。</p><p>到我该去读《圣经》的时间了。今晚的夜色真美，每颗明亮的星星都似乎在说：“干得好！约翰。”</p><p>爱你的父亲</p><h2><span id="第十二封信-地狱里住满了好人">第十二封信 地狱里住满了好人</span></h2><p>坐视对手，哪怕是潜在的对手的实力增强，都是在削弱自己的力量，甚至会颠覆自己的地位，我可没那么愚蠢。我的信念是抢在别人之前达到目的。我迅速起用精明强干的奥戴先生组建了美国运输公司，与帝国公司展开了一场自卫反击战。感谢上帝，我们的努力获得了应有的回报，不出一年，我们控制了油区四成的石油运输业务，压制住了波茨先生的进攻。但这只是我与波茨先生较量的开始。 </p><p>在这个世界上能出人头地的人，都是那些懂得去寻找自己理想环境的人，如果他们不能如愿，就会自己创造出来。 </p><p>两年后，在宾州布拉德福又发现了一个新油田，奥戴先生迅速带领他的人扑向那个激起千万人发财梦想的地方，不分昼夜把输油管道铺向新油井。但油田的那帮家伙个个都很疯狂，毫无节制，恨不得一夜之间就把油全部采光，然后面带喜悦揣着钞票走人。所以，不管奥戴他们怎么努力，都无法满足运输和储存石油的需要。 </p><p>我不想看到辛辛苦苦的采油商们自掘坟墓，毁灭自己，我请奥戴警告采油商，他们的开采能力已经远远超过了我们的运输能力，他们必须缩减生产量，否则，他们开采出来的黑金就将变成一文不值的黑土。但没有人接受我们的好意和忠告，更没有人欣赏我们的努力，反来声讨我们，说竟敢不运走他们的石油。 </p><p>就在布拉德福德的采油商们情绪激动到顶点的时候，波茨先生动手了。他先在我们的炼油基地纽约、费城、匹兹堡向我示威，收购我们竞争对手的炼油厂；接着，又开始在布拉德福德抢占地盘，铺设输油管道，要将布拉德福德的原油运到自己的炼油厂。 </p><p>我很欣赏波茨先生的胆量，更愿意接受他欲想动摇我在炼油业统治地位而发起的挑战，但我必须将他赶出炼油行业。 </p><p>我首先拜会了宾州铁路公司的大老版斯科特先生，我直言不讳地告诉他，波茨先生是个偷猎者，他正在闯入我们的领地，我们必须让他停下来。但斯科特非常固执，决心让波茨的强盗行为继续下去。我没有选择，我只能向这个强大的敌人应战。 </p><p>首先我们终止了与宾铁的全部业务往来，我指示部属将运输业务转给一直坚定地支持我们的两大铁路公司，并要求他们降低运费，与宾铁竞争，削弱它的力量；同时命令关闭依赖于帝国公司运输的在匹兹堡的所有炼油厂；随后指示所有处于与帝国公司竞争的己方炼油厂，以远远低于对方的价格出售成品油。宾铁是全美最大的运输公司，斯科特先生是握有运输大权的巨头，他们以从未被征服为荣。但在我立体、压迫式的打法下，他们只有臣服。 </p><p>为与我对抗，他们忍痛给予我们竞争对手巨额折扣，换句话说，他们为别人服务还要付给别人钱。接着他们使出了不得人心的一招——裁减雇员、削减工资。斯科特和波茨没有想到，这很快招致了惩罚，愤怒的工人们为发泄不满，一把大火烧了他们几百辆油罐车和一百多辆机车，逼得他们只得向华尔街银行家们紧急贷款。结果，当年宾铁的股东们非但没有分得红利，而且股票价格一落千丈。他们与我决斗的结果，就是他们的口袋越来越干净。 </p><p>波茨先生不愧是个军人，在你死我活的硝烟中拼出了上校的军阶，有着令人钦佩的不屈不饶的意志力，所以，在已经分胜负的情况下，他还想继续同我战斗下去。但同样有着军旅生涯的斯科特先生，尽管此前曾是最有统治欲、最独裁的实力派人物，但他更懂得什么叫识时务，他果断地低下了他不可一世的脑袋，派人告诉我，非常希望讲和，停止炼油业务。 </p><p>我知道，波茨上校想要证明自己是非曲直伟大的摩西，可惜他失败了，他彻底失败了。几年后，波茨放弃了与我对抗的欲望，成为了我属下一个公司积极勤奋的董事。这个精明又滑得像油一样的油商！ </p><p>傲慢通常会让人垮台。斯科特和波茨之流自以为出身高贵，一直目空一切，所以，成功驯服这些傲慢的强驴，我的心都在跳舞。 </p><p>约翰，我喜欢胜利，但我不喜欢为追求胜利而不择手段。不计代价获得的胜利不是胜利，丑恶的竞争手段让人厌恶，那等于是画地为牢，可能永远无法超越，即使赢得一场胜利，也可能失去以后再获胜的机会。 </p><p>而循规蹈矩不表示必须降低追求胜利的决心，却表示用合乎道德的方式去赢得明确的胜利，也表示在这种限制下，全力公平、无情的追求胜利。我希望你能做到这一点。 </p><p>爱你的父亲</p><h2><span id="第十三封天下没有白吃的午餐">第十三封：天下没有白吃的午餐</span></h2><p>格言：你想使一个人残废，只要给他一对拐杖。</p><p>　你否定了他的尊严，你就抢走了他的命运。</p><p>　智慧之书的第一章，也是最后一章，就是天下没有白吃的午餐。</p><p>（both within and without，a little of that which constitutes the dignity of life　and death.）</p><p>march17，1911</p><p>亲爱的约翰：</p><p>我已经注意到那条指责我吝啬，说我捐款不够多的新闻了，这没什么。我被那些不明就里的记者骂得够多了，我已经习惯了他们的无知与苛刻。我回应他们的方式只有一个：保持沉默、不加辩解，而无论他们如何口诛笔伐。因为我清楚自己的想法，我坚信自己站在正确的一方。</p><p>每个人都需要走自己的路，重要的是要问心无愧。有一个故事或许能够解释，我很少理会那些乞求我出钱来解决他们个人问题的理由，更能解释让我出钱比让我赚钱更令我紧张的原因。这个故事是这样说的：</p><p>有一家农户，圈养了几头猪。一天，主人忘记关圈门，便给了那几头猪逃跑的机会。经过几代以后，这些猪变得越来越凶悍以至开始威胁经过那里的行人。几位经验丰富的猎人闻听此事，很想为民除害捕获它们。但是，这些猪却很狡猾，从不上当。</p><p>约翰，当猪开始独立的时候，都会变得强悍和聪明了。</p><p>有一天，一个老人赶着一头拖着两轮车的驴子，车上拉着许多木材和粮食，走进了“野猪”出没的村庄。当地居民很好奇，就走向前问那个老人：“你从那里来，要干什么去呀？”老人告诉他们：“我来帮助你们抓野猪呵！”众乡民一听就嘲笑他：“别逗了，连好猎人都做不到的事你怎么可能做到。”但是，两个月以后，老人回来告诉那个村子的村民，野猪已被他关在山顶上的围栏里了。</p><p>村民们再次惊讶，追问那个老人：“是吗？真不可思议，你是怎么抓住它们的？”</p><p>老人解释说：“首先，就是去找野猪经常出来吃东西的地方。然后我就在空地中间放一些粮食作陷阱的诱饵。那些猪起初吓了一跳，最后还是好奇地跑过来，闻粮食的味道。很快一头老野猪吃了了第一口，其他野猪也跟着吃起来。这时我知道，我肯定能抓到它们了。</p><p>“第二天，我又多加了一点粮食，并在几尺远的地方树起一块木板。那块木板像幽灵般暂时吓退了它们，但是那白吃的午餐很有诱惑力，所以不久他们又跑回来继续大吃起来。当时野猪并不知道它们已经是我的了。此后我要做的只是每天在粮食周围多树起几块木板，直到我的陷阱完成为止。</p><p>“然后，我挖了一个坑立起了第一根角桩。每次我加进一些东西，它们就会远离一些时间，但最后都会再来吃免费的午餐。围栏造好了，陷阱的门也准备好了，而不劳而获的习惯使它们毫无顾虑的走进围栏。这时我就出其不意地收起陷阱，那些白吃午餐的猪就被我轻而易举地抓到了。”</p><p>这个故事的寓意很简单，一只动物要靠人类供给食物时，它的机智就会被取走，接着它就麻烦了。同样的情形也适用于人类，如果你想使一个人残废，只要给他一对拐杖再等上几个月就能达到目的；换名话说，如果在一定时间内你给一个人免费的午餐，他就会养成不劳而获的习惯。别忘了，每个人在娘胎里就开始有被“照顾”的需求了。</p><p>是的，我一直鼓励你要帮助别人，但是就像我经常告诉你的那样，如果你给一个人一条鱼，你只能供养他一天，但是你教他捕鱼的本领，就等于供养他一生。这个关于捕鱼的老话很有意义。</p><p>在我看来，资助金钱是一种错误的帮助，它会使一个人失去节俭、勤奋的动力，而变得懒惰、不思进取、没有责任感。更为重要的是，当你施舍一个人时，你就否定了他尊严，你否定了他的尊严，你就抢走了他的命运，这在我看来是极不道德的。作为富人，我有责任成为造福于人类的使者，却不能成为制造懒汉的始作俑者。</p><p>任何一个人一旦养成习惯，不管是好或坏，习惯就一直占有了他。白吃午餐的习惯不会使一个人步向坦途，只能使他失去赢的机会。而勤奋工作却是惟一可靠的出路，工作是我们享受成功所付的代价，财富与幸福要靠努力工作才能得到。</p><p>在很久很久以前，一位聪明的老国王，想编写一本智慧录，以飨后世子孙。一天，老国王将他聪明的臣子召集来，说：“没有智慧的头脑，就像没有蜡烛的灯笼，我要你们编写一本各个时代的智慧录，去照亮子孙的前程。”</p><p>这此聪明人领命离去后，工作很长一段时间，最后完成了一本堂堂十二卷的巨作，并骄傲的宣称：“陛下，这是各个时代的智慧录。”</p><p>老国王看了看，说：“各位先生，我确信这是各个时代的智慧结晶。但是，它太厚了，我但心人们读它会不得要领。把它浓缩一下吧！”这些聪明人费去很多时间，几经删减，完成了一卷书。但是，老国王还是认为太长了，又命令他们再次浓缩。</p><p>这些聪明人把一本书浓缩为一章，然后减为一页，再变为一段，最后则变成一句话。聪明的老国王看到这句话时，显得很得意。“各位先生，”他说：“这真是各个时代的智慧结晶，而且各地的人一旦知道这个真理，我们大部分的问题就可以解决了。”这句话就是：“天下没有白吃的午餐。”</p><p>智慧之书的第一章，也是最后一章，是天下没有白吃的午餐。如果人们知道出人头地，要以努力工作为代价，大部分人就会有所成就，同时也将使这个世界变得更美好。而白吃午餐的人，迟早会连本带利付出代价。</p><p>一个人活着，必须在自身与外界创造足以使生命和死亡有点尊严的东西。</p><p>爱你的父亲</p><h2><span id="第十四封做傻的聪明人">第十四封：做傻的聪明人</span></h2><p>格言：没有不幸经历的人，反而不幸。 </p><p>　把一头猪好好夸奖一番，它都能爬到树上去。 </p><p>　自己聪明的人是傻瓜，懂得装傻的人才是真聪明。 </p><p>（the leaders who offer high sentiments always win in the end ，and get more out of their followers） </p><p>october 9，1890 </p><p>亲爱的约翰： </p><p>明天，我要回老家科利佛兰处理一些我们家族自己的事情。我希望在此期间，你能代我打理一些事务。但我提醒你，如果你遇到某些棘手或自己拿不定主意的事情，你要多向盖兹先生请教和咨询。 </p><p>盖兹先生是我最得力的助手，他忠实真诚、直言不讳、尽职尽责，而且精明干练，总能帮我做出明智的抉择，我非常信任他，我相信他一定会对你大有帮助，前提是你要尊重他。 </p><p>儿子，我知道你是布朗大学的优秀毕业生，你在经济学与社会学方便的知识可谓优秀。但是，你应该清楚，知识原本是空的，除非把知识会付诸行动，否则什么事都不会发生。而且，教科书上知识，几乎都是那些皓首穷经的知识匠人在象牙塔里编撰出来的，它难以帮你解决实际问题。 </p><p>我希望你能去除对知识、学问的依赖心理，这是你走上人生坦途的关键。 </p><p>你需要知道，学问本身并不怎么样，学问必须加以活用，才能发挥作用，要成为能够活用学问的人，你必须首先成为具有实行能力的人。 </p><p>那么实行能力从哪里来呢？在我看来它就潜藏在吃苦之中。我的经验告诉我，走过艰难之路——布满艰辛、不幸、失败和困难的道路，不仅会铸就我们坚强的性格，我们赖以成就大事的实行能力亦将应运而生。在苦难中向上下班攀爬的人，知道什么叫千方百计地去寻找方法、手段，让自己得救。处心积虑地去吃苦，是我笃信的成功信条之一。 </p><p>也许你全讥讽我，认为没有比想苦吃再傻的了。不！没有不幸体验的人，反而不幸。很多事情都是来得快去得也快，那些实现了一夜成名、一夜暴富梦想的人们，有谁不是很快就销声匿迹了？吃苦所得到的，是将你的事业大厦建立在坚实的地面上，而不是流沙里。人要有远见，只有长时间的吃苦，才有长时间的收获。 </p><p>我相信你已经发现了，自你到我身边工作以来，我并没有给予你重担去挑。但这并不表明我怀疑你的能力，我只是希望你善于做小事而已。 </p><p>做好小事是做成大事的基石，如果你从一开始就高高在上，就无法体贴部属的心情，也就不能真正地活用别人；在这个世界上要活下去、要创造成就，你必须借助于人力，即别人力量，但你必须从做小事开始，才会了解当部属的心情，等你有一天走上更高的职位，你就知道如何让他们贡献出全部的工作热情了。 </p><p>儿子，世界上只有两种人头脑聪明：一种是活用自己的聪明人，例如艺术艺术家、学者、演员；一种是活用别人的聪明人，例如经营者、领导者。后一种人需要一种特殊的能力——抓住人心的能力。但很多领导者都是聪明的傻瓜，他们以为要抓住人心，就得依据由上而下的指挥方式。在我看来，这非但不能得到领导力，反而会降低很多。要知道，每个人对自己受到轻视都非常敏感，被看矮一截会丧失干劲。这样的领导者只会使部属无能化。 </p><p>一头猪好好被夸奖一番，它就能爬到树上去。善于驱使别人的经营者、领导者或大有作为的人，一向宽宏大量，他们懂得高看别人和赞美他人的艺术。这意味着他们要有感情的付出。而付出深厚的感情的领导者最终必赢得胜利，并获得部属更多敬重。 </p><p>没有知识的人终无大用，但有知识的人很可能成为知识的奴隶。每个人都需要知道，一切的知识都会转化为先入为主的观念，结果是形成一边倒的保守心理，认为“我懂”、“我了解”、“社会本来就是这样”。有了“懂”的感觉，就会缺乏想要知道的兴趣，没有兴趣就将丧失前进的动力，等待他的也只剩下百无聊赖了。这就是因为不懂才成功的道理。 </p><p>但是，受自尊心、荣誉感的支配，很多有知识的人对“不懂”总是难以启齿，好像向别人请教，表示自己不懂，是见不得人的事，甚至把无知当罪恶。这是自作聪明，这种人永远都不会理解那句伟大的格言——每一次说不懂的机会，都会成为我们人生的转折点。 </p><p>自作聪明的人是傻瓜，懂得装傻的人才是真聪明。如果把聪明视为可以捞到好处的标准，那我显然不是一个傻瓜。 </p><p>直到今天我都能清晰记得一次装傻的情景，当时我正为如何筹借到一万五千块钱大从轻脑筋，走在大街上我都在苦思冥想这个问题。说来有意思，正当我满脑子闪动着借钱、借钱的念头时，有位银行家拦住了我的去路，他在马车上低声问我：“你想不想用五万块钱，洛克菲勒先生？”我交了好运吗？我有点不相信自己的耳朵。但在那一瞬间我没有表现出丝毫的急切，我看了看对方的脸，慢条斯理地告诉他：“是这样……你能给我二十四小时考虑一下吗？”结果，我以最有利于我的条件与他达成了借款合同。 </p><p>装傻带给你的好处很多很多。装傻的含义，是摆低姿态，变得谦虚，换句话说，就是瞒住你的聪明。越是聪明的人越有装傻的必要，因为就像那句格言所说的——越是成熟的稻子，越垂下稻穗。 </p><p>儿子，有了爱好，然后才能做到轻巧。现在，就开始热爱装傻吧！ </p><p>我料想得到，在我离开的日子里，让你独挡一面对你而言绝非易事，但这没有什么。“让我等等再说”，是我在经商中始终奉行的格言。我做事总有一个习惯，在做决定之前，我总会冷静地思考、判断，但我一旦做出决定，就将义无反顾地执行到底。我相信你也能行。</p><h2><span id="第十五封财富是勤奋的副产品">第十五封：财富是勤奋的副产品</span></h2><p>勤奋是为了自己，不是为了别人。</p><p>　财富是意外之物，是勤奋工作的副产品。</p><p>（let us go forward ，firm in our faith ，steadfast in　out purpose;but sustained by our confidence in the will of god.）</p><p>january 25， 1907</p><p>亲爱的约翰：</p><p>很高兴收到你的来信.在你的信中有两句话很是让我欣赏，一句是“你要不是赢家你就是在自暴自弃”，一句是“勤奋出贵族”。这两句话是我不折不扣的人生座右铭，如果不自谦的话，我愿意说，它正是我人生的缩影。</p><p>那些不怀好意的报纸，在谈到我创造的巨额财富时，常比喻我是一架很有天赋的赚钱机器，其实他们对我几乎一无所知，更对历史缺乏洞见。</p><p>作为移民，满怀希望和勤奋努力是我们的天性。而我尚在孩童时期，母亲就将节俭、自立、勤奋、守信和不懈的创业精神等美德植入了我的骨髓。我真诚地笃信这些美德，将其视为伟大的成功信条，直到今天，在我的血液中依然流淌着这些伟大的信念。而所有的这一切结成了我向上攀爬的阶梯，将我送上了财富之山的顶端。</p><p>当然，那场改变美国人民命运与生活的战争，让我获益非浅，真诚地说，它将我造就成了令商界啧啧称奇而又望而生畏的商业巨人。是的，南北战争给予了民众前所未有的巨大商机，它把我提前变成了富人，为我在战后掀起的抢夺机会的竞技场上获胜，提供了资本支持，以至后来才能财源滚滚。</p><p>但是，机会如同时间一样是平等的，为什么我能抓住机会成为巨富，而很多人却与机会擦肩而过、不得不与贫困为伍呢？难道真的像诋毁我的人所说，是因为我贪得无厌吗？</p><p>不！是勤奋！机会只留给勤奋的人！自我年少时，我就笃信一条成功法则：财富是意外之物，是勤奋工作的副产品。每个目标的达成都来自于勤奋的思考与勤奋的行动，实现财富梦想也依然如此。</p><p>我极为推崇“勤奋出贵族”这句话，它是让我永生敬意的箴言。无论是过去还是现在，无论是在我们立足的北美还是在遥远的东方，那些享有地位、尊严、荣耀和财富的贵族，都有一颗永不停息的心，都有一双坚强有力的臂膀，在他们身上都凸显毅力也顽强意志的光芒。而正是这样的品质或称财富，让他们成就了事业，赢得了尊崇，成为了顶天立地的人物。</p><p>约翰，在这个无限变幻的世界中，没有永远的贵族，也没有永远的穷人。就像你所知道的那样，在我小的时候，我穿的是破衣烂衫，家境贫寒到要靠好心人来接济。但今天我已拥有一个庞大的财富帝国，已将巨额财富注入到慈善事业之中。如同万种盛衰起伏变幻如同沧海桑田，生生不息。出身卑贱和家境贫寒的人，通过自己的勤奋工作、执着的追求和智慧，同样能功成名就、出人头地，成为一人新贵族。</p><p>一切尊贵和荣誉都必须靠自己的创造去获取，这样的尊贵和荣誉才能长久。但在我们今天这个社会，富家子弟处在一种一种不进则退的情况之下。不幸的是，他们中的很多都缺乏进取精神，却好逸恶劳，挥霍无度，以至有很多人虽在富裕的环境中长大，却不免费在贫困中死去。</p><p>所以，你要教导你的孩子，要想在与人生风浪的博击中完善自己，成就自己，享受成功的喜悦，赢得社会的尊敬，高歌人生，只能凭自己的双手去创造；要让他们知道，荣誉的桂冠只会戴在那些勇于探索者的头上；告诉他们，勤奋是为了自己，不是为了别人，他们是勤奋的最大受益者。</p><p>我自孩提时代就坚信，没有辛勤的耕耘就不会有丰硕的确良收获，作为贫民之子，除去靠勤奋获得成功、赢得财富与尊严，别无他策。上学时，我不是一个教就会的学生，但我不甘人后，所以我只能勤恳地准备功课，并能持之以恒。在我十岁时我就知道要尽我所能地多干活，砍柴、挤奶、打水、耕种，我什么都干，而且从不惜力。正是农村艰苦而辛劳的岁月，磨练了我的意志，使我能够承受日后创业的艰辛；也让我变得更加坚忍不拔，产塑造了我坚强的自信心。</p><p>我知道，我之所以在以后身陷逆境时总能泰然处之，包括我的成功，在很大程度上都得益于我自小建立的自信心。</p><p>勤奋能修炼人的品质，更能培养人的能力。我受雇于休伊特-塔特尔公司时，我就获得了具备非同一般的能力和出众的年轻簿记员的名声。在那段日子里，我可谓是终日披星戴月、夜以继日。当时我的雇主就对我说，你一定会成功，以你这非凡的毅力。尽管我不明白将来会是什么样子，但有一点我相信，只要我用心去干一件事，我决不会失败。</p><p>今天，我尽管已年近七十，但我依然搏杀于商海之中，因为我知道，结束生命最快捷的方式就是什么也不做。人人都有权力选择把退休当作开始或结束。那种无所事事的生活态度会使人中毒。我始终将退休视为再次出发，我一天也没有停止过奋斗，因为我知道生命的真谛。</p><p>约翰，我今天的显赫地位，巨额财富不过是我付出比常人多得多的劳动和创造换来的。我原本是普普通通的常人，原本没有头上的桂冠，但我以坚强的毅力、顽强的耕耘，孜孜以求，终于功成名就。我的名誉不是虚名，是血汗浇铸的王冠，些许浅薄的嫉恨和无知的浅薄，都是对我的不公平。</p><p>我们的财富是对我们勤奋的嘉奖。让我们坚定信念，认定目标，凭着对上帝意志的信心，继续努力吧，我的儿子。</p><p>爱你的父亲</p><h2><span id="第十六封不要找借口">第十六封：不要找借口</span></h2><p>格言：我们的财富是对我们勤奋的嘉奖。</p><p>格言：借口是制造失败的根源。 </p><p>　一个人越是成功，越不会找借口。 </p><p>　百分之九十九的失败都是因为人们惯于代寻借口。 </p><p>（ninety-nine percent of the failures come from people who have the habit of making excuse.） </p><p>april 15，1906 </p><p>亲爱的约翰： </p><p>斯科菲尔德船长又输了，他输得有些气急败坏，一怒之下把他那根漂亮的高尔夫球杆扔上了天，结果他只得再买一个新球杆了。 </p><p>坦率地说，我比较喜欢船长的性格，人生奋斗的目标就是求胜，打球也是一样。所以，我准备买个新球杆送给他，但愿这不会被他认为是对他发脾气的奖赏，否则他一发不可收拾，我可就惨了。 </p><p>斯科菲尔德船长还有一个令人称道的优点，尽管输球会令他不高兴，但他认为赢本身并不代表一切，而努力去赢的做法才是最重要的。所以在输球之后，他从不找借口。事实上，他可以以年龄太大、体力欠佳来解释他输球的理由，为自己讨回颜面，但他从来不这样做。 </p><p>在我看来借口是一种思想病，而染有这种严重病症的人，无一例外的都是失败者，当然一般人也有一些轻微的症状。但是，一个人越是成功，越不会找借口，处处亨通的人，与那些没有什么作为的人之间最大的差异，就在于借口。 </p><p>只要稍加留意你就会发现，那些没有任何作为，也不曾计划要有番作为的人，经常会有一箩筐的草帽来解释：为什么他没有做到，为什么他不做，为什么他不能做，为什么他不是那样的。失败者为自己料理“后事”的第一个举动，就是为自己的失败找出各种理由。 </p><p>我鄙视那些善找借口的人，因为那是懦弱者的行为，我也同情那些善找借口的人，因为借口是制造失败的病源。 </p><p>一旦一个失败者找出一种“好”的借口，他就会抓住不放，然后总是拿这个借口对他自己和他人解释：为什么他无法再做下去，为什么他无法成功。起初，他还能自知他的借口多少是在撒谎，但是在不断重复使用后，他就会越来越相信那完全是真的，相信这个借口就是他无法成功的真正原因，结果他的大脑就开始怠惰、僵化，让努力想方设法要赢的动力化为零。但他们从不愿意承认自己是个爱找借口的人。 </p><p>偶尔，我见过有人站起来说：“我是靠自己的努力而成功的。”到目前为止，我还未见过任何男人或女人，敢于站起来说：“我是使自己失败的人。”失败者都有一套失败者的借口，他们将失败归咎于家庭、性格、年龄、环境、时间、肤色、宗教信仰、某个人乃至星象，而最坏的借口莫过于健康、才智以及运气。 </p><p>最常见的借口，就是健康的借口，一句“我的身体不好”或“我有这样那样的病痛”，就成了不去做或失败的理由。事实上，没有一个人是完全健康的，每个人多少都会有生理上的毛病。 </p><p>很多人会完全或部分屈服于这种借口，但是一心要成功的人则不然。盖茨先生曾为我引荐过一位大学教授，他在一次旅行中不幸失去了一条手臂，但就像我所认识的每一个乐观者一样，他还是经常微笑，经常帮助别人。那天在谈及他的残障问题时，他告诉我：“那只是一条手臂而已，当然，两个总比一个好。但是切除的只是我的手臂，我的心灵还是百分之百的完整也正常。我实在是要为此感谢。” </p><p>有一句老话说得好：“我一直在为自己的破鞋子懊恼，直到我遇见一位没有脚的人。”庆幸自己的健康比抱怨哪里不舒服要好得多。为自己拥有的健康感谢，能有效地预防各种病痛与疾病。我经常提醒自己：累坏自己总比放着朽坏要好。生命是要我们来享受的，如果浪费光阴去担忧自己的健康而真的想出病来，那才是真正的不幸。 </p><p>“我不够聪明”的借口也很常见，几乎有百分之九十五的人都有这种毛病，只是程度不同而已。这种借口与众不同，它通常默不做声。人们不会公开承认自己缺少足够聪明才智，多半是在自己内心深处这么想。 </p><p>我发现大多数对“才智”有两种基本错误态度：太低估自己的脑力，和太高估别人的脑力。因为这些错误，使许多人轻视自己。他们不愿面对挑战，因为那需要相当的才智。认为自己愚蠢的人才是真正愚蠢的人，他们应该知道，如果有一个人根本不考虑才智的问题，而勇于一试，就能够胜任得很好。 </p><p>我认为真正重要的，不在于你有多少聪明才智，而是如何使用你已经拥有的聪明才智，要成为一个好的商人，不需要有闪电般的灵敏，不需要有非常惊人的记忆，也不需要在学校名列前茅，惟一的关键，就是对经商要有强烈的兴趣和热心。兴趣和热心是决定成败的重要因素。 </p><p>事情的结果往往与我们的热心程度成正比。热心能使事情变好一百倍一千倍。很多人并不知道什么叫热心，所谓热心就是“这是很了不起的！”那种热情和干劲而已。 </p><p>我相信才智平平的人，如果有乐观、积极与合作的处世态度，将会比一个才智杰出却悲观、消极也不合作的人，赚得更多的金钱，赢得更多的尊敬，并获致更大的成功。一个人不论他面对的是烦琐的小事、艰巨的任务还是重要的计划，只要他执着热忱地去完成，成果会远胜于聪颖但是懒散的人。因为，专注与执着占了一个人百分之九十五的能力。 </p><p>有些人总在呻吟感叹：为什么很多非常出色的人物会失败呢？我可以永远不再让他们叹息，如果一个绝顶聪明的人总在用他们惊人的脑力，去证明事情为什么无法成功，而不是用去引导自己的心力支寻找迈向成功的各种方法，失败的命运就会找上他们。消极的思想牵引他们的智力，使他们无法施展身手而一事无成。如果他们能改变心态，相信他们会做出许多伟大的事情。 </p><p>想成大事却不懂得思考的大脑，也就是一桶廉价的糨糊而已。 </p><p>引导我们发挥聪明才智的思考方式，远比我们才智的高低重要。即使是学历再高也无法改变这项基本的成功法则。天生的才智的教育程度不是业绩好坏的确良原因，而是在于思想管理。那些最好的商人从不杞人忧天，而是富有热忱。要改善天赋的素质绝非易事，但改善运用天赋的方法却很容易。 </p><p>很多人都迷信所谓的知识就是力量。在我看来这句话只说对了一半。拿才智不足当借口的人，也是错解了这句话的意义。知识只是一种潜在的力量，只有将知识付诸应用，而且是建设性地应用，才会显出它的威力。 </p><p>在标准石油公司永远没有活字典式的人物的位置，因为我不需要只会记忆、不会思考的“专家”。我要的人是真正能够解决问题，能想出各种点子的人，是有梦想而且勇于实现梦想的人。有创意的人能为我赚钱，只能记忆资料的人则不能。 </p><p>一个不以才智为借口的人，绝不低估自己的才智，也不高估别人的才智。他专注运用自己的资产，发掘他拥有的优异才能。他知道真正重要的不在他有多少才智，而在于他如何使用现有的才智，和要善用自己的脑力。他会常常提醒自己：我的心态比我的才智重要。他有要建立“我一定赢”的态度的强烈渴望。他知道要运用自己才智积极创造，用他的才智寻找成功的方法，而不是用来证明自己会失败。他还知道思考力比记忆力更有价值，他要用自己的头脑来创造、发展新观念，寻找更好的做事新方法，随时提醒自己：我是正在用我的心智创造历史呢？或只是在记录别人创造的历史？ </p><p>每一件事的发生必有原因，人类的遭遇也不可能碰巧发生。所以，有很多人总会把自己的失败怪罪于运气太坏，看到别人成功时，就认为那是因为他们运气太好。我从不相信什么运气好坏，除非我认为精心筹备的计划和行动叫“运气”。 </p><p>如果由运气决定谁该做什么，每一种生意都会瓦解。假设标准石油公司要根据运气来彻底进行改组，就要将公司所有职员的名字放入一个大桶里，第一个被抽出的名字就是总裁，第二个是副总裁，就这样顺序下去。很可笑吧？但这就是运气的功能。 </p><p>我从不屈从运气，我相信因果定律。看看那些似是好运当头的人，你会发现并不是运气使然，而是准备、计划和积极的思想为他们带来美景。再看看那些“运气不好”的人，你会发现背后都有明确的成因。成功者能面对挫折，从失败中学习，再创契机。平庸者往往就此灰心丧志。 </p><p>一个人不可能靠运气而成功，而是要付出努力的代价。我不妄想靠运气获得胜利等等生命中的美好事物，所以我集中全力去发展自我，修炼出使自己变成“赢家”的各种特质。 </p><p>借口把绝大多数的人挡在了成功的大门之外，百分之九十九的失败都是因为人们惯于找寻借口。所以在追求事业成功的过程中，最重要的一个步骤即为：防止自己找借口。 </p><p>爱你的父亲</p><h2><span id="第十七封你手中握有成功的种子">第十七封：你手中握有成功的种子</span></h2><p>格言：我就是我最大的资本！</p><p>　我唯一的信念就是相信自己！</p><p>　每一个渴望成功的人都应该认识到，成功的种子就撒在你自己身边。</p><p>（everybody has certain ideals which determine the direction of his endeavors and his judgments.）</p><p>may 29， 1926</p><p>亲爱的约翰：</p><p>昨天，就在昨天，我收到一个立志要成为富翁的年轻人的来信。他在信中恳请我回答一个问题：他缺少资本，他该如何去创业致富？</p><p>上帝呀，他是想让我指明他生命的方向。可是教诲他人似乎不是我的专长，而我又无法拒绝他的诚恳，这真令人痛苦。但我还是回信告诉他，你需要资本，但你更需要常识。常识比金钱更重要。</p><p>对于一个要去创业的贫寒之子而言，他们常常苦恼于缺少资本。如果他们再恐惧失败，他们就将犹疑不决，像蜗牛般缓慢行进，甚至止步于成功之路，而永无出人头地之时，所以我在给那个年轻人的回信中特别提醒他：</p><p>“从贫穷通往富裕的道路永远是畅通的，重要的是你要坚信：我就是我最大的资本。你要锻炼信念，不停地探究迟疑的原因，直到信念取代了怀疑。你要知道，你自己不相信的事，你无法达成；信念是带你前进的力量。”</p><p>每一个渴望成功的人都应该认识到，成功的种子就撒在他自己身边。只要认识到这一点，他就能获得想要得到的东西。在信中我给那个年轻人讲了一个阿拉伯人的故事，我相信这个故事定将惠泽他人，乃至所有的人。</p><p>那个给我讲述这个故事的人是这样告诉我的：</p><p>从前有个波斯人，名叫阿尔·哈菲德，住在印度河不远的地方，他拥有一大片兰花园、数百亩良田和繁盛的园林。他是个知足的人，而且十分富有——因为他很富有，所以他十分知足。有一天，一位老僧人来拜访他，坐在他的火炉边跟他说：“你富有，你也生活得安逸，但是，你如果有满满一手钻石，你就可以买下整个国家的土地。要是你能拥有一座钻石矿，你就可以利用这笔巨富的影响力，把孩子送上王位。”</p><p>哈菲德听了老僧人这番极具诱惑力的话之后，当天晚上上床时，他就变成了一个穷人——不是因为他失去了一切，而是他开始变得不满足，所以他觉得自己很穷；也因为他认为自己很穷，所以得不到满足。他想：“我要一座钻石矿。”所以，他整夜都难以入睡。第二天一大早他就跑去找那位僧人。</p><p>老僧人一大早就被叫醒，非常不高兴。但哈菲德完全不顾及这些，他满不在乎地把老僧人从睡梦中摇醒，对他说：“你能告诉我什么地方可以找到钻石吗？”</p><p>“钻石？你要钻石做什么？”</p><p>“我想要拥有庞大的财富，”哈菲德说，“但我不知道哪里可以找到钻石。”</p><p>“哦，”老僧人明白了，他说：“你只要在山里面找到一条在白沙上穿流的河，就可以在沙子里找到钻石。”</p><p>“你真的认为在这样一条河吗？”</p><p>“多得很，多得很呐！你只要出去寻找，一定会找到。”</p><p>“我会的，”哈菲德说。</p><p>于是，他卖掉农场，收回借款，把房子交给邻居看管，就出发寻找钻石去了。</p><p>哈菲德先是去了月光山区寻找，而后到了巴勒斯坦，接着又跑到欧洲，最后他花光了身上所有的钱，变得一文不值。他如同乞丐般站在西班牙巴塞罗纳海边，看到一道巨浪越过赫丘力士石柱汹涌而来，这个历经沧桑、痛苦万分的可怜虫，无法抵抗纵身一跳的诱惑，就随着浪峰跌入大海，终结了一生。</p><p>在哈菲德死后不久，他的财产继承人拉着骆驼去花园喝水，当骆驼把鼻子伸到花园那清澈见底的溪水中时，那个继承人发现，在浅浅的溪底白沙中闪烁着奇异的光芒，他伸手下去，摸到一块黑石头，石头上面有一处闪亮的地方，发出了彩虹般的色彩。他将这块怪异的石头拿进屋子，放在壁炉的架子上，又继续去忙他的工作，完全忘记了这件事。</p><p>几天后，那个告诉哈菲德在哪里能找到钻石的老僧人来拜访哈菲德的继承人。他看到架子上的石头发出的光芒，立即奔过去，惊讶地叫道：“这是钻石！这是钻石！哈菲德回来的吗？”</p><p>“没有，他还没有回来，而且那也不是钻石，那不过是一块石头，是我在我家的后花园里发现的。”</p><p>“年轻人，你发财了！我认识钻石，这真的是钻石！”</p><p>于是，他们一起奔向花园，用手捧起溪底的白沙，发现许多比第一颗更漂亮、更有价值的钻石。</p><p>这就是人们发现印度戈尔康达钻石矿的经过。那是人类历史上最大的钻石矿，其价值远远超过南非的金百利。英王皇冠上镶嵌的库伊努尔大钻石，以及那颗镶在俄皇王冠上的世界第一大钻石，都是采自那座钻石矿。</p><p>约翰，每当我记忆起这个故事，我就不免为阿尔·哈菲德叹息，假如哈菲德能留在家乡，挖掘自己的田地和花园，而不是去异乡寻找，他也就不会沦为乞丐，贫困挨饿，以至跃入大海而亡。他本来就拥有遍地的钻石。</p><p>并非每一个故事都具有意义，但这个阿拉伯人的故事却给我带来了宝贵的人生教诲：你的钻石不在遥远的高山与大海之间，如果你决心去挖掘，钻石就在你家用后院。重要的是要真诚地相信自己。</p><p>每个人都有一定的理想，这种理想决定着他的努力和判断的方向。就此意义而言，我以为，不相信自己的人就跟窃贼一样，因为任何一个不相信自己，而且未充分发挥本身能力的人，可以说是向自己偷窃的人；而且在这过程中，由于创造力低落，他也等于是从社会偷窃。由于没有人全从他自己那里故意偷窃，那些向自己偷窃的人，显然都是无意中偷窃了。然而这种罪状仍很严重，因为其所造成的损失，跟故意偷窃一样大。</p><p>只有戒除这种向自己偷窃的行为，我们才能爬向高峰。我希望那个渴望发财的年轻人，能思索出其中所蕴涵的教诲。</p><p>爱你的父亲</p><h2><span id="第十八封我没有权利当穷人">第十八封：我没有权利当穷人</span></h2><p>格言：我应该是富翁，我没有权利当穷人。 </p><p>　要让金钱当我的奴隶，而不能让我当金钱的奴隶。 </p><p>　手里每多一分钱，就增加了一分决定未来命运的力量。 </p><p>（well does the　man know，who has suffered，there are things sweeter and holier and more sacred than gold.） </p><p>july 26， 1906 </p><p>亲爱的约翰： </p><p>有很多悲剧都因偏执和骄傲而引发，制造贫穷的人也是一样。 </p><p>许多年前，我在第五大道浸礼会教堂，曾偶遇一个叫汉森的年轻人，一个在节衣缩食中悲惨度日的小花匠。也许汉森先生自以为坚守贫穷是种美德，他摆出一幅品格高尚的样子对我说：“洛克菲勒先生，我觉得我有责任同你讨论一个问题——金钱是万恶之源，这是《圣经》上说的。” </p><p>就在那一瞬间，我知道汉森先生为什么与财富无缘了，他是在从对《圣经》的误解中获取人生教诲。但他却浑然不觉。 </p><p>我不希望让这个可怜的年轻人在他心胸狭窄的沼泽中越陷越深，我告诉他：“年轻人，我从小就不断接受各种基督教格言的熏陶，且以此作为自己的行为准则，我想你也是一样。但我的记忆力似乎要比你好一些，你忘了，在那句话的前边还有一个字——喜爱，‘喜爱金钱是万恶之源’。” </p><p>“你说什么？”汉森的嘴巴大张着，好像要吞下一条鲸鱼。真希望他赚钱的胃口能有那么大。 </p><p>“是的，年轻人，”我拍拍他的肩头，说，“《圣经》根源于人类的尊严与爱，是对宇宙最高心灵的敬重，你可以毫不畏惧地引用里面的话，并将生命托付给它。所以，当你直接引用《圣经》的智慧时，你所引用的就是真理。‘喜爱金钱是万恶之源’。哦，正是如此。喜爱金钱只是崇拜的手段，并不是目的。如果你没有手段，就无法达成目标，也就是说，他只知道当个守财奴，那么金钱就是万恶之源。” </p><p>“想想看，年轻人，”我提醒汉森，“如果你有了钱，你就可以惠及你的家人、朋友，给他们快乐、幸福的生活，更可惠及社会，拯救那些孤苦无助的穷人，那么金钱就成了幸福之源。” </p><p>“年轻人，手里每多一分钱，就增加了一分决定未来命运的力量，去赚钱吧，”我劝导他，“你不该让那些偏执的观念锁住你有力的双手，你应该花时间让自己富裕起来，因为有了钱就有了力量。而纽约充满了致富的机会，你应该致富，而且能够致富。记住，小伙子，你虽是尘世间的匆匆过客，却也要滑出一道人生的光亮。” </p><p>我不知道汉森能否接受我的规劝，如果不能，我会为他感到遗憾的，他看上去很结实，脑袋也不笨。 </p><p>我一直以为，每个人都应该花时间让自己富裕起来。当然，有些东西确实比金钱更有价值。当我们看到一座落满秋叶的坟墓时，就不免感到一种难以言喻的悲伤，因为我知道有些东西的确比金钱崇高。尤其是那些受过苦难的人更能深深地体会到，有些东西比黄金更甜蜜、更尊贵、更神圣。然而，有常识的人都知道，那些东西没有一样不是用金钱来大幅提升的。金钱不一定万能，但在我们这个世界，很多事情是离不开金钱的！ </p><p>爱情是上帝给予我们的最伟大之物，但是，拥有很多金钱的情人能使爱情更加幸福，金钱就具有这样的力量！ </p><p>一个人如果说“我不要金钱”，那就等于是在说：“我不想为家人、友人和同胞服务。”这种说法固然荒谬，但要断绝这两者关系同样荒谬！ </p><p>我相信金钱的力量，我主张人人都当然应该去赚钱。然而，宗教对这种想法有强烈的偏见，因为有些人认为，作为上帝贫穷的子民是无上的荣耀。我曾听过一个人在祈祷会上祷告说，他十分感谢自己是上帝的贫穷子民，我闻听不禁心里暗想：这个人的太太要是听到她先生这么胡言乱讲，不知会有何感想？他肯定会认为自己嫁错了人。 </p><p>我不想再见到这种上帝的贫穷子民，我想上帝也不愿意！我可以说，如果某个原本应该很富有的人，却因为贫穷而懦弱无能，那他必然犯下了极端严重的错误；他不仅对自己不忠实、忠诚，也亏待了他的家人！ </p><p>我不能说，赚钱的多寡可以用来当作人生成功与否的标准，但几乎毫无例外的是，你可以利用金外的多寡来衡量一个人对社会所做的贡献。你的收入愈多，你的贡献也愈多。一想到我已经使无数国民永远走向了富裕之路，我便自感拥有了伟大人生。 </p><p>我相信上帝是为他的子民——而不是撒旦之流——才铸出钻石。上帝所给我们的唯一告诫是：我们不能在有违上帝的情况下赚钱，或赚取别的东西。那样做只会让我们平添罪恶感。要获得金钱，大量的金钱，无可厚非，只要我们以正当的方法得来，而不是让金钱拖着我们的鼻子走。 </p><p>某些人之所以没有钱，是因为他们不了解钱。他们认为钱既冷又硬，其实钱既不冷又不硬——它柔软而温暖，它会使我们感觉良好，而且在色泽上也能跟我们所穿的衣服相配。 </p><p>我之所以是我，都是我过去的信念创造出来的。坦率地说，自我感觉到人世间因贫穷而疾苦的时候，我就萌发了一个信念：我应该是富翁，我没有权利当穷人。随着时间的推移，这个信念变得有如钢铁般坚硬。 </p><p>在我小的时候，正是拜金思想神圣化的时期，当时数以万计的淘金者怀揣着发财梦众各处方向拼命涌进了加利福尼亚，尽管事后发现那场淘金热只是个圈套而已，它却大大激起了数百万人的发财欲望，这其中就包括我——一个只有十多岁的孩子。 </p><p>那时我的家境窘迫，时常要接受好心人伸出的援手。我的母亲是一个非常自尊的人，她希望我能肩负起做长子的职责，建设好这个家庭。母亲的渴望与教诲，养成了我一种终身不变的责任感，我立下誓言：我不能沦为穷人，我要赚钱，我要用财富改变家人的命运！ </p><p>在我少年时代的发财梦中，金钱对我而言，不只是让家人过上富足无忧生活的工具，而是通过给予——明智地花出去，金钱更能换来道德上的尊严的社会地位，这些东西远比豪华、气派的住宅和美丽、漂亮的服饰更令我激动不已！ </p><p>我对金钱的理解，坚定了我要赚钱、我要成为富人的信念，而这个信念又给予了我无比的斗志去追逐财富。 </p><p>我的儿子，没有比为了赚钱而赚钱的人更可怜、更可鄙的，我懂得赚钱之道：要让金钱当我的奴隶，而不能让我当金钱的奴隶。我就是这样做的。 </p><p>爱你的父亲 </p><h2><span id="第十九封就要做第一">第十九封：就要做第一</span></h2><p>格言：财富与目标成正比。</p><p>　一个人不是在计划成功，就是在计划失败。</p><p>　对我来说，第二名跟最后一名没有什么两样。</p><p>（we must march toward this goal ，painfully but resolutely，certain in advance of our failings on long a road.）</p><p>march 15， 1931</p><p>亲爱的约翰：</p><p>“没有野心的人不会成就大事。”这是我那位汽车大王朋友，亨利·福特先生，昨天来看我时向我吐露的成功秘密。</p><p>我非常敬佩这个来自密西根的富豪，他是一个执着而又坚毅的家伙。他几乎与我有着同样的经历，做过农活儿，当过学徒，与人合伙开办过工厂，通过奋斗最终成为了这个时代全美最富有的人之一。</p><p>在我看来，福特先生是一个新时代的缔造者，没有任何一个美国人能像他那样，完全改变了美国人的生活方式，看看大街上往来穿梭的汽车，你就知道我绝非在恭维他，他使汽车由奢侈品变为了几乎人人都能买得起的必需品。而他创造的奇迹也把他变成了亿万富翁。当然，他也让我的钱袋鼓起了很多。</p><p>人活着就得有目标或野心，否则，他就像一艘没有舵的船，永远漂流不定，只会到达失望、失败与丧气的海滩。福特先生的野心超过了他的身高，他要缔造一个人人都能享用汽车的世界。这似乎难以想像，但他成功了，他成了全球小汽车市场的主人，并为福特公司赚得了惊人的利润，用这个家伙的话说，“那不是在制造汽车，那简直是在印刷钞票”。我不难想像，既腰缠万贯，又享有“汽车大王”的盛誉，福特是怎样一个好心情。</p><p>福特创造的成就，证明了我的一个人生信条：财富与目标成正比。如果你胸怀大志、目标高远，你的财富之山就将垒向云霄，如果你只想得过且过，那你就只有做末流鼠辈的份儿了，甚至一事无成，即使财富离你近在咫尺，你只会获得很少的一点点而已。在福特成功之前，有很多汽车制造商都比他有实力得多，但他们当中破产的人也很多。</p><p>人被创造出来是有目的的，一个人不是在计划成功，就是在计划失败。这是我一生的心得。</p><p>我似乎从不缺少野心，从我很小的时候开始，要成为最富有的人，就一直是我冲动着的抱负与梦想。这对一个穷小子来说，好像有些过大。但我认为目标必须伟大才行，因为想要有成就，必须有刺激，伟大的目标能使你发挥全部的力量，也才会有刺激。失去刺激，也就等于没有了一股强大的力量推动你向前。不要做小计划，因为它不能激励心灵，我经常这样提醒自己。</p><p>当然，成为伟大的机会并不像湍急的尼加拉瓜大瀑布那样倾斜而下，而是慢慢的一次一滴。伟大与接近伟大之间的差异就是领悟到，如果你期望伟大，你必须每天朝着目标努力。</p><p>但对于一个穷小子而言，如何才能将这个伟大的梦想变成可触摸的现实呢？难道去靠努力为别人工作来实现它吗？这是个愚蠢的主意。</p><p>我相信为自己勤奋会致富，但不相信努力为别人工作就一定成功。在我住进百万富翁大街前，我就发现，在我身边，很多穷人都是工作最努力的人。现实就是如此残酷，不管雇员努力与否，替老板工作而变得富有的人少之又少。替老板工作所得的薪金，只能在合理预期的情况下让雇员活下去，尽管雇员可能会赚到不少钱，但变得富有却很难。</p><p>我一直视“努力工作定会致富”为谎言，从不把为别人工作当作积累可观财富和上策，相反，我非常笃信为自己工作才能富有。我采取的一切行动都忠于我的伟大梦想和为实现这一梦想而不断达成的各个目标。</p><p>在我离开学校、寻找工作的时候，我就为自己设定了一个目标：要到一流的公司去，要成为一流的职员。因为一流的公司会给我一流的历练，塑造我一流的能力，让我长到一流的见识，还会让我赚到一笔丰厚的薪金——那是开创我未来事业的资本，而这一切无疑是我通往成功之路的最坚实的基石。</p><p>当然，在大公司做事，能让我以大公司的方式思考问题，这点很重要。所以，我仰慕大公司，我要去的是高知名度企业。</p><p>这注定要让我吃些苦头。我先到了一家银行，很不走运，被拒绝了；我又去了一家铁路公司，结果仍是悻悻而归，当时的天气似乎也要跟我作对，酷热难耐。但我不顾一切，继续不停地寻找。那段日子，寻找工作成了我惟一的职业，每天早上八点，尽我所能地把自己打扮一番，就离开住地开始新一轮的预约面试。一连几个星期，我把列入名单的公司跑了一遍，结果仍一无所获。</p><p>这看起来很糟，不是吗？但没人能阻止你前进的道路，阻碍你前进最大的人就是你自己，你是惟一永久能做下去的人。我告诫自己：如果你不想让别人偷走你的梦想，那你就在被挫折击倒后立即站起来。我没有沮丧、气馁，连续的挫折反而更坚定了我的决心。我又径直从头开始，一家一家的跑，有几家公司甚至让我跑了两三次。</p><p>上帝终未将我抛弃，这场不屈不挠的求职之旅终于在6个星期后的一个下午结束了，1855年9月26日，我被休伊特-塔特尔公司雇佣。</p><p>这一天似乎决定了我未来的一切。直到今天，每当我问起自己，要是没有得到那份工作会怎么样时，我常常会浑身颤抖不停。因为我知道那份工作都给我还来了什么，失去它我又将如何。所以，我一生都把9月26日当作“重生日”来庆祝，对这一天抱有的情感远胜过我的生日。</p><p>写到这儿，我自己都被自己感动了。</p><p>人在功能上就像是一部脚踏车，除非你向上、向前朝着目标移动，否则你就会摇晃跌倒。三年后我带着超越常人的能力与自信，离开了休伊特-塔特尔公司，与克拉克先生合伙创办克拉克-洛克菲勒公司，开始了为自己工作的历史。</p><p>愚蠢的努力工作很可能在百般辛苦之后仍一无所获，但是，如果将替老板努力工作视为铸就有朝一日为自己效劳的阶梯，那无疑就是创造财富的开始。给自己当老板的感觉真是棒极了，简直无以言表。当然，我不能总沉浸在年方18岁就跻身贸易代理商行列的得意之中，我告诫自己：“你的前程就系于一天天过去的日子，你的人生终点是全美首富，你距离那里还很远很远，你要继续为自己努力。”</p><p>做最富有的人，是我努力的依据和鞭策自己的力量。在过去的几十年中，我一直是追求卓越的信徒，我最常激励自己的一句话就是：对我来说，第二名跟最后一名没有什么两样。如果你理解了它，你就会认为，我以无可争辩的王者身份统治了石油工业不足为奇。</p><p>我们每一个人都生活在希望之中，但我更多的是生活在目标的达成之中。我的人生目标就是要成为第一，这也是我设法定出并努力遵守的人生规划，我所付出的所有努力和行动，都忠于我的人生目标、人生规则。</p><p>上帝赋予我们聪明的头脑和坚强的肌肉，不是让我们成为失败者，而是让我们成为伟大的赢家的。二十年有的今天，联邦法院解散了我们那个欢乐的大家庭，但每当想起我创造的成就，我就兴奋不已。</p><p>伟大的人生就是征服卓越的过程，我们必须向这个目标前进，不怕痛苦，态度坚决，准备在漫长的道路上跌跤。</p><p>爱你的父亲</p><h2><span id="第二十封冒险才能利用机会">第二十封：冒险才能利用机会</span></h2><p>格言：风险越高，收益越大。 </p><p>　你拥有的东西越多，力量就越大。 </p><p>　想获胜必须了解冒险的价值，而且必须有自己创造运气的远见。 </p><p>（our lives begin to end the day we become silent about things that matter.） </p><p>november2， 1936 </p><p>亲爱的约翰： </p><p>明天，也许等不到明天，就有一个人要过上富人生活了。报上说他叫大卫·莫里斯，与美国独立战争时期的财政总监、费城商业王子罗伯特·莫里斯先生同姓，他刚刚在赌场上交了好运，赢了一大堆钱，还说他是一位赌场上的高手，同时登出了这位赌徒的一句人生格言：好奇才能发现机会，冒险才能利用机会。 </p><p>你知道，我对嗜赌的人一向不以为然，但对这位先生却不能不刮目相看，我甚至相信，以他这等近于哲学家般的智慧和头脑，如能投身商界，他或许会成为一个职业上的成功者——一个优秀的赌徒了。 </p><p>我做如此带有欣赏性的假设，并不是说优秀的赌徒就会成为优秀的商人，事实上，我厌恶那些把商场视为赌场的人，但我不拒绝冒险精神，因为我懂得一个法则：风险越高，收益越大。而驰骋商海，对每一个人来说，都是生活提供给他的最伟大的历险活动。 </p><p>我的人生轨迹就是一趟丰富的冒险旅程，如果让我找出哪一次冒险对我最具决定性、最关乎我的未来，那莫过于打入石油工业了。 </p><p>在投资石油工业前，我们的本行——农产品代销正做得有声有色，继续下去我完全有望成为大中间商。但这一切让那位安德鲁斯先生改变了，他是照明方面的专家，他告诉我：“约翰，煤油燃烧时发出的光亮比任何照明油都亮，它必将取代其他的照明油。想想吧，约翰，那将是多么大的市场，如果我们的双脚能踩进去，那将是怎样的一个情景啊！” </p><p>我拥有的东西越多，力量就越大。机会来了，放走它不仅仅是金钱，而是在削弱你在致富竞技场上的力量。我告诉安德鲁斯：我干！我们投资四千块钱，对我们来说那可是一笔大钱，好大一笔钱呐，做起了炼油生意。钱投下去，我就不去考虑失败，尽管那个时候石油在造就许多百万富翁的同时，它也在使更多人沦为穷光蛋。 </p><p>我一头扎进炼油业，苦心经营，不到一年，炼油为我们赢得了超过农产品的利润，成为了公司第一大生意。在那一刻我意识到，是胆量，是冒险精神，为我开通了一条新的生财管道。 </p><p>当时没有哪一个行业能像石油业那样能一夜暴富，这样的前景大大刺激了我赚大钱的欲望，更让我看到了盼望已久的大展宏图的机会。我告诫自己：“你一定要紧紧抓住它，它可以把你带到梦想之境。” </p><p>但我随后大举扩张石油业的经营战略，令我的合伙人克拉克先生大为恼怒。克拉克是一个无知、自负、软弱、缺乏胆略的人，他害怕失败，主张采取审慎的经营策略，这与我的经营观念完全背离。在我眼里，金钱像粪便一样，如果你把它散出去，就可以做很多的事，但如果你要把它藏起来，它就会臭不可闻。克拉克不是一个好商人，他不知道金钱的真正价值。 </p><p>当我们对重要的事情漠然以对时，我们的人生也就走到了穷途末路。克拉克已经成了我成功之路上的绊脚石，我必须踢开他——和他分手。这是一个重要时刻。 </p><p>想获胜必须了解冒险的价值，而且必须有自己创造运气的远见。对我来说，与克拉克先生分手无疑是一场冒险，在我决定豁出一切大举进入石油业之前，我必须确信石油不会消失。在那个时候，很多人都认为石油是一朵盛开的昙花，难以持久。我当然希望油源不会枯竭，而一旦没有了油源，那些投资将一文不值，我的下场可能连赌场上的赌徒都不如。但我收到的信息让我乐观，油源不会消失。是说分手的时候了。 </p><p>在向克拉克先生摊牌前，我先在私下把安德鲁斯先生拉了过来，我跟他说：“我们要走运了，有一笔大钱在等着我们，那可是一笔大钱呐。我要终止与克拉克兄弟的合作，如果我买下他们的股份，你愿意和我一起干吗？”安德鲁斯没有让我失望。几天后，我又拉到几家支持我的银行。 </p><p>那年二月，在经过一系列准备之后，我向克拉克先生提出分手，尽管他很不情愿，但我去意已决。最后，我们大家商定把公司拍卖给出价最高的买主。 </p><p>直到今天，一想起那次拍卖现场的情景，就让我激动不已，那就感觉就像在赌场上赌钱一样，让人惊心动魄，全神贯注。那是一场豪赌，我押上去的是金钱，赌出来的却是人生。 </p><p>公司从五百元开拍，但很快就攀升到几千元，而后又慢慢爬到五万元，这个价格已经超出了我对炼油厂的预估价值。但竞拍价格一直在上涨，开始突破六万，又一步一步飙到七万。这时我开始恐惧，我担心自己是否能买下这个公司——一个由我亲手缔造的企业，是否出得起那么多钱。但我很快镇静下来，我闪电般地告诫自己：“不要畏惧，既然下了决心，就要勇往直前！”竞争对手报价七万两千元，我毫不迟疑，报价七万两千五百元。这时，克拉克先生站起来，大喊：“我不再加了，约翰，它归你了！” </p><p>亲爱的约翰，那是决定我一生的时刻，我感受到它超乎寻常的意义。 </p><p>当然，我为与克拉克先生分手付出了高昂的代价，我把代理公司的一半股份和七万两千五百元都给了克拉克。但我赢得的却是自由和光辉的未来。我成了自己的主人，自己的雇主，从此不再担心那些目光短浅的平庸之辈挡我的路。 </p><p>在我21岁时，我就拥有了科利佛兰最大的炼油厂，已经跻身于世界最大炼油商之列，今天想来，这个每天能吃掉五百桶原油的家伙，无异于是我走向石油霸主之路、征服石油王国的利器。感谢那场竞拍，它是我获得人生成功的开始。 </p><p>几乎可以确定，安全第一不能让我们致富，要想获得报酬，总是要接受随之而来的必要的风险。人生又何尝不是这样呢。 </p><p>没有维持现状这回事，不进则退，事情就是这么简单。我相位，谨慎并非完美的成功之道。不管我们做什么，乃至我们的人生，我们都必须在冒险与谨慎之间做出选择。而有些时候，靠冒险获胜的机会要比谨慎大得多。 </p><p>商人都是利润与财富的追逐者，要靠创造资源和取得他人的资源，甚至逼迫他人让出资源而使自己富有，所以，冒险是商人征战商场不可或缺的手段。 </p><p>如果你想知道既冒险而又不招致失败的技巧，你只需要记住一句话：大胆筹划，小心实施。 </p><p>爱你的父亲 </p><h2><span id="第二十一封侮辱是一种动力">第二十一封：侮辱是一种动力</span></h2><p>格言：侮辱是测量能力的标尺。</p><p>　永远不能让自己的个人偏见妨碍自己成功。</p><p>　你相信自己，并与自己和谐一致，你就是自己最忠实的伴侣。</p><p>（it is the task of men of thought ，as well as men of action to know to put aside pride and prejudice.）</p><p>february27，1901</p><p>亲爱的约翰：</p><p>你与摩根先生谈判时的表现，令我和你的母亲感到惊喜，我们没有想到你竟然有勇气同那个盛气凌人的华尔街最大的钱袋子对抗：而且，应对沉稳，言辞得体，不失教养，并彻底控制住了你的对手。感谢上帝，能让我们拥有你这样出色的孩子。</p><p>有信中你告诉我说，摩根先生待你粗鲁无礼，是有意想要侮辱你，我想你是对的。事实上，你是想报复我，让你代我受辱。</p><p>你知道，此次摩根提出要与我结盟，是担心我会对他构成威胁。我相信他并不情愿与我合作，因为他知道我和他是跑在两条路上的马车，彼此谁都不喜欢谁。我一见到他那副趾高气扬、傲慢无理的样子就感到恶心。我想他一见到我肯定也有叫他不舒服的地方。</p><p>但摩根是位商界奇才，他知道我不把华尔街放在眼里，更不惧怕他对我的威胁，所以他要实现他的野心——统治美国钢铁行业，就必须与我合作，否则，等待他的就将是一场你死我活的竞争。</p><p>善于思考与善于行动的人，都知道必须祛除傲慢与偏见，都知道永远不能让自己的个人偏见妨碍自己的成功，摩根先生就是这样的人。所以，尽管摩根先生不想同我打交道，但他还是问我，是否可以在标准石油公司总裁办公室与他会面。</p><p>在谈判中能坚持到最后一刻的人一定会捞到好处，所以我告诉摩根：“我已经退休了，如果你愿意，我很乐意在我家中恭候你。”他果真来了，这对他而言显然是有些屈尊。但他做梦都不会想到，当他提出具体问题时我会说：“很报歉，摩根先生，我退休了，我想我的儿子约翰会很高兴同你谈那笔交易。”</p><p>只有傻瓜才看不出来，我这是在公然轻蔑摩根，但他很克制，告诉我希望你能到他在华尔街的办公室去谈。我答应了。</p><p>对他人的报复，就是对自己的攻击。摩根先生似乎不懂得这个道理，结果为解心头怒火，反到让你给控制住了。但不管怎么说，尽管摩根先生对我公然侮辱他耿耿于怀，但始终将眼睛盯在要达成的目标上，对此我颇为欣赏。</p><p>我的儿子，我们生长在追求尊严的社会，我知道对于一个热爱尊严的人来说，蒙受侮辱意味着什么。但在很多时候，不管你是谁，即使是美利坚合众国国总统都无力阻止来自他人的侮辱。</p><p>那么，我们该怎么办呢？是在盛怒中反击，捍卫尊严呢？还是宽容相待，大度化之呢？还是用其他方式来回应呢？</p><p>你或许还记得，我一直珍藏着一张我中学同学的多人合照。那里面没有我，有的只是出身富裕家庭的孩子。几十年过去了，，我依然珍藏着它，更珍藏了拍摄那张照片的情景。</p><p>那是一天下午，天气不错，老师告诉我们说，有一位摄影师跑来要拍学生上课时的情景照。我是照过像的，但很少，对一个穷苦家的孩子来说，照相是种奢侈。摄影师刚一出现，我便想像着要被摄入镜头的情景，多点微笑、多点自然，帅帅的，甚至开始想像如同报告喜讯一样回家告诉母亲：“妈妈，我照相了！是摄影师拍的，棒极了！”</p><p>我用一双兴奋的眼睛注视着那位弯腰取景的摄影师，希望他早点把我拉进相机里。但我失望了。那个摄影师好像是个唯美主义者，他直起身，用手指着我，对我的老师说：“你能让那位学生离开他的座位嘛，他的穿戴实在是太寒酸了。”我是个弱小还要听命于老师的学生，我无力抗争，我只能默默地站起身，为那些穿戴整齐的富家子弟制造美景。</p><p>在那一瞬间我感觉我的脸在发热。但我没有动怒，也没有自哀自怜，更没有暗怨我的父母为什么不让我穿得体面些，事实上他们为我能受到良好教育已经竭尽全力了。看着在那位摄影师调动下的拍摄场面，我在心底攥紧了双拳，向自己郑重发誓：总有一天，你会成为世界上最富有的人！让摄影师给你照相算得了什么！让世界上最著名的画家给你画像才是你的骄傲！</p><p>我的儿子，我那时的誓言已经变成了现实！在我眼里，侮辱一词的词义已经转换，它不再是剥掉我尊严的利刃，而是一股强大的动力，如同排山倒海，催我奋进，催我去追求一切美好的东西。如果说那个摄影师把一个穷孩子激励成了世界上最富有的人，似乎并不过分。</p><p>每个人都有享受掌声与喝彩的时候，那或者是在肯定我们的成就，或者是在肯定我们的品质、从格与道德；也有遭受攻击的侮辱的时候，除去恶意，我想我们之所以会遭受侮辱，是因为我们的能力欠佳，这种能力可能与做人有关，也可能与做事有关，总之不构成他人的尊重。所以，我想说，蒙辱不是件坏事，如果你是一个知道冷静反思的人，或许就会认为侮辱是测量能力的标尺，我就是这样做的。</p><p>我知道任何轻微的侮辱都可能伤及尊严。但是，尊严不是天赐的，也不是别人给予的，是你自己缔造的。尊严是你自己享用的精神产品，每个人的尊严都有属于他自己，你自己认为自己有尊严，你就有尊严。所以，如果有人伤害你的感情、你的尊严，你要不为所动。你不死守你的尊严，就没有人能伤害你。</p><p>我的儿子，你与你自己的关系是所有关系的开始，当你相信自己，并与自己和谐一致，你就是自己最忠实的伴侣。也只有如此，你才能做到宠辱不惊。</p><p>爱你的父亲</p><h2><span id="第二十二封用实力让对手恐惧">第二十二封：用实力让对手恐惧</span></h2><p>格言：越是认为自己行，你就会变得越高明。 </p><p>　当涉及金钱的时候，绝对不要先提金额。 </p><p>　在做生意时，你绝对不能想把钱赚得一干二净，要留一点钱给别人赚。 </p><p>（i believe that the world can be changed by man’s endeavor，and that this endeavor can lead to something new and better.） </p><p>february27，1901 </p><p>亲爱的约翰： </p><p>今晚我会晤了调解人亨利·弗里克先生，我告诉他：“正像我的儿子告诉摩根先生的那样，我并不急于卖掉联合矿业公司。但又像你所猜测的一样，我从来不阻止建立任何有价值的企业。但是，我坚决反对买主居高临下，定下企图将我们排斥在外的价格，我宁可血战到底也不会做这样的生意。”我请弗里克先生转告摩根先生，他想错了。 </p><p>约翰，看来你还得同摩根先生继续打交道，尽管你讨厌那个家伙。所以，我想给你一些建议，让那个不可一世的家伙知道什么是我行我素的恶果。 </p><p>儿子，很多人都犯有同样一个错误，他们不知道自己到底是干什么的。其实，不论你从事哪一个行业，譬如经营石油、地产，做钢铁生意，还是做总裁、做雇员，都是在从事一个行业，那就是跟人打交道的行业。谈判更是如此，与你开战的不是那桩生意，而是人！ </p><p>所以，真实了解自己、了解对手，是保证你在决胜中取得大胜的前提。你需要知道，准备是游戏心理的一部分，你必须知己知彼。如果你要拥有实质性的优势，你必须知道： </p><p>第一，　 整体环境：市场状况如何，景气状况如何。 </p><p>第二，　 你的资源：你有哪些优势（优点）和弱势（弱点），你有哪些资本。 </p><p>第三，　 对手的资源：对手的资产状况如何，他的优势、劣势在哪里。在任何竞争中，谋划大策略的重要因素之一，就是了解对手的优势。 </p><p>第四，　 </p><p>你的目标和态度：太阳神阿波罗的座右铭只有短短的一句话：“人贵自知。”你要知道自己在干什么、有什么目标，实现目标的决心有多坚决，认为自己像个赢家还是怀疑自己，在精神与态度上有什么优点和缺点。 </p><p>约翰，你要记住我的一句话：越是认为自己行，你就会变得越高明，积极的心态会创造成功。 </p><p>第五，　 对手的目标和态度：要尽量判断对手的目标，同样重要的是，要设法深入对手的内心，了解他的想法的感觉。 </p><p>毫无疑问，最后这一条——预测和了解对手——是最难实现的利用的，但你要去力争实现。那些伟大的军事将领大多有一个习惯，他们总是尽力了解对手的性格和习惯，以此来判断对手可能做出的选择和行动方向。在所有的竞争活动中，能够了解对手和竞争者也总是很有功效，因为这样你就可以预测对手的动向。主动、预期性的措施几乎总比被动反应有效，且更有力量，俗话说，预防胜于治疗就是这个道理。 </p><p>在有些时候，你竞争对手可能是你熟知的人，那你就要多利用这个优势。如果你了解他是一个很谨慎的人，或许你自己最好也要小心一点；如果你觉得他总是很冲动，或许这是在暗示你，要大刀阔斧，否则你就可能被他逼上绝路。 </p><p>但是，你不必与对手熟识，才能了解他们，只要你能明察秋毫，在谈判桌上你可以发现很多有价值的东西。善于谈判的人应该要能观察一切。你甚至不必等到开始走出第一步，才开始了解对手。 </p><p>我们说的话可能会透露或掩饰自己的心意，但我们的选择几乎总是会泄露自己内心的秘密——想法，每个人所做的第一个选择，也是泄露真相的第一个动作。在谈判中你必须了解自己在说什么，如果你真的能掌控一切，就应该能够掌控自己所说的话，为自己带来好处。 </p><p>同样的，你必须随时保持警惕，以便收到对手发出的信息，如果是这样，你就可以持续掌控明确的优势，做不到这一点，你就可能丧失另一个机会。你需要知道，在一场竞争激烈的谈判中失败，意味着下次赢得谈判的机会将会降低。 </p><p>做交易的秘诀在于，你要知道不能交易什么和可以交易什么。摩根先生视我们为墙角里的残渣，要清扫出去，但我们必须留在地板上。这是不能谈判的。同时，他还必须给出一个好价钱。但你也要知道，在做生意时，你绝对不能想把钱赚得一干二净，要留一点给别人赚。 </p><p>约翰，你知道，我们愿意做这笔交易，是因为我们认为这笔交易对我们有利，这是显而易见的。然而，你不要受制于这种明来而狭隘的观点。 </p><p>有太多的“聪明人”认为牌子的目的不是要交易，而是要捡便宜，希望用最低的价格买到东西。这次摩根一方给出的价格比实际价值低过百万。如果他只想做这种交易，表示他会因此失掉这次他登上美国钢铁行业霸主地位的机会。交易的真谛是交换价值，用别人想要的东西来换取你想要的东西。 </p><p>要完成一笔好交易，最好的方法是强调其价值。而很多人会犯强调价格、而非价值的错误，常说什么：“这的确很便宜，再也找不到这么低的价格了。”不错，没有谁愿意出高价，但在最低价之外，人们更希望得到最高的价值。 </p><p>约翰，在你与摩根先生谈判中，当涉及金钱的时候，你绝对不要先提金额，要提供他宝贵的价值，强调他从你这里能够买到什么。 </p><p>我相信，人经过努力可以改变世界，达到新的、更美好的境界。祝你好运！ </p><p>爱你的父亲</p><h2><span id="第二十三封要有合作精神">第二十三封：要有合作精神</span></h2><p>格言：要想让别人怎么待你，你就怎么待别人。</p><p>　建立在生意上的友谊远胜过建立在友谊上的生意。</p><p>　往上爬的时候要对别人好一点，因为你走下坡的时候会碰到他们。</p><p>（the essence of life is struggle and competition. struggle and competition are stimulating.）　</p><p>may16，1901</p><p>亲爱的约翰：</p><p>你与摩根先生的手终于握到了一起，这是美国经济史上最伟大的一次握手，我相信后人一定会慷慨记住这一伟大时刻，因为正如《华尔街日报》所说，它标志着“一艘由华尔街大亨和石油大亨共同打造的超级战舰已经出航，它将势不可挡，永不沉没”。</p><p>约翰，你知道这叫什么吗？这就是合作的力量。</p><p>合作，在那些妄自尊大的人眼里，它或许是件软弱或可耻的事情，但在我看来，合作永远是聪明的选择，前提是只要对我有利。现在，我很想让你知道这样的事实：</p><p>假如说不是上帝成就了我今天的伟业，我很愿意将其归功于三大力量的支持：第一支力量来自于按规则行事，它能让企业得以永续经营；第二支力量来自于残酷无情的竞争，它会让每次的竞争更趋于完美；第三支力量则来自于合作，它可以让我在合作中取得利益、捞得好处。</p><p>而我之所以能跑在竞争者的前面，就在于我擅长走捷径——与人合作。在我创造财富之旅的每一站，你都能看到合作的站牌。因为从我踏上社会那一天起我就知道，在任何时候，任何地方，只要存在竞争，谁都不可能孤军奋战，除非他想自寻死路，聪明的人会与他人包括竞争对手形成合作关系，假借他人之力使自己存在下去或强大起来。</p><p>当然，我可以做出一个很可能会成为现实的假设，如果我们不与摩根先生牵手，我们双方就很可能会拼个两败俱伤，而我们的对手卡内基先生则会从中渔利，让人在钢铁行业始终一枝独秀的态势继续下去。但现在，卡内基先生一定要捶胸顿足了，想想看，谁会在对手蚕食自己领地的时候还能泰然自若呢？除非他是躺在坟墓里的死人。</p><p>合作可以压制对手或让对手出局，达到让自己向目标阔步迈进的目的，换句话说，合作并不见得是追求胜利。遗憾的是，只有为数不多的人才了解其中的奥妙。</p><p>但是，合作并不等同于友谊、爱情和婚姻，合作的目的不是去捞取情感，而是要捞到利益和好处。我们应该知道，成功有赖于他人的支持与合作，我们理想与我们自己之间有一道鸿沟，要想跨越这道鸿沟。必须依靠别人的支持与合作。</p><p>当然，我永远不会拒绝与生意伙伴建立友谊，我相信建立在生意上的友谊远胜过建立在友谊上的生意。例如我与亨利·弗拉格勒先生的合作。亨利是我永远的知己，最好的助手；我与他结盟，他让我得到的不只是投资，更多的是智慧和心灵上的支持。亨利同我一样，从不自满且雄心勃勃，成为石油行业的主人是他的梦想。直到现在，我还记得我们开始合作时的情景，那时候除去吃饭和睡觉，我们几乎形影不离，我们现上班、下班，一同思考，一同制定计划，相互激励、彼此坚定决心。那段时间，就如同欢度蜜月一样，永远是让我感到愉快的记忆。</p><p>如今，几十年过去了，我们依然亲如兄弟，这份情感给多少钱我都不卖。这也是我一直让你叫他亨利叔叔而不要叫他亨利先生的原因。</p><p>我从不尝试去买卖友谊，因为友谊不是能用金钱买来的。友谊的背后需要真情的支持。我与亨利之所以有不悔的合作和永远的友谊，不仅仅在于我们是追逐利益的共谋者，更重要的是，我们都是严于律己的人，我们都知道要想让别人怎么待你、你就怎么待别人而且从现在做起的价值。</p><p>“己所不欲，勿施于人”，既是我的行为准则，又是我对合作所保有的明智态度。所以，我从不以财势欺凌处于弱势的对手，我情愿与他们促膝谈心，也不愿意摆出盛气凌人的姿态去压服他们，否则，我可以会毁了我们之间的合作，让目标停止在中途。</p><p>当然，遇到傲慢无礼的人，我也有总忘不了要羞辱他一番的时候，例如我就曾教训过纽约中央铁路公司的老板范德比尔特先生。</p><p>范德比尔特出身贵族，在南北战争中立过战功，享有将军头衔，但他把战场上得到的荣誉当作了他生活中不可一世的资本，并自以为把持着运输大权，就可以把我们当成打短工的。</p><p>有一次，亨利找到他要谈运输的事情，可谁知道这个傲慢的家伙竟然说：“年轻人，你要与我谈？你的军阶似乎低了些！亨利从未受到过这样的侮辱，但在那一刻良好的教养帮了他，他没有失态，但回到办公室，他那个漂亮的笔筒却遭了殃，被他摔了个粉身碎骨。</p><p>我赶快安慰他：“亨利，忘了那狗尿说了什么，我一定为你讨回尊严。”后来范德比尔特急着要与我们做生意，请我们到他那里去谈判，我派人告诉他：“可以，但你要到我们办公室来谈。”结果，这位习惯了别人巴结、讨好他的将军，只能屈尊来见比他小四十多岁的年轻人，同时还要屈从两个年轻人提出的条件。我想，在那一刻，范德比尔特将军一定明白了这样一个道理：往上爬的时候要对别人好一点，因为你走下坡的时候会碰到他们。</p><p>我厌恶以粗暴的态度对待人，更知道耐心、温和对待下属和同事的价值——有利于实现目标。我知道用钱可以买到人才，却不会买到人心，但如果在付钱的时候又送上一份尊重，我就会让他们为我忠心地服务。这就是我能建立起高效管理队伍的成功所在。</p><p>但我不希望因此产生错误的判断，认为合作就是做好人。不！合作不是做好人的问题，而是好处和利益的问题。没有任何结盟是永远持久的，合作只是一种获利战术。当环境发生变化的时候，战术将随之改变，否则，你就输了。现实很严厉，你必须更严厉，但是，显然也要当个好人。</p><p>约翰，生命的本质就是斗争和竞争，它们激动人心。但是，当它们发展为冲突时，就往往具有毁灭性和破坏性，而适时的合作则可化解它们。</p><p>爱你的父亲</p><h2><span id="第二十四封不甘示弱才会赢">第二十四封：不甘示弱才会赢</span></h2><p>格言：我们思想的大小决定我们成就的大小。 </p><p>　态度是我们最好的朋友，也会是我们最大的敌人。 </p><p>　通往成功的道路上铺满了黄金，然而这条道路却只是一条单行道。 </p><p>（optimism is a belief that life will be，in the long run，more good that bad，that even when bad things happen，the good will eventually outbalance them.） </p><p>july19， 1897 </p><p>亲爱的约翰： </p><p>沉浸在热烈、真挚的爱戴之中，真是美妙极了。今天，芝加哥大学的学生让我体味到了这种美妙的感受。姑且将其视为对我创建这所学府的回报吧，不过，这的确让我喜出望外。 </p><p>真心而言，在我决定投资创建这所大学之前，我从未奢望在那里受到圣人般的礼遇，我的初衷只是想为将我们最优秀的文化传给青年一代做些什么，为我们的青年造就美好未来和为未来造就我们的青年一代做些什么。现在看来，我的目的达到了，这是我一生中最明智的投资。 </p><p>芝加哥大学的青年人非常可爱，他们对未来充满美好的憧憬，都有要成就一番事业的动机。他们当中几个一脸稚气的男生跑向我说，我是他们的榜样，真诚地希望我能给他们一些建议。我接受了他们的请求，我忠告那些未来的洛克菲勒： </p><p>成功不是以一个人的身高、体重、学历或家庭背景来衡量，而是以他思想的“大小”来决定。我们思想的大小决定我们成就的大小。这其中最重要的一条就是我们要看重自己，克服人类最大的弱点——自贬，千万不要廉价出卖自己。你们比你们想像中的还要伟大，所以，要将你们的思想扩大到你们真实的程度，绝不要看轻自己。 </p><p>这时掌声突然响起，我显然被它彻底俘虏了，以致得意忘形，管不往我的舌头，我继续说： </p><p>几千年来，很多哲学家都忠告我们：要认识自己。但是，大部分的人都把它解释为仅仅认识自己消极的一面。大部分的自我评估都包括太多的缺点、错失与无能。认识自己的缺失很好，可借此谋求改进。但是，如果我们仅仅认识自己消极的一面，就会陷入混乱，使自己变得没有任何价值。 </p><p>而对那些渴望别人尊重自己的人来说，现实却很残酷，因为别人对他的看法，与他对自己的看法相同。我们都会受到那种“我们自以为是怎样”的待遇。那些自以为比别人差一截的人，不管他实际上的能力到底怎样，一定会是比别人差一截的人，这是因为思想本身能调节并控制各种行动的缘故。 </p><p>如果一个人自己觉得比不上别人，他就会表现出“真”的比不上别人的各种行动；而且这种感觉无法掩饰或隐瞒。那些自以为“不很重要”的人，就真的会成为“不很重要”的人。 </p><p>在另一方面，那些相信自己具有“承担重责大任的能力”的人，就真的会变成一个“很重要”的人物。所以，如果你们想就重要人物，就必须首先使自己承认“我确实很重要”，而且要真正的这么觉得，别人才会跟着这么想。 </p><p>每个人都无法逃脱这样一个推理原则：你怎么思想将会决定你怎么行动，你怎么行动将决定别人对你的看法。就像你们自己的成功计划一样，要获得别人的尊重其实很简单。为得到他人的尊重，你们必须首先觉得自己确实值得人敬重，而且你们越敬重自己，别人也会越敬重你们。 </p><p>请你们想一想：你们会不会敬重那些在破旧街道游荡的人呢？当然不会。为什么？因为那些无赖汉根本不看重自己，他们只会让自卑感腐蚀他们的心灵而自甘堕落。 </p><p>一个人的自我观念就是他人格的核心，你们自己认为是怎么样的人，你们就真的会成为怎么样的人。 </p><p>每一个人，无论他身居何处，无论他默默无闻或身世显赫，无论他文明或野蛮，也无论他年轻或年老，都有成为重要人物的强烈欲望。请仔细想一想你们身边的每一个人——你的邻居、你自己、你的老师，你的同学，你的朋友，有谁没有希望自己很有分量的强烈需求？全都有，这种需求是人类最强烈、最迫切的一种目标。 </p><p>但是，为什么很多人却将这个本可以实现的目标，永远地变成了无法实现的黄粱美梦呢？在我看来是态度使然。态度是我们每个人思想和精神因素的物化，它决定着我们的选择和行动。在这个意义上说，态度是我们最好的朋友，也会是我们最大的敌人。 </p><p>我承认，我们不能左右风的方向，但我们可以调整风帆——选择我们的态度。一旦你们选择了看重自己的态度，那些“我是个没用的人，我是个无名小卒，我算老几，我一文不值”，等等贬低自己、消磨意志、蜕化信心和自暴自弃的懦夫的想法就会消失殆尽，取而代之的，是心灵的复活，思维和行为方式的积极改变，信心的增强，以“我能！而且我会！”的心态面对一切。 </p><p>小伙子们！如果你们中间有谁曾自己骗自己，请就此停止，因为那些不觉得自己重要的人，都是自暴自弃的普通人。任何时候都不要自贬，要先选出自己的各种资产——优点。要问你自己：“我有哪些优点？”在分析自己的优点时，不能太客气。 </p><p>你们要专注自己的长处，告诉自己我比我想象的还要好。要有远见，看到未来的发展性，而不单看现况，对自己要有远大的期望。要随时记住这个问题：“重要人物会不会这么做呢？”这样就会使你们渐渐变成更成功的大人物。 </p><p>孩子们，通往成功的道路上铺满了黄金，然而这条道路却只是一条单行线。此时此刻，我们需要一种乐观的态度。乐观常被哲学家称为“希望”。首先让我来告诉你们，这是对乐观的曲解！所谓乐观是一种信念，那就是相信生活终究是乐多苦少，相信即使不如人愿的事屡屡发生，好事终将占得上风。 </p><p>约翰，你知道吗？在我短短十几分钟的即兴演进中，我竟获得了八次掌声。遗憾的是过多的掌声太干扰了我的思路，我有一个重要的观点让掌声赶跑了，那就是提高思考能力，会帮助他们提高各种行动的水准，使他们因而更大有作为。但我还是很高兴，我的舌头居然有那么大的魅力。 </p><p>爱你的父亲</p><h2><span id="第二十五封让每一分钱都带来效益">第二十五封：让每一分钱都带来效益</span></h2><p>格言：每一分钱都要让它物有所值。</p><p>　没有想好最后一步，就永远不要迈出第一步。</p><p>　创造力、自发精神和信念可以化不可能为可能。</p><p>（i have never looked upon ease and happiness as ends in </p><p>themselves，i call the ideal of a pigsty.）</p><p>june21，1914</p><p>亲爱的约翰：</p><p>查尔斯先生永远地离开了我们，这让我很难过。作为上帝忠实的子民，查尔斯先生一直是位非常善良的富人，他乐善好施，不断用自己辛勤赚到的钱去救助那些处于贫困噩梦中的同胞。我相信上帝会在天堂笑迎他，因为他的仁爱和无私。</p><p>与真挚的灵魂相伴，是天赐的福气。我能有像查尔斯先生这样的合伙人，是我一生的荣幸。当然，查尔斯先生谨小慎微的性格常常导致他与我龃龉不断，但这丝毫不会夺走我对他的尊重。失去对高尚人的尊重，就是在剥夺自己做人的尊严。</p><p>当年，公司最高管理层有共进午餐的习惯，每到吃饭的时候，尽管我是公司第一人，我都会把象征公司核心的座位留给他，以示我对他正直人品的敬意。是的，这不足为道，高尚的道德本该受到褒奖。而就一个整体而言，虽然这只是很小很小的细节，但这样一个细节可能影响到整个公司，影响到公司的成绩。</p><p>事实上，标准石油公司的合伙人都是正直的人，我们个个知晓彼此尊重、信任、团结一心对合作有多么可贵和重要，我们努力使之变成现实。所以，即使出现分歧，我们只会直言不讳、就事论事，从不勾心斗角、搬弄事非。我相信，在这种纯洁的氛围中，即使有人心术不正，他也会把心术不正的恶习留在家里。</p><p>但这只是标准石油公司强大到令对手敬畏的原因之一，而视精诚协作为我们的生命才是最重要的因素。在这方面，查尔斯先生身体力行，堪为表率。</p><p>作为公司的引领者，我在一次董事会上曾真诚倡议：“我们是一家人，我们共享荣辱，我们坚强的手掌托起的是我们共同的事业。所以，我建议大家，请不要说我应该做什么，要说我们应该做什么。千万别忘了，我们是合作伙伴，无论做什么事都是为了我们大家的利益。”</p><p>我的发言感染了查尔斯先生，他第一个回应我：“先生们，我听懂了，约翰的意思是说，比起‘我’来说，‘我们’更重要，我们是一家人！没错！是应该说我们！”</p><p>在那一刻，我看到了我们伟大的未来，因为我们已经开始忠于“我们”。别忘了，人人自私，每个人的天性都是忠于自己，“我”是每个人心中的宗教。当“我们”取代“我”的时候，它所焕发出的力量将难以估量。我所以能取得巨大成就，就在于我首先经营人了，所有的人。</p><p>我与查尔斯先生有着共同的信仰，我们都是虔诚的基督徒。我喜欢查尔斯先生最喜欢的一句格言：“珍惜时间和金钱。”我一直以为这是一则凝聚着伟大智慧的箴言。我相信绝大多数的人都会喜欢它，却难以将其变成自己思想信念和价值信条，并永远溶入自己的血液中。</p><p>是的，无论一个人积储了多么丰富的妙语箴言，也无论他的见解有多高，假使不能利用每一个确实的机会去行动，其性格终不能受到良好的影响。失去美好的意图，终是一无所获。</p><p>几乎人人都知道，能否构筑幸福生活，能否实现成功，都与如何利用时间有关。然而，在很多人那里，时间是他们的敌人，他们消磨它，抹煞它；但如果谁偷走他们的时间，他们又会大发雷霆，因为时间毕竟是金钱，重要的时间还是生命。遗憾的是，他们就是不知道如何利用时间。</p><p>事实上，这没有哥伦布先生发现美洲那么难，重要的是我们要计划每一天，乃至每一刻，并知道该思考什么，该如何采取行动。计划是我们顺应每天情况而生活的依据，它能显示什么是可行的。而要制订完美的计划，首先要确认自己想要什么；还有，每项计划都要有措施，并要监督成果。能讨诸行动、有成果的计划才是有价值的计划。当然，创造力、自发精神和信念可以化不可能为可能，并突破计划的限制，所以，不要自囿于计划之中。</p><p>每一刻都是关键，每一个决定都影响生命的过程，所以，我们要有下决心的策略。决心不易下得太快，遇到重要问题时，如果没有想好最后一步，就永远不要迈出第一步，要相信总有时间思考问题，也总有时间付诸行动，要有促进计划成熟的耐心。但一旦做出决定，就要像斗士那样，忠实地去执行。</p><p>赚钱不会让你破产，是查尔斯先生的致富圣经。在一次午餐会上，查尔斯先生公开了他的赚钱哲学，那天他用一种演讲家般的激情，激励了我们每个人，他告诉我们大家：世界上有两种人永远不会富有：</p><p>第一种是及时行乐者，我们喜欢过光鲜亮丽的日子，像苍蝇盯臭肉那样，对奢侈品兴趣昂然，他们挥霍无度，竭尽所能要拥有精美的华服、昂贵的汽车、豪华的住宅，以及价格不菲的艺术品。这种生活的确迷人，但它缺乏理性，及时行乐者缺乏这样的警惕：他们是在寻找增加负债的方法，他们会成为可怜的车奴、房奴，而一旦破产，他们就完了！</p><p>第二种人，喜欢存钱的人，把钱存在银行里当然保险，但它跟把钱冷冻起来没什么两样，要知道靠利息不能发财。</p><p>但是，有一种人会成为富人，比如在座的诸位，我们不寻找花钱的方法，我们寻找、培养和管理各种投资的方法，因为我们知道财富是可以拿来孳生更多的钱财，我们会把钱拿来投资，创造更多的财富。但我们还要知道，让每一分钱都能带来效益！这正如约翰一贯的经商原则——每一分钱都要让它物有所值！</p><p>查尔斯先生的演讲博得了热烈掌声，我被他燃烧起来，鼓掌时太过用力，以致饭后还觉得两个手掌在隐隐作痛。</p><p>如今，再也听不到那种掌声了，也没有鼓那种掌的机会。但“珍惜时间和金钱”一直与我相伴。我没有理由浪费生命，浪费生命就等于糟蹋自己，世界上没有比糟蹋自己更大的悲剧了。我也不把安逸和享乐看作是生活目的的本身，因为我称其为猪的理想。</p><p>爱你的父亲</p><h2><span id="第二十六封忍耐就是策略">第二十六封：忍耐就是策略</span></h2><p>格言：任何时候冲动都是我们最大的敌人。 </p><p>　能忍人所不能忍之忤，才能为人所不能为之事。 </p><p>　如果你真的想成功，你一定要掌握并保护自己的机会，更要设法抢夺别人的机会。 </p><p>（conformity is the enemy of thought and the jailer of freedom.） </p><p>september2，1902 </p><p>亲爱的约翰： </p><p>非常感谢你对我的信任，告诉我你退出花旗银行董事会的事情。我当然理解你为什么这样做，你已经无法继续忍受同仁们的某些做法，更不想继续屈从于他们。 </p><p>但是，你的决定是否明智，似乎还有待于时间来证实。理由很简单，如果你不主动放弃花旗银行董事的职位，而是选择留在那里，或许你会得到更多。 </p><p>我知道，屈从是思想的大敌，也是自由的狱吏。然而，对于一个胸怀大志的人而言，保持必要的屈从与忍耐，恰恰是一条屡试不爽的成功策略。追溯过往，曾经我忍耐过许多，也因忍耐得到过许多。 </p><p>在我创业之初，由于资金缺乏，我的合伙人克拉克先生邀请他昔日同事加德纳先生入伙，对此我举双手赞成，因为有了这位富人的加入，就意味着我们可以做我们想做、有能力做、只要有足够资金就能做成的事情。 </p><p>然而，出乎我意料的是，克拉克带来了一个钱包的同时，却送给了我一份屈辱，他们要把克拉克-洛克菲勒公司更名为克拉克-加德纳公司，而他们将洛克菲勒的姓氏从公司名称中抹去的理由是：加德纳出身名门，他的姓氏能吸引更多的客户。 </p><p>这是一个大大刺伤我尊严的理由！我愤怒啊！我同样是合伙人，加德纳带来的只是他那一份资金而已，难道他出身贵族就可以剥夺我应得的名分吗？！但是，我忍下了，我告诉自己：你要控制住你自己，你要保持心态平静，这只是开始，路还长着哪！ </p><p>我故作镇静，装作若无其事的样子告诉克拉克：“这没什么。”事实上，这完全是谎言。想想看，一个遭受不公平、自尊心正受到伤害的人，他怎么能有如此的宽容大度！但是，我用理性浇灭了我心头燃烧着的熊熊怒火，因为我知道这会给我带来好处。 </p><p>忍耐不是盲目的容忍，你需要冷静地考量情势，要知道你的决定是否会偏离或加害你的目标。对克拉克大发雷霆不仅有失体面，更重要的是，它会给我们的合作制造裂痕，甚至招致一脚把我踢出去、让我从头再来的恶果。而团结则可以形成合力，让我们的事业越做越大，我的个人力量和利益也必将随之壮大。 </p><p>我知道自己要到哪里去。在这之后我继续一如既往、不知疲倦地热情工作。到了第三个年头，我就成功地把那位极尽奢侈的加德纳先生请出了公司，让克拉克-洛克菲勒公司的牌子重新竖立起来！那时人们开始尊称我为洛克菲勒先生，我已成为富人。 </p><p>在我眼里忍耐并非忍气吞声、也绝非卑躬屈膝，忍耐是一种策略，同时也是一种性格磨练，它所孕育出的是好胜之心。这是我与克拉克先生合作期间，得出的心得。 </p><p>我崇尚平等，厌恶居高临下发号施令。然而，克拉克先生在我面前却总要摆出趾高气扬的架势，这令我非常反感。他似乎从不把我放在眼里，把我视为目光短浅的小职员，甚至当面贬低我除了记账和管钱之外一无所能，没有他我更一文不值。这是公然的挑衅，我却装作充耳不闻，我知道自己尊重自己比什么都重要，但是，我在心里已经同他开战，我一遍一遍地叮嘱自己：超过他，你的强大是对他最好的羞辱，是打在他脸上最响的耳光。 </p><p>结果正像你所知道的那样，克拉克-洛克菲勒公司永远成为了历史，取代它的是洛克菲勒-安德鲁斯公司，我就此搭上了成为亿万富翁的特快列车。能忍人所不能忍之忤，才能为人所不能为之事。 </p><p>在任何时候冲动都是我们最大的敌人。如果忍耐能化解不该发生的冲突，这样的忍耐永远是值得的；但是，如果顽固地一意孤行，非但不能化解危机，还会带来更大的灾难。安德鲁斯先生似乎并不明白这个道理。 </p><p>安德鲁斯先生是一个没有商业头脑却自以为是的人，他缺乏成为伟大商人的雄心却有着邪恶的偏见。这种人与我发生冲突毫不奇怪。 </p><p>导致我们最终分道扬镳的那场冲突，缘于公司发放股东的红利。那一年我们干得不错，赚了很多钱，可是我不想把公司赚到的钱全都让股东们拿回家，我希望能奖其中的一半收益再投入到公司的经营中去。但安德鲁斯坚决反对，这个自私自利的家伙想把赚来的钱全分了，甚至怒气冲冲地威胁我说，他不想在公司继续干下去了。我不能忍受任何阻止公司强大的想法，我只能向他摊牌，请他为他持有的股票开价，他说一百万，我说没问题，第二天我就用一百万买下了。 </p><p>钱一到手，安德鲁斯兴奋极了，他自以为自己交了好运，认为他手里持有的股票根本不值一百万。但他没有想到，我很快一转手就赚了三十万。这事传到他那里，他竟然骂我手段卑鄙。我不想因为区区三十万就落得个卑鄙的名声，就派人告诉他可以按原价收回。但懊恼中的安德鲁斯拒绝了我的好意。事实上他拒绝的是一次成为全美巨富的机会，如果他能把他价值一百万的股票保留到今天，就会成为当然的千万富翁。但为赌一时之气，他丧失了终生再也抓不住的机会。 </p><p>约翰，在这个世界上而要我们忍耐的人和事太多太多，而引诱我们感情用事的人和事也太多太多。所以，你要修炼自己管理情绪和控制感情的能力，要注意在做决策时不要受感情左右，而是完全根据需要来做决定，要永远知道自己想要什么。你还需要知道，在机会的世界里，没有太多的机会可以争取，如果你真的想成功，你一定要掌握并保护自己的机会，更要设法抢夺别人的机会。 </p><p>记住，要天天把忍耐还在身上，它会给你带快乐、机会和成功。 </p><p>爱你的父亲</p><h2><span id="第二十七封幸运之神眷顾勇者">第二十七封：幸运之神眷顾勇者</span></h2><p>格言：机运就在你的选择之中。</p><p>　如果你有百分之五十一的时间做对了，那么你就会变成英雄。</p><p>　你的行为像个赢家，你就很可能去做更多赢家该做的事，从而改变你的“运气”。</p><p>（the is not to the strong alone，it is to vigilant，the active，the brave.）</p><p>october7，1898</p><p>亲爱的约翰：</p><p>几天前你的姐姐塞迪兴高采烈地告诉我，她一头栽进了幸运里，说她手里的股票就像百依百顺听她使唤的奴隶，正在帮她将大把大把的钱拿回家。</p><p>我想现在塞迪可能已经快乐疯了，但我不希望她被那些钱弄得得意忘形而乱了方寸，我告诉她，小心相信运气会把自己扔到失败的田野上。</p><p>几乎每一位事业有成的人都在警告世人：你不能靠运气活着，尤其不能靠运气来建立事业生涯。有趣的是，大部分的人对运气深信不疑，我想他们是错把机会当运气了。没有机会就没有运气。</p><p>约翰，想一想你认识的那些幸运儿，你几乎可以确实，他们都不是温良恭俭让的人，也几乎可以非常确定，他们总是散发出自信的光辉和天下无难事的态度，甚至会显得非常大胆。这其中潜藏着一个鸡生蛋、蛋生鸡的问题，幸运儿是因为幸运才表现得自信和大胆，还是他们的“运气”是自信和大胆的结果呢？我的答案是后者。</p><p>幸运之神眷顾勇者，是我一生尊奉的格言。胜利不一定属于强者，高度警惕、生气勃勃、勇敢无畏的人也会获胜。当然，也有人相信谨慎胜过勇敢。但勇敢和大胆比谨慎更引人注目、更受欢迎，且更有吸引力，懦弱根本不能与之相比。</p><p>我从未见过不欣赏自信果决的人，每个人都是自信果决的人的支持者，期望这样的人担任领袖，而我们之所以受他们吸引，就在于他们有着强大的吸引力。所以，勇敢的人常常会比较成功，会较容易担任领袖、总裁和司令官，那些迅速升职的人都属于这样的人。</p><p>经验告诉我，大胆果决的人，能完成最好的交易，能吸引他人的支持，结成最有力的盟约。而那些胆小、犹豫的人却难以捞到这样的好处。不仅如此，大胆的方法对自己也大有裨益，有自信的人期望成功，他们会配合自己的期望，设计所有的计划以追求成功。</p><p>当然，这样做不能保证会绝对成功，却能自然而然地推出对成功的展望。换句话说，如果你觉得自己是赢家，你的行为就会像个赢家；如果你的行为像个赢家，你就很可能去做更多赢家的事，从而改变你的“运气”。</p><p>真正的勇者并非是不可一世的狂妄之徒，更不是没有脑子的莽撞汉。勇者知道运用预测和判断力，计划每一步和做每一个决定，这种做法就像军事策略家所说的那样，会让你力量大增，也就是拥有一种武器，能立刻形成明显的优势，帮你战胜对手。这让我想起了十几年前，大胆决定买下莱玛油区的事情。</p><p>在此之前，石油界没有一天停止过对原油将会枯竭的恐惧，连我的助手都开始恐惧在石油上不能长期渔利，悄悄地卖着公司的股票；而有的人甚至建议，公司应该及早退出石油业，转行做其他更为稳定的生意，否则我们这艘大船就将永远不能返航。作为领袖，面对悲观送出的应该永远是希望而不是哀叹，我告诉那些惶恐中的人们：上帝会赐予我们一切。</p><p>再次感觉上帝温暖的抚摸，是人们在俄亥俄州莱玛镇发现了石油的时候。只是莱玛的石油散发着用常规方法都不能去掉的臭味，深深打击了很多人想从那里大赚一把的信心。但我对莱玛油田充满信心，我可以预见到一旦我们独占莱玛，我们就将具有统治石油市场的强大力量。机会来了，如果让它悄然溜走，洛克菲勒的名字就会与猪联系在一起。我郑重地告诉公司的董事们：这是千载难逢之机，我是该把钱投到莱玛的时候啦！</p><p>非常遗憾，我的意见遭到了胆小怕事者的反对。</p><p>强加于人不符合我的性格，我寄希望于通过和颜悦色的讨论，让大家最终能统一到我的意见上来。</p><p>那是一次漫长而没有结果的等待。我忧心忡忡，我们建起了全球规模的巨型炼油厂，它就像一个饥饿的婴儿对母亲的奶汁贪得无厌一样，需要吃掉源源不断的原油，但宾州的油田正在凋敝，其他几个小油田业已开始减产，长此下去我们只得依赖俄罗斯的原油，几乎可以肯定，俄国人一定会利用他们对油田的控制，削弱我们的力量，甚至彻底击败我们，把我们赶出欧洲市场。但是，一旦我们拥有了莱玛的石油资源，我们就会继续做赢家。不能再等了，是我该行动的时候啦！</p><p>正像我所预想的那样，在董事会上保守派依然说“不”。但我以令反对派大吃一惊的方式，降伏了他们，我说：先生们，如果不想让我们这艘巨轮沉下去，我们必须保证我们的原油供应。现在，蕴藏在莱玛地下的石油正向我们招手，它将带来令我们目眩的巨额财富。看在上帝的份上，请不要说那带有臭味的液体没有市场，我相信上帝赐予我们的东西都有其价值，我相信科学会扫除我们的疑虑。所以，我决定用我自己的钱进行这项投资，并情愿承担两年的风险。如果两年以后成功了，公司可以把钱还给我；如果失败了，就由我自己承担一切损失。</p><p>我的决心与诚意打动了我最大的反对者普拉特先生，他眼中闪动着泪光，激动地对我说：“约翰，我的心被你俘虏了，既然你认为应该这样做，我们就一起干吧！你能冒这个险，我也能！”一荣俱荣、一损俱损的合作精神，是我们不断强大的精神支柱。</p><p>我们成功了。我们倾尽全力将巨资投到了莱玛，其回报更是巨大，我们将全美最大的原油生产基地控制在了自己的手中。而在莱玛的成功又加剧了我们的活力，支配我们开始了在石油业前所未有的大收购。结果正像我们预想的那样，我们成为石油领域最令人畏惧的超级舰队，取得了不可动摇的统治地位。</p><p>约翰，态度有助于创造运气，而机运就在你的选择之中。如果你有百分之五十一的时间做对了，那么你就会变成英雄。</p><p>这是我关于幸运的最深体会。</p><p>爱你的父亲</p><h2><span id="第二十八封真诚地相信自己就有办法">第二十八封：真诚地相信自己就有办法</span></h2><p>格言：做任何事都不可能只找到一种最好的方法。 </p><p>　要找出完美想法的最佳途径，就是拥有许多想法。 </p><p>　最大的成功都是留给那些有我能把事情做得更好的态度的人。 </p><p>（the best way to have a good idea is to have lots of ideas.） </p><p>december 4， 1903 </p><p>亲爱的约翰： </p><p>我不赞同你的观点，让罗杰斯担当重任，独当一面。事实上，我曾为此做过努力，但结果颇令我失望。我的用人原则是，被委以重任者是能找出把事情做得更好的方法的人。但罗杰斯显然不够格，因为他是个思考懒惰的人。 </p><p>在我有心启用罗杰斯之前，我为考查过他，用一个问题。我说：“罗杰斯先生，你认为政府怎么做才能在三十年内废除所有的监狱？”他听了显得很困惑，怀疑自己听错了，一阵沉默过后，他便开始反驳我：“尊敬的洛克菲勒先生，您的意思是要把那些杀人犯、强盗以及强奸犯全部释放吗？您知道这样做会有什么后果吗？如果真是那样，我们就别想得到安宁了。不管怎样，一定要有监狱。” </p><p>我希望把罗杰斯那颗铁板一块的脑袋砸开一道缝，我提醒他：“罗杰斯，你只说了不能废除的理由。现在，你来试着相信可以废除监狱。假设可以废除，我们该如何着手？” </p><p>“这太让我勉强了，洛克菲勒先生，我无法相信，我也很难找出废除它的方法。”这就是罗杰斯的办法——没有办法。 </p><p>我想像不出，当给予他重任，当机会或危难来临的时候，他是否会动用他所有的才智去积极应对。我不信任罗杰斯，他只会将希望变成没有希望。 </p><p>找出把事情做得更好的方法，是将任何事情做成的保证。这不需要有超人的智慧，重要的是要相信能把事情做成，要有这种信念。当我们相信某一件事不可能做到的时候，我们的大脑就会为我们找出各种做不到的理由。但是，当我们相信——真正的相信，某一件事确实可以做到，我们的大脑就会帮我们找出各种方法。 </p><p>相信某一件事可以做成，就会为我们提供创造性的解决之道 </p><p>，将我们各种创造性的能力发挥出来。相反，不相信事情能够做成功，就等于关闭了我们创造性解决问题之道的心智，不但会阻碍发挥创造性的能力，同时还将破灭我们的理想。所谓有志者事竟成是创造成就的根本，不过如此。 </p><p>我厌恶我的手下人说“不可能”。“不可能”是失败的用语，一旦一个人被“那是不可能的”想法所支配，他就能生出一联串的想法证明他想得没错。罗杰斯就犯了这种错误，他是个传统的思考者，他的心灵都是麻木的，他的理由是：这已经实行一百年了，因此一定是个好办法，必须维持原样，又何必冒险去改变呢？而事实上往往只要用心去想办得到的原因，就可以达成。“普通人”总是憎恶进步。 </p><p>人相信，做任何事都不可能只找到一种最好的方法，最好的方法正如创造性的心灵那样多。没有任何事是在冰雪中生长的，如果我们让传统的想法冻结我们的心灵，新的创意就无由滋长。 </p><p>传统的想法是创造性的计划的头号敌人。传统性的想法会冰冻我们的心灵，阻碍我们发展真正需要的创造性能力。罗杰斯就犯了这样的错误，他应该乐于接受各种创意，要丢弃“不可行”、“办不到”、“没有用”、“那很愚蠢”等思想的渣滓；他也要有实验精神，勇于到尝试新的东西，这样就将扩展他的能力，为他担负更大的责任做准备。同时，他也要主动前进，不要想：这通常是我做这件事的方式，所以在这里我也要用这种方法，而要想：有什么方法能比我们惯用的方法做得更好呢？ </p><p>各种计划都不可能达到绝对的完美，这意味着一切事物的改良可以无止境地进行。我深知这一点，所以我经常会再寻找一些更好和方法。我不会问自己：我能不能做得更好？我知道我一定办得到，所以我会问：我要怎样才能做得更好？ </p><p>要找出完美想法的最佳途径，就是拥有许多想法。我会不断地为自己和别人设定较高的标准，不断寻求增进效率的各种方法，以较低的成本获得较多的报酬，以较少的精力做更多的事情。因为我知道，最大的成功都是曾经那些有我能把事情做得更好的态度的人。 </p><p>发展同我能做得更好的态度，需要培养，要每天想：我今天要怎样把工作做得更好？今天我该如何激励员工？我还能为公司提供哪些特殊的服务呢？我该如何使工作更有效率呢？这项练习很简单，但很管用。你可以试试看，我相信你会找到无数创造性的方法来赢得更大的成功。 </p><p>我们的心态决定我们的能力。我们认为我们能做多少我们就真的能做多少。如果我们真的相信自己能做得更多，我们就能创造性地思考出各种方法。 </p><p>拒绝新的挑战都是非常愚蠢的。我们要集中心思于怎样才可以做得更多。如此，许多富有创造性的答案都会不期而至。例如，改善目前工作的计划，或者处理例行工作的捷径，或者删除无关紧要的琐事。换句话说，那些使我们做得更多的方法多半都在这时候出现。 </p><p>约翰，你可以跟罗杰斯谈谈，我希望他能有所改变，到那时候他也许就有好日子过了。 </p><p>爱你的父亲</p><h2><span id="第二十九封尾声就是开始">第二十九封：尾声就是开始</span></h2><p>格言：最好是好的敌人。</p><p>　首先发现对方弱点并狠命一击的人，常常是胜者。</p><p>　大多数人会失败，不是因为犯错，而是因为没有全心投入。</p><p>（i believe it to be an invariable rule that competitors of genius are succeeded by warriors.）</p><p>august31， 1908</p><p>亲爱的约翰：</p><p>安德鲁·卡内基先生又接受了记者的专访，我一直弄不明白，他为什么总喜欢在报纸上抛头露面，我猜想他准是患了恐惧遗忘症，惟恐人们忽视了他的存在。</p><p>但我还是比较欣赏这个常与我争风的家伙，因为他勤奋、雄心勃勃，像个不知疲倦的铁汉，总将向前视为他第一、第二、第三重要的事情；也许因此，当被问及他成功的秘诀时，他才会告诉记者说：尾声只是开始。</p><p>真难以置信，这个铁匠怎么会说出如此精辟的话。我相信这个仅由三个单词组成的短句，很快就会远播出去，或话卡内基先生也会因此得个商界哲学家的头衔。事实上他值得人们这样称道他，难道能将自己成功的一生浓缩成一个短句，不正是表现了这位商业巨人的非常智慧吗？</p><p>不过，卡内基先生只给出了一个成功者的成功公式，却没有给出其中的演算过程，看来这个家伙就是不能改变自私的本性，总怕别人窥见他成功的秘密。我倒想试着替铁匠解一解那个公式，但你不要外传；否则，他会因我泄密，在圣诞节时就不光送我威士忌了，他一定还会送来雪茄，他知道我滴酒不沾，更知道我是个禁烟主义者，这个有趣的家伙。</p><p>“尾声只是开始”，在我看来，铁匠是在试图表明成功是一个不断繁衍的过程，这就像一个多产的母牛，当它生下一个牛崽之后，马上又怀上了另一个牛崽，如此往复，生生不息。尾声是一段路程的最后一站，又是新梦的开始。每一个伟大的成功者，都是用一个个小的成功把自己堆砌上去的，他们用尾声欢庆梦想的实现，又用尾声欢送新梦上路，这是每一个创造了伟大成就的人的品质。</p><p>但是，如何开始新梦呢？卡内基先生“忘”了没说，而这恰恰是期望能否顺利冲到最后一站的关键，更是开始下一个新梦的关键。其实，答案很简单，那就是从一开始你就要千方百计地掌握优势。我的经验告诉我，有三种策略能让我拥有优势。</p><p>第一个策略：一开始就要下决心，关注竞争状况和竞争者的资源。这点表示我要注意自己和别人都拥有什么，也表示要了解降低机会的基本面。从事新事业时，在了解整个状况之前，不应该采取初步行动，成功的第一步是了解达成目的所需要的资源在哪里，数量有多少。</p><p>从一开始，我就设法预测会出现什么机会，当它出现的时候，我会像狮子一样扑向它。而且我还知道，最好是好的敌人。很多人总喜欢追求最好的东西，而放弃好的东西。这样做不是聪明的策略，因为好总是胜过不好。而现实是，理想的机会很少送上门，却常常有很多不尽理想，但还算好的机会虽有不足之处，却绝对远胜过完全没有机会。</p><p>第二个策略：研究和检讨对手的情况，然后善用这种知识，来形成自己的优势。了解对手的优点、弱点、做事的风格和性格特点，总能让我在竞争中拥有优势。当然，我也要知道自己是谁。我用这个策略就曾经让那个“尾声只是开始”的发明者卡内基先生甘拜下风。</p><p>卡内基先生是当之无愧的钢铁巨人，挑战他就如同挑战死亡。但是他的弱点却能帮上对手的大忙，他固执己见，也许他钱包太鼓了，他总喜欢俯视、低估别人。他不把我放在眼里，愚蠢地认为石油行业才是我的舞台，而且他固执地认为只有愚蠢的人才会去干采矿那一行，因为他认为矿石的价格太过低廉，而且矿石取之不尽。</p><p>所以，当我投资采矿业时，他几乎逢人就不忘讥讽我，说我对钢铁业一窍不通，是全美最失败的投资者。事实上，卡内基是个只能看到山腰却望不到山顶的人，他不知道价格是没有什么神圣的，重要的东西是价值，如果不能控制采矿业，他那些引以为豪的炼钢厂就只能移为一堆废铁。</p><p>在别人不把你高看为对手的时候，就是你为未来竞争赚得最大资本的时候，所以，从一开始，我便放心大胆地全面投资。冲动胜过慎重，很快这个高傲的铁匠就发现，那个“以最差投资者而闻名于世的人”控制了铁矿业，成为了全美最大的铁矿石生产商，一举取得了支配地位，要与他分庭抗礼，他坐不住了，只能低声下气地向我求和。</p><p>在竞争中，首先发现对方弱点并狠命一击的人，常常是胜者。</p><p>第三个策略：你必须拥有正确的心态。从一开始，你必须下定决心，追求胜利，这表示你必须在道德的限制下，表现得积极无情，因为这种态度直接来自残忍无情的目标。</p><p>既然决心追求胜利，就必须全力以赴。也只有全力以赴才有辉煌的成就。在竞争开始时更应如此。说得好听一点，这是努力取得早期的优势，希望建立独占的地位，说得难听一点，付出努力等于让别人减少一个机会。而与此同时，我们还要积极面勇猛，要有吞下鲸鱼的胆量。我相信，天才的竞争者总是由勇士来承担，这是千古不易的规律。</p><p>在《新约》哥林多前书里，使徒保罗说：“如今常在的，有信、有望、有爱，这三样其中最大的是爱。”在每一个新梦的初期，最重要的是追求胜利的决心。没有追求胜利的态度，关注竞争状况和了解对手没有什么作用。获得知识、保持控制力、评价竞争状况，正是让你建立信心，协助你达成追求胜利最高目标的东西。</p><p>看看那些失败的人，你就会发现，大多数人会失败，不是因为犯错，而是因为没有全心投入，企业也是一样。</p><p>约翰，别忘了卡内基先生那句即将广为传诵的名言，“尾声只是开始”，当然，还有我那三个策略。</p><p>哦，我不是在营救一个不需要营救的谋略家吧。</p><p>爱你的父亲</p><h2><span id="第三十封不要让小人拖你的后腿">第三十封：不要让小人拖你的后腿</span></h2><p>格言：明智的人绝不会为命运坐下来哀号。 </p><p>　说你办不到的人，都是无法成功的人。 </p><p>　你付不起贪小失大所累积的种种额外负担。 </p><p>(let me embrace thee， sour adversity， for wise men say it’s the wisest course.) </p><p>may 11， 1902 </p><p>亲爱的约翰： </p><p>我想你已经觉察到了，你的某些思想和观念正在发生着变化，因为你的那些朋友。我当然不反对你扩大社交圈，它可以增加你的生活情趣，扩展你的生活领域，甚或帮你找到知己或帮你实现人生理想的人。但有些人显然不值得你与他交往，比如，那些拘泥于卑微、琐碎的人。 </p><p>从我年轻的时候开始，我就拒绝同两种人交往。 </p><p>第一种人是那些完全投降、安于现状的人。他们深信自己条件不足，认为创造成就只是幸运儿的专利，他们没有这个福气。这种人愿守着一个很有保障却很平凡的职位，年复一年浑浑噩噩。他们也知道自己需要一份更有挑战性的工作，这样才能继续发展与成长，但就因为有无数的阻力，使他们深信自己不适合做大事。 </p><p>明智的人绝不会为命运坐下来哀号。但这种人只会哀叹命运不济，却从不欣赏自己，把自己看成是更有份量、更有价值的人，他们失去了使自己全力以赴的感觉，和自我鼓励的功能，反让消极占据了自己的内心。 </p><p>第二种人是不能将挑战进行到底的人。他们曾经非常向往成就大事，也曾替自己的工作大做准备，制订计划。但是过去几十年或十几年后，随着工作阻力的慢慢增加，为更上层楼需要艰苦努力的时候，他们就会觉得这样下去实在不值得，因而放弃努力，变得自暴自弃。 </p><p>他们会自我解嘲：“我们比一般人赚得多，生活也比一般人要好，干嘛不知足，还要冒险呢？”其实这种人已经有了恐惧感，他们害怕失败，害怕大家不认同，害怕发生意外，害怕失去已有的东西。他们并不满足，却已经投降。这种人有些很有才干，却因不敢重新冒险，才愿意平平淡淡地度过一生。 </p><p>这两种人身上有着共同的思想毒素，极易感染他人的思想毒素，那就是消极。 </p><p>我一直以为，一个人的个性与野心，目前的身分与地位，同与什么人交往有关。经常跟消极的人来往，他自己也会变得消极；跟小人物交往过密，就会产生许多卑微的习惯。反过来说，经常受到大人物的熏陶，自会提高自己的思想水准；经常接触那些雄心万丈的成功人士，也会使他养成迈向成功所需要的野心与行动。 </p><p>我喜欢同那些永远也不屈服的人做朋友。有个聪明人说得好：我要挑战令人厌恶的逆境，因为智者告诉我，那是通往成功最明智的方向。只是这种人少之又少。 </p><p>这种人绝不让悲观来左右一切，绝不屈从各种阻力，更不相信自己只能浑浑噩噩虚度一生。他们活着的目的就是获得成就。这种人都很乐观，因为他们一定要完成自己的心愿。这种人很容易成为各个领域的佼佼者。他们能真正的享受人生，也真正了解生命的可贵与价值。他们都盼望每一个新的日子，以及跟别人之间的新接触，因为他们把这些看成是丰富人生的历练，因此热烈地接受。 </p><p>我相信人人都希望列入其中，因为只有这些人才能成功，也只有这些人才真正做事，并且能得到他们期盼的结果。 </p><p>不幸的是，消极的人随处可见，也使很多很多的人无法逃脱消极之墙的围困。 </p><p>在我们的周围的人并非人人相同，有些消极保守，有些则积极进取。与我曾共事的人，有些人想混口饭吃，有些则胸怀大志，野心勃勃，想要有更好的表现，他们也了解，在成为大人物前，必须先做个好的追随者。 </p><p>要有所成就就要避免落入各式各样的陷阱或圈套。在任何一个地方都有人自知不行，却硬要挡住你上进的路，阻止你更上层楼。有许多人因为力争上游，而被人嘲笑甚至被恐吓。还有些人非常嫉妒，看到你努力上进，力求表现，会想尽办法来作弄你，要你难堪。 </p><p>我们不能阻止他人成为那些无聊的消极分子，却可以不被那些消极人士影响，降低我们的思想水准。你要让他们自然溜过，就像水鸭背后的水一样自然滑过。时时跟随思想积极前进的人，跟着他们一起成长、一起进步。 </p><p>你确实能够做到这一点，只要你的思想正常，一定可以办到，而且你最好要这样做。 </p><p>有些消极的人心肠很好，另外还有一些消极的人，自己不知上进，还起想把别人也拖下水，他们自己没有什么作为，所以想使别人也一事无成。记住，约翰，说你办不到的人，都是无法成功的人，亦即他个人的成就，顶多普普通通而已。因此这种人的意见，对你有害无益。 </p><p>你要多加防范那些说你办不到的人，只能把他们的警告看成证明你一定办得到的挑战。你还要特别防范消极的人破坏你迈向成功的计划，这种人随处可见，他们似乎专门破坏别人的进步与努力。千万要小心，要多多注意那些消极的人，千万不要让他们破坏你的成功计划。不要让那些思想消极、度量狭窄的人妨碍你的进步。那些幸灾乐祸、喜欢嫉妒的人都想看你摔跤，不要给他们机会。 </p><p>当你有任何困难时，明智的做法是找第一流的人物来帮你。如果向一个失败者请教，就跟请求庸医治疗绝症一样可笑。你的前途很重要，千万不要从长舌妇那里征求意见，因为这种人一辈子都没有出息。 </p><p>你要重视你的环境。就像食物供应身体一样，精神活动也会滋润你的心理健康。要使你的环境为你的工作服务，而不是拖累你。不要让那些阻力，亦即专门扯你后腿的人使你萎靡不振。让环境帮助你成功的方法是：多接近积极成功的人，少同消极的人来往。 </p><p>每一件事情都要做得尽善尽美。你付不起贪小失大所累积的种种额外负担。 </p><p>爱你的父亲</p><h2><span id="第三十一封做目的主义者">第三十一封：做目的主义者</span></h2><p>格言：忠诚是甘心效命的开始。</p><p>　到达地狱的路，是由善意铺成的。</p><p>　目的是我领导的依据，目的就是一切。</p><p>（a human can alter his life by altering his attitude， and if you think you can do it ，you’re right.）</p><p>may 11， 1902</p><p>亲爱的约翰：</p><p>你能走向标准石油的核心，是你的荣耀，也是我的荣耀。然而，你需要知道，当你在享受这个荣耀的时候，无疑的，你也要肩负起与之相伴的责任。否则，你就将有愧于这个荣耀，更会辜负众人对你的希望和信任。别忘了，你是标准石油公司的中坚，我们事业的最终成败，已与你息息相关，你当以更高的力量与牺牲标准来要求自己。</p><p>坦率地说，你要想在那个位置上干得出色，让大家认同你、敬佩你，你需要学习的东西还很多。现在，你需要思考一个问题：你自己是否能成功掌握这个角色。</p><p>每一位领导都是一位希望大使，是带领部属安度眼前无法避免的荆棘道路上的向导。但不被辜负却很难。作为领导者，无论是谁，都会面临诸多难题，譬如，堆积如山的工作，排山倒海般滚滚而来资讯，突然发生的变故，最高管理层、投资人和客户无止境的要求，难以调教的雇员，始终在变动的挑战，能让你疲于奔命，感到挫折、恐惧、焦虑和不知所措，以致破灭你要取得商业成就与个人成就的梦想。</p><p>但是，有时成为一个充满信心与活力的卓越领导者，比成为一个活力尽失、在挣扎无助中度日的领导者更容易，前提是他需要知道如何让部属甘心卖命。注意，是甘心，而不是被追。</p><p>作为标准石油公司的领袖，我既享有权威又享有愉悦，因为我知道，找到可以保证完成任务的人，就等于为我创造了时间，换句话说，这不仅会让我精力充沛，更重要的是，它会让我有更多的时间去思考怎么能为公司赚更多的钱。</p><p>这里面有一个态度问题，行动受态度驱使，我们选择什么样的态度，也就决定了我们要采取什么样的行为，至于结果，则很快就能见分晓。人可以经由改变自己的态度改变自己的人生，如果你相信能够改变态度，你就能够改变。</p><p>聪明人总会选择对自己最有利的态度。懂得领导艺术的人，总会自问：怎样的态度才能帮自己达到真正想要的结果？是鼓舞激励的态度？还是抱持同情的态度？他们永远不会选择冷淡或敌意的态度。</p><p>如果你把自己视为高高在上、一言九鼎的专制君主，你很可能会成为下一个法王路易十六。就我而言，我从不专横跋扈、制造冲突，或者给予自身过大压力，反倒有给予部属信任、鼓舞士气、达成我所期望的商业成就的习惯，这个习惯会帮助我实现活用部属的目的。要做到这一点，方法很简单，那就是要知道如何运用设定目的的力量。</p><p>我是一个目的主义者，我从不像有些人那样夸大目标的作用，却异常重视目的的功能。在我看来，目的是驱动我们潜能的关键，是主导一切的力量，它可以影响我们的行为，激励我们制造达到目的的手段。明确、果断的目的，更会让我们专注于所选择的方向，并尽力达成目标。</p><p>我的经验告诉我，一个人所达成的任务，以及他最终的表现，与他的目的的本质与力量息息相关，而与他为了目标所做的事情几乎无关。想想看，没有一杆完成的高尔夫比赛，你需要一洞一洞打过去，你每打出一杆的目的就是离球洞越近越好，直到把它打进。</p><p>目的是我领导的依据，目的就是一切。我习惯于在做任何事情之前先确立目的，而且每天我都要设定目的，无数的目的，譬如与合伙人谈话的目的，召**议的目的，制定计划的目的，等等。我在做事之前也会先检视自己设定的目的。通常在我到达公司时，我已经成功做好了万全的准备。所以，在我心里从未出现过诸如“我没有办法”、“我不管了”、“没有希望了”等具有吞噬性的声音。每一天确立的目的，已经抵消了这些失败的力量。</p><p>如果你无法主动确立自己的目的，你就会被动或不自觉地选择其他目的，结果很可能会让你失去掌控全局的能力，同时你也将受制于使你分心或搅乱你的人或事件。</p><p>这就像将一艘游艇自码头松开绳索，支忘记了启动马达一样。你将随波逐流，海风、水流或其他船只随时都会让你葬身海底。也许对岸有好事等着你，但是除非奇迹出现，否则你无法顺利到达对岸。确立目的就如同开启游艇的引擎，能驱动你朝向所选择的道路前进。目的可为人类的努力增添方向与力量。</p><p>但是，确立目的只是走到了成为目的主义者的中途，你还要走另一半路程，你需要毫无保留地向你的部属陈述你的目的——你个人的企图、动机与内心的战略计划。对于每一位需要了解我所要达成目的的人，我会向他们说明我的目的。在每次会谈、会议、报告中或事情开始阶段，我都会先表达出我的动机、想法、以及期望。</p><p>这样做的好处会让你感到惊讶。它不仅能使部属清楚你的目的，知晓正确的前进方向，最重要的是，当你勇于将目的开诚布公之后，你将收获情感上的忠诚。要知道忠诚是甘心效命的开始。</p><p>杰出的领导者都善于动用两种无形的力量：信任和尊重。当你诚实地说出你的目的时，你也传递了这样的信息：“因为我对你有足够的信任，所以我愿意向你表白。”它将开启让人信任你的大门，而在大门外，你拥抱的不仅是部属的能力，还有来自他们无价的忠诚——要凝聚力量来帮助你的忠诚。信赖别人并使别人也信赖我，是我一生取得成就的重要原因。</p><p>公开你的目的，更能避免无益的推论。如果你不告诉部属你的目的，你们就会花时间猜想臆测你的目的，根据所能搜集到的蛛丝马迹进行推测，而这些信息都很容易受到扭曲。只有不需要解读你的动机时，部属的士气与能力才有机会获得提升。所以，把部属当成“傻瓜”似乎更有利。</p><p>目的表明的力量是无可取代的，它所传达出的不仅是一项声明，同时也是领导者对于个人行为勇敢坚决的誓言。出自坚决意志与绝对韧性的目的，往往能够激励、鼓舞部属，使他们在以后的工作中能有更杰出的表现。</p><p>领导者的天职是发现问题，而解决问题要依靠部属，如何把部属调动起来，完成他们的职责是领导者第一考虑的要事。我认为，亮出你的目的，热情地对待每个人，就能实现你所要的。</p><p>目的就如同钻石：如果要它有价值，它必须是真实的。不诚恳的目的表白只会坏事。如果一个人滥用目的的力量，他只会破坏彼此间的信任，并失去别人的信赖。这就是表达目的的风险。</p><p>约翰，到达地狱的路，是由善意铺成的。除非你已做好万全的准备，否则这句话很可能成真。</p><p>爱你的父亲</p><h2><span id="第三十二封拒绝责难拒绝推委">第三十二封：拒绝责难，拒绝推委</span></h2><p>格言：责难是摧毁领导力的头号敌人。 </p><p>　自责是一种最阴险狡猾的责难陷阱。 </p><p>　自己越强大，别人的影响力就会越小。 </p><p>(action springs not from thought， but from a readiness for responsibility.) </p><p>july 24， 1910 </p><p>亲爱的约翰： </p><p>如果我说一直不甘示弱、总以为自己是世界第一富豪的安德鲁·卡内基先生来拜访我，并向我讨教了一个非常严肃的问题，你会不会感到惊讶？事实上，那位伟大的铁匠就是这么做的。 </p><p>两天前，卡内基先生来到我们的基奎特。或许是我笑容可掬的态度，和我们轻松的谈话气氛，熔化了卡内基先生钢铁般的自尊，让他放下架子问我： </p><p>“约翰，我知道，你领导着一群很能干的人。不过，我不认为他们的才干不可匹敌，但令我疑惑的是，他们似乎无坚不摧，总能轻松击败你们的竞争对手。我想知道，你施了什么魔法让他们有那种精神的，难道是金钱的力量？” </p><p>我告诉他，金钱的力量当然不可低估，但责任的力量更是巨大。有时，行动并非源于想法，而是源自揽起责任。标准石油公司的人都有负责精神，都知道“我的责任是什么？我做什么可以把事情做得更好？”但我从不高谈阔论责任或义务，我只是通过我的领导方式来创造具有责任感的企业。 </p><p>我以为这个话题到此就应该结束了，但我的回答显然挑动了卡内基先生的好奇心，他很认真地追问我：“约翰，那你能告诉我你是怎么干的吗？” </p><p>看着卡内基先生谦逊的神态，我无法拒绝，我必须如实相告。我告诉他，如果我们想要永续生存，那么我们的领导方式就意味着断然拒绝为了任何理由，去责难任何一个人或任何一件事。责难就如同一片沼泽，一旦失足跌落进去，你便失去了立足点和前进的方向，你会变得动弹不得，陷入憎恨和挫折的困境之中。结果只有一个：失去手下的尊重与支持。一旦落到这步田地，那你就好比是一个将王冠拱手让给他人的国王，无法再主宰一切。 </p><p>我知道责难是摧毁领导力的头号敌人，我还知道在这个世界上没有常胜将军，不管是谁都将遭遇挫折和失败。所以，当问题出现时，我不会感到愤恨不满，我只是在想：怎么能让情势好转起来？采取什么行动可以补救或是修复我们的失误？积极地选择朝向更高的生产力和满意度前进。 </p><p>当然，我不会放过我自己。当坏事降临在我们身上时，我会先停下来问自己一个问题：“我的职责是什么？”回归原点，借着对自身角色进行完全坦诚的评估，可以避免空窥探他人做了什么，或是要求其他人改变什么，等等无意义的行为。事实上，只有将焦点专注在自己身上，我才能将无意中拱手让出的王冠重新收回。 </p><p>但是，分析“我的职责是什么”并不意味着自责。自责是一种最阴险狡猾的责难陷阱，诸如“那真是一个愚蠢的错误！”等自我责难，只会使我陷入与其他任何责难相同的忿恨与不满的圈套之中。事实上，“我的职责是什么”是一种具有强大分析力和自我肯定的步骤，当我知道，真正的问题不是他们应该要做什么，而是我应该要做什么时，我不会自怨自艾，而只会让自己更强大。自己越强大，别人的影响力就会越小，看来这不是件坏事。 </p><p>如果我能将每一个阻碍视为了解自己的一个机会，而非斤斤计较他人对我做了什么，那么我就能在领导危机的高墙外找到出路。 </p><p>当然，我从不把自己视为救世主，也没有救世主的心态。我自问：我在哪些方面应为自己负责？也自问：在哪些方面，部属们要为我负责？领导者的工作不是全知全能、全权负责。如果我视自己为英勇的正义使者，准备去拯救这个世界，那就只会让自己陷入领导危机之中。我的责任中，很大一部分是让其他人也为自己该负的责任负责。如果一个雇员对于事关自己切身利益的事情都不在乎的话，我不相信这样的雇员能对出色完成工作有强烈的渴望，那他就应该离开，为别人去服务了。 </p><p>感觉责任在肩的那种压力能让人不自觉的兴奋起来。没有一件事像个人的责任感一样，可以激发并强化做事的能力，而将重责大任托付部属，并让他了解我对他充分信任，无疑是对他最大的帮助。所以，我不会将部属必须并且能够负担的责任揽在自己身上。 </p><p>我不只光靠示范作用来营造公司负责的氛围与风气，我的部属都知道我的基本原则：在标准石油公司没有责难、没有藉口！这是我坚持的理念，每一个人都知道。我不会因为他们犯错而惩罚他们，但是我决不能容忍不负责任的行为存在。我们的信念就是要彻底奉行。我们的箴言是支持、鼓励和尊重将被全心接受与加倍颂扬。只会找藉口而不提供解决方式，在标准石油公司是无法容忍的。 </p><p>我们很少犯任何错误，因为我的大门随时为部属敞开着，他们可以提出高见，或是纯粹的发牢骚，但是要用一个负责任的方式。这样的结果会让我们彼此信任，因为我们了解所有的事都需要摊在阳光下来讨论。 </p><p>卡内基先生是位优秀的老学生，他没有让我浪费时间，他在我结束这个话题时说：“在抱怨声中，优秀的雇员也会变成乌合之众！”他真聪明。 </p><p>约翰，几乎所有的人都有推委真正责任的防御心理，以致推委责任的现象处处可见。但它贻害无穷。避免防御的方法就是开始倾听。 </p><p>领导者最大的挑战在于，要如何创造出一个能让人们觉得开诚布公会比隐藏实情来得舒适的环境。主动邀请其他人陈述他们的想法，用一些诸如“再多说一点”，或是“我真的想听听你的意见”的话语来鼓励他们说出自己的想法。和一般人所相信的刚好相反，在对话中，聆听者才是拥有权力的人，而非陈述者。 </p><p>难以置信吧？想想看，陈述者的语调、焦点还有内容，事实上都取决于你倾听的方式。试想，和一个面露敌意且肢体呈现侵略性姿态的人，以及一个对你表示全神贯注的人说话时，两者之间的差异。当你单纯地聆听其他人说话时，你卸下了你的防卫。你会得到这些好处：你对有攻击性或愤怒的语言的背后隐含的议题，会有着更透彻的了解。你可以得到更多的信息，而这些资讯可以改变你对整个事件来龙去脉的假设。你会有更多的时间来整理思绪。 </p><p>陈述者会感觉你重视他们的观点。最令人兴奋的是，当你专注地倾听之后，原来的陈述者也会更愿意聆听你的意见。 </p><p>真实的倾听是不具任何防御性的。即使你不喜欢这个信息，你也应该倾听了解，而非立即做出回应。专注地倾听不太像是一种技巧，它比较像是一种态度。滑雪的人在遭遇障碍时的每一秒钟，都投注百分之百的注意力，绝对不会分神去思考过一会儿他要对伙伴说什么。同样地，作为一名积极的倾听者，你贡献百分之百的注意力给另外一个人，不会出现想到什么就脱口而出的情况。如此一来，你去除了先入为主的观念，并敞开胸襟开创一段更有意义和更有效果的对话。 </p><p>长久以来，我们塑造了生活也塑造了自己。这个过程将会持续下去，我们最终都将为自己的选择负责。就如“目的”决定你的方向，拒绝责难将筑出一条实现目标的大道。 </p><p>爱你的父亲</p><h2><span id="第三十三封善用每个人的智慧">第三十三封：善用每个人的智慧</span></h2><p>格言：不以自己的好恶为选拔人才的标准。</p><p>忠于自己将使自己赢得人生中最伟大的一场战役。</p><p>最能创造价值的人就是那彻底投身于自己最喜欢的活动的人。</p><p>（the most perfect human being is the one who most thoroughly addresses himself to the activity of his best powers.)</p><p>november17， 1912　</p><p>亲爱的约翰：</p><p>你的来信非常令我兴奋，因为你读懂了我总能助我成就事业的做事哲学：做你喜欢做的事，而其他的事，就交由喜欢做这件事的人去做。</p><p>对我来说，做喜爱的事是一项不容质疑的定论。它时刻都会提醒我，要领导手下出色完成任务，决不可依赖某些管理技巧，而是要采用一种更为宏观、更有效能的领导方式。</p><p>具体而言，就是不让手下拘泥在刻板、制式的工作职务上，而是想办法利用每个人的长处并诱发他们将热情倾注在工作之中，来成就出绝佳的生产力。这就是我的致胜之道。</p><p>我在读书时就记得这样一句话：“最完美的人就是那彻底投身于自己最擅长的活动的人。”后来，经我改造，将其变为我管理上的一个理念：最能创造价值的人就是那彻底投身于自己最喜欢的活动的人。</p><p>我说过，每个人都有忠于自己的天性，都渴望成为自己想要成为的人，而他们实现忠诚自己的方式就是做自己喜欢做的事，遗憾的是，很多管理者并不善待雇员忠于自己的诉求，结果事倍功半。</p><p>其实这很好理解，如果你不将时间投入到你喜爱的事情上，你就绝不可能感到自我满足；如果你得不到自我满足，你就将失去生活的热情；如果你失去生活的热情，你就将失去生活的动力。指望一个失去工作动力的人去出色完成工作任务，就像指望一个停摆的闹钟去准确报时一样，可笑之极。</p><p>所以，我时刻不忘给予手下忠于自己的机会——燃烧他们的热情，让他们的特别才干发挥到极致，而我自己从中收获的，恰恰是财富与成就。忠于自己就将使自己赢得人生中最伟大的一场战役，谁会放过这样的机会呢？</p><p>你要想成功利用手下的热情，你必须知道领导者的职责，不是要挖掘手下的弱点，而是要关注手下的优点与才干，并让这些优势充分发挥出来。我没有挑部属最脆弱的特质的习惯，却总要找寻他们最坚强的部分，让他们的才干充分展现在工作的挑战与需求上。例如，我重用阿奇博尔德先生。</p><p>与有些人不同，我不以自己的好恶为先选拔人才的标准，我用人并不会看他身上贴着什么标牌，我看中的是他在工作中展示出来的能力。我喜欢自己的喜好，但更喜欢效率。</p><p>阿奇博尔德绝非完美的人，他嗜酒如命，而我却是个禁酒主义者。但是，阿奇博尔德却有着非凡的领导才华和天赋，他头脑机敏、乐观幽默，而他出众的口才和大胆好斗的性格无疑更是在激烈竞争中获胜的保证，所以在由对手变为合伙人之后，我一直对他兴趣浓厚，我不断委他以重任，直至提拔他接替我的职务。</p><p>他已经证明了自己是一名天才的领导者，他的职业生涯是那样特殊。如果他没有不好习惯的影响，他的成绩将更加耀人。</p><p>我的目的是要在每位手下身上找出我所重视的价值，而不是那些我所不乐见的缺点。我找出每个员工值得重视和部分，并致力于将员工的优点转化成出色的才能，而不会试图修正他们的缺点。所以，我总是拥有健全能力、乐意奉献的部属。</p><p>约翰，没有人是无所不能的，现在你是一位管理者，你的成就依赖于你领导能力的发挥，依赖于你手下做事才能的发挥。你需要知道，你的手下可挑剔的地方不胜枚举，但是你要专注于发掘每个人潜在的优点，注意他们在每个细节上的杰出表现，以及他们为了将事情做得出色，而对完美主义近乎苛求的坚持。这是你领导力的优势所在。</p><p>一个人不能主宰一个集体。我不否认领导者的巨大作用，但就整体而言取胜靠的是集体。我所取得的任何荣誉所依靠的都是集体的力量，而绝非我个人。也只有众人都付出努力，才能相信并期待奇迹的出现。</p><p>祝你好运！我的儿子。</p><p>爱你的父亲</p><h2><span id="第三十四封永远做策略性思考">第三十四封：永远做策略性思考</span></h2><p>小,说-t-xt–天.堂<br>格言：我们要勇于在别无选择中，毅然杀出一条生路。 </p><p>　要找出完美想法的最佳途径，就得拥有许多想法。 </p><p>　单纯操弄手段的计划者只配给策略性的思考者提鞋。 </p><p>（become a possibility arian， always see them， for they’re always there.） </p><p>october 14， 1904 </p><p>亲爱的约翰： </p><p>汉密尔顿医生又发福了，看来高尔夫运动无法抑制他的腰围向外扩张，他只能借助其他运动方式来减少脂肪了。不幸的是，能防止他增重的运动还没被发明，他很痛苦。不过，他倒总能为我们带来快乐，用他脑子里各种稀奇古怪的故事。 </p><p>今天，汉密尔顿医生用一个渔夫与垂钓者的故事，又娱乐了我们。或许是看到我们各个捧腹大笑，医生显得很得意，他笑着关我：“洛克菲勒先生，您是想做渔夫哪，还是想做垂钓者？” </p><p>我告诉他，如果我做了垂钓者，或许我就没有资格同诸位打高尔夫了，因为我靠有效的行为策略来创造商业利益，而垂钓者的行为方式不能保证我成功。 </p><p>当然，没有一个垂钓者会愚蠢到只知丢下鱼饵而不事先思考、计划、决定：要钓哪种鱼，用什么样的饵料，需要将鱼线抛到哪里，而后才坐等大鱼上钩。就形式而言，他们没做错什么，但结果是否如愿却没人知道。 </p><p>也许花上一段时间他们会钓到鱼，也许他们一条鱼都钓不到，而那条他们理想中的鱼，也许永远不会上钩。因为他们太执着于自己的方式，尽管他们很清楚自己的目标，但他们的方式却限制了成功的可能——除了那条鱼线所及之处，他们捕鱼的范围等于零。但是，如果能像渔夫那样，张网捕鱼，就将扩大捕鱼范围，而丰富的鱼量会让他们有许多的选择机会，并最终捕获到他们想要的鱼。 </p><p>我告诉汉密尔顿先生和我的球友们，我不是刻板固执、按部就班、以简单方式来解决问题的垂钓者，我是能够创造多种选择、直至挑选出最能创造商业利益的鱼的渔夫。他们都笑了，说我泄露了赚钱的秘密。 </p><p>约翰，不论你做什么，要找出完美想法的最佳途径，就得拥有许多想法。在做出最完美的决定之前，我会致力于寻找具有创意与功效的各种可能性选择，考量多种可能性方案，并积极尝试各种选择，然后才将重点放在最好的选择上。 </p><p>这就是我总能捕到我想要的大鱼的原因。当然，在执行计划的过程中，我也会保持开放策略，顺应时势，不断地进行调整或修正我的计划；所以，即使计划进展并不顺利，我都不会惊慌失措，却总能沉着应对。 </p><p>很多人都认为我有着非凡的能力，是一位充满效率与行动能力的领导者。如果真是这样，我想你也可以获得这样的赞誉，只是你需要克制找寻简单、单向解决方案的冲动，乐于尝试能达成目标的各种可能性办法，拥有在困难面前付诸行动的耐心、勇气和胆略，以及不达目的决不收手的执着精神。 </p><p>单纯操弄手段的计划者只配给策略者提鞋。作为总裁，我只为部属设立清楚明确的方向或策略，但不会将自我局限于过分僵化的行动计划中。相反地，我会持续探索能够实现策略的各种可能性。 </p><p>许多人都坚持认为，成功的关键在于扎实的策略计划，而这项计划必须由具体、可衡量、可达成以及实际的行动目标作为后盾。我承认这样做很重要，但它有致命的缺陷。计划强调的是判断的标准与预设的成果，人们所采行的也是认为可达成目标的固定方法。由于这些方案依据的是预期能达成目标的已知方法，因此我们在开始行动之前，其实已经局限了范围。 </p><p>尽管在我们提笔拟定计划之际，该计划看起来似乎天衣无缝，但是局势在计划定稿之前情况可能已经转变了，也就是说，不仅市场的状况早已改变，客户改变，就连所能支持计划的资源也已改变。这也难怪这些成本高昂，又耗时费力的策略，仅有极少的部分能真正被执行。 </p><p>要如何因应这种状况呢？不论我们是为公司或是单一部门拟定计划，我们都必须确认自己所拟定的是策略，而非手段。策略的本质是弹性的、长远的、多面向的、大格局的。它们强调的是如何成长或扩大利润这类的成果，而不是某个可衡量的目标。同时策略所提供的是一个大方向，而非达到成功的惟一方式。 </p><p>要成为杰出的领导者，我们必须让自己成为一位策略性的思考者，而不仅是手段的设计者。我们还得避免将自己局限于既定的文件流程中，我们的座右铭将是专注，但是具有弹性空间。我们着重于探索的过程，在每一天的分分秒秒中，我们都能开创有助于达成长远目标的可能方向。 </p><p>我们不会固守三种、五种方式来达成远程目标，而是在无时无刻都能发掘获取利润的机会——不论是在与对手交谈，或与部属进行脑力激荡的会议中。 </p><p>为了远离危机风暴，我们必须不断地拟定新的策略，同时调整旧有的计划。在因应每天商业环境改变的同时，我们也必须依据情势的变化来修正长远的进程。这样在短期内我们不但能维持弹性的作风，同时从长期来看，我们对一个能符合最新经济环境的弹性理想目标，也有了清楚的概念。我们可将陈腐的策略计划束之高阁，并且精力充沛、满怀希望地在朝气蓬勃的环境中步调一致地向前迈进。 </p><p>要做一名希望主义者。无论情况看起来或是实际上有多糟糕，请擦亮眼睛找出其中蕴含的无限希望——永远不要放弃寻找，因为希望永远存在。 </p><p>我相信所有的领导者都负有提供希望的义务，而且不但要替自己，同时也要为雇员指引出一条康庄大道。回想一下生命中你感到最没有希望的那段时日，那很可能是因为你觉得自己已经走投无路，或者相信自己没有任何其他选择，你被困住、被放弃、找不到出路。 </p><p>克服绝望的方式只有一种，那就是持续创造出各种可能性以跨越障碍。简单地说，希望源自于相信有其他选择的存在。 </p><p>杰出的领导者具备能够应付特定商业状况的腹案、创造新市场的机动计划、因应危机的锦囊妙计，以及为自己与员工发展事业的蓝图。当局势似乎跌到谷底而无可挽回时，他们就像骁勇善战的摔跤手一样，即使被对手压制在地难以脱身，他们也永远不会放弃能够翻身的任何机会。 </p><p>凭借着他们的才能、灵活的身段，以及随机应变的智慧，他们巧妙地找到空隙并逃脱险境。他们在别无选择的劣势下，硬是杀出一条生路。 </p><p>如果能在一开始就勇于发挥创意，就能够避免无止境的疲于奔命、挫折与痛苦。 </p><p>事情看来已到了绝望的地步时，如果我们依然抱持着无穷的希望，我们就能超越我自己所设定的界线，且能提供给部属新的选择。所以，我们要勇于在别无选择中，毅然杀出一条生路 </p><p>爱你的父亲</p><h2><span id="第三十五封将部属放在第一位">第三十五封：将部属放在第一位</span></h2><p>格言：始终把为我卖命的雇员摆在第一位。</p><p>　一味索求而不愿付出，终会面临耗竭的一天。</p><p>　给予人们应得的尊重，他们就能将潜能彻底发挥。</p><p>（everyone has an invisible sign hanging from his neck saying:make me feel important!）</p><p>september 19， 1925</p><p>亲爱的约翰：</p><p>想像一下这样的场面：一位交响乐团的指挥，准备让买票进场的观众欣赏一场高水准的演出，但是他却转身去面向观众，留下音乐家们独自奋战、辛苦演奏，结果会怎么样？</p><p>是的！这注定是一场最糟糕的音乐会。因为指挥没把音乐家放在眼里，后者就会用消极怠惰来“感谢”他，并搞砸一切。</p><p>每个雇主就像是一位乐团的指挥，他做梦都想激励、调动起所有雇员的力量，使之尽可能多地做出贡献，帮助他演奏出赚钱的华丽乐章，让他赚到更多、更多的钱。然而，对许多雇主而言，这注定是一场难以实现的梦，因为他们就像那位愚蠢的指挥，忘了善待雇员，以致轻松地关闭了雇员们情愿付出的大门。</p><p>同他们一样，我期望所有的雇员都能像忠实的仆人那样，全心全意为我做出更多的贡献，但是，我比他们聪明许多，我非但不会无视雇员的存在，反会认真看待他们，准确地说，在我的脑子里始终把为我卖命的雇员摆在第一位。</p><p>真心而言，我没有理由不善待那些用双手让我钱袋儿鼓起来的雇员，我没有理由不去感激他们为我做出的努力与牺牲，更何况我们这个世界本该就应充满温情。</p><p>我爱我的雇员，我从不高声斥责、侮辱谩骂他们，也不会像某些富人那样在他们面前盛气凌人、不可一世，我给予雇员的是温情、平等与宽容。所有这些合成一个词就叫尊重。尊重别人是满足我们道德感的需要，但我发现它还是激发雇员努力工作的有效工具，标准石油公司的每个雇员都为公司竭尽全力工作的事实让我坚信：给予人们应得的尊重，他们就能将潜能彻底发挥。</p><p>人性最基本的一面，就是渴望获得慷慨。我本人勤俭自持，却从没忘了要慷慨相助他人。记得那次经济大萧条时，我曾数次借债来帮助那些走投无路的朋友，让他们的工厂和家人平安度过了危机。而在我的记忆中我从无催债和逼债的记录，因为我知道心地宽容的价值。</p><p>至于对雇员，我同样慷慨、体恤，我不但发给他们比任何一家石油公司都要高的薪金，还让他们享受保证他们老有所终的退休金制度，我还给予他们每年约见老板要求为自己加薪的机会。我不否认付出慷慨的功利作用，但我更知道我的慷慨将换来雇员生活水准的提升，而这恰恰是我的职责之一，我希望每一个为我做事的人都因我而富有。</p><p>雇主就是雇员的守护神，雇员的问题就是我的问题，我握有选择权，我可以选择忽略他们的需求，也可以选择满足他们的需求，但我喜欢选择后者。我总试图了解雇员需要什么，接着就想办法满足他们的需求。我不断询问他们两个问题：“你需要什么？”和“我可以帮上什么忙？”我随时都在旁边关心他们。对我来说，这个职务最大的乐趣之一，就是我能对雇员提供一臂之力。</p><p>薪水和奖金相当诱人，然而对一些人来说，金钱并不能引发他们效命的动机，但给予重视却能达到这个目的。在我看来，每个人都渴望被认为有价值、受到重视、赢得他人的尊重，每个人的脖子上都挂着一幅无形的标志，上头写着：重视我！</p><p>我无法想像一个人在工作或在家庭中不被重视的痛苦，我的目的是要让每个人在工作时都能如沐春风。所以，我就像个要侦查出破案线索的侦探，不停地搜索每个雇员对他自己感到自豪的才能。当我了解他们认为自己最值得重视的才能后，我就会给予他们重任。一个善于激励雇员做出最大贡献的雇主，时刻不应忘记提，要让雇员看到追随或效忠你是有希望和前途的，而给予重视、委以重任其实也是能让雇员有动机在工作上打拼的关键。</p><p>做和善、温暖、体贴的雇主，可以使雇员精力充沛，士气高昂。但对雇员时常表示谢意，似乎也很有作用。没有一位雇员会记得五年前得到的奖金，但是有许多人对雇主的溢美之词，会永远铭记在心，我会不吝表达心中的感激之情。没有一件事的影响力，比及时而直接的感谢来得更为深远。</p><p>我喜欢在部属桌上留一张便条纸，上头写着我的感谢词。对于我花一两分钟信手写来的感激之语，可能早已不复记忆。但是我的感激之意却会产生鼓舞人心的影响，经过多少年后，他们还都能记得我这个慈爱的领导者留给他们的温暖鼓励，并视其为一个珍贵的箴言。这就是一则简单的感谢声明，能够展现强大力量的另一个明证。</p><p>我绝对会认真看待我的部属，以及他们在工作或个人方面的问题。我了解每个人能付出的毕竟有限，因此当我尽力为部属解决问题的同时，相对地，他们就可以做出更多的贡献。</p><p>约翰，现在你已经是位领导者，你的成就来自于你的能力，也来自于雇员们能力的发挥，我相信你该知道怎么做。</p><p>爱你的父亲</p><h2><span id="第三十六封财富是种责任">第三十六封：财富是种责任</span></h2><p>格言：巨大的财富也是巨大的责任。 </p><p>　只有傻瓜才会因为有钱而自命不凡。 </p><p>　绝不能经任何有私心的人一点点好处。 </p><p>（with a good conscience our only sure reward， in hour of maximum danger， we do not shrink from this responsibility， we welcome it.） </p><p>november20， 1907 </p><p>亲爱的约翰： </p><p>非常高兴，一场险些酿成国难的金融危机终于过去了！ </p><p>现在，我想我们那位合众国总统西奥多·罗斯福先生，可以到路易斯安纳继续心安理得地打猎了，尽管他在这场危机中表现得令人吃惊的无能。当然，总统先生并非什么都没有做，他用“担忧”支持了华尔街。上帝呀！我们纳税人真是瞎了眼，竟然把这么一位纽约混混儿送进了白宫。 </p><p>坦率地说，一提到西奥多·罗斯福的名字，和他对标准石油公司所做的一切，就令我愤慨。他是我见到的最狭隘、最富有报复心的小人。是的，这个小人得逞了，用他手中的大权，成为了由他自己策动的一场不公平竞赛的胜者，让联邦法院开出了那张美国历史上前所未有的巨额罚单，并下令解散我们的公司。看看这个卑鄙的人都对我们做了什么！ </p><p>然而，我相信，他所谓的惩戒终归不会得逞，反倒会使他感到大为懊丧，因为我相信我们所有的公司不是垃圾我们有杰出的管理队伍、有充足的资金，我们可以抵御任何风险与打击，我们的财富将因它们健康的肌体滚滚而来。等着瞧吧！我们会有暗自窃喜的时候。 </p><p>但是，我们的确受到了伤害，受到了极不公正的对待。西奥多指责我们是拥有巨富的恶人，那位法官大人侮辱我们是臭名昭著的窃贼，好像我们的财富是密谋掠夺来的。错！那些愚蠢的家伙毫不知悉大企业是如何建立起来的，他也不想知道。我们每一分钱都渗透着我们的智慧，我们每前进一步都付出了承重的汗水，我们事业大厦的基石由我们生命奠基。但他们不想听，却要像偏执狂一样，只相信他们自己低能的判断，带有侮辱性的贬低我们的经商才能，更无视是我们用最廉价、最优质的煤油照亮了美国的事实。 </p><p>我知道，西奥多手中的长剑一定将挥舞到大有斩获为止，因为他拒绝了我们和解的建议。但我无所畏惧，因为我问心无愧，而最坏的结果只不过是他用他手中的强权拆散我们辉煌而快乐的大家庭而已，但快乐不会停止，辉煌也不会落地。建立在现实基础上的未来将证明这一切。 </p><p>毫无疑问，我们正在经受着前所未有的迫害，来自罗斯福政府的迫害。但是，我们不能感情用事，不能用愤怒压制良知，当危机来临时我们永远不能袖的旁观，那会让我们感到耻辱和良心不安，我们应该挺身而出。因为我们是合众国的公民，我们有使国家和同胞免于灾难的职责。而作为富人，我知道，巨大的财富也是巨大的责任，我肩负着造福人类的使命。 </p><p>这次金融危机席卷华尔街，处于恐慌之中的存款人排起长队要从银行取走存款，出现挤兑，一场将导致美国经济再次进入大萧条的危机来临的时候，我预感到国家已陷入双重危机：政府缺乏资金，民众缺乏信心。此时此刻，“钱袋先生”必须要为此做些什么，我打电话给斯通先生，请美联社引用我的话，告诉美国民众：我们的国家从不缺少信用，金融界的有识之士更以信用为生命，如果有必要，我情愿拿出一半的证券来帮助国家维持信用。请相信我，金融地震不会发生。 </p><p>感谢上帝，危机已经过去，华尔街已经走出困境。 </p><p>而我为这一刻的到来，做了我该做事情，就像《华尔街日报》评论的那样，“洛克菲勒先生用他和声音和巨额资金帮助了华尔街”。只是，有一点永远都不会让他们知道，在克服这次恐慌中，我是从自己钱袋里拿钱最多的人，这令我非常自豪。 </p><p>当然，华尔街能成功度过此次信用危机，摩根先生可谓功勋卓著，他是这场战争不折不扣的指挥官，他将一群商界名士聚集起来共同应对了危机，用他不可替代的金融才能和果决的个性拯救了华尔街。所以我说，美国人民应该感谢他，华尔街的人应该感谢他，西奥多·罗斯福更应该感谢他，因为摩根替他做了他本该做却因无能而没有做的事。 </p><p>如今，很多人，当然还有报纸，都对慷慨解囊的人们大加赞誉，但在我这里它一文不值。良心的平静才是惟一可靠的报酬，国难当头，我们本该当仁不让、勇于承担。我想那些真诚伸出援手的人们同我一样，我们只是想用自己的力量、信仰与忠诚照耀我们的祖国。 </p><p>但我并非没有可耻的记录。在四十六年前，当许许多多的美国青年听从祖国召唤，忠诚奔赴前线，为解放黑奴、维护联邦统一而战的时候，同样作为青年，我却以公司刚刚开业、我的家人要靠它活着为由，未去参战。 </p><p>这似乎是一个让人心安理得的理由，但那时国家需要我的，需要我们流血。这件事一直让我的良心不安，直到十几年前那场经济危机的到来，我才得有救赎的机会。当时，联邦政府无力保证黄金储备，华盛顿转而向摩根先生求助，但摩根无能为力，是我拿出巨资助政府一臂之力才平息了那场金融恐慌。这让我非常高兴，比赚多少钱都令我高兴。 </p><p>但我未将自己视为拯救者，更未自命不凡，只有傻瓜才会因为有钱而自命不凡，因为我是公民。我知道，我拥有巨大财富，我也因它而承担着巨大的公共责任，比拥有巨大财富更崇高的是，按照祖国的需要为祖国服务。 </p><p>约翰，我们是有钱，但在任何时候，我们都不该肆意花钱，我们的钱只用在给人类创造价值的地方，而绝不能给任何有私心的人一点点好处。当然，我们也绝不再给共和党人捐款助选，那个西奥多·罗斯福已经把我们害苦了。 </p><p>名誉和美德是心灵的装饰，如果没有她，即使肉体再美，也不应该认为美。 </p><p>爱你的父亲</p><h2><span id="第三十七封充实你的心灵">第三十七封：充实你的心灵</span></h2><p>格言：即使你要出卖心灵，也要卖给自己。</p><p>　让我们学会既聪明又谦逊，既谦逊又聪明。</p><p>　伟大的书籍就是伟大的智慧树，伟大的心灵之树。</p><p>（let us then learn a wise humility ， but at the same time a humble wisdom.）</p><p>august 1， 1914</p><p>亲爱的约翰：</p><p>就像我们身体上人食欲一样，我们也人精神上的食欲。但许多人却常以没有时间为借口，总在使他们的心灵忍饥挨饿，也只在意外或偶然的情况下才充实它一下，却总忘不了满足他们脖颈以下的消费。</p><p>也许我的看法有些悲观，我们正处于无限制满足脖颈以下却在忽视脖颈以上需求的时代。事实上，你经常听到有人说：漏吃一顿午餐是件大事，却听不到：你最后一次满足心灵饥渴是在什么时候的声音，难道我们每个人都是精神富足者吗？显然不是。</p><p>在我们这个世界上，精神饥渴的人随处可见，那些生活在沮丧、消极、失败、忧郁中的人，他们都迫切需要精神的滋养和灵感的召唤，但他们几乎全都排斥再充实他们的心灵，任由心灵黯淡无光。</p><p>如果空虚的头脑能像空虚的肚子一样，要填满一些东西就能让主人满足的话，那该有多好。可惜，没有这么便宜的事情，反要接受心灵空虚的惩罚。</p><p>心灵是我们每个人真正的家园，我们是好是坏都取决于她的抚育。因为进入这个家园的每一件东西都有一种效用，都会有所创造，为你的未来做准备，或者会有所毁灭，降低你未来可能的生命成就。例如积极。</p><p>每一个达到高峰或快达高峰的一流人物都是积极的，他们所以积极，是因为他们定期地以良好、清洁、有力、积极的精神思想充实心灵。就像食物成为身体的营养一般，他们不忘每天的精神粮食。他们知道如果能充实颈部以上的部分，就永远不愁填饱颈部以下的部分，甚至不必忧愁老年的财务问题。</p><p>一个人必须找到自己的家，才不至于去流浪或沦为乞丐。首要的，即使你要出卖心灵，也要卖给自己。我们要接纳自己。我们必须清楚，人是以上帝自己的心意创造的，其地位仅次于天使。上帝不会设下有关年龄、教育、性别、胖瘦、肤色、高矮或其他任何表面上的限制，上帝也没有时间创造没用的人，更不会忽略每个人。其次我们要有积极的态度。</p><p>两年前，卡尔·荣格先生与我不期而遇时，这位心理学家给我讲过一个故事：</p><p>有一个人被洪水困住了，他只得爬到屋顶上避难。邻居中有人漂浮过来说道：“约翰，这次大水真是可怕，难道不是吗？”</p><p>约翰回答道：“不，它并不怎么坏。”</p><p>邻居有点吃惊，就反驳说：“你怎么说不怎么坏？你的鸡舍已经被冲走了。”</p><p>约翰说：“是的，我知道，但是六个月以前我已经开始养鸭了，现在它们都在附近游泳。每一件事情都还好。”</p><p>“但是，约翰，这次的水毁了你的庄稼，”邻居坚持说。</p><p>约翰回答说：“不，并不。我种的庄稼因为缺水而受损，就在上周，还有人告诉我，我的土地需要更多的水，所以这下就解决了。”</p><p>那位悲观的邻居再次对满脸微笑的约翰说：“但是你看，约翰，大水还在上涨。就要涨到你的窗户上了。”</p><p>乐观的约翰笑得更开心了，说道：“我希望如此，这些窗户实在太脏，需要清洗一下。”</p><p>这听起来像个玩笑。但显然这是一种境界——决定以积极的态度来应对这个纷繁复杂、顺逆起伏的世界。一旦达成这种境界，即使遇到消极的情况，我们也能使心灵自动的做出积极的反应。为达到这种境界，我们只有充实、洁净我们的心灵。</p><p>每个人都能改变或被改变。荣格先生说，只要改变一个人的词汇，就能建立他的收入、他的享受，并改善他的生活，乃至改变他的人生。例如“恨”字，要把它从你的字汇中除去，不要想它，而是以写、感觉与梦想“爱”字来代替它。显然，移去与取代的文字，几乎是永无止境的，但心灵却会在移取中变得更加纯净、积极。</p><p>我们的心灵是以供应她的事物而行动。我相信，放进心灵中的事物对我的未来非常重要。所以问题显然是：我们要怎样喂养我们的心灵——找什么时间去补充精神食粮。</p><p>你是否听到过伐木者的产量会下降，只因为他没有抽出时间来磨利他和斧头？我们花钱，以及很多时间，去修饰头脑的外表，刮胡须、理头发，我们有没有必要花同样的时间和金钱，来化妆头脑的内部呢？当然有，而且可以做到。</p><p>事实上，精神食粮随处可得，例如书籍。经由伟大的心灵撞击而写成的书籍，没有一本不是洗涤并充实我们心灵的食粮，它们早已一劳永逸地为后人指明了方向，而我们可以其中任意挑选我们想要的。伟大的书籍就伟大的智慧树，伟大的心灵之树，我们将在其中得以重塑。让我们学会既聪明又谦逊，既谦逊又聪明吧。</p><p>当然，我们不能读那些文字商人的书，他们的书有如瘟疫，散布无耻的邪念、讹误的消息和自负的愚蠢，他们的书只配捧在那些浅薄、庸俗的人的手里。我们需要的是能给我们带来行动的信心与力量，能够将我们的人生推到另一个新高度，和引导我们行善的书。例如《奋力向前》。</p><p>它昌一部激荡我们灵魂、激发我们生命热情的伟大著作，我相信美国人民都将因它的问世而受惠，并因此以最积极和方式运用自身的力量，抵达梦想的生命之境。我甚至相信，谁错过读它的机会，谁就很可能错过伟大的人生。我希望我的子孙都能去读这本书，它能为所有的人开启幸福快乐之门。</p><p>引领人们爬向高峰的动力，是一种定期滋润与强调而日趋旺盛的驱动力。那些拥有成功人生的人，无疑的都能体认到，高峰有很多空间，但是没有足够的空间供人坐下停留。他们了解，心灵像身体一样，必须定期给予营养才行，身体、心理与精神方面的营养，都要分别照顾到。</p><p>约翰，没有谁可以阻挡我们回家的路，除非我们不想回来。让心灵之光照耀我们前进的路。</p><p>爱你的父亲</p><h2><span id="第三十八封谁都能成为大人物">第三十八封：谁都能成为大人物</span></h2><p>格言：我们要做世上的盐。 </p><p>　人没有什么了不起，但没有什么比人更了不起的了。 </p><p>（men are great only their intrinsic value， and not on the position they may incidentally happen to occupy.） </p><p>june 8， 1906 </p><p>亲爱的约翰： </p><p>在《马太福音》中记有一句圣言：“你们是世上的盐。” </p><p>这个比喻平凡而又发人深省。盐食之有味，又能洁物、防腐。基督想以此教诲他的门徒们应该肩负怎样的使命和发挥怎样的影响，他们到世上来就是要净化、美化他们所在的世界，他们要让这个世界免于腐败，并给予世人更新鲜、更健康的生活气息。 </p><p>盐的首要责任是有盐味，盐的盐味象征着高尚、有力、真正虔诚的宗教生活。那么，我们应该用我们的财富、原则和信仰到做什么呢？无疑，我们要做世上的盐，去积极地服务社会，使世人得福。这是我们每个也是最后一个社会责任。 </p><p>我们现在的责任，就是完全献身于周围世界和众人，专心致志于我们的给予艺术艺术。我想没有比这个更伟大的了。 </p><p>谈到伟大，我想起了一篇伟大的演讲词，那是我一生中不多见的伟大的演讲词。它告诉我，人没有什么了不起，但没有什么比人更了不起的了，这要看你为你的同胞和国家做了什么。 </p><p>现在，我就把这篇伟大的演讲词抄录给你，希望它能对你大有裨益。 </p><p>爱你的父亲 </p><p>女士们，先生们： </p><p>今天我很荣幸能在这里会晤一些大人物。尽管你们会说这个城市没有什么大人物，大人物都出身在伦敦、旧金山、罗马或其他大城市，就是不会出自本地，他们都来自这个城市以外的地方，如果是这样，你们就大错特错了。事实是我们这里的大人物和其他城市一样多。在座的听众里面就有许多大人物，有男也有女。 </p><p>现在，请允许我大胆放言，在判断一个人是不是大人物时，我们常常犯的最大错误就是，我们总是认为大人物都有一间宽敞的办公室。但是，我要告诉你们，这个世界根本不知道什么样的人是世人最伟大的人物。 </p><p>那么，谁才是世界上的伟大人物呢？青年人或许会急于提出这样的问题。我告诉你们，大人物不一定就是在高楼大厦里设有办公室的人，人之所以伟大是在于他本身的价值，与他获得的职位无关，谁能说一个靠吃粮食才能生存的君王比一个辛勤耕作的农夫更伟大呢？不过，请不要责备那些位居某种公职便以为自己将成为大人物的年轻人。 </p><p>现在，我想请问在座的各位，你们有谁打算做个伟大的人物？ </p><p>那个戴西部牛仔帽的小伙子，你说你总有一天要成为这人城市的大人物。真的吗？ </p><p>你打算在什么时候实现这个心愿哪？ </p><p>你说在发生另一场战争的时候，你会在枪林弹雨中冲锋陷阵，从旗杆上扯下敌人的旗帜，你将在胸前挂满勋章，凯旋归国，担任政府褒奖给你的公职，你将成为大人物！ </p><p>不，不会的！不会，年轻人，你这样做并不是真正的伟大，但我们不应该责备你的想法，你在上学时就受到这样的教导，那些担任官职的人都曾经英勇地参战。 </p><p>我记得，美国的西班牙战争刚结束时，我们这个城市有过一次和平大**。人们告诉我，流行队伍走上布洛大街时，有辆四轮马车在我家大门口停下来，坐在马车上的是霍普森先生，所有人都把帽子抛向天空，挥舞着手帕，大声地叫：“霍普森万岁！”如果我当时在场，也会这样叫喊，因为他应该获得这份伟大的荣誉。 </p><p>但是，假设明天我到大学讲坛上问大家：“小伙子们，是谁击沉了梅里马克号？”如果他们回答：“是霍普森。”那么他们的回答是八分之七的谎言，因为击沉梅里马克号的总共有八个人，另外七个人因为职位的关系，一直暴露在西班牙人的炮火攻击之下，而霍普森先生身为指挥官，很可能置身于炮火之外。 </p><p>我的朋友们，今晚在座的听众都是知识分子，但我敢说，你们当中没有一个人能说得出与霍普森先生在一起战斗的那七个人是谁。 </p><p>我们为什么要用这种方式来教授历史呢？我们必须教导学生，不管一个人的职位多么低微，只要善尽职责，美国人民颁给他的荣耀，应该和颁给一个国王一样多。 </p><p>一般人教导孩子的方式都是这样的，她的小儿子问：“妈妈，那栋高高的建筑物是什么？” </p><p>“那是格兰特将军的坟墓。” </p><p>“格兰特将军是什么人？” </p><p>“他是平定叛乱的人。” </p><p>历史怎么可以这么教授呢？各位想一想，如果我们只有一名格兰特将军，战争打得赢吗？哦，不会的。那么为什么要在哈德逊河上造一座坟墓哪？那不是因为格兰特将军本人是个伟大人物，坟墓之所以建在那里是因为他是代表人物，代表了二十万名为国损躯的英勇将士，而其中许多人和格兰特将军一样伟大。这就是那座美丽的坟墓耸立在哈德逊河岸边的真正原因。 </p><p>我记得一件事，可以用来说明这种情况，这也是我今晚所能想到的惟一一个例子。这件事令我很惭愧，无法将其忘掉。我现在把眼睛闭上，回溯到1863年，我可以看到位于伯克郡山的老家，看到牛市上挤满了人，还有当地的教堂和市政厅也都挤满了人。 </p><p>我听到乐队的演奏声，看到国旗在飞扬，手帕在迎风招展。我对当天的情景记忆犹新。人群是来迎接一连士兵的，而那连士兵也正在列队前来。他们在内战中服完一期兵役，又要再延长一期，现在正受到家乡父老的欢迎。我当时只是个年轻小伙，但我是那个连的连长。在那一天，我洋洋得意，像个吹足了气的气球——只要一根细细的针，就可以将我扎破。我走在队伍前列，我比世上任何一个人都骄傲。 </p><p>我们列队走入市政厅，他们安排我的士兵坐在大厅中央，我则在前排就坐，接着镇上的官员列队从拥挤的人群中走出来，他们走到台上，围成半圆形坐下，市长随后在那个半圆形的位子中央坐不来。他是个老人，头发灰白，以前从未担任过公职。他认为，既然他担任公职，他就是一个伟大的人物。当他站起来的时候，他首先调整了一下他那副很有份量的眼镜，然后以无比威严的架势环视台下的民众。突然，他的目光落在我的身上，接着这个好心的老人走向我，邀请我上台和那些镇上的官员坐在一起。 </p><p>邀请我上台！在我从军之前，没有一个市府官员注意到我。我坐在台前，让我的佩剑垂在地板上。我双手抱胸，等待接受欢迎，觉得自己就像是拿破仑五世！骄傲总在毁灭与失败之前出现。 </p><p>这时市长代表民众发表演说，欢迎我们这批凯旋归来的军人，他从口袋里拿出演讲稿，小心翼翼地在讲桌上摊开，然后又调整了一下眼镜。他先从讲坛后面退了几步，然后再走向前。他一定很用心地研究过演讲稿，因为他采取了演说家的姿态，将身体重心放在左脚，右脚轻轻向前移，两肩往后缩，然后张开嘴，以四十五度的角度伸出手。 </p><p>“各位亲爱的市民，”他开口说：“我们很高兴欢迎这些英勇参战的……不畏流血的……战士回到他们的故乡。我们尤其高兴，在今天看到跟我们在一起的，还有一位年轻的英雄（指的就是我）……这位年轻的英雄，在想像中，我们曾经看到他率领部队与敌人进行殊死搏击。我们看到他那把闪亮的佩剑……在阳光下发出耀眼的光芒，他对着他的部队大叫，‘冲锋’。” </p><p>上帝呀！这位好心的老头子对战争一无所知。只要他懂一点战争，就会知道一个事实：步兵军官在危险关头跑到部属前面是极大的错误。我竟然拿着在阳光下闪闪发光的指挥刀，对部下大喊：冲锋！我从来没有这样做过。 </p><p>你们想一想，我会跑到最前面，被前面的敌人和后面己方部队夹击吗？军官是不应该跑到那地方去的。在实际的战斗中，军官的位置就在士兵身后。因为是是参谋，所以当叛军从树林中冲出，从四面八方向我方攻来时，我总是要骑着马对我方军队一路叫喊：“军官退后！军官退后！”然后，每个军官都会退到战斗区后面，而且军阶愈高的人退得愈远。这不是因为他没有勇气，而是因为作战的规则就是这样。如果将军跑到前线，而且被打死了，这仗也就必输无疑，因为整个作战计划都在他的脑子里，他必须处在绝对安全的地方。 </p><p>我居然会拿着“那把在阳光下闪闪发光的佩剑”。啊！那天坐在市政大厅的士兵当中，有人曾以死来保护我这名半大不小的军官，有人背着我横渡极深的河流。还有些人并不在场，因为他们为国捐躯了。讲演的人也曾提到他们，但他们并未受到注意。是的，真正为国捐躯的人却没有受到注意，我这个小男孩却被说成当时的英雄。 </p><p>我为什么被当作英雄？很简单，因为那位演讲者也掉进同样愚蠢的陷阱。这个小男孩是军官，其他的人只是士兵。我从这里得到了一个终生难忘的教训。一个人之所以伟大，并不是因为他拥有某种官衔。他之所以伟大，是因为他以些微的工具创下大业，以默默无闻的平民身份完成了人生目标。这才是真正的伟大。 </p><p>个人只要能向大众提供宽敞的街道、舒适的住宅、优雅的学校、庄严的教堂、真诚的训诫、真心的幸福，只要他能得到当地居民的感谢，无论他到哪里，都是伟大的。但如果他不被当地居民所感谢，那么不管他到地球的哪个角落，都不会是个伟大的人物。 </p><p>我希望在座的各位，都知道，我们是在有意义的行动中活着，而不是岁月；我们是在感觉中活着，而不是电话按键上的数字；我们是在思想中活着，而不是空气；我们应该在正确的目标下，以心脏的跳动来计算时间。 </p><p>如果你忘记我今晚所说的话，请不要忘记我下面的话：思考最多、感觉最高贵、行为也最正当的人，生活也过得最充实！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 励志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java程序员要掌握的前端-vue3</title>
      <link href="/2023/03/04/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue3/"/>
      <url>/2023/03/04/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue3/</url>
      
        <content type="html"><![CDATA[<h1><span id="四-vue-3">四. Vue 3</span></h1><h2><span id="1-typescript">1. TypeScript</span></h2><h3><span id="1-动态类型的问题">1) 动态类型的问题</span></h3><p>前面我们讲过 js 属于动态类型语言，例如</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p>obj 可能只是个字符串</p><pre class=" language-js"><code class="language-js"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'hello, world'</span><span class="token punctuation">)</span></code></pre><p>obj 也有可能是个函数</p><pre class=" language-js"><code class="language-js"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello, world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>obj 类型不确定，就给后期使用者带来了麻烦，一旦参数传不对，代码就崩溃了</p><p>动态类型意味着</p><ul><li>运行代码时才知道发生什么 (running the code to see what happens)</li></ul><p>静态类型意味着</p><ul><li>在代码运行前，就对它的行为做出预测 (make predications about what code is expected before it runs)</li></ul><p>下面的 typescript 代码，就在代码运行前对参数加入了约束限制</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>msg <span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>限制了参数只能做 string 那些事</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>msg <span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>限制了参数只能做函数那些事</li></ul><h3><span id="2-入门">2) 入门</span></h3><p>安装 typescript 编译器</p><pre class=" language-cmd"><code class="language-cmd">npm install -g typescript</code></pre><p>编写 ts 代码</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'hello,world'</span><span class="token punctuation">)</span></code></pre><p>执行 tsc 编译命令</p><pre class=" language-cmd"><code class="language-cmd">tsc xxx.ts</code></pre><p>编译生成 js 代码，编译后进行了类型擦除</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'hello,world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>再来一个例子，用 interface 定义用户类型</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>u<span class="token punctuation">:</span> User<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'zhangs'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>编译后</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'zhangs'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可见，typescript 属于编译时实施类型检查（静态类型）的技术</p><h3><span id="3-类型">3) 类型</span></h3><table><thead><tr><th>类型</th><th>例</th><th>备注</th></tr></thead><tbody><tr><td>字符串类型</td><td>string</td><td></td></tr><tr><td>数字类型</td><td>number</td><td></td></tr><tr><td>布尔类型</td><td>boolean</td><td></td></tr><tr><td>数组类型</td><td>number[],string[], boolean[] 依此类推</td><td></td></tr><tr><td>任意类型</td><td>any</td><td>相当于又回到了没有类型的时代</td></tr><tr><td>复杂类型</td><td>type 与 interface</td><td></td></tr><tr><td>函数类型</td><td>() =&gt; void</td><td>对函数的参数和返回值进行说明</td></tr><tr><td>字面量类型</td><td>“a”|”b”|”c”</td><td>限制变量或参数的取值</td></tr><tr><td>nullish类型</td><td>null 与 undefined</td><td></td></tr><tr><td>泛型</td><td><code>&lt;T&gt;</code>，<code>&lt;T extends 父类型&gt;</code></td><td></td></tr></tbody></table><h4><span id="标注位置">标注位置</span></h4><h5><span id="标注变量">标注变量</span></h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> message<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'hello,world'</span></code></pre><ul><li>一般可以省略，因为可以根据后面的字面量推断出前面变量类型</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">'hello,world'</span></code></pre><h5><span id="标注参数">标注参数</span></h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p>很多时候，都能够推断出参数类型</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Eve'</span><span class="token punctuation">]</span><span class="token keyword">const</span> lowercaseNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>可以用类型推断，推断出 e 是 string 类型</li></ul><h5><span id="标注返回值">标注返回值</span></h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span></code></pre><ul><li>一般也可以省略，因为可以根据返回值做类型推断</li></ul><h4><span id="复杂类型">复杂类型</span></h4><h5><span id="type">type</span></h5><pre class=" language-typescript"><code class="language-typescript">type Cat <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">const</span> c1<span class="token punctuation">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'小白'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token keyword">const</span> c2<span class="token punctuation">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'小花'</span> <span class="token punctuation">}</span>                      <span class="token comment" spellcheck="true">// 错误: 缺少 age 属性</span><span class="token keyword">const</span> c3<span class="token punctuation">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'小黑'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'公'</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 错误: 多出 sex 属性</span></code></pre><h5><span id="interface">interface</span></h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">const</span> c1<span class="token punctuation">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'小白'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token keyword">const</span> c2<span class="token punctuation">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'小花'</span> <span class="token punctuation">}</span>                      <span class="token comment" spellcheck="true">// 错误: 缺少 age 属性</span><span class="token keyword">const</span> c3<span class="token punctuation">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'小黑'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'公'</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 错误: 多出 sex 属性</span></code></pre><h5><span id="可选属性">可选属性</span></h5><p>如果需要某个属性可选，可以用下面的语法</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">const</span> c1<span class="token punctuation">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'小白'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token keyword">const</span> c2<span class="token punctuation">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'小花'</span> <span class="token punctuation">}</span>                      <span class="token comment" spellcheck="true">// 正确: age 属性可选</span></code></pre><ul><li>可选属性要注意处理 undefined 值</li></ul><h5><span id="鸭子类型">鸭子类型</span></h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>cat<span class="token punctuation">:</span> Cat<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> c1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'小白'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token function">test</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span></code></pre><ul><li>const c1 并没有声明类型为 Cat，但它与 Cat 类型有一样的属性，也可以被当作是 Cat 类型</li></ul><h4><span id="方法类型">方法类型</span></h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Api</span> <span class="token punctuation">{</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">,</span>  <span class="token function">bar</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>api<span class="token punctuation">:</span> Api<span class="token punctuation">)</span> <span class="token punctuation">{</span>  api<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">bar</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4><span id="字面量类型">字面量类型</span></h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">printText</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> alignment<span class="token punctuation">:</span> <span class="token string">"left"</span> <span class="token operator">|</span> <span class="token string">"right"</span> <span class="token operator">|</span> <span class="token string">"center"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> alignment<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">printText</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'left'</span><span class="token punctuation">)</span><span class="token function">printText</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 错误: 取值只能是 left | right | center</span></code></pre><h4><span id="nullish-类型">nullish 类型</span></h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>x<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>x?: string | null 表示可能是 undefined 或者是 string 或者是 null</li></ul><h4><span id="泛型">泛型</span></h4><p>下面的几个类型声明显然有一定的相似性</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">RefString</span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">RefNumber</span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">RefBoolean</span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">}</span><span class="token keyword">const</span> r1<span class="token punctuation">:</span> RefString <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">'hello'</span> <span class="token punctuation">}</span><span class="token keyword">const</span> r2<span class="token punctuation">:</span> RefNumber <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token keyword">const</span> r3<span class="token punctuation">:</span> RefBoolean <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span></code></pre><p>可以改进为</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Ref</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> T<span class="token punctuation">}</span><span class="token keyword">const</span> r1<span class="token punctuation">:</span> Ref<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">'hello'</span> <span class="token punctuation">}</span><span class="token keyword">const</span> r2<span class="token punctuation">:</span> Ref<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token keyword">const</span> r3<span class="token punctuation">:</span> Ref<span class="token operator">&lt;</span><span class="token keyword">boolean</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span></code></pre><ul><li>泛型的要点就是 <code>&lt;类型参数&gt;</code>，把【类型】也当作一个变化的要素，像参数一样传递过来，这样就可以派生出结构相似的新类型</li></ul><p>函数定义也支持泛型</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> ref<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> Ref<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> n <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> v1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Ref&lt;string></span><span class="token keyword">const</span> v2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">123.3333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Ref&lt;number></span>v1<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>v2<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><h3><span id="4-意义">4) 意义</span></h3><h4><span id="更好理解框架">更好理解框架</span></h4><p>现在越来越多的前端框架采用 typescript，如果懂 typescript 语法，可以更好地阅读框架代码</p><p>以 Map 为例</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>map  <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>注意编译需要 <code>tsc --target es6 .\xxx.ts</code></li></ul><h4><span id="更好的提示">更好的提示</span></h4><p>例如，从服务器返回的一段 json，如果不用 typescript，则编辑器也不能给出准确的提示</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">const</span> user<span class="token punctuation">:</span> User <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`{ "name":"张三", "age":18 }`</span></span><span class="token punctuation">)</span></code></pre><h3><span id="5-类">5) 类</span></h3><blockquote><p>关于 TypeScript 与 JavaScript 中的类语法不是重点，class 相关语法只是起到辅助作用，更重要的是前面讲的 interface</p></blockquote><h4><span id="基本语法">基本语法</span></h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span></code></pre><p>其实会被编译成这个样子（默认 –target=es3）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> User <span class="token operator">=</span> <span class="token comment" spellcheck="true">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> User<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>所以 js 中的 class，并不等价于 java 中的 class，它还是基于原型实现的，原理参考第二章（036、037）</p><h4><span id="只读属性">只读属性</span></h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  readonly name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span>u<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'李四'</span>                <span class="token comment" spellcheck="true">// 编译错误</span></code></pre><ul><li>readonly 是 typescript 特有的，表示该属性只读</li></ul><h4><span id="方法">方法</span></h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  readonly name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span>  <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]正在学习`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span>u<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4><span id="getset">get，set</span></h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  _name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name  <span class="token punctuation">}</span>  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name  <span class="token punctuation">}</span>  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span>u<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'李四'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><ul><li>注意，需要在编译时加上 <code>tsc --target es6 .\xxx.ts</code> 选项</li><li>es6 等价于 es2015，再此之上还有 es2016 … es2022</li></ul><h4><span id="类与接口">类与接口</span></h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span>  <span class="token function">study</span><span class="token punctuation">(</span>course<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UserImpl</span> <span class="token keyword">implements</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span>  <span class="token function">study</span><span class="token punctuation">(</span>course<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]正在学习[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>course<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> user<span class="token punctuation">:</span> User <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserImpl</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token string">'Typescript'</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 错误，必须是接口中定义的方法</span></code></pre><h4><span id="继承与接口">继承与接口</span></h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Flyable</span> <span class="token punctuation">{</span>  <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span> <span class="token punctuation">{</span>  <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在飞翔`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> b<span class="token punctuation">:</span> Flyable <span class="token operator">&amp;</span> Animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token string">"小花"</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>Flyable &amp; Animal 表示变量是 flyable 类型，同时也是 Animal 类型</li></ul><h4><span id="方法重写">方法重写</span></h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>  <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`father study`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`son study`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> f<span class="token punctuation">:</span> Father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2><span id="2-vue3-基础">2. Vue3 基础</span></h2><p>技术选型</p><ul><li>Vue <ul><li><strong>选项式 API</strong> 还是 <strong>组合式 API</strong>✔️</li><li><strong>HTML</strong> 还是 <strong>单文件组件</strong>✔️</li></ul></li><li>语法<ul><li><strong>javascript</strong> 还是 <strong>typescript</strong>✔️</li></ul></li><li>构建工具<ul><li><strong>@vue/cli</strong> 还是 <strong>vite</strong>✔️</li></ul></li><li>路由<ul><li><strong>vue-router</strong>✔️</li></ul></li><li>共享存储<ul><li><strong>vuex</strong> 还是 <strong>pinia</strong>✔️</li></ul></li><li>视图组件<ul><li><strong>ElementUI</strong> 还是 <strong>Antdv</strong>✔️</li></ul></li></ul><h3><span id="1-环境准备">1) 环境准备</span></h3><h4><span id="创建项目">创建项目</span></h4><p>采用 vite 作为前端项目的打包，构建工具</p><pre class=" language-cmd"><code class="language-cmd">npm init vite@latest</code></pre><p>按提示操作</p><pre class=" language-cmd"><code class="language-cmd">cd 项目目录npm installnpm run dev</code></pre><h4><span id="编码-ide">编码 IDE</span></h4><p>推荐采用微软的 VSCode 作为开发工具，到它的官网 <a href="https://code.visualstudio.com/">Visual Studio Code - Code Editing. Redefined</a> 下载安装即可</p><p><img src="/2023/03/04/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue3/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220911090418621.png" alt="image-20220911090418621"></p><p>要对 *.vue 做语法支持，还要安装一个 Volar 插件</p><p><img src="/2023/03/04/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue3/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220911090756694.png" alt="image-20220911090756694"></p><h4><span id="安装-devtools">安装 devtools</span></h4><ul><li>devtools 插件网址：<a href="https://devtools.vuejs.org/guide/installation.html">https://devtools.vuejs.org/guide/installation.html</a></li></ul><p><img src="/2023/03/04/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue3/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220815141648040.png" alt="image-20220815141648040"></p><h4><span id="修改端口">修改端口</span></h4><p>打开项目根目录下 vite.config.ts</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token comment" spellcheck="true">// https://vitejs.dev/config/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  server<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">7070</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>文档地址：<a href="https://vitejs.cn/config/#server-port">配置 Vite {configuring-vite} | Vite中文网 (vitejs.cn)</a></li></ul><h4><span id="配置代理">配置代理</span></h4><p>为了避免前后端服务器联调时， fetch、xhr 请求产生跨域问题，需要配置代理，同样是修改项目根目录下 vite.config.ts</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token comment" spellcheck="true">// https://vitejs.dev/config/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  server<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">7070</span><span class="token punctuation">,</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">'http://localhost:8080'</span><span class="token punctuation">,</span>        changeOrigin<span class="token punctuation">:</span> <span class="token keyword">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>文档地址：<a href="https://vitejs.cn/config/#server-proxy">配置 Vite {configuring-vite} | Vite中文网 (vitejs.cn)</a></li></ul><h4><span id="项目结构">项目结构</span></h4><pre><code>index.htmlpackage.jsontsconfig.jsonvite.config.ts├─public└─src    ├─assets    ├─components    ├─model    ├─router    ├─store    └─views</code></pre><ul><li>index.html 为主页面</li><li>package.json npm 配置文件</li><li>tsconfig.json typescript 配置文件</li><li>vite.config.ts vite 配置文件</li><li>public 静态资源</li><li>src/components 可重用组件</li><li>src/model 模型定义</li><li>src/router 路由</li><li>src/store 共享存储</li><li>src/views 视图组件</li></ul><h3><span id="2-vue-组件">2) Vue 组件</span></h3><p>Vue 的组件文件以 .vue 结尾，每个组件由三部分组成</p><pre class=" language-vue"><code class="language-vue"><script setup lang="ts"></script><template></template><style scoped></style></code></pre><ul><li>script 代码部分，控制模板的数据来源和行为</li><li>template 模板部分，由它生成 html 代码</li><li>style 样式部分，一般不咋关心</li></ul><p>根组件是 src/App.vue，先来个 Hello,world 例子</p><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import { ref } from "vue";let msg = ref("hello"); // 把数据变成响应式的function change() {  msg.value = "world";  console.log(msg);}</script><template>  <h1><span id="msg">{{ msg }}</span></h1>  <input type="button" value="修改msg" @click="change"></template></code></pre><ul><li> 用来把一个变量绑定到页面上某个位置</li><li>绑定的变量必须用 ref 函数来封装<ul><li>ref 返回的是【响应式】数据，即数据一旦变化，页面展示也跟着变化</li></ul></li></ul><h4><span id="maints">main.ts</span></h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token string">'./style.css'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><ul><li>createApp 是创建一个 Vue 应用程序，它接收的参数 App 即之前我们看到的根组件</li><li>mount 就是把根组件生成的 html 代码片段【挂载】到 index.html 中 id 为 app 的 html 元素上</li></ul><p>可以修改自己的组件文件，挂载到主页面</p><p>新建 src/views/E0.vue，内容如下</p><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import { ref } from 'vue'const msg = ref('Hello, World!!')</script><template>  <h1><span id="msg">{{ msg }}</span></h1></template></code></pre><p>修改 main.ts 将自己的组件文件挂载</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token string">'./style.css'</span><span class="token comment" spellcheck="true">// import App from './App.vue'</span><span class="token keyword">import</span> E0 <span class="token keyword">from</span> <span class="token string">'./views/E0.vue'</span><span class="token function">createApp</span><span class="token punctuation">(</span>E0<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><ul><li>以后我们用这样的方式演示课堂案例</li></ul><p>打开浏览器控制台，进入 Vue 的开发工具，尝试做如下修改</p><p><img src="/2023/03/04/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue3/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220906141650435.png" alt="image-20220906141650435"></p><p>当把 msg 的值由 “Hello, World” 改为 “你好” 时，会发现页面展示同步发生了变化</p><h4><span id="ref-与-reactive">ref 与 reactive</span></h4><p>vue 提供了两个函数，都可以将数据变为【响应式】的</p><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import { ref, reactive } from 'vue'const msg = ref('Hello, World')const user = reactive({ name: '张三' })</script><template>  <h2><span id="msg">{{msg}}</span></h2>  <h2><span id="username">{{user.name}}</span></h2></template></code></pre><ul><li>ref 能将任意类型的数据变为【响应式】的</li><li>reactive 只能将对象类型变为【响应式】，对基本类型无效（例如 string，number，boolean）</li></ul><p>还有一点不同</p><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import { ref, reactive } from 'vue'const u1 = ref({ name: '张三' })const u2 = reactive({ name: '张三' })function test() {  console.log(u1.value)  console.log(u2)}test()</script>  <template>  <h2><span id="u1name">{{u1.name}}</span></h2>  <h2><span id="u2name">{{u2.name}}</span></h2></template></code></pre><ul><li>在 template 模板中使用 ref或者reactive  包装的数据，直接写【变量名.属性】就可以了</li><li>但在代码中要使用 ref 包装的数据，必须用【变量名.value】才能访问到</li></ul><h4><span id="属性绑定">属性绑定</span></h4><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import { ref } from 'vue'const path = ref('/src/assets/vue.svg')//public 路径下 文件写法const path1 = ref('/vite.svg')</script><template>  <img :src="path" alt>  <img :src="path1" alt></template></code></pre><ul><li>【:属性名】用来将标签属性与【响应式】变量绑定</li></ul><h4><span id="事件绑定">事件绑定</span></h4><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import { ref } from 'vue'const count = ref(0)function dec() {  count.value--}function inc() {  count.value++}</script><template>  <input type="button" value="-" @click="dec">  <h2><span id="count">{{count}}</span></h2>  <input type="button" value="+" @click="inc"></template></code></pre><ul><li>【@事件名】用来将标签属性与函数绑定，事件发生后执行函数内代码</li></ul><h4><span id="表单绑定">表单绑定</span></h4><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import { ref } from "vue";const user = ref({  name:'张三',  age:18,  sex:'男',  fav:['游泳','打球']})function saveUser() {  console.log(user.value)}</script><template>  <div class="outer">    <div>      <label for>请输入姓名</label>      <input type="text" v-model="user.name">    </div>    <div>      <label for>请输入年龄</label>      <input type="text" v-model="user.age">    </div>    <div>      <label for>请选择性别</label>      男 <input type="radio" value="男" v-model="user.sex">       女 <input type="radio" value="女" v-model="user.sex">    </div>    <div>      <label for>请选择爱好</label>      游泳 <input type="checkbox" value="游泳" v-model="user.fav">       打球 <input type="checkbox" value="打球" v-model="user.fav">       健身 <input type="checkbox" value="健身" v-model="user.fav">    </div>    <div>      <input type="button" value="保存" @click="saveUser">    </div>  </div></template><style scoped>  div {    margin-bottom: 8px;  }  .outer {    width: 100%;    position: relative;    padding-left: 80px;  }  label {    text-align: left;    width: 100px;    display: inline-block;    position: absolute;    left :0;  }</style></code></pre><ul><li>用 v-model 实现双向绑定，即 <ul><li>javascript 数据可以同步到表单标签</li><li>反过来用户在表单标签输入的新值也会同步到 javascript 这边</li></ul></li><li>双向绑定只适用于表单这种带【输入】功能的标签，其它标签的数据绑定，单向就足够了</li><li>复选框这种标签，双向绑定的 javascript 数据类型一般用数组</li></ul><h4><span id="计算属性">计算属性</span></h4><p>有时在数据展示时要做简单的计算</p><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import { ref } from 'vue'const firstName = ref('三')const lastName = ref('张')</script><template>  <h2><span id="lastname-firstname">{{lastName + firstName}}</span></h2>  <h3><span id="lastname-firstname">{{lastName + firstName}}</span></h3>  <h4><span id="lastname-firstname">{{lastName + firstName}}</span></h4></template></code></pre><p>看起来较为繁琐，可以用计算属性改进</p><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import { ref, computed } from 'vue'const firstName = ref('三')const lastName = ref('张')const fullName = computed(() => {  console.log('enter')  return lastName.value + firstName.value})</script><template>  <h2><span id="fullname">{{fullName}}</span></h2>  <h3><span id="fullname">{{fullName}}</span></h3>  <h4><span id="fullname">{{fullName}}</span></h4></template></code></pre><ul><li>fullName 即为计算属性，它具备缓存功能，即 firstName 和 lastName 的值发生了变化，才会重新计算</li><li>如果用函数实现相同功能，则没有缓存功能</li></ul><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import { ref } from 'vue'const firstName = ref('三')const lastName = ref('张')function fullName() {  console.log('enter')  return lastName.value + firstName.value}</script>  <template>  <h2><span id="fullname">{{fullName()}}</span></h2>  <h3><span id="fullname">{{fullName()}}</span></h3>  <h4><span id="fullname">{{fullName()}}</span></h4></template></code></pre><h4><span id="xhr">xhr</span></h4><p>浏览器中有两套 API 可以和后端交互，发送请求、接收响应，fetch api 前面我们已经介绍过了，另一套 api 是 xhr，基本用法如下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:8080/api/students'</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">"json"</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>但这套 api 虽然功能强大，但比较老，不直接支持 Promise，因此有必要对其进行改造</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 其它情况也需考虑，这里简化处理</span>    <span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>Promise 对象适合用来封装异步操作，并可以配合 await 一齐使用</li><li>Promise 在构造时，需要一个箭头函数，箭头函数有两个参数 resolve 和 reject<ul><li>resolve 是异步操作成功时被调用，把成功的结果传递给它，最后会作为 await 的结果返回</li><li>reject 在异步操作失败时被调用，把失败的结果传递给它，最后在 catch 块被捉住</li></ul></li><li>await 会一直等到 Promise 内调用了 resolve 或 reject 才会继续向下运行</li></ul><p>调用示例1：同步接收结果，不走代理</p><pre class=" language-js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/students"</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>调用示例2：走代理</p><pre class=" language-js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/students'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>走代理明显慢不少</li></ul><h4><span id="axios">axios</span></h4><h5><span id="基本用法">基本用法</span></h5><p>axios 就是对 xhr api 的封装，手法与前面例子类似</p><p>安装</p><pre class=" language-cmd"><code class="language-cmd">npm install axios</code></pre><p>一个简单的例子</p><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import { ref, onMounted } from "vue";import axios from "axios";let count = ref(0);async function getStudents() {  try {    const resp = await axios.get("/api/students");    count.value = resp.data.data.length;  } catch (e) {    console.log(e);  }}onMounted(() => {  getStudents()})</script><template>  <h2><span id="学生人数为-count">学生人数为：{{ count }}</span></h2></template></code></pre><ul><li>onMounted 指 vue 组件生成的 html 代码片段，挂载完毕后被执行</li></ul><p>再来看一个 post 例子</p><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import { ref } from "vue";import axios from "axios";const student = ref({  name: '',  sex: '男',  age: 18})async function addStudent() {  console.log(student.value)  const resp = await axios.post('/api/students', student.value)  console.log(resp.data.data)}</script><template>  <div>    <div>      <input type="text" placeholder="请输入姓名" v-model="student.name">    </div>    <div>      <label for>请选择性别</label>      男 <input type="radio" value="男" v-model="student.sex">       女 <input type="radio" value="女" v-model="student.sex">    </div>    <div>      <input type="number" placeholder="请输入年龄" v-model="student.age">    </div>    <div>      <input type="button" value="添加" @click="addStudent">    </div>  </div></template><style scoped>div {  font-size: 14px;}</style></code></pre><h5><span id="环境变量">环境变量</span></h5><ul><li>开发环境下，联调的后端服务器地址是 <code>http://localhost:8080</code>，</li><li>上线改为生产环境后，后端服务器地址为 <code>http://itheima.com</code></li></ul><p>这就要求我们区分开发环境和生产环境，这件事交给构建工具 vite 来做</p><p>默认情况下，vite 支持上面两种环境，分别对应根目录下两个配置文件 </p><ul><li>.env.development - 开发环境</li><li>.env.production - 生产环境</li></ul><p>针对以上需求，分别在两个文件中加入</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">VITE_BACKEND_API_BASE_URL</span> <span class="token punctuation">=</span> <span class="token attr-value">'http://localhost:8080'</span></code></pre><p>和</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">VITE_BACKEND_API_BASE_URL</span> <span class="token punctuation">=</span> <span class="token attr-value">'http://itheima.com'</span></code></pre><p>然后在代码中使用 vite 给我们提供的特殊对象 <code>import.meta.env</code>，就可以获取到 <code>VITE_BACKEND_API_BASE_URL</code> 在不同环境下的值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VITE_BACKEND_API_BASE_URL</code></pre><p>默认情况下，不能智能提示自定义的环境变量，做如下配置：新增文件 <code>src/env.d.ts</code> 并添加如下内容</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/// &lt;reference types="vite/client" /></span><span class="token keyword">interface</span> <span class="token class-name">ImportMetaEnv</span> <span class="token punctuation">{</span>  readonly VITE_BACKEND_API_BASE_URL<span class="token punctuation">:</span> <span class="token keyword">string</span>  <span class="token comment" spellcheck="true">// 更多环境变量...</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">ImportMeta</span> <span class="token punctuation">{</span>  readonly env<span class="token punctuation">:</span> ImportMetaEnv<span class="token punctuation">}</span></code></pre><ul><li>参考文档地址 <a href="https://cn.vitejs.dev/guide/env-and-mode.html">环境变量和模式 | Vite 官方中文文档 (vitejs.dev)</a></li></ul><h5><span id="baseurl">baseURL</span></h5><p>可以自己创建一个 axios 对象，方便添加默认设置，新建文件 /src/api/request.ts</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 创建新的 axios 对象</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">const</span> _axios <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token punctuation">:</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VITE_BACKEND_API_BASE_URL<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> _axios</code></pre><p>然后在其它组件中引用这个 ts 文件，例如 /src/views/E8.vue，就不用自己拼接路径前缀了</p><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import axios from '../api/request'// ...await axios.post('/api/students', ...)    </script></code></pre><h5><span id="拦截器">拦截器</span></h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 创建新的 axios 对象</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">const</span> _axios <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token punctuation">:</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VITE_BACKEND_API_BASE_URL<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 请求拦截器</span>_axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 统一添加请求头</span>    config<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>      Authorization<span class="token punctuation">:</span> <span class="token string">'aaa.bbb.ccc'</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> config  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 请求出错时的处理</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 响应拦截器</span>_axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 状态码  2xx</span>    <span class="token comment" spellcheck="true">// 这里的code是自定义的错误码</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> response    <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 情况1</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ... </span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 状态码 > 2xx, 400,401,403,404,500</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 处理了异常</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 情况1</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 情况2</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> _axios</code></pre><p>处理响应时，又分成两种情况</p><ol><li>后端返回的是标准响应状态码，这时会走响应拦截器第二个箭头函数，用 error.response.status 做分支判断</li><li>后端返回的响应状态码总是200，用自定义错误码表示出错，这时会走响应拦截器第一个箭头函数，用 response.data.code 做分支判断</li></ol><p>另外</p><ul><li>Promise.reject(error) 类似于将异常继续向上抛出，异常由调用者（Vue组件）来配合 try … catch 来处理</li><li>Promise.resolve({}) 表示错误已解决，返回一个空对象，调用者中接到这个空对象时，需要配合 ?. 来避免访问不存在的属性</li></ul><h4><span id="条件与列表">条件与列表</span></h4><p>首先，新增模型数据 src/model/Model8080.ts</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  sex<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果 spring 错误，返回的对象格式</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SpringError</span> <span class="token punctuation">{</span>  timestamp<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  status<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  error<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  path<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果 spring 成功，返回 list 情况</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SpringList</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  message<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  code<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果 spring 成功，返回 page 情况</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SpringPage</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span> list<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> total<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  message<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  code<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果 spring 成功，返回 string 情况</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SpringString</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  message<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  code<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AxiosResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AxiosRespError</span> <span class="token keyword">extends</span> <span class="token class-name">AxiosResponse</span><span class="token operator">&lt;</span>SpringError<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AxiosRespList</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AxiosResponse</span><span class="token operator">&lt;</span>SpringList<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AxiosRespPage</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AxiosResponse</span><span class="token operator">&lt;</span>SpringPage<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AxiosRespString</span> <span class="token keyword">extends</span> <span class="token class-name">AxiosResponse</span><span class="token operator">&lt;</span>SpringString<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><p>其中 </p><ul><li>AxiosRespPage 代表分页时的响应类型</li><li>AxiosRespList 代表返回集合时的响应类型</li><li>AxiosRespString 代表返回字符串时的响应类型</li><li>AxiosRespError 代表 Spring 出错时时的响应类型</li></ul><pre class=" language-vue"><code class="language-vue"><script lang="ts" setup>import { ref, onMounted } from "vue";import axios from "../api/request";import { Student, SpringList } from "../model/Model8080";// 说明 students 数组类型为 Student[]const students = ref<Student[]>([]);async function getStudents() {  // 说明 resp.data 类型是 SpringList<Student>  const resp = await axios.get<SpringList<Student>>("/api/students");    console.log(resp.data.data);  students.value = resp.data.data;}onMounted(() => getStudents());</script><template>  <div class="outer">    <div class="title">学生列表</div>    <div class="thead">      <div class="row bold">        <div class="col">编号</div>        <div class="col">姓名</div>        <div class="col">性别</div>        <div class="col">年龄</div>      </div>    </div>    <div class="tbody">      <div v-if="students.length === 0">暂无数据</div>      <template v-else>        <div class="row" v-for="s of students" :key="s.id">          <div class="col">{{ s.id }}</div>          <div class="col">{{ s.name }}</div>          <div class="col">{{ s.sex }}</div>          <div class="col">{{ s.age }}</div>        </div>      </template>    </div>  </div></template><style scoped>.outer {  font-family: 华文行楷;  font-size: 20px;  width: 500px;}.title {  margin-bottom: 10px;  font-size: 30px;  color: #333;  text-align: center;}.row {  background-color: #fff;  display: flex;  justify-content: center;}.col {  border: 1px solid #f0f0f0;  width: 15%;  height: 35px;  text-align: center;  line-height: 35px;}.bold .col {  background-color: #f1f1f1;}</style></code></pre><ul><li>加入泛型是为了更好的提示</li><li>v-if 与 v-else 不能和 v-for 处于同一标签</li><li>template 标签还有一个用途，就是用它少生成一层真正 html 代码</li><li>可以看到将结果封装为响应式数据还是比较繁琐的，后面会使用 useRequest 改进</li></ul><h4><span id="监听器">监听器</span></h4><p>利用监听器，可以在【响应式】的基础上添加一些副作用，把更多的东西变成【响应式的】</p><ul><li><p>原本只是数据变化 =&gt; 页面更新</p></li><li><p>watch 可以在数据变化时 =&gt; 其它更新</p></li></ul><pre class=" language-vue"><code class="language-vue"><template>  <input type="text" v-model="name"></template><script setup lang="ts">import { ref, watch } from "vue";function useStorage(name: string) {  const data = ref(sessionStorage.getItem(name) ?? "");  watch(data, (newValue) => {    sessionStorage.setItem(name, newValue);  });  return data;}const name = useStorage("name");</script></code></pre><ul><li>名称为 useXXXX 的函数，作用是返回带扩展功能的【响应式】数据</li><li>localStorage   即使浏览器关闭，数据还在</li><li>sessionStorage  数据工作在浏览器活动期间</li></ul><h4><span id="vueuse">vueuse</span></h4><p>官网地址：<a href="https://vueuse.org/">https://vueuse.org/</a></p><p>安装</p><pre class=" language-cmd"><code class="language-cmd">npm install @vueuse/core</code></pre><p>一些函数的用法</p><pre class=" language-vue"><code class="language-vue"><template>  <h3><span id="x-x">X: {{x}}</span></h3>  <h3><span id="y-y">Y: {{y}}</span></h3>  <h3><span id="count">{{count}}</span></h3>  <input type="button" @click="inc()" value="+">  <input type="button" @click="dec()" value="-">  <input type="text" v-model="name"></template><script setup lang="ts">import { useMouse, useCounter, useStorage } from '@vueuse/core'const {x, y} = useMouse()const {count, inc, dec} = useCounter()const name = useStorage("name", "")</script></code></pre><h4><span id="userequest">useRequest</span></h4><p>响应式的 axios 封装，官网地址 <a href="https://next.cn.attojs.org/">一个 Vue 请求库 | VueRequest (attojs.org)</a></p><p>首先安装 vue-request</p><pre class=" language-cmd"><code class="language-cmd">npm install vue-request@next</code></pre><p>组件</p><pre class=" language-vue"><code class="language-vue"><template>  <h3 v-if="students.length === 0"><span id="暂无数据">暂无数据</span></h3>  <ul v-else>    <li v-for="s of students" :key="s.id">      <span>{{s.name}}</span>      <span>{{s.sex}}</span>      <span>{{s.age}}</span>    </li>  </ul></template><script setup lang="ts">import axios from "../api/request"import { useRequest } from 'vue-request'import { computed } from 'vue'import { AxiosRespList, Student } from '../model/Model8080'// data 代表就是 axios 的响应对象const { data } = useRequest<AxiosRespList<Student>>(() => axios.get('/api/students'))const students = computed(()=>{  return data?.value?.data.data || []})</script><style scoped>ul li {  list-style: none;  font-family: "华文行楷";}li span:nth-child(1) {  font-size: 24px;}li span:nth-child(2) {  font-size: 12px;  color: crimson;  vertical-align: bottom;}li span:nth-child(3) {  font-size: 12px;  color: darkblue;  vertical-align: top;}</style></code></pre><ul><li>data.value 的取值一开始是 undefined，随着响应返回变成 axios 的响应对象</li><li>用 computed 进行适配</li></ul><h4><span id="usepagination">usePagination</span></h4><p>在 src/model/Model8080.ts 中补充类型说明</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">StudentQueryDto</span> <span class="token punctuation">{</span>  name<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  sex<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 18,20</span>  page<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  size<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span></code></pre><ul><li>js 中类似于 18,20 这样以逗号分隔字符串，会在 get 传参时转换为 java 中的整数数组</li></ul><p>编写组件</p><pre class=" language-vue"><code class="language-vue"><template>  <input type="text" placeholder="请输入姓名" v-model="dto.name">  <select v-model="dto.sex">    <option value selected>请选择性别</option>    <option value="男">男</option>    <option value="女">女</option>  </select>  <input type="text" placeholder="请输入年龄范围" v-model="dto.age">  <br>  <input type="text" placeholder="请输入页码" v-model="dto.page">  <input type="text" placeholder="请输入页大小" v-model="dto.size">  <input type="button" value="搜索" @click="search">  <hr>  <h3 v-if="students.length === 0"><span id="暂无数据">暂无数据</span></h3>  <ul v-else>    <li v-for="s of students" :key="s.id">      <span>{{s.name}}</span>      <span>{{s.sex}}</span>      <span>{{s.age}}</span>    </li>  </ul>  <hr>  总记录数{{total}} 总页数{{totalPage}}</template><script setup lang="ts">import axios from "../api/request"import { usePagination } from 'vue-request'import { computed, ref } from 'vue'import { AxiosRespPage, Student, StudentQueryDto } from '../model/Model8080'const dto = ref<StudentQueryDto>({name:'', sex:'', age:'', page:1, size:5})// data 代表就是 axios 的响应对象// 泛型参数1: 响应类型// 泛型参数2: 请求类型const { data, total, totalPage, run } = usePagination<AxiosRespPage<Student>, StudentQueryDto[]>(  (d) => axios.get('/api/students/q', {params: d}), // 箭头函数  {    defaultParams: [ dto.value ], // 默认参数, 会作为参数传递给上面的箭头函数    pagination: {      currentKey: 'page', // 指明当前页属性      pageSizeKey: 'size', // 指明页大小属性      totalKey: 'data.data.total' // 指明总记录数属性    }   } // 选项)const students = computed(()=>{  return data?.value?.data.data.list || []})function search() {  run(dto.value) // 会作为参数传递给usePagination的箭头函数}</script><style scoped>ul li {  list-style: none;  font-family: "华文行楷";}li span:nth-child(1) {  font-size: 24px;}li span:nth-child(2) {  font-size: 12px;  color: crimson;  vertical-align: bottom;}li span:nth-child(3) {  font-size: 12px;  color: darkblue;  vertical-align: top;}input,select {  width: 100px;}</style></code></pre><ul><li>usePagination 只需要定义一次，后续还想用它内部的 axios 发请求，只需调用 run 函数</li></ul><h4><span id="子组件">子组件</span></h4><h5><span id="例1">例1</span></h5><p>定义子组件 Child1</p><pre class=" language-vue"><code class="language-vue"><template>  <div class="container">    <div class="card">      <div>        <p class="name">{{name}}</p>        <p class="location">{{country}}</p>      </div>      <img :src="avatar || '/src/assets/vue.svg'">    </div>  </div></template><script setup lang="ts">// 定义属性,  编译宏defineProps<{name:string,country:string,avatar?:string}>()</script><style scoped>.container {  width: 100%;  display: flex;  flex-wrap: wrap;  justify-content: space-evenly;  flex-direction: row-reverse;}.name {  font-weight: bold;}.location {  font-size: 0.8em;  color: #6d597a;}.card {  display: flex;  justify-content: space-evenly;  padding: 1em;  margin: 1rem;  border-radius: 5px;  background: #fff;  width: 200px;  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);}.card:hover {  transform: rotate(-5deg);}.card img {  margin-left: 1em;  border-radius: 50%;  max-width: 55px;  max-height: 55px;}</style></code></pre><p>父组件引用</p><pre class=" language-vue"><code class="language-vue"><template>  <child1 name="张三" country="中国" avatar="/src/assets/vue.svg"></child1>  <child1 name="李四" country="印度" avatar="/vite.svg"></child1>  <child1 name="王五" country="韩国"></child1></template><script lang="ts" setup>import Child1 from '../components/Child1.vue';</script></code></pre><h5><span id="例2">例2</span></h5><p>首先添加类型说明 model/ModelRandomUser.ts</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> AxiosResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AxiosRespResults</span> <span class="token keyword">extends</span> <span class="token class-name">AxiosResponse</span><span class="token operator">&lt;</span>Results<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Results</span> <span class="token punctuation">{</span>  info<span class="token punctuation">:</span> <span class="token punctuation">{</span>    page<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>    results<span class="token punctuation">:</span> <span class="token keyword">number</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  results<span class="token punctuation">:</span> Result<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>  gender<span class="token punctuation">:</span> <span class="token string">'male'</span> <span class="token operator">|</span> <span class="token string">'female'</span><span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token punctuation">{</span>    first<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    last<span class="token punctuation">:</span> <span class="token keyword">string</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  location<span class="token punctuation">:</span> <span class="token punctuation">{</span>    country<span class="token punctuation">:</span> <span class="token keyword">string</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  picture<span class="token punctuation">:</span> <span class="token punctuation">{</span>    medium<span class="token punctuation">:</span> <span class="token keyword">string</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  login<span class="token punctuation">:</span> <span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token keyword">string</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>子组件不变，父组件使用子组件</p><pre class=" language-vue"><code class="language-vue"><!-- 父组件 --><template>  <child1 v-for="u of users" :name="u.name.first" :country="u.location.country" :avatar="u.picture.medium" :key="u.login.username"></child1></template><script setup lang="ts">import axios from "axios";import { useRequest } from "vue-request";import { computed } from "vue";import { AxiosRespResults } from '../model/ModelRandomUser'import Child1 from "../components/Child1.vue";const { data } = useRequest<AxiosRespResults>(  ()=>axios.get('https://randomuser.me/api/?results=3'))const users = computed(()=>{  return data.value?.data.results || []})</script></code></pre><p>如果觉得 Result 数据结构嵌套太复杂，还可以做一个类型映射</p><pre class=" language-vue"><code class="language-vue"><!-- 父组件 --><template>  <child1 v-for="u of users" :name="u.name" :country="u.country" :avatar="u.avatar" :key="u.username"></child1></template><script setup lang="ts">import axios from "axios";import { useRequest } from "vue-request";import { computed } from "vue";import { AxiosRespResults, Result } from '../model/ModelRandomUser'import Child1 from "../components/Child1.vue";const { data } = useRequest<AxiosRespResults>(  ()=>axios.get('https://randomuser.me/api/?results=3'))const users = computed(()=>{  return data.value?.data.results.map(resultToUser) || []})interface User {  name: string,  country: string,  avatar: string,  username: string}function resultToUser(r:Result):User {  return {    name: r.name.first,    country: r.location.country,    avatar: r.picture.medium,    username: r.login.username  }}</script></code></pre><ul><li>resultToUser 将 Result 类型映射为 User 类型</li></ul><h2><span id="3-vue-进阶">3. Vue 进阶</span></h2><h3><span id="1-antdv">1) Antdv</span></h3><p>添加必要插件</p><pre class=" language-cmd"><code class="language-cmd">npm install ant-design-vue</code></pre><ul><li>ant-design-vue 组件库插件</li></ul><p>引入 antdv 功能，修改 main.ts</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token string">'./style.css'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> antd <span class="token keyword">from</span> <span class="token string">'ant-design-vue'</span><span class="token keyword">import</span> <span class="token string">'ant-design-vue/dist/antd.css'</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>antd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><h4><span id="表格">表格</span></h4><pre class=" language-vue"><code class="language-vue"><template>  <!-- <a-table :columns="columns" :dataSource="students" rowKey="id"></a-table> -->  <a-table :columns="columns" :datasource="students" :rowkey="rowKey"></a-table></template><script setup lang="ts">import axios from "../api/request";import { ref, computed } from "vue";import { useRequest } from "vue-request";import { AxiosRespList, Student } from "../model/Model8080";const {data} = useRequest<AxiosRespList<Student>>(  ()=>axios.get('/api/students'))const students = computed(()=>{  return data.value?.data.data || []})function rowKey(r:Student) {  return r.id}const columns = ref([  {    title:'编号',    dataIndex:'id'  },  {    title:'姓名',    dataIndex:'name'  },  {    title:'性别',    dataIndex:'sex'  },  {    title:'年龄',    dataIndex:'age'  }])</script></code></pre><h2><span id="注意">注意</span></h2><p>在 Table 中，<code>dataSource</code> 和 <code>columns</code> 里的数据值都需要指定 <code>key</code> 值。对于 <code>dataSource</code> 默认将每列数据的 <code>key</code> 属性作为唯一的标识。</p><p>如果你的数据没有这个属性，务必使用 <code>rowKey</code> 来指定数据列的主键。若没有指定，控制台会出现缺少 key 的提示，表格组件也会出现各类奇怪的错误。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 比如你的数据主键是 uid</span><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Table</span> <span class="token attr-name">rowKey</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或</span><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Table</span> <span class="token attr-name">rowKey</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>record <span class="token operator">=</span><span class="token operator">></span> record<span class="token punctuation">.</span>uid<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span></code></pre><h4><span id="分页">分页</span></h4><pre class=" language-vue"><code class="language-vue"><template>  <a-table :columns="columns" :data-source="students" row-key="id" :pagination="pagination" @change="tableChange"></a-table></template><script setup lang="ts">import axios from "../api/request";import { ref, computed } from "vue";import { usePagination } from "vue-request";import { AxiosRespPage, Student, StudentQueryDto } from "../model/Model8080";import { PaginationProps } from "ant-design-vue";import DateBody from "ant-design-vue/lib/vc-picker/panels/DatePanel/DateBody";const dto = ref({page: 1, size: 5})const {data, total, run} = usePagination<AxiosRespPage<Student>, StudentQueryDto[]>(  (d)=> axios.get('/api/students/q', {params:d}),  {    defaultParams: [dto.value],    pagination: {      currentKey: "page",      pageSizeKey: 'size',      totalKey: 'data.data.total'    }  })// 在页号或页大小改变时调用function tableChange(pagination: PaginationProps) {   console.log(pagination)  dto.value.page = pagination.current ?? 1  dto.value.size = pagination.pageSize ?? 5  run(dto.value)}const pagination = computed<PaginationProps>(()=>{  return {    current: dto.value.page, // 当前页    pageSize: dto.value.size, // 页大小    total: total.value,       // 总记录数    showSizeChanger: true,    // 显示页大小的下拉列表    pageSizeOptions: ["1","2","3","4","5"] // 自定义下拉列表内容  }})const students = computed(()=>{  return data.value?.data.data.list || []})const columns = ref([  {    title: "编号",    dataIndex: "id",  },  {    title: "姓名",    dataIndex: "name",  },  {    title: "性别",    dataIndex: "sex",  },  {    title: "年龄",    dataIndex: "age",  },]);</script></code></pre><h4><span id="搜索-删除">搜索、删除</span></h4><pre class=" language-vue"><code class="language-vue"><template>  <a-row>    <a-col :span="2">      <a-button type="primary" size="small">新增</a-button>    </a-col>    <a-col :span="4">      <a-popconfirm title="确认要删除选中学生吗?" ok-text="确定" cancel-text="取消" @confirm="onDeleteIds" @visiblechange="onVisibleChange" :visible="visible">        <a-button type="primary" size="small">删除选中</a-button>      </a-popconfirm>    </a-col>    <a-col :span="4">    </a-col>    <a-col :span="4">      <a-input v-model:value="dto.name" placeholder="输姓名" size="small"></a-input>    </a-col>    <a-col :span="4">      <a-select v-model:value="dto.sex" placeholder="选性别" :allowclear="true" size="small">        <a-select-option value="男">男</a-select-option>        <a-select-option value="女">女</a-select-option>      </a-select>    </a-col>    <a-col :span="4">      <a-select v-model:value="dto.age" placeholder="选年龄" :allowclear="true" size="small">        <a-select-option value="0,20">20以下</a-select-option>        <a-select-option value="21,30">21~30</a-select-option>        <a-select-option value="31,40">31~40</a-select-option>        <a-select-option value="40,120">40以上</a-select-option>      </a-select>    </a-col>    <a-col :span="2">      <a-button @click="tableChange" type="primary" size="small">搜索</a-button>    </a-col>  </a-row>  <hr>  <a-table :columns="columns" :data-source="students" row-key="id" :pagination="pagination" @change="tableChange" :row-selection="{selectedRowKeys:ids,onChange:onSelectChange}">    <template #bodycell="{column, record}">      <template v-if="column.dataIndex==='name'">      {{record.name + (record.sex==='男'?'(大侠)':'(女侠)')}}      </template>      <template v-else-if="column.dataIndex==='operation'">      <a>修改</a>      <a-divider type="vertical"></a-divider>      <a-popconfirm title="确认要删除该学生吗?" ok-text="确定" cancel-text="取消" @confirm="onDelete(record.id)">        <a>删除</a>         </a-popconfirm>               </template>    </template>  </a-table>  </template><script setup lang="ts">import axios from "../api/request";import { ref, computed } from "vue";import { usePagination, useRequest } from "vue-request";import { AxiosRespPage, AxiosRespString, Student, StudentQueryDto } from "../model/Model8080";import { PaginationProps } from "ant-design-vue";// >>>>>>>>>>>>>> 搜索功能开始const dto = ref({page: 1, size: 5, name: '', sex: null, age: null})const {data, total, run: search} = usePagination<AxiosRespPage<Student>, StudentQueryDto[]>(  (d) => axios.get('/api/students/q', {params:d}),  {    defaultParams: [dto.value],    pagination: {      currentKey: "page",      pageSizeKey: 'size',      totalKey: 'data.data.total'    }  })function tableChange(pagination: PaginationProps) {   // console.log(pagination)  dto.value.page = pagination.current ?? 1  dto.value.size = pagination.pageSize ?? 5  search(dto.value)}const pagination = computed<PaginationProps>(()=>{  return {    current: dto.value.page, // 当前页    pageSize: dto.value.size, // 页大小    total: total.value,       // 总记录数    showSizeChanger: true,    // 显示页大小的下拉列表    pageSizeOptions: ["1","2","3","4","5"] // 自定义下拉列表内容  }})const students = computed(()=>{  return data.value?.data.data.list || []})// <<<<<<<<<<<<<< 搜索功能结束// >>>>>>>>>>>>>> 删除功能开始async function onDelete(id:number) {  // console.log("学生id是:"+id)  await deleteById(id)      // 删除请求 删除响应  search(dto.value)        //                   查询请求 查询响应}const { runAsync: deleteById } = useRequest<AxiosRespString, number[]>(  (id) => axios.delete(`/api/students/${id}`),  {    manual: true  })// <<<<<<<<<<<<<< 删除功能结束// >>>>>>>>>>>>>> 删除选中开始const ids = ref<number[]>([])function onSelectChange(keys:number[]) {  // console.log(keys)  ids.value = keys}async function onDeleteIds() {  await deleteByIds(ids.value)  ids.value = []  search(dto.value)}const { runAsync: deleteByIds } = useRequest<AxiosRespString, number[][]>(  (ids)=>axios.delete('/api/students', {data: ids}),  {    manual: true  })const visible = ref(false)function onVisibleChange(v:boolean) {  if(!v) { // 希望隐藏    visible.value = false  } else { // 希望显示    visible.value = ids.value.length > 0  }}// <<<<<<<<<<<<<< 删除选中结束const columns = ref([  {    title: "编号",    dataIndex: "id",  },  {    title: "姓名",    dataIndex: "name",  },  {    title: "性别",    dataIndex: "sex",  },  {    title: "年龄",    dataIndex: "age",  },  {    title: '操作',    dataIndex: 'operation'  }]);</script><style scoped>  .ant-input, .ant-select {    width: 80px;  }</style></code></pre><h4><span id="新增-修改">新增、修改</span></h4><p>子组件</p><pre class=" language-vue"><code class="language-vue"><template>  <a-modal :visible="visible" :title="title" @ok="onOk" @cancel="onCancel">    <a-form>      <a-form-item label="编号" v-if="id">        <a-input readonly v-model:value="id"></a-input>      </a-form-item>      <a-form-item label="姓名">        <a-input v-model:value="dto.name"></a-input>      </a-form-item>      <a-form-item label="性别">        <a-radio-group v-model:value="dto.sex">          <a-radio-button value="男">男</a-radio-button>          <a-radio-button value="女">女</a-radio-button>        </a-radio-group>      </a-form-item>      <a-form-item label="年龄">        <a-input-number v-model:value="dto.age"></a-input-number>      </a-form-item>    </a-form>  </a-modal></template><script setup lang="ts">import axios from "../api/request";import { ref, computed } from "vue";import { useRequest } from "vue-request";import { StudentSaveDto, AxiosRespString } from "../model/Model8080";import { Form } from 'ant-design-vue'// 定义属性const props = defineProps<{id:number, dto:StudentSaveDto, visible:boolean}>()const title = computed(()=> props.id===0?'新增学生':'修改学生')// 定义事件const emit = defineEmits(['update:visible', 'saved'])async function onOk() {  if(props.id === 0) {    await insert(props.dto)  } else {    await update(props.dto)  }  emit('saved')  // 发送事件给父组件, 希望把 visible 改为 false  emit('update:visible', false) }function onCancel() {  // 发送事件给父组件, 希望把 visible 改为 false  emit('update:visible', false)}const {runAsync:insert} = useRequest<AxiosRespString,StudentSaveDto[]>(  (dto)=>axios.post('/api/students', dto),  {    manual: true  })const {runAsync:update} = useRequest<AxiosRespString,StudentSaveDto[]>(  (dto)=>axios.put(`/api/students/${props.id}`, dto),  {    manual: true  })</script></code></pre><p>父组件使用子组件</p><pre class=" language-vue"><code class="language-vue"><a4save :id="id" :dto="saveDto" v-model:visible="saveVisible"></a4save><script setup lang="ts">// ...// >>>>>>>>>>>>>> 新增、修改开始const saveVisible = ref(false)const id = ref(0)const saveDto = reactive({name:'', sex:'男', age:18})function onInsert() {  saveVisible.value = true  id.value = 0  Object.assign(saveDto, {name:'', sex:'男', age:18})}function onUpdate(record: Student) {  saveVisible.value = true  id.value = record.id  Object.assign(saveDto, record)}function onSaved() {  search(dto.value)}    // <<<<<<<<<<<<<< 新增、修改结束</script></code></pre><ul><li><p>saveDto 使用 reactive 包装，是为了解决后续表单校验失效问题</p></li><li><p>Object.assign 是将源对象（参数2）的属性值赋值给目标对象（参数1）的同名属性，效果等价于</p><pre class=" language-js"><code class="language-js">saveDto<span class="token punctuation">.</span>name <span class="token operator">=</span> record<span class="token punctuation">.</span>namesaveDto<span class="token punctuation">.</span>sex <span class="token operator">=</span> record<span class="token punctuation">.</span>sexsaveDto<span class="token punctuation">.</span>age <span class="token operator">=</span> record<span class="token punctuation">.</span>age</code></pre></li></ul><h4><span id="全局消息">全局消息</span></h4><p>在 request.ts 中对响应消息统一处理</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'ant-design-vue'</span><span class="token comment" spellcheck="true">// ...</span><span class="token comment" spellcheck="true">// 响应拦截器</span>_axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 状态码  2xx</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>      message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ... </span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 状态码 > 2xx, 400,401,403,404,500</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4><span id="表单校验">表单校验</span></h4><pre class=" language-vue"><code class="language-vue"><template>  <a-modal :visible="visible" :title="title" @ok="onOk" @cancel="onCancel">    <a-form>      <a-form-item label="编号" v-if="id">        <a-input readonly v-model:value="id"></a-input>      </a-form-item>      <a-form-item label="姓名" v-bind="validateInfos.name">        <a-input v-model:value="dto.name"></a-input>      </a-form-item>      <a-form-item label="性别" v-bind="validateInfos.sex">        <a-radio-group v-model:value="dto.sex">          <a-radio-button value="男">男</a-radio-button>          <a-radio-button value="女">女</a-radio-button>        </a-radio-group>      </a-form-item>      <a-form-item label="年龄" v-bind="validateInfos.age">        <a-input-number v-model:value="dto.age"></a-input-number>      </a-form-item>    </a-form>  </a-modal></template><script setup lang="ts">import axios from "../api/request";import { ref, computed } from "vue";import { useRequest } from "vue-request";import { StudentSaveDto, AxiosRespString } from "../model/Model8080";import { Form } from 'ant-design-vue'// 定义属性const props = defineProps<{id:number, dto:StudentSaveDto, visible:boolean}>()const title = computed(()=> props.id===0?'新增学生':'修改学生')// 定义事件const emit = defineEmits(['update:visible', 'saved'])async function onOk() {  try {    // 提交前校验    await validate()    if(props.id === 0) {      await insert(props.dto)    } else {      await update(props.dto)    }    emit('saved')    // 发送事件给父组件, 希望把 visible 改为 false    emit('update:visible', false)   } catch (e) {    console.error(e)  }}function onCancel() {  // 发送事件给父组件, 希望把 visible 改为 false  emit('update:visible', false)}const {runAsync:insert} = useRequest<AxiosRespString,StudentSaveDto[]>(  (dto)=>axios.post('/api/students', dto),  {    manual: true  })const {runAsync:update} = useRequest<AxiosRespString,StudentSaveDto[]>(  (dto)=>axios.put(`/api/students/${props.id}`, dto),  {    manual: true  })const rules = ref({  name: [    {required: true, message:'姓名必须'},    {min:2, message:'字符数至少为2'}  ],  sex: [    {required: true, message:'性别必须'}  ],  age: [    {required: true, message:'年龄必须'},    {min:10, message:'年龄最小为10岁', type:'number'},    {max:120, message:'年龄最大为120岁', type:'number'}  ]})// 参数1: 待校验的数据// 参数2: 校验规则const { validateInfos, validate } = Form.useForm(props.dto, rules)</script></code></pre><h3><span id="2-vue-router">2) vue-router</span></h3><h4><span id="安装">安装</span></h4><pre class=" language-cmd"><code class="language-cmd">npm install vue-router@4</code></pre><h4><span id="创建-router">创建 router</span></h4><p>首先创建一个 /src/router/a5router.ts 文件，在其中定义路由</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>createRouter<span class="token punctuation">,</span> createWebHashHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> A51 <span class="token keyword">from</span> <span class="token string">'../views/A51.vue'</span><span class="token keyword">import</span> A52 <span class="token keyword">from</span> <span class="token string">'../views/A52.vue'</span><span class="token comment" spellcheck="true">// 路由 => 路径和组件之间的对应关系</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/a1'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> A51  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/a2'</span><span class="token punctuation">,</span>     component<span class="token punctuation">:</span> A52  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   history<span class="token punctuation">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 路径格式</span>  routes<span class="token punctuation">:</span> routes <span class="token comment" spellcheck="true">// 路由数组</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre><ul><li><p>createWebHashHistory 是用 # 符号作为【单页面】跳转技术，上面两个路由访问时路径格式为</p><ul><li><a href="http://localhost:7070/#/a1">http://localhost:7070/#/a1</a></li><li><a href="http://localhost:7070/#/a2">http://localhost:7070/#/a2</a></li></ul></li><li><p>每个路由都有两个必须属性</p><ul><li><p>path：路径</p></li><li><p>component：组件</p></li></ul></li><li><p>createRouter 用来创建 router 对象，作为默认导出</p></li></ul><p>需要在 main.ts 中导入 router 对象：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// ...</span><span class="token keyword">import</span> A5 <span class="token keyword">from</span> <span class="token string">'./views/A5.vue'</span>  <span class="token comment" spellcheck="true">// vue-router</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router/a5router'</span><span class="token function">createApp</span><span class="token punctuation">(</span>A5<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>antdv<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><p>A5 是根组件，不必在 router 中定义，但需要在其中定义 router-view，用来控制路由跳转后，A51、A52 这些组件的显示位置，内容如下</p><pre class=" language-vue"><code class="language-vue"><template>  <div class="a5">    <router-view></router-view>  </div></template></code></pre><p>效果如下</p><p><img src="/2023/03/04/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue3/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220926145812121.png" alt="image-20220926145812121"></p><p><img src="/2023/03/04/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue3/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220926145959690.png" alt="image-20220926145959690"></p><h4><span id="动态导入">动态导入</span></h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>createRouter<span class="token punctuation">,</span> createWebHashHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> A51 <span class="token keyword">from</span> <span class="token string">'../views/A51.vue'</span><span class="token keyword">import</span> A52 <span class="token keyword">from</span> <span class="token string">'../views/A52.vue'</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/a3'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/A53.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><ul><li>用 import 关键字导入，效果是打包时会将组件的 js 代码都打包成一个大的 js 文件，如果组件非常多，会影响页面加载速度</li><li>而 import 函数导入（动态导入），则是按需加载，即<ul><li>当路由跳转到 /a3 路径时，才会去加载 A53 组件对应的 js 代码</li><li>vue-router 官方推荐采用动态导入</li></ul></li></ul><h4><span id="嵌套路由">嵌套路由</span></h4><p>如果希望再嵌套更深层次的路由跳转，例如：希望在 A53 组件内再进行路由跳转</p><p><img src="/2023/03/04/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue3/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220926150819624.png" alt="image-20220926150819624"></p><p>首先，修改 A53.vue</p><pre class=" language-vue"><code class="language-vue"><template>  <div class="a53">    <router-view></router-view>  </div></template></code></pre><p>其次，再修改 /src/router/a5router.ts 文件 内容</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>createRouter<span class="token punctuation">,</span> createWebHashHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> A51 <span class="token keyword">from</span> <span class="token string">'../views/A51.vue'</span><span class="token keyword">import</span> A52 <span class="token keyword">from</span> <span class="token string">'../views/A52.vue'</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/a3'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/A53.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'student'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/A531.vue'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'teacher'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/A532.vue'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// ...</span></code></pre><p>将来访问 /a3/student 时，效果为</p><p><img src="/2023/03/04/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue3/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220926151216217.png" alt="image-20220926151216217"></p><p>访问 /a3/teacher 时，效果为</p><p><img src="/2023/03/04/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue3/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220926151249403.png" alt="image-20220926151249403"></p><h4><span id="重定向">重定向</span></h4><p>用法1</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>createRouter<span class="token punctuation">,</span> createWebHashHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> A51 <span class="token keyword">from</span> <span class="token string">'../views/A51.vue'</span><span class="token keyword">import</span> A52 <span class="token keyword">from</span> <span class="token string">'../views/A52.vue'</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/a3'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/A53.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> <span class="token string">'/a3/student'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 重定向到另外路径</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'student'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/A531.vue'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'teacher'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/A532.vue'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// ...</span></code></pre><p>效果是，页面输入 /a3，紧接着会重定向跳转到 /a3/student</p><p>用法2</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>createRouter<span class="token punctuation">,</span> createWebHashHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> A51 <span class="token keyword">from</span> <span class="token string">'../views/A51.vue'</span><span class="token keyword">import</span> A52 <span class="token keyword">from</span> <span class="token string">'../views/A52.vue'</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/a1'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> A51  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/a2'</span><span class="token punctuation">,</span>     component<span class="token punctuation">:</span> A52  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/:pathMatcher(.*)*'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 可以匹配剩余的路径</span>    redirect<span class="token punctuation">:</span> <span class="token string">'/a2'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// ...</span></code></pre><p>效果是，当页面输入一个不存在路径 /aaa 时，会被 <code>path: &#39;/:pathMatcher(.*)*&#39;</code> 匹配到，然后重定向跳转到 A52 组件去</p><h4><span id="主页布局">主页布局</span></h4><p>借助 antdv 的 layout 组件，可以实现主页【上】【左】【右】布局</p><pre class=" language-vue"><code class="language-vue"><template>  <div class="a53">    <a-layout>      <a-layout-header></a-layout-header>      <a-layout>        <a-layout-sider></a-layout-sider>        <a-layout-content>          <router-view></router-view>        </a-layout-content>      </a-layout>    </a-layout>  </div></template><style scoped>.a53 {  height: 100%;  background-color: rgb(220, 225, 255);  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Ctext x='35' y='10' font-size='14' font-family='system-ui, sans-serif' text-anchor='middle' dominant-baseline='middle'%3EA53(主页)%3C/text%3E%3C/svg%3E");  padding: 20px;  box-sizing: border-box;}.ant-layout-header {  height: 50px;  background-color:darkseagreen;}.ant-layout-sider {  background-color:lightsalmon;}.ant-layout-content {  background-color: aliceblue;}.ant-layout-footer {  background-color:darkslateblue;  height: 30px;}.ant-layout {  height: 100%;}.ant-layout-has-sider {  height: calc(100% - 50px);}</style></code></pre><h4><span id="侧边栏菜单">侧边栏菜单</span></h4><pre class=" language-vue"><code class="language-vue"><template>  <div class="a53">    <a-layout>      <a-layout-header></a-layout-header>      <a-layout>        <a-layout-sider>          <a-menu theme="dark" mode="inline">            <a-menu-item :key="1">              <router-link to="/a3/student">菜单1</router-link>            </a-menu-item>            <a-menu-item :key="2">              <router-link to="/a3/teacher">菜单2</router-link>            </a-menu-item>            <a-menu-item :key="3">菜单3</a-menu-item>            <a-sub-menu :key="4" title="菜单4">              <a-menu-item :key="41">菜单41</a-menu-item>              <a-menu-item :key="42">菜单42</a-menu-item>            </a-sub-menu>          </a-menu>        </a-layout-sider>        <a-layout-content>          <router-view></router-view>        </a-layout-content>      </a-layout>    </a-layout>  </div></template></code></pre><ul><li>a-menu-item 与 a-sub-menu 都必须为 key 属性唯一赋值，否则会产生混乱</li><li>router-link 标签用来切换路由，to 是目标路由的路径</li><li>theme 属性定义菜单的主题（默认亮色主题，dark 为暗色主题）</li><li>mode 属性定义子菜单的展示模式（默认弹出，inline 显示在下方）</li></ul><h4><span id="菜单图标">菜单图标</span></h4><p>安装图标依赖</p><pre class=" language-cmd"><code class="language-cmd">npm install @ant-design/icons-vue</code></pre><p>菜单中使用图标</p><pre class=" language-vue"><code class="language-vue"><template>  <div class="a53">    <a-layout>      <a-layout-header></a-layout-header>      <a-layout>        <a-layout-sider>          <a-menu theme="dark" mode="inline">            <a-menu-item :key="1">              <template #icon>                <highlight-outlined>              </highlight-outlined></template>              <router-link to="/a3/student">菜单1</router-link>            </a-menu-item>            <a-menu-item :key="2">              <template #icon>                <align-center-outlined>              </align-center-outlined></template>              <router-link to="/a3/teacher">菜单2</router-link>            </a-menu-item>            <a-menu-item :key="3">              <template #icon>                <strikethrough-outlined>              </strikethrough-outlined></template>              菜单3</a-menu-item>            <a-sub-menu :key="4" title="菜单4">              <template #icon>                <sort-descending-outlined>              </sort-descending-outlined></template>              <a-menu-item :key="41">菜单41</a-menu-item>              <a-menu-item :key="42">菜单42</a-menu-item>            </a-sub-menu>          </a-menu>        </a-layout-sider>        <a-layout-content>          <router-view></router-view>        </a-layout-content>      </a-layout>    </a-layout>  </div></template><script setup lang="ts">import {HighlightOutlined, AlignCenterOutlined, StrikethroughOutlined, SortDescendingOutlined} from '@ant-design/icons-vue'</script></code></pre><ul><li>图标组件没有全局绑定，需要 import 之后才能使用</li><li>用 <code>&lt;template #icon&gt;&lt;/template&gt;</code> 插槽，才能确定图标展示的位置（菜单文字之前）</li></ul><h4><span id="二次封装图标组件">二次封装图标组件</span></h4><p>最终希望用统一的图标组件去使用图标，图标名只是作为一个属性值传递进去，例如：</p><p>使用者</p><pre class=" language-vue"><code class="language-vue"><template>  <a-icon icon="highlight-outlined"></a-icon>  <a-icon icon="align-center-outlined"></a-icon>  <a-icon icon="strikethrough-outlined"></a-icon>  <a-icon icon="sort-descending-outlined"></a-icon></template><script setup lang="ts">import AIcon from '../components/AIcon1.vue'</script></code></pre><h5><span id="方法1使用-vue-组件">方法1，使用 vue 组件</span></h5><pre class=" language-vue"><code class="language-vue"><script lang="ts" setup>import {HighlightOutlined, AlignCenterOutlined, StrikethroughOutlined, SortDescendingOutlined} from '@ant-design/icons-vue'const props = defineProps<{icon:string}>()</script><template>  <highlight-outlined v-if="icon==='highlight-outlined'"></highlight-outlined>  <align-center-outlined v-else-if="icon==='align-center-outlined'"></align-center-outlined>  <strikethrough-outlined v-else-if="icon==='strikethrough-outlined'"></strikethrough-outlined>  <sort-descending-outlined v-else-if="icon==='sort-descending-outlined'"></sort-descending-outlined></template></code></pre><ul><li>缺点：实现太笨</li></ul><h5><span id="方法2使用函数式组件">方法2，使用函数式组件</span></h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> <span class="token operator">*</span> as Icons <span class="token keyword">from</span> <span class="token string">'@ant-design/icons-vue'</span><span class="token keyword">interface</span> <span class="token class-name">Module</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>p<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 参数1: 组件属性</span><span class="token keyword">const</span> AIcon <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">:</span><span class="token punctuation">{</span>icon<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// console.log(props.icon)</span>  <span class="token comment" spellcheck="true">// console.log(Icons)</span>  <span class="token comment" spellcheck="true">// 参数1: 组件对象</span>  <span class="token keyword">const</span> im<span class="token punctuation">:</span> Module <span class="token operator">=</span> Icons  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>im<span class="token punctuation">[</span><span class="token function">toCamelCase</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>icon<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> AIcon<span class="token comment" spellcheck="true">// 将-分隔的单词转换为大驼峰命名的单词</span><span class="token keyword">function</span> <span class="token function">toCamelCase</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// highlight-outlined</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['highlight', 'outlined']</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['Highlight', 'Outlined']</span>    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*Icons 的结构如下{  HighlightOutlined: HighlightOutlined组件对象,  MonitorOutlined: MonitorOutlined组件对象,  ...}*/</span></code></pre><ul><li>需要动态生成标签的时候，可以考虑使用函数式组件</li></ul><h5><span id="方法3使用-jsx-组件">方法3，使用 jsx 组件</span></h5><p>首先，安装  </p><pre class=" language-cmd"><code class="language-cmd">npm install @vitejs/plugin-vue-jsx -D</code></pre><p>配置 vite.config.ts</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token keyword">import</span> vueJsx <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue-jsx'</span><span class="token comment" spellcheck="true">// https://vitejs.dev/config/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vueJsx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>编写一个 Hi.tsx 组件</p><pre class=" language-tsx"><code class="language-tsx">export default {  props: {    msg: String  },  setup(props: { msg: string }) {    return () => <h5><span id="propsmsg">{props.msg}</span></h5>  }}</code></pre><p>然后被其它组件使用</p><pre class=" language-vue"><code class="language-vue"><script setup lang="ts">import Hi from '../components/Hi'</script><template>  <hi msg="Hello,World"></hi></template></code></pre><p>用 jsx 实现图标组件</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> as Icons <span class="token keyword">from</span> <span class="token string">'@ant-design/icons-vue'</span><span class="token keyword">interface</span> <span class="token class-name">Module</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>p<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">toCamelCase</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// highlight-outlined</span>  <span class="token keyword">return</span> str    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['highlight', 'outlined']</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['Highlight', 'Outlined']</span>    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HighlightOutlined</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    icon<span class="token punctuation">:</span> String  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> <span class="token punctuation">{</span>icon<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> im<span class="token punctuation">:</span> Module <span class="token operator">=</span> Icons    <span class="token keyword">const</span> tag <span class="token operator">=</span> im<span class="token punctuation">[</span><span class="token function">toCamelCase</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>icon<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 图标组件</span>    <span class="token comment" spellcheck="true">// HighlightOutlined</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>tag<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tag<span class="token operator">></span> <span class="token comment" spellcheck="true">// 返回组件标签</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4><span id="动态路由与菜单">动态路由与菜单</span></h4><h5><span id="路由文件">路由文件</span></h5><p>a6router.js</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHashHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useStorage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@vueuse/core'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Route<span class="token punctuation">,</span> Menu <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../model/Model8080'</span><span class="token keyword">const</span> clientRoutes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/A6Login.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/404'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'404'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/A6NotFound.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'main'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/A6Main.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/:pathMatcher(.*)*'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'remaining'</span><span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> <span class="token string">'/404'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  history<span class="token punctuation">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> clientRoutes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> serverMenus <span class="token operator">=</span> useStorage<span class="token operator">&lt;</span>Menu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'serverMenus'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> serverRoutes <span class="token operator">=</span> useStorage<span class="token operator">&lt;</span>Route<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'serverRoutes'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">addServerRoutes</span><span class="token punctuation">(</span>serverRoutes<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">addServerRoutes</span><span class="token punctuation">(</span>routeList<span class="token punctuation">:</span> Route<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> r of routeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>parentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>parentName<span class="token punctuation">,</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> r<span class="token punctuation">.</span>path<span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>component<span class="token punctuation">)</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> r<span class="token punctuation">.</span>name      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  serverRoutes<span class="token punctuation">.</span>value <span class="token operator">=</span> routeList<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">resetRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> r of clientRoutes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  serverRoutes<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span>  serverMenus<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre><p>本文件重要的函数及变量</p><ul><li>addServerRoutes 函数向路由表中添加由服务器提供的路由，路由分成两部分<ul><li>clientRoutes 这是客户端固定的路由</li><li>serverRoutes 这是服务器变化的路由，存储于 localStorage</li></ul></li><li>resetRoutes 函数用来将路由重置为 clientRoutes <ul><li>vue-router@4 中的 addRoute 方法会【覆盖】同名路由，这是这种实现的关键</li><li>因此，服务器返回的路由最好是 main 的子路由，这样重置时就会比较简单，用之前的 main 一覆盖就完事了</li></ul></li><li>serverMenus 变量记录服务器变化的菜单，存储于 localStorage</li></ul><h5><span id="登录组件">登录组件</span></h5><p>动态路由应当在登录时生成，A6Login.vue</p><pre class=" language-vue"><code class="language-vue"><template>  <div class="login">    <a-form :label-col="{ span: 6 }" autocomplete="off">      <a-form-item label="用户名" v-bind="validateInfos.username">        <a-input v-model:value="dto.username">      </a-input></a-form-item>      <a-form-item label="密码" v-bind="validateInfos.password">        <a-input-password v-model:value="dto.password">      </a-input-password></a-form-item>      <a-form-item :wrapper-col="{ offset: 6, span: 16 }">        <a-button type="primary" @click="onClick">Submit</a-button>      </a-form-item>          </a-form>  </div></template><script setup lang="ts">import { ref, onMounted } from 'vue'import { Form } from 'ant-design-vue'import { useRouter } from 'vue-router'import axios from '../api/request'import { useRequest } from 'vue-request'import { AxiosRespToken, LoginDto, AxiosRespMenuAndRoute } from '../model/Model8080'import { resetRoutes, addServerRoutes, serverMenus } from '../router/a6router'const dto = ref({username:'', password:''})const rules = ref({  username: [    {required: true, message:'用户名必填'}  ],  password:[    {required: true, message:'密码必填'}  ]})const { validateInfos, validate } = Form.useForm(dto, rules)const router = useRouter()const { runAsync:login } = useRequest<AxiosRespToken, LoginDto[]>((dto)=> axios.post('/api/loginJwt', dto), {manual:true})const { runAsync:menu } = useRequest<AxiosRespMenuAndRoute, string[]>((username)=> axios.get(`/api/menu/${username}`), {manual:true})async function onClick() {  try {    await validate()    const loginResp = await login(dto.value    if(loginResp.data.code === 200) { // 登录成功      const token = loginResp.data.data.token      const menuResp = await menu(dto.value.username)      const routeList = menuResp.data.data.routeList      addServerRoutes(routeList)      serverMenus.value = menuResp.data.data.menuTree      router.push('/')    })  } catch (e) {    console.error(e)  }}onMounted(()=>{  resetRoutes()})</script><style scoped>.login{  margin: 200px auto;  width: 25%;  padding: 20px;  height: 180px;  background-color: antiquewhite;}</style></code></pre><ul><li>登录成功后去请求 <code>/api/menu/&#123;username&#125;</code>  获取该用户的菜单和路由</li><li>router.push 方法用来以编程方式跳转至主页路由</li></ul><h5><span id="主页组件">主页组件</span></h5><p>A6Main.vue</p><pre class=" language-vue"><code class="language-vue"><template>  <div class="a6main">    <a-layout>      <a-layout-header>      </a-layout-header>      <a-layout>        <a-layout-sider>          <a-menu mode="inline" theme="dark">            <template v-for="m1 of serverMenus">              <a-sub-menu v-if="m1.children" :key="m1.id" :title="m1.title">                <template #icon><a-icon :icon="m1.icon"></a-icon></template>                <a-menu-item v-for="m2 of m1.children" :key="m2.id">                  <template #icon><a-icon :icon="m2.icon"></a-icon></template>                  <router-link v-if="m2.routePath" :to="m2.routePath">{{m2.title}}</router-link>                  <span v-else>{{m2.title}}</span>                </a-menu-item>              </a-sub-menu>              <a-menu-item v-else :key="m1.id">                <template #icon><a-icon :icon="m1.icon"></a-icon></template>                <router-link v-if="m1.routePath" :to="m1.routePath">{{m1.title}}</router-link>                <span v-else>{{m1.title}}</span>              </a-menu-item>            </template>                      </a-menu>        </a-layout-sider>        <a-layout-content>          <router-view></router-view>        </a-layout-content>      </a-layout>    </a-layout>  </div></template><script setup lang="ts">import AIcon from '../components/AIcon3' // jsx icon 组件import { serverMenus } from '../router/a6router'</script><style scoped>.a6main {  height: 100%;  background-color: rgb(220, 225, 255);  box-sizing: border-box;}.ant-layout-header {  height: 50px;  background-color:darkseagreen;}.ant-layout-sider {  background-color:lightsalmon;}.ant-layout-content {  background-color: aliceblue;}.ant-layout-footer {  background-color:darkslateblue;  height: 30px;}.ant-layout {  height: 100%;}.ant-layout-has-sider {  height: calc(100% - 50px);}</style></code></pre><h4><span id="token-使用">token 使用</span></h4><ol><li>获取用户信息，例如服务器端可以把用户名、该用户的路由、菜单信息都统一从 token 返回</li><li>前端路由跳转依据，例如跳转前检查 token，如果不存在，表示未登录，就避免跳转至某些路由</li><li>后端 api 访问依据，例如每次发请求携带 token，后端需要身份校验的 api 需要用到</li></ol><h3><span id="3-pinia">3) pinia</span></h3><p>需求：在组件 p1 里更新了数据，主页组件也同步更新显示</p><p><img src="/2023/03/04/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue3/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220930172635166.png" alt="image-20220930172635166"></p><ul><li>storage 虽然可以实现多个组件的数据共享，但是需要【主动访问】才能获取更新后的数据</li><li>本例中由于没有涉及主页组件的 mounted 操作，因此并不会【主动】获取 storage 的数据 </li></ul><h4><span id="安装">安装</span></h4><pre class=" language-cmd"><code class="language-cmd">npm install pinia</code></pre><p>在 main.ts 中引入</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span><span class="token comment" spellcheck="true">// ...</span><span class="token function">createApp</span><span class="token punctuation">(</span>A6<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>antdv<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><h4><span id="定义store">定义Store</span></h4><p>再新建 store 目录来管理共享数据，下面是 /src/store/UserInfo.ts</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'../api/request'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"pinia"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> UserInfoDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../model/Model8080'</span><span class="token keyword">export</span> <span class="token keyword">const</span> useUserInfo <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> username<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    async <span class="token keyword">get</span><span class="token punctuation">(</span>username<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> resp <span class="token operator">=</span> await axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/api/info/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>      Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    async <span class="token function">update</span><span class="token punctuation">(</span>dto<span class="token punctuation">:</span> UserInfoDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>      await axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/info'</span><span class="token punctuation">,</span> dto<span class="token punctuation">)</span>      Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> dto<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li><p>定义了 useUserInfo 函数，用来获取共享数据，它可能用于多个组件</p><ul><li>命名习惯上，函数变量以 use 打头</li></ul></li><li><p>state 定义数据格式</p></li><li><p>actions 定义操作数据的方法</p><ul><li><p>get 方法用来获取用户信息</p></li><li><p>update 方法用来修改用户信息</p></li></ul></li></ul><ul><li>由于 useRequest 必须放在 setup 函数内，这里简化起见，直接使用了 axios</li></ul><p>获取用户信息</p><pre class=" language-vue"><code class="language-vue"><template>  <div class="a6main">    <a-layout>      <a-layout-header>        <span>{{serverUsername}} 【{{userInfo.name}} - {{userInfo.sex}}】</span>      </a-layout-header>      <a-layout>        <!-- ... -->      </a-layout>    </a-layout>  </div></template><script setup lang="ts">import { onMounted } from 'vue';import AIcon from '../components/AIcon3' // jsx icon 组件import { serverMenus, serverUsername } from '../router/a6router'import { useUserInfo } from '../store/UserInfo'const userInfo = useUserInfo()onMounted(()=>{  userInfo.get(serverUsername.value)})</script></code></pre><p>修改用户信息</p><pre class=" language-vue"><code class="language-vue"><template>  <div class="a6p1">    <h3><span id="修改用户信息">修改用户信息</span></h3>    <hr>    <a-form>      <a-form-item label="用户名">        <a-input readonly v-model:value="dto.username"></a-input>      </a-form-item>      <a-form-item label="姓名" v-bind="validateInfos.name">        <a-input v-model:value="dto.name"></a-input>      </a-form-item>      <a-form-item label="性别">        <a-radio-group v-model:value="dto.sex">          <a-radio-button value="男">男</a-radio-button>          <a-radio-button value="女">女</a-radio-button>        </a-radio-group>      </a-form-item>    </a-form>    <a-button type="primary" @click="onClick">确定</a-button>  </div></template><script setup lang="ts">import { Form } from 'ant-design-vue'import { onMounted, ref } from 'vue'import { UserInfoDto } from '../model/Model8080'import { useUserInfo } from '../store/UserInfo';const dto = ref<UserInfoDto>({ username: '', name: '', sex: '' })const userInfo = useUserInfo()onMounted(()=>{  Object.assign(dto.value, userInfo)})const rules = ref({  name: [    {required: true, message:'姓名必填'}  ]})const { validateInfos, validate } = Form.useForm(dto, rules)async function onClick() {  try {    await validate()    await userInfo.update(dto.value)  } catch (e) {    console.error(e)  }}</script></code></pre><ul><li>不能直接把 userInfo 绑定到表单，需要 dto 中转一下</li><li>userInfo.update 和 useInfo.get 返回的都是 Promise 对象，可以配合 await 一起用</li></ul><h3><span id="后记">后记</span></h3><p>vite + vue3 + vue-router + ts 还没有太多成熟的项目范例，可以参考 <a href="https://github.com/sendya/preview-pro">GitHub - sendya/preview-pro: Use pro-layout in vitejs. preview https://sendya.github.io/preview-pro/index.html</a>，它提供了基本的布局和样例代码</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java程序员要掌握的前端-js</title>
      <link href="/2023/03/02/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-js/"/>
      <url>/2023/03/02/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-js/</url>
      
        <content type="html"><![CDATA[<h1><span id="第二章-javascript">第二章. Javascript</span></h1><p>它是一种脚本语言，可以用来更改页面内容，控制多媒体，制作图像、动画等等</p><p>例子</p><ul><li>修改页面内容</li></ul><p>js 代码位置</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// js 代码</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>引入 js 脚本</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js脚本路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>注意，到了框架之后，引入方式会有不同</li></ul><h2><span id="1-变量与数据类型">1. 变量与数据类型</span></h2><h3><span id="声明变量">声明变量</span></h3><h4><span id="1-let-star">1) let :star:</span></h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> 变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span></code></pre><ul><li>let 声明的变量可以被多次赋值，例如</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始值是 100</span>a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// ok, 被重新赋值为 200</span></code></pre><h4><span id="2-const-star">2) const :star:</span></h4><ul><li>const 修饰的叫常量，只能赋值一次</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始值是 300</span>b <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// error, 不能再次赋值</span></code></pre><ul><li>const 并不意味着它引用的内容不可修改，例如</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// ok, 数组内容被修改成 [1,2,4]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// error, 不能再次赋值</span></code></pre><h4><span id="3-var">3) var</span></h4><p>var 声明的变量可以被多次赋值，例如</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>f <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></code></pre><h3><span id="基本类型">基本类型</span></h3><h4><span id="12-undefined-和-null">1,2) undefined 和 null</span></h4><ul><li>执行表达式或函数，没有返回结果，出现 undefined</li><li>访问数组不存在的元素，访问对象不存在的属性，出现 undefined</li><li>定义变量，没有初始化，出现 undefined</li></ul><p>例</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 函数没有返回值, 结果是  undefined</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 表达式没有返回值, 结果是 undefined</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组未定义元素是 undefined</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对象未定义属性是 undefined</span><span class="token keyword">let</span> d<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 变量未初始化是 undefined</span></code></pre><p>二者共同点</p><ul><li>都没有属性、方法</li><li>二者合称 Nullish</li></ul><p>二者区别</p><ul><li>undefined 由 js 产生</li><li>null 由程序员提供</li></ul><h4><span id="3-string-star">3) string :star:</span></h4><p>js 字符串三种写法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 双引号</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 单引号</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello`</span></span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 反引号</span></code></pre><p>html 代码如下，用 java 和 js 中的字符串如何表示？</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>java 显得比较繁琐</p><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"&lt;a href=\"1.html\">超链接&lt;/a>"</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">""</span>"    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"1.html"</span><span class="token operator">></span>超链接<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token string">""</span>"<span class="token punctuation">;</span></code></pre><p>js 就比较灵活</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">'&lt;a href="1.html">超链接&lt;/a>'</span><span class="token punctuation">;</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;a href="1.html">超链接&lt;/a>`</span></span><span class="token punctuation">;</span></code></pre><p>模板字符串（Template strings）</p><p>需求：拼接 URI 的请求参数，如</p><pre><code>/test?name=zhang&amp;age=18/test?name=li&amp;age=20</code></pre><p>传统方法拼接</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// zhang li ...</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 18 20 ...</span><span class="token keyword">let</span> uri <span class="token operator">=</span> <span class="token string">"/test?name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"&amp;age="</span> <span class="token operator">+</span> age<span class="token punctuation">;</span></code></pre><p>模板字符串方式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// zhang li ...</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 18 20 ...</span><span class="token keyword">let</span> uri <span class="token operator">=</span> <span class="token template-string"><span class="token string">`/test?name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;age=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span></code></pre><h4><span id="45-number-和-bigintstar">4,5) number 和 bigint:star:</span></h4><p>number 类型标识的是双精度浮动小数，例如</p><pre class=" language-js"><code class="language-js"><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 结果 3.3333333333333335</span></code></pre><p>既然是浮点小数，那么可以除零</p><pre class=" language-js"><code class="language-js"><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 结果 Infinity 正无穷大</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果 -Infinity 负无穷大</span></code></pre><p>浮点小数都有运算精度问题，例如</p><pre class=" language-js"><code class="language-js"><span class="token number">2.0</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果 0.8999999999999999</span></code></pre><p>字符串转数字</p><pre class=" language-js"><code class="language-js"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 结果是数字 10 </span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 结果是数字 10, 去除了小数部分</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果仍视为 number 浮点数, 因此结果为 3.3333333333333335</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 转换失败，结果是特殊值 NaN (Not a Number)</span></code></pre><p>要表示真正的整数，需要用 bigint，数字的结尾用 n 表示它是一个 bigint 类型</p><pre class=" language-js"><code class="language-js">10n <span class="token operator">/</span> 3n<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 结果 3n, 按整数除法处理</span></code></pre><h4><span id="6-boolean-star">6) boolean :star:</span></h4><ul><li>Truthy</li><li>Falsy</li></ul><p>在 js 中，并不是 boolean 才能用于条件判断，你可以在 if 语句中使用【数字】、【字符串】… 作为判断条件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"进入了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这时就有一个规则，当需要条件判断时，这个值被当作 true 还是 false，当作 true 的值归类为 truthy，当作 false 的值归类为 falsy</p><p>下面值都是 falsy</p><ul><li><code>false</code></li><li><code>Nullish (null, undefined)</code></li><li><code>0, 0n, NaN</code></li><li><code>&quot;&quot; &#39;&#39; ``</code>  即长度为零的字符串</li></ul><p>剩余的值绝大部分都是 truthy</p><p>有几个容易被当作 falsy 实际是 truthy 的</p><ul><li><code>&quot;false&quot;, &quot;0&quot;</code> 即字符串的 false 和 字符串的零</li><li><code>[]</code> 空数组</li><li><code>&#123;&#125;</code> 空对象</li></ul><h4><span id="7-symbol">7) symbol</span></h4><ul><li>很少使用</li></ul><h3><span id="对象类型">对象类型</span></h3><h4><span id="1-function-starstar">1) Function :star::star:</span></h4><h5><span id="定义函数">定义函数</span></h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 函数体</span>    <span class="token keyword">return</span> 结果<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>例</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5><span id="调用函数">调用函数</span></h5><pre class=" language-js"><code class="language-js"><span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>例</p><pre class=" language-js"><code class="language-js"><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 返回 3</span></code></pre><p>js 中的函数调用特点：对参数的<strong>类型</strong>和<strong>个数</strong>都没有限制，例如</p><pre class=" language-js"><code class="language-js"><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回 ab</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 返回 9, 第三个参数没有被用到, 不会报错</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 返回 NaN, 这时 b 没有定义是 undefined, undefined 做数学运算结果就是 NaN</span></code></pre><h5><span id="默认参数">默认参数</span></h5><p>java 中（spring）要实现默认参数的效果得这么做：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/page"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">page</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> page<span class="token punctuation">,</span>         <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue<span class="token operator">=</span><span class="token string">"10"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> size    <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">pagination</span><span class="token punctuation">(</span>page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5><span id="匿名函数">匿名函数</span></h5><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 函数体</span>    <span class="token keyword">return</span> 结果<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>例</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>第一种场景：定义完毕后立刻调用</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>第二种场景：作为其它对象的方法，例如</p><p>页面有元素</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我啊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>此元素有一个 onclick 方法，会在鼠标单击这个元素后被执行，onclick 方法刚开始是 null，需要赋值后才能使用</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"鼠标单击了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5><span id="箭头函数">箭头函数</span></h5><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 函数体</span>    <span class="token keyword">return</span> 结果<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>如果没有参数，() 还是要保留</li><li>如果只有一个参数，() 可以省略</li><li>如果函数体内只有一行代码，{} 可以省略</li><li>如果这一行代码就是结果，return 可以省略</li></ul><p>例</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5><span id="函数是对象">函数是对象</span></h5><p>以下形式在 js 中非常常见！</p><ol><li>可以参与赋值，例，具名函数也能参与赋值</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> abc<span class="token punctuation">;</span></code></pre><ol start="2"><li>有属性、有方法，执行 <code>console.dir(abc)</code>，输出结果如下</li></ol><pre><code>ƒ abc()    arguments: null    caller: null    length: 0    name: &quot;abc&quot;    ➡prototype: &#123;constructor: ƒ&#125;    [[FunctionLocation]]: VM1962:1    ➡[[Prototype]]: ƒ ()    ➡[[Scopes]]: Scopes[1]</code></pre><ul><li><p>其中带有 f 标记的是方法，不带的是属性</p></li><li><p>带有 ➡ 符号的可以继续展开，限于篇幅省略了</p></li><li><p>带有 <code>[[ ]]</code> 的是内置属性，不能访问，只能查看</p></li><li><p>相对重要的是 <code>[[Prototype]]</code> 和 <code>[[Scopes]]</code> 会在后面继承和作用域时讲到</p></li></ul><ol start="3"><li>可以作为方法参数</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// fn 将来可以是一个函数对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 调用函数对象</span><span class="token punctuation">}</span><span class="token function">b</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><ol start="4"><li>可以作为方法返回值</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5><span id="函数作用域">函数作用域</span></h5><p>函数可以嵌套（js 代码中很常见，只是嵌套的形式更多是匿名函数，箭头函数）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>看下面的例子</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 看这里</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>以函数为分界线划定作用域，所有函数之外是全局作用域</li><li>查找变量时，由内向外查找<ul><li>在内层作用域找到变量，就会停止查找，不会再找外层</li><li>所有作用域都找不到变量，报错</li></ul></li><li>作用域本质上是函数对象的属性，可以通过 console.dir 来查看调试</li></ul><h5><span id="闭包">闭包</span></h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在外面执行了 b</span></code></pre><ul><li>函数定义时，它的作用域已经确定好了，因此无论函数将来去了哪，都能从它的作用域中找到当时那些变量</li><li>别被概念忽悠了，闭包就是指<strong>函数能够访问自己的作用域中变量</strong></li></ul><h5><span id="let-var-与作用域">let、var 与作用域</span></h5><p>如果函数外层引用的是 let 变量，那么外层普通的 {} 也会作为作用域边界，最外层的 let 也占一个 script 作用域</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果函数外层引用的是 var 变量，外层普通的 {} 不会视为边界</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果 var 变量出现了重名，则他俩会被视为同一作用域中的同一个变量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打印 20</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 因为是同一个变量，还是打印 20</span></code></pre><p>如果是 let，则视为两个作用域中的两个变量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打印 20</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印 10</span></code></pre><p>要想里面的 e 和外面的 e 能区分开来，最简单的办法是改成 let，或者用函数来界定作用域范围</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><h4><span id="2-array-star">2) Array :star:</span></h4><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建数组</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取数组元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 1</span><span class="token comment" spellcheck="true">// 修改数组元素</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 数组元素变成了 [5,2,3]</span><span class="token comment" spellcheck="true">// 遍历数组元素，其中 length 是数组属性，代表数组长度</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>API</p><ul><li>push、shift、splice</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向数组尾部(右侧)添加元素, 结果 [1,2,3,4]</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从数组头部(左侧)移除元素, 结果 [2,3,4]</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除【参数1】索引位置的【参数2】个元素，结果 [2,4]</span></code></pre><ul><li>join</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 默认使用【,】作为连接符，结果 'a,b,c'</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结果 'abc'</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结果 'a-b-c'</span></code></pre><ul><li>map、filter、forEach</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 代表的新旧元素之间的变换规则</span>    <span class="token keyword">return</span> i <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// arr.map(a) // 具名函数，结果 [10,20,30,60]</span><span class="token comment" spellcheck="true">// arr.map( (i) => {return i * 10} ); // 箭头函数</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> i <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">*</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 箭头函数</span></code></pre><ul><li>传给 map 的函数，参数代表旧元素，返回值代表新元素</li></ul><p>map 的内部实现（伪代码）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">map</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 参数是一个函数</span>    <span class="token keyword">let</span> narr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> o <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 旧元素</span>        <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 新元素</span>        narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> narr<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>filter 例子</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果 [1,3]</span></code></pre><ul><li>传给 filter 的函数，参数代表旧元素，返回 true 表示要留下的元素</li></ul><p>forEach 例子</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*for(let i = 0; i &lt; arr.length; i++) {    console.log(arr[i]);}*/</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>两个称呼</p><ul><li>高阶函数，map，filter，forEach</li><li>回调函数，例如作为参数传入的函数</li></ul><h4><span id="3-object-starstar">3) Object :star::star:</span></h4><h5><span id="语法">语法</span></h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    属性名<span class="token punctuation">:</span> 值<span class="token punctuation">,</span>    方法名<span class="token punctuation">:</span> 函数<span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">属性名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">属性名</span><span class="token punctuation">(</span>新值<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>例1</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stu1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"小明"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    study<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"爱学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>例2</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"小黑"</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">let</span> study <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"爱学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> stu2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> study <span class="token punctuation">}</span></code></pre><p>例3（重点）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stu3 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"小白"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"爱学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li><strong>注意</strong>：对象方法这么写，仅限于对象内部</li></ul><p>例4</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stu4 <span class="token operator">=</span> <span class="token punctuation">{</span>    _name<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/*类似于java中私有成员变量*/</span>    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"进入了get"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"进入了set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用 get，set</p><pre class=" language-js"><code class="language-js">stu4<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小白"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu4<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><h5><span id="特色属性增删">特色：属性增删</span></h5><p>对比一下 Java 中的 Object</p><ul><li>Java 的 Object 是以类作为模板来创建，对象不能脱离类模板的范围，一个对象的属性、能用的方法都是确定好的</li><li>js 的对象，不需要什么模板，它的属性和方法可以随时加减</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 添加属性</span><span class="token keyword">delete</span> stu<span class="token punctuation">.</span>age<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 删除属性</span>stu<span class="token punctuation">.</span>study <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 添加方法</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>添加 get，set，需要借助 Object.definePropery</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>_name<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>参数1：目标对象</li><li>参数2：属性名</li><li>参数3：get，set 的定义</li></ul><h5><span id="特色this">特色：this</span></h5><p>先来对 Java 中的 this 有个理解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span>Student <span class="token keyword">this</span><span class="token punctuation">,</span> String subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在学习 "</span> <span class="token operator">+</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 下面的代码，本质上是执行 study(stu, "java")，因此 this 就是 stu</span>        stu<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Java 中的 this 是个隐式参数</li><li>Java 中，我们说 this 代表的就是调用方法的那个对象</li></ul><p>js 中的 this 也是隐式参数，但它与函数运行时上下文相关</p><p>例如，一个“落单”的函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">study</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在学习 "</span> <span class="token operator">+</span> subject<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>测试一下</p><pre class=" language-js"><code class="language-js"><span class="token function">study</span><span class="token punctuation">(</span><span class="token string">"js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出 在学习 js</span></code></pre><p>这是因为此时函数执行，全局对象 window 被当作了 this，window 对象的 name 属性是空串</p><p>同样的函数，如果作为对象的方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"小白"</span><span class="token punctuation">,</span>    study<span class="token punctuation">}</span></code></pre><p>这种情况下，会将当前对象作为 this</p><pre class=" language-js"><code class="language-js">stu<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token string">'js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输出 小白在学习 js</span></code></pre><p>还可以动态改变 this</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"小黑"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>study<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span> <span class="token string">"js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出 小黑在学习 js</span></code></pre><p>这回 study 执行时，就把 call 的第一个参数 stu 作为 this</p><p>一个例外是，在<strong>箭头函数</strong>内出现的 this，以外层 this 理解 </p><p>用匿名函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"小花"</span><span class="token punctuation">,</span>    friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"小白"</span><span class="token punctuation">,</span><span class="token string">"小黑"</span><span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"与"</span> <span class="token operator">+</span> e <span class="token operator">+</span> <span class="token string">"在玩耍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>stu<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>this.name 所在的函数是【落单】的函数，因此 this 代表 window</li></ul><p>输出结果为</p><pre><code>与小白在玩耍与小黑在玩耍与小明在玩耍</code></pre><p>用箭头函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"小花"</span><span class="token punctuation">,</span>    friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"小白"</span><span class="token punctuation">,</span><span class="token string">"小黑"</span><span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"与"</span> <span class="token operator">+</span> e <span class="token operator">+</span> <span class="token string">"在玩耍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li>this.name 所在的函数是箭头函数，因此 this 要看它外层的 play 函数，play 又是属于 stu 的方法，因此 this 代表 stu 对象</li></ul><p>输出结果为</p><pre><code>小花与小白在玩耍小花与小黑在玩耍小花与小明在玩耍</code></pre><p>不用箭头函数的做法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"小花"</span><span class="token punctuation">,</span>    friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"小白"</span><span class="token punctuation">,</span><span class="token string">"小黑"</span><span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>me<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"与"</span> <span class="token operator">+</span> e <span class="token operator">+</span> <span class="token string">"在玩耍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5><span id="特色原型继承">特色：原型继承</span></h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> father <span class="token operator">=</span> <span class="token punctuation">{</span>    f1<span class="token punctuation">:</span> <span class="token string">'父属性'</span><span class="token punctuation">,</span>    m1<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"父方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> son <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>father<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 打印 父属性</span>son<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 打印 父方法</span></code></pre><ul><li>father 是父对象，son 去调用 .m1 或 .f1 时，自身对象没有，就到父对象找</li><li>son 自己可以添加自己的属性和方法</li><li>son 里有特殊属性 <code>__proto__</code> 代表它的父对象，js 术语： son 的原型对象</li><li>不同浏览器对打印 son 的 <code>__proto__</code> 属性时显示不同<ul><li>Edge 打印 console.dir(son) 显示 <code>[[Prototype]]</code></li><li>Firefox 打印 console.dir(son) 显示 <code>&lt;prototype&gt;</code></li></ul></li></ul><h5><span id="特色基于函数的原型继承">特色：基于函数的原型继承</span></h5><p>出于方便的原因，js 又提供了一种基于函数的原型继承</p><blockquote><p><strong>函数职责</strong></p><ol><li><p>负责创建子对象，给子对象提供属性、方法，功能上相当于构造方法</p></li><li><p>函数有个特殊的属性 prototype，它就是函数创建的子对象的父对象</p><p><strong>注意！</strong>名字有差异，这个属性的作用就是为新对象提供原型</p></li></ol></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">cons</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建子对象(this), 给子对象提供属性和方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>f2 <span class="token operator">=</span> f2<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>m2 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"子方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// cons.prototype 就是父对象</span>cons<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>f1 <span class="token operator">=</span> <span class="token string">"父属性"</span><span class="token punctuation">;</span>cons<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>m1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"父方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>配合 new 关键字，创建子对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">cons</span><span class="token punctuation">(</span><span class="token string">"子属性"</span><span class="token punctuation">)</span></code></pre><p>子对象的 <code>__proto__</code> 就是函数的 <code>prototype</code> 属性</p><h5><span id="json">JSON</span></h5><p>之前我们讲 http 请求格式时，讲过 json 这种数据格式，它的语法看起来与 js 对象非常相似，例如：</p><p>一个 json 对象可以长这样：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span></code></pre><p>一个 js 对象长这样：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span></code></pre><p>那么他们的区别在哪儿呢？我总结了这么几点</p><ol><li>本质不同<ul><li>json 对象本质上是个字符串，它的职责是作为客户端和服务器之间传递数据的一种格式，它的属性只是样子货</li><li>js 对象是切切实实的对象，可以有属性方法</li></ul></li><li>语法细节不同<ul><li>json 中只能有 null、true|false、数字、字符串（只有双引号）、对象、数组</li><li>json 中不能有除以上的其它 js 对象的特性，如方法等</li><li>json 中的属性必须用双引号引起来</li></ul></li></ol><p>json 字符串与 js 对象的转换</p><pre class=" language-js"><code class="language-js">JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json字符串<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回js对象</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>js对象<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回json字符串</span></code></pre><h3><span id="动态类型">动态类型</span></h3><p>静态类型语言，如 Java，值有类型，变量也有类型、赋值给变量时，类型要相符</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>String b <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 错误</span></code></pre><p>而 js 属于动态类型语言，值有类型，但变量没有类型，赋值给变量时，没要求</p><p>例如</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><p>动态类型看起来比较灵活，但变量没有类型，会给后期维护带来困难，例如</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// obj 的类型未知，必须根据不同类型做出相应的容错处理</span><span class="token punctuation">}</span></code></pre><h2><span id="2-运算符与表达式">2. 运算符与表达式</span></h2><ul><li><code>+ - * / % ** </code></li><li><code>+= -= *= /= %= **=</code></li><li><code>++ --</code></li><li>位运算、移位运算</li><li><code>== != &gt; &gt;= &lt; &lt;=</code></li><li><code>=== !==</code> :star:</li><li><code>&amp;&amp; || !</code> :star:</li><li><code>?? ?.</code> :star:</li><li><code>...</code> :star:</li><li>解构赋值 :star:</li></ul><h3><span id="1">1) ===</span></h3><p>严格相等运算符，用作逻辑判等</p><pre class=" language-js"><code class="language-js"><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true">// 返回 true </span><span class="token number">1</span> <span class="token operator">==</span> <span class="token string">'1'</span>    <span class="token comment" spellcheck="true">// 返回 true，会先将右侧的字符串转为数字，再做比较</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token string">'1'</span>    <span class="token comment" spellcheck="true">// 返回 false，类型不等，直接返回 false</span></code></pre><p>typeof 查看某个值的类型</p><pre class=" language-js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">// 返回 'number'</span><span class="token keyword">typeof</span> <span class="token string">'1'</span>    <span class="token comment" spellcheck="true">// 返回 'string'</span></code></pre><h3><span id="2">2) ||</span></h3><p>需求，如果参数 n 没有传递，给它一个【男】</p><p><strong>推荐</strong>做法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你可能的做法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>        n <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>还可能是这样</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'男'</span> <span class="token punctuation">:</span> n<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>一些老旧代码中可能的做法（不推荐）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    n <span class="token operator">=</span> n <span class="token operator">||</span> <span class="token string">'男'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>它的语法是</p><pre class=" language-js"><code class="language-js">值<span class="token number">1</span> <span class="token operator">||</span> 值<span class="token number">2</span></code></pre><p>如果值1 是 Truthy，返回值1，如果值1 是 Falsy 返回值 2</p><h3><span id="3-与">3) ?? 与 ?.</span></h3><h4><span id>??</span></h4><p>需求，如果参数 n 没有传递或是 null，给它一个【男】</p><p>如果用传统办法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> undefined <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        n <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>用 ??</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    n <span class="token operator">=</span> n <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'男'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>语法</p><pre><code>值1 ?? 值2</code></pre><ul><li>值1 是 nullish，返回值2</li><li>值1 不是 nullish，返回值1</li></ul><h4><span id>?.</span></h4><p>需求，函数参数是一个对象，可能包含有子属性</p><p>例如，参数可能是</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stu1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token punctuation">{</span>        city<span class="token punctuation">:</span> <span class="token string">'北京'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> stu2 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"李四"</span><span class="token punctuation">}</span><span class="token keyword">let</span> stu3 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span></code></pre><p>现在要访问子属性（有问题）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>现在希望当某个属性是 nullish 时，短路并返回 undefined，可以用 ?.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>address<span class="token operator">?</span><span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>用传统办法 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>address <span class="token operator">===</span> undefined <span class="token operator">||</span> stu<span class="token punctuation">.</span>address <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3><span id="4">4) …</span></h3><p>展开运算符</p><p>作用1：打散数组，把元素传递给多个参数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>需求，把数组元素依次传递给函数参数</p><p>传统写法</p><pre class=" language-js"><code class="language-js"><span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出 1,2,3</span></code></pre><p>展开运算符写法</p><pre class=" language-js"><code class="language-js"><span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 输出 1,2,3</span></code></pre><ul><li>打散可以理解为【去掉了】数组外侧的中括号，只剩下数组元素</li></ul><p>作用2：复制数组或对象</p><p>数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 复制数组</span></code></pre><p>对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj1<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 复制对象</span></code></pre><p><strong>注意</strong>：展开运算符复制属于浅拷贝，例如</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token punctuation">{</span>city<span class="token punctuation">:</span> <span class="token string">'北京'</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">let</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>o1<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>作用3：合并数组或对象</p><p>合并数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> b1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a1<span class="token punctuation">,</span><span class="token operator">...</span>a2<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结果 [1,2,3,4]</span><span class="token keyword">let</span> b2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a2<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">...</span>a1<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 结果 [3,4,5,1,2]</span></code></pre><p>合并对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> o3 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'李四'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> n1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>o1<span class="token punctuation">,</span> <span class="token operator">...</span>o2<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 结果 {name:'张三',age:18}</span><span class="token keyword">let</span> n2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>o1<span class="token punctuation">,</span> <span class="token operator">...</span>o2<span class="token punctuation">,</span> <span class="token operator">...</span>o3<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果{name:'李四',age:18}</span></code></pre><ul><li>复制对象时出现同名属性，后面的会覆盖前面的</li></ul><h3><span id="5">5) [] {}</span></h3><p>解构赋值</p><h4><span id>[]</span></h4><p>用在声明变量时</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 结果 a=1, b=2, c=3</span></code></pre><p>用在声明参数时</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 结果 a=1, b=2, c=3</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                </code></pre><h4><span id>{}</span></h4><p>用在声明变量时</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 结果 name=张三, age=18</span></code></pre><p>用在声明参数时</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果 name=张三, age=18</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><h2><span id="3-控制语句">3. 控制语句</span></h2><ul><li><code>if ... else</code></li><li><code>switch</code></li><li><code>while</code></li><li><code>do ... while</code></li><li><code>for</code> </li><li><code>for ... in</code> :star:</li><li><code>for ... of</code> :star:</li><li><code>try ... catch</code> :star:</li></ul><h3><span id="1-for-in">1) for in</span></h3><p>主要用来遍历对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> father <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span> study<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> n <span class="token keyword">in</span> father<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>其中 const n 代表遍历出来的属性名</li><li>注意1：方法名也能被遍历出来（它其实也算一种特殊属性）</li><li>注意2：遍历子对象时，父对象的属性会跟着遍历出来</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> son <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>father<span class="token punctuation">)</span><span class="token punctuation">;</span>son<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> n <span class="token keyword">in</span> son<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>注意3：在 for in 内获取属性值，要使用 [] 语法，而不能用 . 语法</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> n <span class="token keyword">in</span> son<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> son<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3><span id="2-for-of">2) for of</span></h3><p>主要用来遍历数组，也可以是其它可迭代对象，如 Map，Set 等</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">of</span> a1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'李四'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'王五'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> obj <span class="token keyword">of</span> a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">}</span> <span class="token keyword">of</span> a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3><span id="3-try-catch">3) try catch</span></h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stu1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token punctuation">{</span>city<span class="token punctuation">:</span><span class="token string">'北京'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> stu2 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">)</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'出现了异常'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="4-api">4. API</span></h2><h3><span id="环境准备">环境准备</span></h3><h4><span id="1-安装-nvm">1) 安装 nvm</span></h4><p>nvm 即 (node version manager)，好处是方便切换 node.js 版本</p><p>安装注意事项</p><ol><li>要卸载掉现有的 nodejs</li><li>提示选择 nvm 和 nodejs 目录时，一定要避免目录中出现空格</li><li>选用【以管理员身份运行】cmd 程序来执行 nvm 命令</li><li>首次运行前设置好国内镜像地址</li></ol><pre><code>nvm node_mirror http://npm.taobao.org/mirrors/node/nvm npm_mirror https://npm.taobao.org/mirrors/npm/</code></pre><p>首先查看有哪些可用版本</p><pre><code>nvm list available</code></pre><p>输出</p><pre><code>|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE ||--------------|--------------|--------------|--------------||    18.7.0    |   16.16.0    |   0.12.18    |   0.11.16    ||    18.6.0    |   16.15.1    |   0.12.17    |   0.11.15    ||    18.5.0    |   16.15.0    |   0.12.16    |   0.11.14    ||    18.4.0    |   16.14.2    |   0.12.15    |   0.11.13    ||    18.3.0    |   16.14.1    |   0.12.14    |   0.11.12    ||    18.2.0    |   16.14.0    |   0.12.13    |   0.11.11    ||    18.1.0    |   16.13.2    |   0.12.12    |   0.11.10    ||    18.0.0    |   16.13.1    |   0.12.11    |    0.11.9    ||    17.9.1    |   16.13.0    |   0.12.10    |    0.11.8    ||    17.9.0    |   14.20.0    |    0.12.9    |    0.11.7    ||    17.8.0    |   14.19.3    |    0.12.8    |    0.11.6    ||    17.7.2    |   14.19.2    |    0.12.7    |    0.11.5    ||    17.7.1    |   14.19.1    |    0.12.6    |    0.11.4    ||    17.7.0    |   14.19.0    |    0.12.5    |    0.11.3    ||    17.6.0    |   14.18.3    |    0.12.4    |    0.11.2    ||    17.5.0    |   14.18.2    |    0.12.3    |    0.11.1    ||    17.4.0    |   14.18.1    |    0.12.2    |    0.11.0    ||    17.3.1    |   14.18.0    |    0.12.1    |    0.9.12    ||    17.3.0    |   14.17.6    |    0.12.0    |    0.9.11    ||    17.2.0    |   14.17.5    |   0.10.48    |    0.9.10    |</code></pre><p>建议安装 LTS（长期支持版）</p><pre><code>nvm install 16.16.0nvm install 14.20.0</code></pre><p>执行 <code>nvm list</code> 会列出已安装版本</p><p>切换到 16.16.0</p><pre><code>nvm use 16.16.0</code></pre><p>切换到 14.20.0</p><pre><code>nvm use 14.20.0</code></pre><p>安装后 nvm 自己的环境变量会自动添加，但可能需要手工添加 nodejs 的 PATH 环境变量</p><h4><span id="2-检查-npm">2) 检查 npm</span></h4><p>npm 是 js 的包管理器，就类似于 java 界的 maven，要确保它使用的是国内镜像</p><p>检查镜像</p><pre><code>npm get registry</code></pre><p>如果返回的不是 <code>https://registry.npm.taobao.org/</code>，需要做如下设置</p><pre><code>npm config set registry https://registry.npm.taobao.org/</code></pre><h4><span id="3-搭建前端服务器">3) 搭建前端服务器</span></h4><p>新建一个保存项目的 client 文件夹，进入文件夹执行</p><pre><code>npm install express --save-dev</code></pre><p>修改 package.json 文件</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"^4.18.1"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>其中 devDependencies 是 npm install –save-dev 添加的</li></ul><p>编写 main.js 代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">'express'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">7070</span><span class="token punctuation">)</span></code></pre><p>执行 js 代码（运行前端服务器）</p><pre><code>node main.js</code></pre><h3><span id="前端案例">前端案例</span></h3><p>初步效果</p><p><img src="/2023/03/02/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-js/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220812103323220.png" alt="image-20220812103323220"></p><p>架构</p><p><img src="/2023/03/02/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-js/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220812103219916.png" alt="image-20220812103219916"></p><ul><li>前端只有静态页面，使用 Express 服务器</li><li>后端使用 Tomcat 服务器，通过 SpringBoot、MyBatis 等框架获取数据库数据</li></ul><h4><span id="1-查找元素">1) 查找元素</span></h4><ul><li>document.getElementById - 根据 id 值查找一个元素</li><li>[document|元素].querySelector - 根据选择器查找第一个匹配元素</li><li>[document|元素].querySelectorAll - 根据选择器查找所有匹配元素</li></ul><p>例如，有下面的 html 代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>学生列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>thead<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row bold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tbody<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>执行</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.title'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 找到 &lt;div class="title">学生列表&lt;/div></span></code></pre><p>执行</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.col'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 找到 &lt;div class="col">编号&lt;/div></span></code></pre><p>执行</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.col'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*  找到的是一个集合  &lt;div class="col">编号&lt;/div>  &lt;div class="col">姓名&lt;/div>  &lt;div class="col">性别&lt;/div>  &lt;div class="col">年龄&lt;/div>  &lt;div class="col">1&lt;/div>  &lt;div class="col">张三&lt;/div>  &lt;div class="col">男&lt;/div>  &lt;div class="col">18&lt;/div>*/</span></code></pre><p>执行</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> thead <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.thead'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 只在 thead 元素范围内找</span>thead<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.col'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*  找到的是一个集合  &lt;div class="col">编号&lt;/div>  &lt;div class="col">姓名&lt;/div>  &lt;div class="col">性别&lt;/div>  &lt;div class="col">年龄&lt;/div>*/</span></code></pre><p>根据 id 属性查找既可以用</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id值"</span><span class="token punctuation">)</span></code></pre><p>也可以用 </p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#id值"</span><span class="token punctuation">)</span></code></pre><h4><span id="2-修改元素内容">2) 修改元素内容</span></h4><ul><li>元素.innerHTML</li><li>元素.textContent</li></ul><p>例如</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'侠客列表'</span></code></pre><p>效果</p><p><img src="/2023/03/02/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-js/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220812161003958.png" alt="image-20220812161003958"></p><p>innerHTML  会解析内容中的标签，例如</p><p><img src="/2023/03/02/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-js/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220812161137912.png" alt="image-20220812161137912"></p><p>textContext 不会解析内容中的标签</p><p><img src="/2023/03/02/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-js/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220812161341825.png" alt="image-20220812161341825"></p><p>给 innerHTML 或 textContent 赋值空串，可以实现清空标签内容的效果</p><h4><span id="3-利用模板">3) 利用模板</span></h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>学生列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>thead<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row bold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tbody<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 将来这些数据从 java 端返回</span>    <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">17</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> tp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> row <span class="token operator">=</span> tp<span class="token punctuation">.</span>content<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">,</span>c4<span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".col"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> tbody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.tbody'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>age<span class="token punctuation">}</span> <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c1<span class="token punctuation">.</span>textContent <span class="token operator">=</span> id<span class="token punctuation">;</span>        c2<span class="token punctuation">.</span>textContent <span class="token operator">=</span> name<span class="token punctuation">;</span>        c3<span class="token punctuation">.</span>textContent <span class="token operator">=</span> sex<span class="token punctuation">;</span>        c4<span class="token punctuation">.</span>textContent <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 复制元素</span>        <span class="token keyword">const</span> newRow <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">importNode</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 建立父子关系，左边父，右边子</span>        tbody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newRow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4><span id="4-fetch-api">4) Fetch API</span></h4><p>Fetch API 可以用来获取远程数据，它有两种方式接收结果，同步方式与异步方式</p><p>格式</p><pre class=" language-js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 Promise</span></code></pre><p>同步方式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 结果 <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token comment" spellcheck="true">// 后续代码</span></code></pre><ul><li>await 关键字必须在一个标记了 async 的 function 内来使用</li><li>后续代码不会在结果返回前执行</li></ul><p>异步方式</p><pre class=" language-js"><code class="language-js">Promise    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>结果 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 后续代码                 </span></code></pre><ul><li>后续代码不必等待结果返回就可以执行</li></ul><p>例：</p><p>在 express 服务器上有 students.json 文件</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span> <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>现在用 fetch api 获取这些数据，并展示</p><p>同步方式</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">findStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取响应对象</span>            <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'students.json'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 获取响应体, 按json格式转换为js数组</span>            <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 显示数据</span>            <span class="token keyword">const</span> tp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> row <span class="token operator">=</span> tp<span class="token punctuation">.</span>content<span class="token punctuation">;</span>            <span class="token keyword">const</span> <span class="token punctuation">[</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">,</span>c4<span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".col"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> tbody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.tbody'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>age<span class="token punctuation">}</span> <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>                c1<span class="token punctuation">.</span>textContent <span class="token operator">=</span> id<span class="token punctuation">;</span>                c2<span class="token punctuation">.</span>textContent <span class="token operator">=</span> name<span class="token punctuation">;</span>                c3<span class="token punctuation">.</span>textContent <span class="token operator">=</span> sex<span class="token punctuation">;</span>                c4<span class="token punctuation">.</span>textContent <span class="token operator">=</span> age<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 复制元素</span>                <span class="token keyword">const</span> newRow <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">importNode</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 建立父子关系</span>                tbody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newRow<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">findStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>fetch(‘students.json’) 内部会发送请求，但响应结果不能立刻返回，因此 await 就是等待响应结果返回</li><li>其中 resp.json() 也不是立刻能返回结果，它返回的也是 Promise 对象，也要配合 await 取结果</li></ul><p>异步方式</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'students.json'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> resp <span class="token operator">=</span><span class="token operator">></span> resp<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> array <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示数据</span>            <span class="token keyword">const</span> tp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> row <span class="token operator">=</span> tp<span class="token punctuation">.</span>content<span class="token punctuation">;</span>            <span class="token keyword">const</span> <span class="token punctuation">[</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">,</span>c4<span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".col"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> tbody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.tbody'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>age<span class="token punctuation">}</span> <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>                c1<span class="token punctuation">.</span>textContent <span class="token operator">=</span> id<span class="token punctuation">;</span>                c2<span class="token punctuation">.</span>textContent <span class="token operator">=</span> name<span class="token punctuation">;</span>                c3<span class="token punctuation">.</span>textContent <span class="token operator">=</span> sex<span class="token punctuation">;</span>                c4<span class="token punctuation">.</span>textContent <span class="token operator">=</span> age<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 复制元素</span>                <span class="token keyword">const</span> newRow <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">importNode</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 建立父子关系</span>                tbody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newRow<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span> e <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>第一个 then 是在响应返回后，才会调用它里面的箭头函数，箭头函数参数即 resp  响应对象</li><li>第二个 then 是在 json 解析完成后，才会调用它里面的箭头函数，箭头函数参数即解析结果（本例是 array 数组）</li><li>上一个 then 返回的是 Promise 对象时，才能链式调用下一个 then</li></ul><h5><span id="跨域问题">跨域问题</span></h5><p><img src="/2023/03/02/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-js/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220814105448882.png" alt="image-20220814105448882"></p><ul><li>只要协议、主机、端口之一不同，就不同源，例如<ul><li><a href="http://localhost:7070/a">http://localhost:7070/a</a> 和 <a href="https://localhost:7070/b">https://localhost:7070/b</a> 就不同源</li></ul></li><li>同源检查是浏览器的行为，而且只针对 fetch、xhr 请求<ul><li>如果是其它客户端，例如 java http client，postman，它们是不做同源检查的</li><li>通过表单提交、浏览器直接输入 url 地址这些方式发送的请求，也不会做同源检查</li></ul></li><li>更多相关知识请参考<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">跨源资源共享（CORS） - HTTP | MDN (mozilla.org)</a></li></ul></li></ul><p>请求响应头解决</p><p><img src="/2023/03/02/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-js/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220814144040703.png" alt="image-20220814144040703"></p><ul><li>fetch 请求跨域，会携带一个 Origin 头，代表【发请求的资源源自何处】，目标通过它就能辨别是否发生跨域<ul><li>我们的例子中：student.html 发送 fetch 请求，告诉 tomcat，我源自 localhost:7070</li></ul></li><li>目标资源通过返回 Access-Control-Allow-Origin 头，告诉浏览器【允许哪些源使用此响应】<ul><li>我们的例子中：tomcat 返回 fetch 响应，告诉浏览器，这个响应允许源自 localhost:7070 的资源使用</li></ul></li></ul><p>代理解决</p><p><img src="/2023/03/02/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-js/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220814161532141.png" alt="image-20220814161532141"></p><pre class=" language-cmd"><code class="language-cmd">npm install http-proxy-middleware --save-dev</code></pre><p>在 express 服务器启动代码中加入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>createProxyMiddleware<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'http-proxy-middleware'</span><span class="token comment" spellcheck="true">// ...</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> <span class="token function">createProxyMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">{</span> target<span class="token punctuation">:</span> <span class="token string">'http://localhost:8080'</span><span class="token punctuation">,</span> changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>fetch 代码改为</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:7070/api/students'</span><span class="token punctuation">)</span></code></pre><p>或</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api/students'</span><span class="token punctuation">)</span></code></pre><h4><span id="5-模块化">5) 模块化</span></h4><p>单个导出 const、let、function</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>一齐导出</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">}</span></code></pre><p>导出 default，只能有一个</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> b<span class="token punctuation">;</span></code></pre><p>import 语法</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">import</span> 语句</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>import 需要遵循同源策略</li></ul><p>整个导入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> module <span class="token keyword">from</span> <span class="token string">'/1.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>a<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 输出10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>b<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 输出20</span>module<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 输出c</span></code></pre><p>单个导入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span>c<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/1.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 输出10</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">// 输出c</span></code></pre><p>导入默认</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> x <span class="token keyword">from</span> <span class="token string">'/1.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 输出20</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java程序员要掌握的前端-react</title>
      <link href="/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/"/>
      <url>/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/</url>
      
        <content type="html"><![CDATA[<h1><span id="五-react">五. React</span></h1><h2><span id="1-react-基础">1. React 基础</span></h2><p>react 是前端三大框架之一</p><ul><li>没有 vue 的基础更好，因为两者思想不太一样，不能用 vue 的习惯学习 react</li><li>需要有 js 基础，视频 19-58</li><li>需要有 ts 基础，视频 110-116</li><li>本教程采用更流行的【函数式组件 + hooks】方式进行讲解</li></ul><h3><span id="1-环境准备">1) 环境准备</span></h3><h4><span id="创建项目">创建项目</span></h4><p>首先，通过 react 脚手架创建项目</p><pre class=" language-cmd"><code class="language-cmd">npx create-react-app client --template typescript</code></pre><ul><li>client 是项目名</li><li>目前 react 版本是 18.x</li></ul><p>运行项目</p><pre class=" language-cmd"><code class="language-cmd">cd clientnpm start</code></pre><ul><li>会自动打开浏览器，默认监听 3000 端口</li></ul><p><img src="/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20221001110328233.png" alt="image-20221001110328233"></p><h4><span id="修改端口">修改端口</span></h4><p>在项目根目录下新建文件 .env.development，它可以定义开发环境下的环境变量</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">PORT</span><span class="token punctuation">=</span><span class="token attr-value">7070</span></code></pre><p>重启项目，端口就变成了 7070</p><ul><li>参考文档：<a href="https://create-react-app.dev/docs/advanced-configuration/">Advanced Configuration | Create React App (create-react-app.dev)</a></li></ul><h4><span id="浏览器插件">浏览器插件</span></h4><p>插件地址 <a href="https://reactjs.org/blog/2015/09/02/new-react-developer-tools.html#installation">New React Developer Tools – React Blog (reactjs.org)</a></p><p><img src="/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20221004105110150.png" alt="image-20221004105110150"></p><h4><span id="vscode">VSCode</span></h4><p>推荐安装 Prettier 代码格式化插件</p><p><img src="/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20221004090816142.png" alt="image-20221004090816142"></p><h3><span id="2-入门案例">2) 入门案例</span></h3><h4><span id="hello">Hello</span></h4><p>编写一个 src/pages/Hello.tsx 组件</p><pre class=" language-tsx"><code class="language-tsx">export default function Hello()  {  return <h3><span id="hello-world">Hello, World!</span></h3>}</code></pre><ul><li>组件中使用了 jsx 语法，即在 js 中直接使用 html 标签或组件标签</li><li>函数式组件必须返回标签片段</li></ul><p>在 index.js 引入组件</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">import</span> reportWebVitals <span class="token keyword">from</span> <span class="token string">'./reportWebVitals'</span><span class="token comment" spellcheck="true">// 1. 引入组件</span><span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">'./pages/Hello'</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>React.StrictMode</span><span class="token punctuation">></span></span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 2. 将原来的 &lt;App/> 改为 &lt;Hello>&lt;/Hello> */</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Hello</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Hello</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>React.StrictMode</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// If you want to start measuring performance in your app, pass a function</span><span class="token comment" spellcheck="true">// to log results (for example: reportWebVitals(console.log))</span><span class="token comment" spellcheck="true">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span><span class="token function">reportWebVitals</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>将欢迎词作为属性传递给组件</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Hello</span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>你好<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Hello</span><span class="token punctuation">></span></span></code></pre><ul><li>字符串值，可以直接使用双引号赋值</li><li>其它类型的值，用 <code>&#123;值&#125;</code></li></ul><p>而组件修改为</p><pre class=" language-tsx"><code class="language-tsx">export default function Hello(props: { msg: string }) {  return <h3><span id="propsmsg">{props.msg}</span></h3>}</code></pre><h4><span id="jsx-原理">jsx 原理</span></h4><pre class=" language-tsx"><code class="language-tsx">export default function Hello(props: { msg: string }) {  return <h3><span id="propsmsg">{props.msg}</span></h3>}</code></pre><p>在 v17 之前，其实相当于</p><pre class=" language-tsx"><code class="language-tsx">import { createElement } from "react";export default function Hello(props: {msg: string}) {  return createElement('h3', null, `${props.msg}`)}</code></pre><h3><span id="3-人物卡片案例">3) 人物卡片案例</span></h3><p>样式已经准备好 /src/css/P1.css</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#root</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token class">.student</span> </span><span class="token punctuation">{</span>  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">128</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">330</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* font-family: '华文行楷'; */</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#7591AD</span><span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">8</span>px <span class="token hexcode">#2c2c2c</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#e8f6fd</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.photo</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">0.3</span>s<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.photo</span> img </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* object-fit: scale-down; */</span>  <span class="token property">object-fit</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.photo</span><span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to top, <span class="token hexcode">#333</span>, transparent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token class">.student</span> h2 </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">68</span>px<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">68</span>px<span class="token punctuation">;</span>  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">h2<span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">68</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">div<span class="token class">.student</span> h1 </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">250</span>px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">22</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">0.3</span>s<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token class">.student</span> p </span><span class="token punctuation">{</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80%</span><span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#8ea2b8</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.student</span><span class="token pseudo-class">:hover</span> <span class="token class">.photo</span><span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.student</span><span class="token pseudo-class">:hover</span> <span class="token class">.photo</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">15</span>px <span class="token hexcode">#111</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.student</span><span class="token pseudo-class">:hover</span> img </span><span class="token punctuation">{</span>  <span class="token property">object-position</span><span class="token punctuation">:</span> <span class="token number">50%</span> <span class="token number">0%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.student</span><span class="token pseudo-class">:hover</span> h1 </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">190</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token class">.student</span><span class="token pseudo-class">:hover</span> h2 </span><span class="token punctuation">{</span>  <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>类型 /src/model/Student.ts</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  photo<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span></code></pre><p>组件 /src/pages/P1.tsx</p><pre class=" language-tsx"><code class="language-tsx">import { Student } from '../model/Student'import '../css/P1.css'export default function P1(props: { student: Student }) {  return (    <div classname="student">      <div classname="photo">        <img src="{props.student.photo}/">      </div>      <h1><span id="propsstudentname">{props.student.name}</span></h1>      <h2><span id="propsstudentid">{props.student.id}</span></h2>            <p>性别 {props.student.sex} 年龄 {props.student.age}</p>    </div>  )}</code></pre><p>使用组件</p><pre class=" language-tsx"><code class="language-tsx">const stu1 = { id: 1, name: '风清扬', sex: '男', age: 99, photo: '/imgs/1.png' }const stu2 = { id: 2, name: '玮哥', sex: '男', age: 20, photo: '/imgs/2.png' }const stu3 = { id: 3, name: '长宏', sex: '男', age: 30, photo: '/imgs/3.png'}<p1 student="{stu1}"></p1><p1 student="{stu2}"></p1><p1 student="{stu3}"></p1></code></pre><h4><span id="路径">路径</span></h4><ul><li>src 下的资源，要用相对路径引入</li><li>public 下的资源，记得 / 代表路径的起点</li></ul><h4><span id="标签命名">标签命名</span></h4><ul><li>组件标签必须用大驼峰命名</li><li>普通 html 标签必须用小写命名</li></ul><h4><span id="事件处理">事件处理</span></h4><pre class=" language-tsx"><code class="language-tsx">import { Student } from '../model/Student'import '../css/P1.css'export default function P1(props: { student: Student }) {      function handleClick(e : React.MouseEvent){    console.log(student)    console.log(e)  }    return (    <div classname="student">      <div classname="photo" onclick="{handleClick}">        <img src="{props.student.photo}/">      </div>      <h1><span id="propsstudentname">{props.student.name}</span></h1>      <h2><span id="propsstudentid">{props.student.id}</span></h2>      <p>性别 {props.student.sex} 年龄 {props.student.age}</p>    </div>  )}</code></pre><ul><li>事件以小驼峰命名</li><li>事件处理函数可以有一个事件对象参数，可以获取事件相关信息</li></ul><h4><span id="列表-amp-key">列表 &amp; Key</span></h4><pre class=" language-tsx"><code class="language-tsx">import { Student } from '../model/Student'import P1 from './P1'export default function P2(props: { students: Student[] }) {  return (    <>      {props.students.map((s) => ( <p1 student="{s}" key="{s.id}"></p1> ))}    </>  )}</code></pre><ul><li>key 在循环时是必须的，否则会有 warning</li></ul><p>也可以这么做</p><pre class=" language-tsx"><code class="language-tsx">import { Student } from '../model/Student'import P1 from './P1'export default function P2(props: { students: Student[] }) {  const list = props.students.map((s) => <p1 student="{s}" key="{s.id}"></p1>)  return <>{list}</>}</code></pre><p>使用组件</p><pre class=" language-tsx"><code class="language-tsx">const stu1 = { id: 1, name: '风清扬', sex: '男', age: 99, photo: '/1.png' }const stu2 = { id: 2, name: '玮哥', sex: '男', age: 45, photo: '/2.png' }const stu3 = { id: 3, name: '长宏', sex: '男', age: 45, photo: '/3.png'}<p2 students="{[stu1,stu2,stu3]}"></p2></code></pre><h4><span id="条件渲染">条件渲染</span></h4><p>P1 修改为</p><pre class=" language-tsx"><code class="language-tsx">import { Student } from '../model/Student'import '../css/P1.css'export default function P1(props: { student: Student; hideAge?: boolean }) {  function handleClick() {    console.log(props.student)  }  const ageFragment = !props.hideAge && <span>年龄 {props.student.age}</span>  return (    <div classname="student">      <div classname="photo" onclick="{handleClick}">        <img src="{props.student.photo}">      </div>      <h1><span id="propsstudentname">{props.student.name}</span></h1>      <h2><span id="propsstudentid">{props.student.id}</span></h2>      <p>        性别 {props.student.sex} {ageFragment}      </p>    </div>  )}</code></pre><ul><li>子元素如果是布尔值，nullish，不会渲染</li></ul><p>P2 修改为</p><pre class=" language-tsx"><code class="language-tsx">import { Student } from '../model/Student'import P1 from './P1'export default function P2(props: { students: Student[]; hideAge?: boolean }) {  const list = props.students.map((s) => (    <p1 student="{s}" hideage="{props.hideAge}" key="{s.id}"></p1>  ))  return <>{list}</>}</code></pre><p>使用组件</p><pre class=" language-tsx"><code class="language-tsx">const stu1 = { id: 1, name: '风清扬', sex: '男', age: 99, photo: '/1.png' }const stu2 = { id: 2, name: '玮哥', sex: '男', age: 45, photo: '/2.png' }const stu3 = { id: 3, name: '长宏', sex: '男', age: 45, photo: '/3.png'}<p2 students="{[stu1,stu2,stu3]}" hideage="{true}"></p2></code></pre><h4><span id="参数解构">参数解构</span></h4><p>以 P1 组件为例</p><pre class=" language-tsx"><code class="language-tsx">import { Student } from '../model/Student'import '../css/P1.css'export default function P1({ student, hideAge = false }: { student: Student, hideAge?: boolean }) {    function handleClick() {    console.log(student)  }  const ageFragment = !hideAge && <span>年龄 {student.age}</span>  return (    <div classname="student">      <div classname="photo" onclick="{handleClick}">        <img src="{student.photo}">      </div>      <h1><span id="studentname">{student.name}</span></h1>      <h2><span id="studentid">{student.id}</span></h2>      <p>        性别 {student.sex} {ageFragment}      </p>    </div>  )}</code></pre><ul><li>可以利用解构赋值语句，让 props 的使用更为简单</li><li>对象解构赋值还有一个额外的好处，给属性赋默认值</li></ul><p>使用组件</p><pre class=" language-tsx"><code class="language-tsx">const stu1 = { id: 1, name: '风清扬', sex: '男', age: 99, photo: '/1.png' }<p1 student="{stu1}"></p1></code></pre><h3><span id="4-处理变化的数据">4) 处理变化的数据</span></h3><p>入门案例侧重的是数据展示，并未涉及到数据的变动，接下来我们开始学习 react 如何处理数据变化</p><h4><span id="axios">axios</span></h4><p>首先来学习 axios，作用是发送请求、接收响应，从服务器获取真实数据</p><p>安装</p><pre class=" language-cmd"><code class="language-cmd">npm install axios</code></pre><p>定义组件</p><pre class=" language-tsx"><code class="language-tsx">import axios from 'axios'export default function P4({ id }: { id: number }) {  async function updateStudent() {    const resp = await axios.get(`http://localhost:8080/api/students/${id}`)    console.log(resp.data.data)  }  updateStudent()  return <></>}</code></pre><ul><li>其中 /api/students/${id} 是提前准备好的后端服务 api，会延迟 2s 返回结果</li></ul><p>使用组件</p><pre class=" language-tsx"><code class="language-tsx"><p4 id="{1}"></p4></code></pre><p>在控制台上打印</p><pre><code>&#123;    &quot;id&quot;: 1,    &quot;name&quot;: &quot;宋远桥&quot;,    &quot;sex&quot;: &quot;男&quot;,    &quot;age&quot;: 40&#125;</code></pre><p>当属性变化时，会重新触发 P4 组件执行，例如将 id 从 1 修改为 2</p><p><img src="/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20221005160308705.png" alt="image-20221005160308705"></p><p>执行流程</p><ul><li>首次调用函数组件，返回的 jsx 代码会被渲染成【虚拟 dom 节点】（也称 Fiber 节点）<ul><li>根据【虚拟 dom 节点】会生成【真实 dom 节点】，由浏览器显示出来</li></ul></li><li>当函数组件的 props 或 state 发生变化时，才会<strong>重新</strong>调用函数组件，返回 jsx<ul><li>jsx 与上次的【虚拟 dom 节点】对比<ul><li>如果没变化，复用上次的节点</li><li>有变化，创建新的【虚拟 dom 节点】替换掉上次的节点</li></ul></li></ul></li><li>由于严格模式会触发两次渲染，为了避免干扰，请先注释掉 index.tsx 中的 <code>&lt;React.StrictMode&gt;</code></li></ul><h4><span id="状态">状态</span></h4><p>先来看一个例子，能否把服务器返回的数据显示在页面上</p><pre class=" language-tsx"><code class="language-tsx">import axios from 'axios'let count = 0export default function P5(props: { id: number }) {    function getTime() {    const d = new Date()    return d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds()  }    async function updateStudent() {    const resp = await axios.get(      `http://localhost:8080/api/students/${props.id}`    )    Object.assign(student, resp.data.data)    console.log(current, student, getTime())  }  const current = count++  let student = { name: 'xx' }  console.log(current, student, getTime())  updateStudent()    return <h3><span id="姓名是studentname">姓名是：{student.name}</span></h3>}</code></pre><ul><li>count 是一个全局变量，记录 P5 函数第几次被调用</li></ul><p>执行效果，控制台上</p><pre><code>0 &#123;name: &#39;xx&#39;&#125; &#39;16:22:16&#39;0 &#123;id: 1, name: &#39;宋远桥&#39;, sex: &#39;男&#39;, age: 40&#125; &#39;16:22:18&#39;</code></pre><p>此时页面仍显示 <code>姓名是：xx</code></p><p>那么修改一下 props 的 id 呢？进入开发工具把 id 从 1 修改为 2，控制台上</p><pre class=" language-tsx"><code class="language-tsx">1 {name: 'xx'} '16:24:0'1 {id: 2, name: '俞莲舟', sex: '男', age: 38} '16:24:2'</code></pre><p>此时页面仍显示 <code>姓名是：xx</code></p><p>为什么页面没有显示两秒后更新的值？</p><ul><li>第一次，页面显示的是 P5 函数的返回结果，这时 student.name 还未被更新成宋远桥，页面显示 xx<ul><li>虽然 2s 后数据更新了，但此时并未触发函数执行，页面不变</li></ul></li><li>第二次，虽然 props 修改触发了函数重新执行，但既然函数重新执行，函数内的 student 又被赋值为 <code>&#123; name: &#39;xx&#39; &#125;</code>，页面还是显示 xx<ul><li>2s 后数据更新，跟第一次一样，并未重新触发函数执行，页面不变</li></ul></li></ul><p>结论：</p><ul><li>函数是无状态的，执行完毕后，它内部用的数据都不会保存下来</li><li>要想让函数有状态，就需要使用 useState 把数据保存在函数之外的地方，这些数据，称之为状态</li></ul><h4><span id="usestate">useState</span></h4><pre class=" language-tsx"><code class="language-tsx">import axios from 'axios'import { useReducer, useState } from 'react'import { Student } from '../model/Student'let count = 0export default function P5(props: { id: number }) {  // ...  async function updateStudent() {    const resp = await axios.get(      `http://localhost:8080/api/students/${props.id}`    )    Object.assign(student, resp.data.data)    console.log(current, student, getTime())  }  const current = count++  let [student] = useState<student>({ name: 'xx' })  console.log(current, student, getTime())  updateStudent()  return <h3><span id="姓名是studentname">姓名是：{student.name}</span></h3>}</student></code></pre><p>接下来使用 setXXX 方法更新 State</p><pre class=" language-tsx"><code class="language-tsx">import axios from 'axios'import { useState } from 'react'import { Student } from '../model/Student'export default function P5(props: { id: number }) {  async function updateStudent() {    const resp = await axios.get(`/api/students/${props.id}`)    setStudent(resp.data.data)  }  let [student, setStudent] = useState<student>({ name: 'xx' })  updateStudent()  return <h3><span id="姓名是studentname">姓名是：{student.name}</span></h3>}</student></code></pre><p>工作流程如下</p><p>首次使用 useState，用它的参数初始化 State</p><p><img src="/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20221005173958351.png" alt="image-20221005173958351"></p><p>2s 后数据更新，setStudent 函数会更新 State 数据，并会触发下一次渲染（P5 的调用）</p><p><img src="/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20221005174347981.png" alt="image-20221005174347981"></p><p>再次调用 useState，这时返回更新后的数据</p><p><img src="/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20221005174739593.png" alt="image-20221005174739593"></p><p>这时再返回 jsx，内容就是 <code>姓名是：宋远桥</code> 了</p><blockquote><p><strong>P.S.</strong></p><p>使用了 useState 之后，会执行两次 xhr 请求，后一次请求是 react 开发工具发送的，不用理会</p></blockquote><p>问题还未结束，第二次 P5 调用时，updateStudent 还会执行，结果会导致 2s 后响应返回继续调用 setStudent，这会导致每隔 2s 调用一次 P5 函数（渲染一次）</p><p><img src="/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20221005175440228.png" alt="image-20221005175440228"></p><p>如何让 updateStudent 只执行一次呢？一种土办法是再设置一个布尔 State </p><p><img src="/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20221005181042078.png" alt="image-20221005181042078"></p><p>接下来数据更新</p><p><img src="/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20221005181428984.png" alt="image-20221005181428984"></p><p>第二次进入 P5 函数时，由于 fetch 条件不成立，因此不会再执行两个 setXXX 方法</p><p><img src="/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20221005182505908.png" alt="image-20221005182505908"></p><p>函数式组件的工作流程</p><ul><li>首次调用函数组件，返回的 jsx 代码会被渲染成【虚拟 dom 节点】（也称 Fiber 节点）<ul><li>此时使用 useState 会将组件工作过程中需要数据绑定到【虚拟 dom 节点】上</li><li>根据【虚拟 dom 节点】会生成【真实 dom 节点】，由浏览器显示出来</li></ul></li><li>当函数组件的 props 或 state 发生变化时，才会重新调用函数组件，返回 jsx<ul><li>props 变化由父组件决定，state 变化由组件自身决定</li><li>jsx 与上次的【虚拟 dom 节点】对比<ul><li>如果没变化，复用上次的节点</li><li>有变化，创建新的【虚拟 dom 节点】替换掉上次的节点</li></ul></li></ul></li></ul><h4><span id="useeffect">useEffect</span></h4><p>Effect 称之为副作用（没有贬义），函数组件的主要目的，是为了渲染生成 html 元素，除了这个主要功能以外，管理状态，fetch 数据 … 等等之外的功能，都可以称之为副作用。</p><p>useXXX 打头的一系列方法，都是为副作用而生的，在 react 中把它们称为 Hooks</p><p>useEffect 三种用法</p><pre class=" language-tsx"><code class="language-tsx">import axios from "axios"import { useEffect, useState } from "react"/*useEffect  参数1：箭头函数, 在真正渲染 html 之前会执行它  参数2：    情况1：没有, 代表每次执行组件函数时, 都会执行副作用函数    情况2：[], 代表副作用函数只会执行一次    情况3：[依赖项], 依赖项变化时，副作用函数会执行*/export default function P6({ id, age }: { id: number, age: number }) {  console.log('1.主要功能')      // useEffect(() => console.log('3.副作用功能'))   // useEffect(() => console.log('3.副作用功能'), [])   useEffect(() => console.log('3.副作用功能'), [id])   console.log('2.主要功能')  return <h3><span id="id">{id}</span></h3>}</code></pre><p>用它改写 P5 案例</p><pre class=" language-tsx"><code class="language-tsx">import axios from "axios"import { useEffect, useState } from "react"export default function P6({ id, age }: { id: number, age: number }) {  const [student, setStudent] = useState({name:'xx'})  useEffect(()=>{    async function updateStudent() {      const resp = await axios.get(`http://localhost:8080/api/students/${id}`)          setStudent(resp.data.data)    }    updateStudent()  }, [id])  return <h3><span id="studentname">{student.name}</span></h3>}</code></pre><h4><span id="usecontext">useContext</span></h4><pre class=" language-tsx"><code class="language-tsx">import axios from 'axios'import { createContext, useContext, useEffect, useState } from 'react'import { R, Student } from '../model/Student'/*  createContext         创建上下文对象  useContext            读取上下文对象的值  <上下文对象.provider>  修改上下文对象的值*/const HiddenContext = createContext(false)// 给以下组件提供数据，控制年龄隐藏、显示export default function P7() {  const [students, setStudents] = useState<student[]>([])  const [hidden, setHidden] = useState(false)  useEffect(()=>{    async function updateStudents() {      const resp = await axios.get<r<student[]>>("http://localhost:8080/api/students")      setStudents(resp.data.data)    }    updateStudents()  }, [])  function hideOrShow() {    // 参数：上一次状态值，旧值    // 返回值：要更新的新值    setHidden((old)=>{      return !old    })  }  return <hiddencontext.provider value="{hidden}">    <input type="button" value="{hidden?'显示':'隐藏'}" onclick="{hideOrShow}/">    <p71 students="{students}"></p71>  </hiddencontext.provider>  }// 负责处理学生集合function P71({ students }: { students: Student[] }) {  const list = students.map(s=><p72 student="{s}" key="{s.id}"></p72>)  return <>{list}</>}// 负责显示单个学生function P72({ student }: { student: Student }) {  const hidden = useContext(HiddenContext)  const jsx = !hidden && <span>{student.age}</span>  return <div>{student.name} {jsx}</div>}</r<student[]></student[]></上下文对象.provider></code></pre><ul><li>如果组件分散在多个文件中，HiddenContext 应该 export 导出，用到它的组件 import 导入</li><li>React 中因修改触发的组件重新渲染，都应当是自上而下的</li><li>setHidden 方法如果更新的是对象，那么要返回一个新对象，而不是在旧对象上做修改</li></ul><h4><span id="表单">表单</span></h4><pre class=" language-tsx"><code class="language-tsx">import axios from 'axios'import React, { useState } from 'react'import '../css/P8.css'export default function P8() {  const [student, setStudent] = useState({name:'', sex:'男', age:18})  const [message, setMessage] = useState('')  const options = ['男', '女']  const jsx = options.map(e => <option key="{e}">{e}</option>)  // e 事件对象, e.target 事件源  function onChange(e : React.ChangeEvent<htmlinputelement|htmlselectelement>) {    setStudent((old)=>{      // 返回的新值，不能与旧值是同一个对象      return {...old, [e.target.name]:e.target.value}    })  }  async function onClick() {    const resp = await axios.post('http://localhost:8080/api/students', student)    setMessage(resp.data.data)  }    const messageJsx = message && <div classname="success">{message}</div>  return (    <form>      <div>        <label>姓名</label>        <input type="text" value="{student.name}" onchange="{onChange}" name="name">      </div>      <div>        <label>性别</label>        <select value="{student.sex}" onchange="{onChange}" name="sex">          {jsx}        </select>      </div>      <div>        <label>年龄</label>        <input type="text" value="{student.age}" onchange="{onChange}" name="age">      </div>      <div>        <input type="button" value="新增" onclick="{onClick}/">      </div>      {messageJsx}    </form>  )}</htmlinputelement|htmlselectelement></code></pre><h2><span id="2-react-进阶">2. React 进阶</span></h2><h3><span id="1-ant-design">1) Ant Design</span></h3><p>react 组件库</p><ul><li><p>官网地址：<a href="https://ant.design/">https://ant.design/</a></p></li><li><p>镜像地址1：<a href="https://ant-design.gitee.io/">https://ant-design.gitee.io/</a></p></li><li><p>镜像地址2：<a href="https://ant-design.antgroup.com/">https://ant-design.antgroup.com/</a></p></li></ul><h4><span id="入门">入门</span></h4><p>安装</p><pre class=" language-cmd"><code class="language-cmd">npm install antd</code></pre><ul><li>目前版本是 4.x</li></ul><p>引入样式，在 css 文件中加入</p><pre class=" language-tsx"><code class="language-tsx">@import '~antd/dist/antd.css';</code></pre><p>引入 antd 组件</p><pre class=" language-tsx"><code class="language-tsx">import { Button } from "antd";export default function A1() {  return <button type="primary">按钮</button>}</code></pre><h4><span id="国际化">国际化</span></h4><p>试试其它组件</p><pre class=" language-tsx"><code class="language-tsx">import { Button, Modal } from "antd";export default function A1() {  return <modal open="{true}" title="对话框">内容</modal>}</code></pre><p>发现确定和取消按钮是英文的，这是因为 antd 支持多种语言，而默认语言是英文</p><p>要想改为中文，建议修改最外层的组件 index.tsx</p><pre class=" language-tsx"><code class="language-tsx">// ...import { ConfigProvider } from 'antd'import zhCN from 'antd/es/locale/zh_CN'root.render(  <configprovider locale="{zhCN}">    <a1></a1>  </configprovider>)</code></pre><h4><span id="表格">表格</span></h4><pre class=" language-tsx"><code class="language-tsx">import { Table } from 'antd'import { ColumnsType } from 'antd/lib/table'import axios from 'axios'import { useEffect, useState } from 'react'import { R, Student } from '../model/Student'export default function A3() {  const [students, setStudents] = useState<student[]>([])  const [loading, setLoading] = useState(true)  useEffect(() => {    async function getStudents() {      const resp = await axios.get<r<student[]>>(        'http://localhost:8080/api/students'      )      setStudents(resp.data.data)      setLoading(false)    }    getStudents()  }, [])  // title: 列标题  dataIndex: 要关联的属性名  const columns: ColumnsType<student> = [    {      title: '编号',      dataIndex: 'id',    },    {      title: '姓名',      dataIndex: 'name',    },    {      title: '性别',      dataIndex: 'sex',    },    {      title: '年龄',      dataIndex: 'age',    },  ]  // columns: 列定义  // dataSource: 数据源，一般是数组包对象  // rowKey: 作为唯一标识的属性名  // loading: 显示加载图片  return (    <table columns="{columns}" datasource="{students}" rowkey="id" loading="{loading}"></table>  )}</student></r<student[]></student[]></code></pre><h4><span id="客户端分页">客户端分页</span></h4><pre class=" language-tsx"><code class="language-tsx">import { Table } from 'antd'import { ColumnsType, TablePaginationConfig } from 'antd/lib/table'import axios from 'axios'import { useEffect, useState } from 'react'import { R, Student } from '../model/Student'export default function A3() {  const [students, setStudents] = useState<student[]>([])  const [loading, setLoading] = useState(true)  const [pagination, setPagination] = useState<tablepaginationconfig>(    {current:1, pageSize:5}  )  // 参数: 新的分页数据  function onTableChange(newPagination: TablePaginationConfig) {    setPagination(newPagination)  }  useEffect(() => {    async function getStudents() {      const resp = await axios.get<r<student[]>>(        'http://localhost:8080/api/students'      )      setStudents(resp.data.data)      setLoading(false)    }    getStudents()  }, [])  // ... 省略  // pagination: 分页数据  // onChange: 当页号，页大小改变时触发  return (    <table columns="{columns}" datasource="{students}" rowkey="id" loading="{loading}" pagination="{pagination}" onchange="{onTableChange}"></table>  )}</r<student[]></tablepaginationconfig></student[]></code></pre><ul><li>本例还是查询所有数据，分页是客户端 Table 组件自己实现的</li></ul><h4><span id="服务端分页">服务端分页</span></h4><pre class=" language-tsx"><code class="language-tsx">import { Table } from 'antd'import { ColumnsType, TablePaginationConfig } from 'antd/lib/table'import axios from 'axios'import { useEffect, useState } from 'react'import { PageResp, R, Student } from '../model/Student'export default function A4() {  const [students, setStudents] = useState<student[]>([])  const [loading, setLoading] = useState(true)  const [pagination, setPagination] = useState<tablepaginationconfig>({    current: 1,    pageSize: 5,  })  function onTableChange(newPagination: TablePaginationConfig) {    setPagination(newPagination)  }  useEffect(() => {    async function getStudents() {      // params 用来给请求添加 url 后的 ? 参数      const resp = await axios.get<r<pageresp<student>>>(        'http://localhost:8080/api/students/q',        {          params: {            page: pagination.current,            size: pagination.pageSize,          },        }      )      // 返回结果中：list 代表当前页集合, total 代表总记录数      setStudents(resp.data.data.list)      setPagination((old) => {        return { ...old, total: resp.data.data.total }      })      setLoading(false)    }    getStudents()  }, [pagination.current, pagination.pageSize])  // useEffect 需要在依赖项( current 和 pageSize ) 改变时重新执行  const columns: ColumnsType<student> = [    {      title: '编号',      dataIndex: 'id',    },    {      title: '姓名',      dataIndex: 'name',    },    {      title: '性别',      dataIndex: 'sex',    },    {      title: '年龄',      dataIndex: 'age',    },  ]  return (    <table columns="{columns}" datasource="{students}" rowkey="id" loading="{loading}" pagination="{pagination}" onchange="{onTableChange}"></table>  )}</student></r<pageresp<student></tablepaginationconfig></student[]></code></pre><ul><li>本例需要服务端配合来实现分页，参见代码中新加的注释</li></ul><p>其中 PageResp 类型定义为</p><pre class=" language-tsx"><code class="language-tsx">export interface PageResp<t> {  list: T[],  total: number}</t></code></pre><h4><span id="条件查询">条件查询</span></h4><pre class=" language-tsx"><code class="language-tsx">import { Input, Select, Table } from 'antd'import { ColumnsType, TablePaginationConfig } from 'antd/lib/table'import axios from 'axios'import React, { useEffect, useState } from 'react'import { PageResp, R, Student, StudentQueryForm } from '../model/Student'const { Option } = Selectexport default function A5() {  const [students, setStudents] = useState<student[]>([])  const [loading, setLoading] = useState(true)  const [pagination, setPagination] = useState<tablepaginationconfig>({    current: 1,    pageSize: 5,  })  // 代表查询条件的状态数据  const [form, setForm] = useState<studentqueryform>({})  function onTableChange(newPagination: TablePaginationConfig) {    setPagination(newPagination)  }  useEffect(() => {    async function getStudents() {      const resp = await axios.get<r<pageresp<student>>>(        'http://localhost:8080/api/students/q',        {          params: {            page: pagination.current,            size: pagination.pageSize,            ...form // 补充查询参数          },        }      )      setStudents(resp.data.data.list)      setPagination((old) => {        return { ...old, total: resp.data.data.total }      })      setLoading(false)    }    getStudents()  }, [pagination.current, pagination.pageSize, form.name, form.sex, form.age])  // 依赖项除了分页条件外，新加了查询条件依赖      const columns: ColumnsType<student> = [    {      title: '编号',      dataIndex: 'id',    },    {      title: '姓名',      dataIndex: 'name',    },    {      title: '性别',      dataIndex: 'sex',    },    {      title: '年龄',      dataIndex: 'age',    },  ]  // name 条件改变时处理函数  function onNameChange(e: React.ChangeEvent<htmlinputelement>) {    setForm((old)=>{      return {...old, name: e.target.value}    })  }  // sex 条件改变时处理函数  function onSexChange(value: string) {    setForm((old)=>{      return {...old, sex: value}    })  }  // age 条件改变时处理函数  function onAgeChange(value: string) {    setForm((old)=>{      return {...old, age: value}    })  }  return (    <div>      <div>        <input 120 style="{{" width: }} placeholder="请输入姓名" value="{form.name}" onchange="{onNameChange}">        <select 120 style="{{" width: }} placeholder="请选择性别" allowclear="{true}" value="{form.sex}" onchange="{onSexChange}">          <option value="男">男</option>          <option value="女">女</option>        </select>        <select 120 style="{{" width: }} placeholder="请选择年龄" allowclear="{true}" value="{form.age}" onchange="{onAgeChange}">          <option value="1,19">20以下</option>          <option value="20,29">20左右</option>          <option value="30,39">30左右</option>          <option value="40,120">40以上</option>        </select>      </div>      <table columns="{columns}" datasource="{students}" rowkey="id" loading="{loading}" pagination="{pagination}" onchange="{onTableChange}"></table>    </div>  )}</htmlinputelement></student></r<pageresp<student></studentqueryform></tablepaginationconfig></student[]></code></pre><ul><li>建议 axios 发请求是用 params 而不要自己拼字符串，因为自己拼串需要去掉值为 undefined 的属性</li></ul><p>其中 StudentQueryForm 为</p><pre class=" language-tsx"><code class="language-tsx">export interface StudentQueryForm {  name?: string,  sex?: string,  age?: string,  [key: string]: any}</code></pre><h4><span id="删除">删除</span></h4><pre class=" language-tsx"><code class="language-tsx">import { Button, message, Popconfirm } from 'antd'import axios from 'axios'import { R } from '../model/Student'export default function A6Delete({ id, onSuccess }: { id: number, onSuccess:()=>void }) {  async function onConfirm() {    const resp = await axios.delete<r<string>>(      `http://localhost:8080/api/students/${id}`    )    message.success(resp.data.data)    // 改变 form 依赖项    onSuccess()  }  return (    <popconfirm title="确定要删除学生吗?" onconfirm="{onConfirm}">      <button danger size="small">        删除      </button>    </popconfirm>  )}</r<string></code></pre><p>使用删除组件</p><pre class=" language-tsx"><code class="language-tsx">import { Button, Input, Select, Space, Table } from 'antd'import { ColumnsType, TablePaginationConfig } from 'antd/lib/table'import axios from 'axios'import React, { useEffect, useState } from 'react'import { PageResp, R, Student, StudentQueryForm } from '../model/Student'import A6Delete from './A6Delete'const { Option } = Selectexport default function A6() {  // ... 省略  function onDeleteSuccess() {    setForm((old)=>{      return {...old}    })  }      const columns: ColumnsType<student> = [    // ... 省略    {      title: '操作',      dataIndex: 'operation',      // value: 属性值, student      render: (_, student)=>{        return <>          <space>            <a6delete id="{student.id}" onsuccess="{onDeleteSuccess}"></a6delete>            <button type="default" size="small">修改</button>          </space>        </>      }    }  ]  // ... 省略}</student></code></pre><h4><span id="修改">修改</span></h4><pre class=" language-tsx"><code class="language-tsx">import { Form, Input, InputNumber, message, Modal, Radio } from 'antd'import { Rule } from 'antd/lib/form'import axios from 'axios'import { useEffect } from 'react'import { R, Student } from '../model/Student'export default function A6Update({  open,  student,  onSuccess,  onCancel,}: {  open: boolean  student: Student  onSuccess?: () => void  onCancel?: () => void}) {  const { Item } = Form  const { Group } = Radio  const options = [    { label: '男', value: '男' },    { label: '女', value: '女' },  ]  const [form] = Form.useForm() // 代表了表单对象  const nameRules: Rule[] = [    { required: true, message: '姓名必须' },    { min: 2, type: 'string', message: '至少两个字符' },  ]  const ageRules: Rule[] = [    { required: true, message: '年龄必须' },    { min: 1, type: 'number', message: '最小1岁' },    { max: 120, type: 'number', message: '最大120岁' },  ]  async function onOk() {    // 验证并获取表单数据    try {      const values = await form.validateFields()      console.log(values)      const resp = await axios.put<r<string>>(        `http://localhost:8080/api/students/${values.id}`,        values      )      message.success(resp.data.data)      onSuccess && onSuccess()    } catch (e) {      console.error(e)    }  }  useEffect(() => {    // 修改表单数据    form.setFieldsValue(student) // id, name, sex, age  }, [student])  return (    <modal open="{open}" title="修改学生" onok="{onOk}" oncancel="{onCancel}" forcerender="{true}">      <form form="{form}">        <item label="编号" name="id">          <input readonly>        </item>        <item label="姓名" name="name" rules="{nameRules}">          <input>        </item>        <item label="性别" name="sex">          <group options="{options}" optiontype="button" buttonstyle="solid"></group>        </item>        <item label="年龄" name="age" rules="{ageRules}">          <inputnumber></inputnumber>        </item>      </form>    </modal>  )}</r<string></code></pre><ul><li>forceRender 是避免因为使用 useForm 后，表单套在 Modal 中会出现的警告错误</li></ul><p>使用组件</p><pre class=" language-tsx"><code class="language-tsx">import { Button, Input, Select, Space, Table } from 'antd'import { ColumnsType, TablePaginationConfig } from 'antd/lib/table'import axios from 'axios'import React, { useEffect, useState } from 'react'import { PageResp, R, Student, StudentQueryForm } from '../model/Student'import A6Delete from './A6Delete'import A6Update from './A6Update'const { Option } = Selectexport default function A6() {  // ... 省略  const columns: ColumnsType<student> = [    // ... 省略    {      title: '操作',      dataIndex: 'operation',      // value: 属性值, student      render: (_, student) => {        return (          <>            <space>              <a6delete id="{student.id}" onsuccess="{onDeleteSuccess}"></a6delete>              <button type="default" size="small" onclick="{()" => {                  onUpdateClick(student)                }}>                修改              </button>            </space>          </>        )      },    },  ]  // -------------- 修改功能开始 -------------  function onUpdateClick(student: Student) {    setUpdateOpen(true)    setUpdateForm(student)  }  function onUpdateCancel() {    setUpdateOpen(false)  }  function onUpdateSuccess() {    setUpdateOpen(false)    setForm((old) => {      return { ...old }    })  }  const [updateOpen, setUpdateOpen] = useState(false)  const [updateForm, setUpdateForm] = useState<student>({    id: 0,    name: '',    sex: '男',    age: 18,  })  // -------------- 修改功能结束 -------------  return (    <div>      <a6update open="{updateOpen}" student="{updateForm}" onsuccess="{onUpdateSuccess}" oncancel="{onUpdateCancel}"></a6update>      <!-- ... 省略 -->    </div>  )}</student></student></code></pre><h4><span id="新增">新增</span></h4><pre class=" language-tsx"><code class="language-tsx">import { Form, Input, InputNumber, message, Modal, Radio } from 'antd'import { Rule } from 'antd/lib/form'import axios from 'axios'import { useEffect } from 'react'import { R, Student } from '../model/Student'export default function A6Insert({  open,  student,  onSuccess,  onCancel,}: {  open: boolean  student: Student  onSuccess?: () => void  onCancel?: () => void}) {  const { Item } = Form  const { Group } = Radio  const options = [    { label: '男', value: '男' },    { label: '女', value: '女' },  ]  const [form] = Form.useForm() // 代表了表单对象  const nameRules: Rule[] = [    { required: true, message: '姓名必须' },    { min: 2, type: 'string', message: '至少两个字符' },  ]  const ageRules: Rule[] = [    { required: true, message: '年龄必须' },    { min: 1, type: 'number', message: '最小1岁' },    { max: 120, type: 'number', message: '最大120岁' },  ]  async function onOk() {    // 验证并获取表单数据    try {      const values = await form.validateFields()      console.log(values)      const resp = await axios.post<r<string>>(        `http://localhost:8080/api/students`,        values      )      message.success(resp.data.data)      onSuccess && onSuccess()      form.resetFields() // 重置表单    } catch (e) {      console.error(e)    }  }  return (    <modal open="{open}" title="新增学生" onok="{onOk}" oncancel="{onCancel}" forcerender="{true}">      <form form="{form}" initialvalues="{student}">        <item label="姓名" name="name" rules="{nameRules}">          <input>        </item>        <item label="性别" name="sex">          <group options="{options}" optiontype="button" buttonstyle="solid"></group>        </item>        <item label="年龄" name="age" rules="{ageRules}">          <inputnumber></inputnumber>        </item>      </form>    </modal>  )}</r<string></code></pre><ul><li>initialValues 只会触发一次表单赋初值</li><li>form.resetFields() 会将表单重置为 initialValues 时的状态</li></ul><p>使用组件</p><pre class=" language-tsx"><code class="language-tsx">import { Button, Input, Select, Space, Table } from 'antd'import { ColumnsType, TablePaginationConfig } from 'antd/lib/table'import axios from 'axios'import React, { useEffect, useState } from 'react'import { PageResp, R, Student, StudentQueryForm } from '../model/Student'import A6Delete from './A6Delete'import A6Insert from './A6Insert'import A6SelectedDelete from './A6SelectedDelete'import A6Update from './A6Update'const { Option } = Selectexport default function A6() {  // ... 省略  // -------------- 新增功能开始 -------------  function onInsertClick() {    setInsertOpen(true)  }  function onInsertCancel() {    setInsertOpen(false)  }  function onInsertSuccess() {    setInsertOpen(false)    setForm((old) => {      return { ...old }    })  }  const [insertOpen, setInsertOpen] = useState(false)  const [insertForm, setInsertForm] = useState<student>({    id: 0,    name: '',    sex: '男',    age: 18,  })  // -------------- 新增功能结束 -------------    return (    <div>      <a6insert open="{insertOpen}" student="{insertForm}" onsuccess="{onInsertSuccess}" oncancel="{onInsertCancel}"></a6insert>      <a6update open="{updateOpen}" student="{updateForm}" onsuccess="{onUpdateSuccess}" oncancel="{onUpdateCancel}"></a6update>      <div>        <space>          <input 120 style="{{" width: }} placeholder="请输入姓名" value="{form.name}" onchange="{onNameChange}">          <select 120 style="{{" width: }} placeholder="请选择性别" allowclear="{true}" value="{form.sex}" onchange="{onSexChange}">            <option value="男">男</option>            <option value="女">女</option>          </select>          <select 120 style="{{" width: }} placeholder="请选择年龄" allowclear="{true}" value="{form.age}" onchange="{onAgeChange}">            <option value="1,19">20以下</option>            <option value="20,29">20左右</option>            <option value="30,39">30左右</option>            <option value="40,120">40以上</option>          </select>          <button type="primary" onclick="{onInsertClick}">新增</button>        </space>      </div>      <table columns="{columns}" datasource="{students}" rowkey="id" loading="{loading}" pagination="{pagination}" onchange="{onTableChange}"></table>    </div>  )}</student></code></pre><h4><span id="删除选中">删除选中</span></h4><pre class=" language-tsx"><code class="language-tsx">import { Button, message, Popconfirm } from "antd";import axios from "axios";import React from "react";import { R } from "../model/Student";export default function A6DeleteSelected(  {ids, onSuccess}: {ids:React.Key[], onSuccess?:()=>void} // Key[] 是 number 或 string 的数组){  const disabled = ids.length === 0  async function onConfirm() {    const resp = await axios.delete<r<string>>('http://localhost:8080/api/students', {      data: ids    })    message.success(resp.data.data)    onSuccess && onSuccess()  }  return (    <popconfirm title="真的要删除选中的学生吗?" onconfirm="{onConfirm}" disabled="{disabled}">      <button danger type="primary" disabled="{disabled}">        删除选中      </button>    </popconfirm>  )}</r<string></code></pre><p>与 A6 结合</p><pre class=" language-tsx"><code class="language-tsx">import { Button, Input, Select, Space, Table } from 'antd'import { ColumnsType, TablePaginationConfig } from 'antd/lib/table'import axios from 'axios'import React, { useEffect, useState } from 'react'import { PageResp, R, Student, StudentQueryForm } from '../model/Student'import A6Delete from './A6Delete'import A6Insert from './A6Insert'import A6SelectedDelete from './A6SelectedDelete'import A6Update from './A6Update'const { Option } = Selectexport default function A6() {  // ... 省略  // -------------- 删除选中功能开始 -------------  const [ids, setIds] = useState<react.key[]>([])  function onIdsChange(ids:React.Key[]) {    // console.log(ids)    setIds(ids)  }  function onDeleteSelectedSuccess() {    setForm((old)=>{      return {...old}    })    setIds([])  }  // -------------- 删除选中功能结束 -------------  return (    <div>      <a6insert open="{insertOpen}" student="{insertForm}" onsuccess="{onInsertSuccess}" oncancel="{onInsertCancel}"></a6insert>      <a6update open="{updateOpen}" student="{updateForm}" onsuccess="{onUpdateSuccess}" oncancel="{onUpdateCancel}"></a6update>      <div>        <space>          <!-- ... 省略 -->          <a6selecteddelete ids="{ids}" onsuccess="{onDeleteSelectedSuccess}"></a6selecteddelete>        </space>      </div>      <table rowselection="{{" selectedrowkeys: selectedkeys, onchange: onselectchange, }} columns="{columns}" datasource="{students}" rowkey="id" loading="{loading}" pagination="{pagination}" onchange="{onTableChange}"></table>    </div>  )}</react.key[]></code></pre><h4><span id="userequest">useRequest</span></h4><p>安装</p><pre class=" language-cmd"><code class="language-cmd">npm install ahooks</code></pre><p>使用</p><pre class=" language-tsx"><code class="language-tsx">import { useRequest } from 'ahooks'import { Table } from 'antd'import { ColumnsType } from 'antd/lib/table'import axios from 'axios'import { Student, R } from '../model/Student'export default function A3() {  function getStudents() {    return axios.get<r<student[]>>('http://localhost:8080/api/students')  }  const { loading, data } = useRequest(getStudents)    const columns: ColumnsType<student> = [    {      title: '编号',      dataIndex: 'id',    },    {      title: '姓名',      dataIndex: 'name',    },    {      title: '性别',      dataIndex: 'sex',    },    {      title: '年龄',      dataIndex: 'age',    },  ]  return (    <table datasource="{data?.data.data}" columns="{columns}" rowkey="id" loading="{loading}" pagination="{{" hideonsinglepage: true }}></table>  )}</student></r<student[]></code></pre><h4><span id="useandttable">useAndtTable</span></h4><pre class=" language-tsx"><code class="language-tsx">import { useAntdTable } from 'ahooks'import { Table } from 'antd'import { ColumnsType } from 'antd/lib/table'import axios from 'axios'import { Student, R } from '../model/Student'interface PageResp<t> {  total: number  list: T[]}interface PageReq {  current: number  pageSize: number  sorter?: any  filter?: any}export default function A3() {  async function getStudents({ current, pageSize }: PageReq) {    const resp = await axios.get<r<pageresp<student>>>(      `http://localhost:8080/api/students/q?page=${current}&size=${pageSize}`    )    return resp.data.data  }  const { tableProps } = useAntdTable(getStudents, {    defaultParams: [{ current: 1, pageSize: 5 }],  })  console.log(tableProps)  const columns: ColumnsType<student> = [    {      title: '编号',      dataIndex: 'id',    },    {      title: '姓名',      dataIndex: 'name',    },    {      title: '性别',      dataIndex: 'sex',    },    {      title: '年龄',      dataIndex: 'age',    },  ]  return <table {...tableprops} columns="{columns}" rowkey="id"></table>}</student></r<pageresp<student></t></code></pre><h3><span id="2-mobx">2) MobX</span></h3><h4><span id="介绍">介绍</span></h4><p>需求，组件0 改变了数据，其它组件也想获得改变后的数据，如图所示</p><p><img src="/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20221025104453534.png" alt="image-20221025104453534"></p><p>这种多个组件之间要共享状态数据，useState 就不够用了，useContext 也不好用了</p><p>能够和 react 配合使用的状态管理库有</p><ul><li>MobX</li><li>Redux</li></ul><p>其中 Redux API <strong>非常</strong>难以使用，这里选择了更加符合<strong>人类习惯</strong>的 MobX，它虽然采用了面向对象的语法，但也能和函数式的代码很好地结合</p><h4><span id="文档">文档</span></h4><ul><li><a href="https://cn.mobx.js.org/">MobX 中文文档</a></li><li><a href="https://mobx.js.org/README.html">MobX 官方文档</a></li></ul><h4><span id="安装">安装</span></h4><pre><code>npm install mobx mobx-react-lite</code></pre><ul><li>mobx 目前版本是 6.x</li><li>mobx-react-lite 目前版本是 3.x</li></ul><h4><span id="名词">名词</span></h4><p><img src="https://mobx.js.org/assets/action-state-view.png" alt="Action, State, View"></p><ul><li>Actions 用来修改状态数据的方法</li><li>Observable state 状态数据，可观察</li><li>Derived values 派生值，也叫 Computed values 计算值，会根据状态数据的改变而改变，具有缓存功能</li><li>Reactions 状态数据发生变化后要执行的操作，如 react 函数组件被重新渲染</li></ul><h4><span id="使用">使用</span></h4><p>首先，定义一个在函数之外存储状态数据的 store，它与 useState 不同：</p><ul><li>useState 里的状态数据是存储在每个组件节点上，不同组件之间没法共享</li><li>而 MobX 的 store 就是一个普通 js 对象，只要保证多个组件都访问此对象即可</li></ul><pre class=" language-tsx"><code class="language-tsx">import axios from 'axios'import { makeAutoObservable } from 'mobx'import { R, Student } from '../model/Student'class StudentStore {  student: Student = { name: '' }  constructor() {    makeAutoObservable(this)  }  async fetch(id: number) {    const resp = await axios.get<r<student>>(      `http://localhost:8080/api/students/${id}`    )    runInAction(() => {      this.student = resp.data.data    })  }      get print() {    const first = this.student.name.charAt(0)    if (this.student.sex === '男') {      return first.concat('大侠')    } else if (this.student.sex === '女') {      return first.concat('女侠')    } else {      return ''    }  } }export default new StudentStore()</r<student></code></pre><p>其中 makeAutoObservable 会</p><ul><li>将对象的属性 student 变成 Observable state，即状态数据</li><li>将对象的方法 fetch 变成 Action，即修改数据的方法</li><li>将 get 方法变成 Computed values</li></ul><p>在异步操作里为状态属性赋值，需要放在 runInAction 里，否则会有警告错误</p><p>使用 store，所有使用 store 的组件，为了感知状态数据的变化，需要用 observer 包装，对应着图中 reactions</p><pre class=" language-tsx"><code class="language-tsx">import Search from 'antd/lib/input/Search'import { observer } from 'mobx-react-lite'import studentStore from '../store/StudentStore'import A71 from './A71'import Test2 from './Test2'const A7 = () => {  return (    <div>      <search placeholder="input search text" onsearch="{(v)" => studentStore.fetch(Number(v))}        style={{ width: 100 }}      />      <h3><span id="组件0-studentstorestudentname">组件0 {studentStore.student.name}</span></h3>      <a71></a71>      <a72></a72>    </search></div>  )}export default observer(A7)</code></pre><p>其它组件</p><pre class=" language-tsx"><code class="language-tsx">import { observer } from 'mobx-react-lite'import studentStore from '../store/StudentStore'const A71 = () =>{  return <h3 style="{{color:'red'}}"><span id="组件1-studentstorestudentname">组件1 {studentStore.student.name}</span></h3>}export default observer(A71)</code></pre><pre class=" language-tsx"><code class="language-tsx">import { observer } from 'mobx-react-lite'import studentStore from '../store/StudentStore'const A72 = () =>{  return <h3 style="{{color:'red'}}"><span id="组件1-studentstorestudentname">组件1 {studentStore.student.name}</span></h3>}export default observer(A72)</code></pre><h4><span id="注解方式">注解方式</span></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token punctuation">{</span> R<span class="token punctuation">,</span> Student <span class="token punctuation">}</span> from <span class="token string">"../model/Student"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> action<span class="token punctuation">,</span> computed<span class="token punctuation">,</span> makeAutoObservable<span class="token punctuation">,</span> makeObservable<span class="token punctuation">,</span> observable<span class="token punctuation">,</span> runInAction <span class="token punctuation">}</span> from <span class="token string">'mobx'</span><span class="token keyword">import</span> axios from <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">StudentStore</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 属性 - 对应状态数据 observable state</span>  <span class="token annotation punctuation">@observable</span> student<span class="token operator">:</span> Student <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">''</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 方法 - 对应 action 方法</span>  <span class="token annotation punctuation">@action</span> <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token operator">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@action</span> async <span class="token function">fetch</span><span class="token punctuation">(</span>id<span class="token operator">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> resp <span class="token operator">=</span> await axios<span class="token punctuation">.</span>get<span class="token operator">&lt;</span>R<span class="token operator">&lt;</span>Student<span class="token operator">>></span><span class="token punctuation">(</span>`http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>api<span class="token operator">/</span>students<span class="token operator">/</span>$<span class="token punctuation">{</span>id<span class="token punctuation">}</span>`<span class="token punctuation">)</span>    <span class="token function">runInAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>student <span class="token operator">=</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// get 方法 - 对应 derived value</span>  <span class="token annotation punctuation">@computed</span> get <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> first <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">.</span>sex <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> first <span class="token operator">+</span> <span class="token string">'大侠'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">.</span>sex <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> first <span class="token operator">+</span> <span class="token string">'女侠'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 构造器</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">makeObservable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>export <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">StudentStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>需要在 tsconifg.json 中加入配置</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    // ...    <span class="token property">"experimentalDecorators"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="3-react-router">3) React Router</span></h3><h4><span id="安装">安装</span></h4><pre class=" language-cmd"><code class="language-cmd">npm install react-router-dom</code></pre><ul><li>目前版本是 6.x</li></ul><h4><span id="使用">使用</span></h4><p>新建文件 src/router/router.tsx</p><pre class=" language-tsx"><code class="language-tsx">import { lazy } from 'react'import { Navigate, RouteObject, useRoutes } from 'react-router-dom'export function load(name: string) {  const Page = lazy(() => import(`../pages/${name}`))  return <page></page>}const staticRoutes: RouteObject[] = [  { path: '/login', element: load('A8Login') },  {    path: '/',    element: load('A8Main'),    children: [      { path: 'student', element: load('A8MainStudent') },      { path: 'teacher', element: load('A8MainTeacher') },      { path: 'user', element: load('A8MainUser') }    ],  },  { path: '/404', element: load('A8Notfound') },  { path: '/*', element: <navigate to="{'/404'}"></navigate> },]export default function Router() {  return useRoutes(staticRoutes)}</code></pre><p>index.tsx 修改为</p><pre class=" language-tsx"><code class="language-tsx">import ReactDOM from 'react-dom/client';import './index.css';import { ConfigProvider } from 'antd';import zhCN from 'antd/es/locale/zh_CN'import { BrowserRouter } from 'react-router-dom';import Router from './router/router';const root = ReactDOM.createRoot(  document.getElementById('root') as HTMLElement);root.render(  <configprovider locale="{zhCN}">    <browserrouter>      <router></router>    </browserrouter>  </configprovider>  )</code></pre><p>A8Main 的代码</p><pre class=" language-tsx"><code class="language-tsx">import { Layout } from "antd";import { Link, Outlet } from "react-router-dom";export default function A8Main () {    return <layout>    <layout.header>头部导航</layout.header>    <layout>      <layout.sider>侧边导航        <link to="/student">学生管理        <link to="/teacher">教师管理        <link to="/user">用户管理      </layout.sider>      <layout.content>        <outlet></outlet>      </layout.content>    </layout>  </layout>}</code></pre><ol><li>Navigate 的作用是重定向</li><li>load 方法的作用是懒加载组件，更重要的是根据字符串找到真正的组件，这是动态路由所需要的</li><li>children 来进行嵌套路由映射，嵌套路由在跳转后，并不是替换整个页面，而是用新页面替换父页面的 Outlet 部分</li></ol><h4><span id="动态路由">动态路由</span></h4><p>路由分成两部分：</p><ul><li>静态路由，固定的部分，如主页、404、login 这几个页面</li><li>动态路由，变化的部分，经常是主页内的嵌套路由，比如 Student、Teacher 这些</li></ul><p>动态路由应该是根据用户登录后，根据角色的不同，从后端服务获取，因为这些数据是变化的，所以用 mobx 来管理</p><pre class=" language-tsx"><code class="language-tsx">import axios from 'axios'import { makeAutoObservable, runInAction } from 'mobx'import { Navigate, RouteObject } from 'react-router-dom'import { MenuAndRoute, R, Route } from '../model/Student'import { load } from '../router/MyRouter'class RoutesStore {  dynamicRoutes: Route[]  async fetch(username: string) {    const resp = await axios.get<r<menuandroute>>(      `http://localhost:8080/api/menu/${username}`    )    runInAction(() => {      this.dynamicRoutes = resp.data.data.routeList      localStorage.setItem('dynamicRoutes', JSON.stringify(this.dynamicRoutes))    })  }  constructor() {    makeAutoObservable(this)    const r = localStorage.getItem('dynamicRoutes')    this.dynamicRoutes = r ? JSON.parse(r) : []  }  reset() {    this.dynamicRoutes = []    localStorage.removeItem('dynamicRoutes')  }  get routes() {    const staticRoutes: RouteObject[] = [      { path: '/login', element: load('A8Login') },      { path: '/', element: load('A8Main') },      { path: '/404', element: load('A8Notfound') },      { path: '/*', element: <navigate to="{'/404'}"></navigate> },    ]    const main = staticRoutes[1]    main.children = this.dynamicRoutes.map((r) => {      console.log(r.path, r.element)      return {        path: r.path,        element: load(r.element),      }    })    return staticRoutes  }}export default new RoutesStore()</r<menuandroute></code></pre><ul><li>其中用 localStorage 进行了数据的持久化，避免刷新后丢失数据</li></ul><p>MyRouter 文件修改为</p><pre class=" language-tsx"><code class="language-tsx">import { observer } from 'mobx-react-lite'import { lazy } from 'react'import { Navigate, RouteObject, useRoutes } from 'react-router-dom'import RoutesStore from '../store/RoutesStore'// 把字符串组件 => 组件标签export function load(name: string) {  // A8Login  const Page = lazy(() => import(`../pages/${name}`))  return <page></page>}// 路由对象function MyRouter() {    const router = useRoutes(RoutesStore.routes)  return router}export default observer(MyRouter)</code></pre><p>注意导入 router 对象时，用 observer 做了包装，这样能够在 store 发生变化时重建 router 对象</p><h4><span id="动态菜单">动态菜单</span></h4><p>图标要独立安装依赖</p><pre><code>npm install @ant-design/icons</code></pre><p>图标组件，用来将<strong>字符串图标</strong>转换为<strong>标签图标</strong></p><pre class=" language-tsx"><code class="language-tsx">import * as icons from '@ant-design/icons'interface Module {  [p: string]: any}const all: Module = iconsexport default function Icon({ name }: { name: string }) {  const Icon = all[name]  return <icon></icon>}</code></pre><p>修改 RoutesStore.tsx</p><pre class=" language-tsx"><code class="language-tsx">import axios from 'axios'import { makeAutoObservable, runInAction } from 'mobx'import { Link, Navigate, RouteObject } from 'react-router-dom'import { Menu, MenuAndRoute, R, Route } from '../model/Student'import { load } from '../router/MyRouter'import Icon from './Icon'function convertMenu(m: Menu): any {  const Label = m.routePath ? <link to="{m.routePath}">{m.label} : m.label  return {    label: Label,    key: m.key,    icon: <icon name="{m.icon}"></icon>,    children: m.children && m.children.map(convertMenu)  }}class RoutesStore {  // 动态部分  dynamicRoutes: Route[] = []  dynamicMenus: Menu[] = []  async fetch(username: string) {    const resp = await axios.get<r<menuandroute>>(      `http://localhost:8080/api/menu/${username}`    )    runInAction(() => {      this.dynamicRoutes = resp.data.data.routeList      localStorage.setItem('dynamicRoutes', JSON.stringify(this.dynamicRoutes))      this.dynamicMenus = resp.data.data.menuTree      localStorage.setItem('dynamicMenus', JSON.stringify(this.dynamicMenus))    })  }  get menus() {    return this.dynamicMenus.map(convertMenu)  }  get routes() {    const staticRoutes: RouteObject[] = [      { path: '/login', element: load('A8Login') },      { path: '/', element: load('A8Main'), children: [] },      { path: '/404', element: load('A8Notfound') },      { path: '/*', element: <navigate to="{'/404'}"></navigate> },    ]    staticRoutes[1].children = this.dynamicRoutes.map((r) => {      return {        path: r.path,        element: load(r.element),      }    })    return staticRoutes  }  constructor() {    makeAutoObservable(this)    const json = localStorage.getItem('dynamicRoutes')    this.dynamicRoutes = json ? JSON.parse(json) : []    const json2 = localStorage.getItem('dynamicMenus')    this.dynamicMenus = json2 ? JSON.parse(json2) : []  }  reset() {    localStorage.removeItem('dynamicRoutes')    this.dynamicRoutes = []    localStorage.removeItem('dynamicMenus')    this.dynamicMenus = []  }}export default new RoutesStore()</r<menuandroute></code></pre><p>其中 convertMenu 为核心方法，负责将服务器返回的 Menu 转换成 antd Menu 组件需要的 Menu</p><p>使用</p><pre class=" language-tsx"><code class="language-tsx"><menu items="{RoutesStore.menus}" mode="inline" theme="dark"></menu></code></pre><p>跳转若发生错误，可能是因为组件懒加载引起的，需要用 Suspense 解决</p><pre class=" language-tsx"><code class="language-tsx">root.render(  <configprovider locale="{zhCN}">    <browserrouter>      <suspense fallback="{<h3">加载中...}>        <myrouter></myrouter>      </suspense>    </browserrouter>  </configprovider>)</code></pre><h4><span id="登录">登录</span></h4><pre class=" language-tsx"><code class="language-tsx">import { ItemType } from 'antd/lib/menu/hooks/useItems'import axios from 'axios'import { makeAutoObservable, runInAction } from 'mobx'import { Link, Navigate, RouteObject } from 'react-router-dom'import { LoginReq, LoginResp, Menu, MenuAndRoute, R, Route } from '../model/Student'import { load } from '../router/MyRouter'import Icon from './Icon'function convertMenu(m: Menu): ItemType {  const Label = m.routePath? <link to="{m.routePath}">{m.label} : m.label  return {    key: m.key,    label: Label,    icon: <icon name="{m.icon}"></icon>,     children: m.children && m.children.map(convertMenu)  }}class RoutesStore {  // 动态部分  dynamicRoutes: Route[] = []  dynamicMenus: Menu[] = []  token: string = ''  state: string = 'pending' // 取值 pending done error  message: string = '' // 取值: 1. 空串 正常  2. 非空串 错误消息  async login(loginReq: LoginReq) {    this.state = 'pending'    this.message = ''    const resp1 = await axios.post<r<loginresp>>(      'http://localhost:8080/api/loginJwt',      loginReq    )    if(resp1.data.code === 999) {      const resp2 = await axios.get<r<menuandroute>>(        `http://localhost:8080/api/menu/${loginReq.username}`      )      runInAction(()=>{        this.token = resp1.data.data.token        localStorage.setItem('token', this.token)        this.dynamicRoutes = resp2.data.data.routeList        localStorage.setItem('dynamicRoutes', JSON.stringify(this.dynamicRoutes))        this.dynamicMenus = resp2.data.data.menuTree        localStorage.setItem('dynamicMenus', JSON.stringify(this.dynamicMenus))        this.state = 'done'      })    } else {      runInAction(()=>{        this.message = resp1.data.message || '未知错误'        this.state = 'error'      })    }  }  async fetch(username: string) {    const resp = await axios.get<r<menuandroute>>(      `http://localhost:8080/api/menu/${username}`    )    runInAction(() => {      this.dynamicRoutes = resp.data.data.routeList      localStorage.setItem('dynamicRoutes', JSON.stringify(this.dynamicRoutes))      this.dynamicMenus = resp.data.data.menuTree      localStorage.setItem('dynamicMenus', JSON.stringify(this.dynamicMenus))    })  }      get routes() {    const staticRoutes: RouteObject[] = [      { path: '/login', element: load('A8Login') },      { path: '/', element: load('A8Main'), children: [] },      { path: '/404', element: load('A8Notfound') },      { path: '/*', element: <navigate to="{'/404'}"></navigate> },    ]    staticRoutes[1].children = this.dynamicRoutes.map((r) => {      return {        path: r.path,        element: load(r.element),      }    })    return staticRoutes  }  get menus() {    return this.dynamicMenus.map(convertMenu)  }  constructor() {    makeAutoObservable(this)    const json = localStorage.getItem('dynamicRoutes')    this.dynamicRoutes = json ? JSON.parse(json) : []    const json1 = localStorage.getItem('dynamicMenus')    this.dynamicMenus = json1 ? JSON.parse(json1) : []    const token = localStorage.getItem('token')    this.token = token ?? ''          this.message = ''    this.state = 'pending'    }  reset() {    localStorage.removeItem('dynamicRoutes')    this.dynamicRoutes = []    localStorage.removeItem('dynamicMenus')    this.dynamicMenus = []    localStorage.removeItem('token')    this.token = ''          this.message = ''    this.state = 'pending'      }}export default new RoutesStore()</r<menuandroute></r<menuandroute></r<loginresp></code></pre><p>登录页面</p><pre class=" language-tsx"><code class="language-tsx">function A8Login() {  function onFinish(values: { username: string; password: string }) {    RoutesStore.login(values)  }  const nav = useNavigate()  useEffect(() => {    if (RoutesStore.state === 'done') {      nav('/')    } else if (RoutesStore.state === 'error') {      message.error(RoutesStore.message)    }  }, [RoutesStore.state])  // ...}export default observer(A8Login)</code></pre><ul><li>用 useNavigate() 返回的函数跳转的代码不能包含在函数式组件的主逻辑中，只能放在<ul><li>其它事件处理函数中</li><li>写在副作用函数 useEffect 之中</li></ul></li></ul><h4><span id="注销-欢迎词-登录检查">注销、欢迎词、登录检查</span></h4><p>Store 中增加 get username 方法</p><pre class=" language-tsx"><code class="language-tsx">class RoutesStore {  // ...  // eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9.-l-MjMPGJVOf3zoIJgoqpV3LWoqvCCgcaI1ga86ismU  get username() {    if(this.token.length === 0) {      return ''    }    const json = atob(this.token.split('.')[1])    return JSON.parse(json).sub  }      // ...}</code></pre><ul><li>token 的前两部分都可以解码出来，其中 [1] 就是 token 的内容部分</li></ul><p>主页组件改为</p><pre class=" language-tsx"><code class="language-tsx">import { Button, Layout, Menu } from 'antd'import { observer } from 'mobx-react-lite'import { useEffect } from 'react'import { Navigate, Outlet, useNavigate } from 'react-router-dom'import RoutesStore from '../store/RoutesStore'function A8Main() {  const nav = useNavigate()  function onClick() {    RoutesStore.reset()    nav('/login')  }  /* useEffect(()=>{    if(RoutesStore.username === '') {      nav('/login')    }  }, []) */  if(RoutesStore.username === '') {    return <navigate to="/login"></navigate>  }  return (    <layout>      <layout.header>        <span>欢迎您【{RoutesStore.username}】</span>        <button size="small" onclick="{onClick}">注销</button>      </layout.header>      <layout>        <layout.sider>          <menu items="{RoutesStore.menus}" theme="dark" mode="inline"></menu>        </layout.sider>        <layout.content>          <outlet></outlet>        </layout.content>      </layout>    </layout>  )}export default observer(A8Main)</code></pre><ul><li>这个例子中推荐用 Navigate 来完成跳转</li><li>/student，/teacher 等路由不需要检查，因为登录成功后才有</li></ul><h2><span id="附录">附录</span></h2><h3><span id="代码片段">代码片段</span></h3><p>ctrl+shift+p 输入关键词<strong>代码</strong></p><p><img src="/2022/12/13/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-react/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20221026102533928.png" alt="image-20221026102533928"></p><p>定义 fun.code-snippets</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"函数组件"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"scope"</span><span class="token operator">:</span> <span class="token string">"javascript,typescript,typescriptreact"</span><span class="token punctuation">,</span>        <span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token string">"fun"</span><span class="token punctuation">,</span>        <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"export default function ${1:函数名} () {"</span><span class="token punctuation">,</span>      <span class="token string">"  $0"</span><span class="token punctuation">,</span>            <span class="token string">"  return &lt;>&lt;/>"</span><span class="token punctuation">,</span>            <span class="token string">"}"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"快速生成react函数式组件"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>定义 ofun.code-snippets</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"mobx函数组件"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"scope"</span><span class="token operator">:</span> <span class="token string">"javascript,typescript,typescriptreact"</span><span class="token punctuation">,</span>        <span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token string">"ofun"</span><span class="token punctuation">,</span>        <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"import { observer } from \"mobx-react-lite\""</span><span class="token punctuation">,</span>      <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token string">"function ${1:函数名} () {"</span><span class="token punctuation">,</span>      <span class="token string">"  $0"</span><span class="token punctuation">,</span>            <span class="token string">"  return &lt;>&lt;/>"</span><span class="token punctuation">,</span>            <span class="token string">"}"</span><span class="token punctuation">,</span>      <span class="token string">"export default observer($1)"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"快速生成mobx react函数式组件"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样可以在 tsx 中用快捷键 <code>fun</code> 以及 <code>ofun</code> 创建相应的代码片段</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java程序员要掌握的前端-Vue 2</title>
      <link href="/2022/11/22/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue2/"/>
      <url>/2022/11/22/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue2/</url>
      
        <content type="html"><![CDATA[<h1><span id="三-vue-2">三. Vue 2</span></h1><h2><span id="1-vue-基础">1. Vue 基础</span></h2><h3><span id="1-环境准备">1) 环境准备</span></h3><h4><span id="安装脚手架">安装脚手架</span></h4><pre><code>npm install -g @vue/cli</code></pre><ul><li>-g 参数表示全局安装，这样在任意目录都可以使用 vue 脚本创建项目</li></ul><h4><span id="创建项目">创建项目</span></h4><pre class=" language-cmd"><code class="language-cmd">vue ui</code></pre><p>使用图形向导来创建 vue 项目，如下图，输入项目名</p><p><img src="/2022/11/22/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue2/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220815141136895.png" alt="image-20220815141136895"></p><p>选择手动配置项目</p><p><img src="/2022/11/22/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue2/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220815141312244.png" alt="image-20220815141312244"></p><p>添加 vue router 和 vuex</p><p><img src="/2022/11/22/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue2/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220815141412380.png" alt="image-20220815141412380"></p><p>选择版本，创建项目</p><p><img src="/2022/11/22/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue2/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220815141459878.png" alt="image-20220815141459878"></p><h4><span id="安装-devtools">安装 devtools</span></h4><ul><li>devtools 插件网址：<a href="https://devtools.vuejs.org/guide/installation.html">https://devtools.vuejs.org/guide/installation.html</a></li></ul><p><img src="/2022/11/22/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue2/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220815141648040.png" alt="image-20220815141648040"></p><h4><span id="运行项目">运行项目</span></h4><p>进入项目目录，执行</p><pre class=" language-cmd"><code class="language-cmd">npm run serve</code></pre><h4><span id="修改端口">修改端口</span></h4><p>前端服务器默认占用了 8080 端口，需要修改一下</p><ul><li><p>文档地址：<a href="https://webpack.js.org/configuration/dev-server/#devserverport">DevServer | webpack</a></p></li><li><p>打开 vue.config.js 添加</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@vue/cli-service'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>      devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">7070</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h4><span id="添加代理">添加代理</span></h4><p>为了避免前后端服务器联调时， fetch、xhr 请求产生跨域问题，需要配置代理</p><ul><li><p>文档地址同上</p></li><li><p>打开 vue.config.js 添加</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@vue/cli-service'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>      devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">7070</span><span class="token punctuation">,</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">'http://localhost:8080'</span><span class="token punctuation">,</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h4><span id="vue-项目结构">Vue 项目结构</span></h4><pre><code>PS D:\2022.js\代码\第3章\client&gt; tree srcD:\2022.JS\代码\第3章\CLIENT\SRC├─assets├─components├─router├─store└─views</code></pre><ul><li>assets - 静态资源</li><li>components - 可重用组件</li><li>router - 路由</li><li>store - 数据共享</li><li>views - 视图组件</li></ul><p>以后还会添加</p><ul><li>api - 跟后台交互，发送 fetch、xhr 请求，接收响应</li><li>plugins - 插件</li></ul><h3><span id="2-vue-组件">2) Vue 组件</span></h3><p>Vue 的组件文件以 .vue 结尾，每个组件由三部分组成</p><pre class=" language-vue"><code class="language-vue"><template></template><script></script><style></style></code></pre><ul><li>template 模板部分，由它生成 html 代码</li><li>script 代码部分，控制模板的数据来源和行为</li><li>style 样式部分，一般不咋关心</li></ul><p>入口组件是 App.vue</p><p>先删除原有代码，来个 Hello, World 例子</p><pre class=" language-vue"><code class="language-vue"><template>  <h1><span id="msg">{{msg}}</span></h1></template><script>export default {  data() {    return {      msg: "Hello, Vue!"    }  }}</script></code></pre><p>解释</p><ul><li><p>export default 导出组件对象，供 main.js 导入使用</p></li><li><p>这个对象有一个 data 方法，返回一个<strong>对象</strong>，给 template 提供数据</p></li><li><pre><code>`&#123;&#123;&#125;&#125;` 在 Vue 里称之为插值表达式，用来**绑定** data 方法返回的**对象**属性，**绑定**的含义是数据发生变化时，页面显示会同步变化  ```  #### 文本插值```vue<template>    <div>        <h1><span id="123123-name-125125lth1gt-lth1gt123123-age-60-老年-青年-125125lth1gt-ltdivgtlttemplategtltscriptgtconst-options-123-data-function-123-return-123-name-39张三39-age-70-125-125125export-default-optionsltscriptgt">&#123;&#123; name &#125;&#125;&lt;/h1&gt;      &lt;h1&gt;&#123;&#123; age > 60 ? '老年' : '青年' &#125;&#125;&lt;/h1&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;const options = &#123;  data: function () &#123;      return &#123; name: &#39;张三&#39;, age: 70 &#125;;  &#125;&#125;;export default options;&lt;/script&gt;</span></h1></div></template></code></pre></li><li><pre><code>`&#123;&#123;&#125;&#125;` 里只能绑定一个属性，绑定多个属性需要用多个 `&#123;&#123;&#125;&#125;` 分别绑定</code></pre></li><li><p>template 内只能有一个根元素</p></li><li><p>插值内可以进行简单的表达式计算</p></li></ul><h4><span id="属性绑定">属性绑定</span></h4><pre class=" language-vue"><code class="language-vue"><template>    <div>        <div><input type="text" v-bind:value="name"></div>        <div><input type="date" v-bind:value="birthday"></div>        <div><input type="text" :value="age"></div>    </div></template><script>const options = {    data: function () {        return { name: '王五', birthday: '1995-05-01', age: 20 };    }};export default options;</script></code></pre><ul><li>简写方式：可以省略 v-bind 只保留冒号</li></ul><h4><span id="事件绑定">事件绑定</span></h4><pre class=" language-vue"><code class="language-vue"><!-- 事件绑定 --><template>    <div>        <div><input type="button" value="点我执行m1" v-on:click="m1"></div>        <div><input type="button" value="点我执行m2" @click="m2"></div>        <div>{{count}}</div>    </div></template><script>const options = {    data: function () {        return { count: 0 };    },    methods: {        m1() {            this.count ++;            console.log("m1")        },        m2() {            this.count --;            console.log("m2")        }    }};export default options;</script></code></pre><ul><li>简写方式：可以把 v-on: 替换为 @</li><li>在 methods 方法中的 this 代表的是 data 函数返回的数据对象</li></ul><h4><span id="双向绑定">双向绑定</span></h4><pre class=" language-vue"><code class="language-vue"><template>    <div>        <div>            <label for>请输入姓名</label>            <input type="text" v-model="name">        </div>        <div>            <label for>请输入年龄</label>            <input type="text" v-model="age">        </div>        <div>            <label for>请选择性别</label>            男 <input type="radio" value="男" v-model="sex">            女 <input type="radio" value="女" v-model="sex">        </div>        <div>            <label for>请选择爱好</label>            游泳 <input type="checkbox" value="游泳" v-model="fav">            打球 <input type="checkbox" value="打球" v-model="fav">            健身 <input type="checkbox" value="健身" v-model="fav">        </div>    </div></template><script>const options = {    data: function () {        return { name: '', age: null, sex:'男' , fav:['打球']};    },    methods: {    }};export default options;</script></code></pre><ul><li>用 v-model 实现双向绑定，即 <ul><li>javascript 数据可以同步到表单标签</li><li>反过来用户在表单标签输入的新值也会同步到 javascript 这边</li></ul></li><li>双向绑定只适用于表单这种带【输入】功能的标签，其它标签的数据绑定，单向就足够了</li><li>复选框这种标签，双向绑定的 javascript 数据类型一般用数组</li></ul><h4><span id="计算属性">计算属性</span></h4><pre class=" language-vue"><code class="language-vue"><!-- 计算属性 --><template>    <div>        <h2><span id="fullname">{{fullName}}</span></h2>        <h2><span id="fullname">{{fullName}}</span></h2>        <h2><span id="fullname">{{fullName}}</span></h2>    </div></template><script>const options = {    data: function () {        return { firstName: '三', lastName: '张' };    },    /* methods: {        fullName() {            console.log('进入了 fullName')            return this.lastName + this.firstName;        }    },*/    computed: {        fullName() {            console.log('进入了 fullName')            return this.lastName + this.firstName;        }    }};export default options;</code></pre><ul><li>普通方法调用必须加 ()，没有缓存功能</li><li>计算属性使用时就把它当属性来用，不加 ()，有缓存功能：<ul><li>一次计算后，会将结果缓存，下次再计算时，只要数据没有变化，不会重新计算，直接返回缓存结果</li></ul></li></ul><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><p>axios 它的底层是用了 XMLHttpRequest（xhr）方式发送请求和接收响应，xhr 相对于之前讲过的 fetch api 来说，功能更强大，但由于是比较老的 api，不支持 Promise，axios 对 xhr 进行了封装，使之支持 Promise，并提供了对请求、响应的统一拦截功能</p><p>安装</p><pre class=" language-cmd"><code class="language-cmd">npm install axios -S</code></pre><p>导入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span></code></pre><ul><li>axios 默认导出一个对象，这里的 import 导入的就是它默认导出的对象</li></ul><p>方法</p><table><thead><tr><th>请求</th><th>备注</th></tr></thead><tbody><tr><td>axios.get(url[, config])</td><td>:star:</td></tr><tr><td>axios.delete(url[, config])</td><td></td></tr><tr><td>axios.head(url[, config])</td><td></td></tr><tr><td>axios.options(url[, config])</td><td></td></tr><tr><td>axios.post(url[, data[, config]])</td><td>:star:</td></tr><tr><td>axios.put(url[, data[, config]])</td><td></td></tr><tr><td>axios.patch(url[, data[, config]])</td><td></td></tr></tbody></table><ul><li>config - 选项对象、例如查询参数、请求头…</li><li>data - 请求体数据、最常见的是 json 格式数据</li><li>get、head 请求无法携带请求体，这应当是浏览器的限制所致（xhr、fetch api 均有限制）</li><li>options、delete 请求可以通过 config 中的 data 携带请求体</li></ul><p>例子</p><pre class=" language-vue"><code class="language-vue"><template>    <div>        <input type="button" value="获取远程数据" @click="sendReq()">    </div></template><script>import axios from 'axios'const options = {    methods: {        async sendReq() {            // 1. 演示 get, post            // const resp = await axios.post('/api/a2');            // 2. 发送请求头            // const resp = await axios.post('/api/a3',{},{            //     headers:{            //         Authorization:'abc'            //     }            // });            // 3. 发送请求时携带查询参数 ?name=xxx&age=xxx            // const name = encodeURIComponent('&&&');            // const age = 18;            // const resp = await axios.post(`/api/a4?name=${name}&age=${age}`);            // 不想自己拼串、处理特殊字符、就用下面的办法            // const resp = await axios.post('/api/a4', {}, {            //     params: {            //         name:'&&&&',            //         age: 20            //     }            // });            // 4. 用请求体发数据，格式为 urlencoded            // const params = new URLSearchParams();            // params.append("name", "张三");            // params.append("age", 24)            // const resp = await axios.post('/api/a4', params);            // 5. 用请求体发数据，格式为 multipart            // const params = new FormData();            // params.append("name", "李四");            // params.append("age", 30);            // const resp = await axios.post('/api/a5', params);            // 6. 用请求体发数据，格式为 json            const resp = await axios.post('/api/a5json', {                name: '王五',                age: 50            });            console.log(resp);        }    }};export default options;</script></code></pre><p>创建实例</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> _axios <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>axios 对象可以直接使用，但使用的是默认的设置</li><li>用 axios.create 创建的对象，可以覆盖默认设置，config 见下面说明</li></ul><p>常见的 config 项有</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>baseURL</td><td>将自动加在 url 前面</td></tr><tr><td>headers</td><td>请求头，类型为简单对象</td></tr><tr><td>params</td><td>跟在 URL 后的请求参数，类型为简单对象或 URLSearchParams</td></tr><tr><td>data</td><td>请求体，类型有简单对象、FormData、URLSearchParams、File 等</td></tr><tr><td>withCredentials</td><td>跨域时是否携带 Cookie 等凭证，默认为 false</td></tr><tr><td>responseType</td><td>响应类型，默认为 json</td></tr></tbody></table><p>例</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> _axios <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token punctuation">:</span> <span class="token string">'http://localhost:8080'</span><span class="token punctuation">,</span>    withCredentials<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> _axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/a6set'</span><span class="token punctuation">)</span><span class="token keyword">await</span> _axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/a6get'</span><span class="token punctuation">)</span></code></pre><ul><li>生产环境希望 xhr 请求不走代理，可以用 baseURL 统一修改</li><li>希望跨域请求携带 cookie，需要配置 withCredentials: true，服务器也要配置 allowCredentials = true，否则浏览器获取跨域返回的 cookie 时会报错</li></ul><p>响应格式</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>data</td><td>响应体数据 :star:</td></tr><tr><td>status</td><td>状态码 :star:</td></tr><tr><td>headers</td><td>响应头</td></tr></tbody></table><ul><li>200 表示响应成功</li><li>400 请求数据不正确 age=abc</li><li>401 身份验证没通过</li><li>403 没有权限</li><li>404 资源不存在</li><li>405 不支持请求方式 post</li><li>500 服务器内部错误</li></ul><p>请求拦截器</p><pre class=" language-js"><code class="language-js">_axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 比如在这里添加统一的 headers</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>响应拦截器</p><pre class=" language-js"><code class="language-js">_axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2xx 范围内走这里</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 超出 2xx, 比如 4xx, 5xx 走这里</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4><span id="条件渲染">条件渲染</span></h4><pre class=" language-vue"><code class="language-vue"><template>    <div>        <input type="button" value="获取远程数据" @click="sendReq()">        <div class="title">学生列表</div>        <div class="thead">            <div class="row bold">                <div class="col">编号</div>                <div class="col">姓名</div>                <div class="col">性别</div>                <div class="col">年龄</div>            </div>        </div>        <div class="tbody">            <div class="row" v-if="students.length > 0">显示学生数据</div>            <div class="row" v-else>暂无学生数据</div>        </div>    </div></template><script>import axios from '../util/myaxios'const options = {    data: function() {        return {            students: []        };    },    methods : {        async sendReq() {            const resp = await axios.get("/api/students");            console.log(resp.data.data)            this.students = resp.data.data;        }    }};export default options;</script><style scoped>    div {        font-family: 华文行楷;        font-size: 20px;    }    .title {        margin-bottom: 10px;        font-size: 30px;        color: #333;        text-align: center;    }    .row {        background-color: #fff;        display: flex;        justify-content: center;    }    .col {        border: 1px solid #f0f0f0;        width: 15%;        height: 35px;        text-align: center;        line-height: 35px;    }    .bold .col {        background-color: #f1f1f1;    }</style></code></pre><h4><span id="列表渲染">列表渲染</span></h4><pre class=" language-vue"><code class="language-vue"><template>    <div>        <!-- <input type="button" value="获取远程数据" @click="sendReq()"> -->        <div class="title">学生列表</div>        <div class="thead">            <div class="row bold">                <div class="col">编号</div>                <div class="col">姓名</div>                <div class="col">性别</div>                <div class="col">年龄</div>            </div>        </div>        <div class="tbody">            <div v-if="students.length > 0">                <div class="row" v-for="s of students" :key="s.id">                    <div class="col">{{s.id}}</div>                    <div class="col">{{s.name}}</div>                    <div class="col">{{s.sex}}</div>                    <div class="col">{{s.age}}</div>                </div>            </div>            <div class="row" v-else>暂无学生数据</div>        </div>    </div></template><script>import axios from '../util/myaxios'const options = {    mounted: function(){        this.sendReq()    },    data: function() {        return {            students: []        };    },    methods : {        async sendReq() {            const resp = await axios.get("/api/students");            console.log(resp.data.data)            this.students = resp.data.data;        }    }};export default options;</script><style scoped>    div {        font-family: 华文行楷;        font-size: 20px;    }    .title {        margin-bottom: 10px;        font-size: 30px;        color: #333;        text-align: center;    }    .row {        background-color: #fff;        display: flex;        justify-content: center;    }    .col {        border: 1px solid #f0f0f0;        width: 15%;        height: 35px;        text-align: center;        line-height: 35px;    }    .bold .col {        background-color: #f1f1f1;    }</style></code></pre><ul><li>v-if 和 v-for 不能用于同一个标签</li><li>v-for 需要配合特殊的标签属性 key 一起使用，并且 key 属性要绑定到一个能起到唯一标识作用的数据上，本例绑定到了学生编号上</li><li>options 的 mounted 属性对应一个函数，此函数会在组件挂载后（准备就绪）被调用，可以在它内部发起请求，去获取学生数据</li></ul><h4><span id="重用组件">重用组件</span></h4><p>按钮组件</p><pre class=" language-vue"><code class="language-vue"><template>    <div class="button" :class="[type,size]">        a<slot></slot>b    </div></template><script>const options = {    props: ["type", "size"]};export default options;</script></code></pre><ul><li>注意，省略了样式部分</li></ul><p>使用组件</p><pre class=" language-vue"><code class="language-vue"><template>    <div>        <h1><span id="父组件">父组件</span></h1>        <my-button type="primary" size="small">1</my-button>        <my-button type="danger" size="middle">2</my-button>        <my-button type="success" size="large">3</my-button>    </div></template><script>import MyButton from '../components/MyButton.vue'const options = {    components: {        MyButton    }};export default options;</script></code></pre><h2><span id="2-vue-进阶">2. Vue 进阶</span></h2><h3><span id="1-elementui">1) ElementUI</span></h3><p>安装</p><pre class=" language-cmd"><code class="language-cmd">npm install element-ui -S</code></pre><p>引入组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Element <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Element<span class="token punctuation">)</span></code></pre><p>测试，在自己的组件中使用 ElementUI 的组件</p><pre class=" language-vue"><code class="language-vue"><el-button>按钮</el-button></code></pre><h4><span id="表格组件">表格组件</span></h4><pre class=" language-vue"><code class="language-vue"><template>    <div>        <el-table :data="students">            <el-table-column label="编号" prop="id"></el-table-column>            <el-table-column label="姓名" prop="name"></el-table-column>            <el-table-column label="性别" prop="sex"></el-table-column>            <el-table-column label="年龄" prop="age"></el-table-column>        </el-table>    </div></template><script>import axios from '../util/myaxios'const options = {    async mounted() {        const resp = await axios.get('/api/students');        this.students = resp.data.data    },    data() {        return {            students: []        }    }}export default options;</script></code></pre><h4><span id="分页组件">分页组件</span></h4><pre class=" language-vue"><code class="language-vue"><template>    <div>        <el-table v-bind:data="students">            <el-table-column label="编号" prop="id"></el-table-column>            <el-table-column label="姓名" prop="name"></el-table-column>            <el-table-column label="性别" prop="sex"></el-table-column>            <el-table-column label="年龄" prop="age"></el-table-column>        </el-table>        <el-pagination :total="total" :page-size="queryDto.size" :current-page="queryDto.page" layout="prev,pager,next,sizes,->,total" :page-sizes="[5,10,15,20]" @current-change="currentChange" @size-change="sizeChange"></el-pagination>    </div></template><script>import axios from '../util/myaxios'const options = {    mounted() {        this.query();    },    methods: {        currentChange(page) {            this.queryDto.page = page;            this.query();        },        sizeChange(size){            this.queryDto.size = size;            this.query();        },        async query() {            const resp = await axios.get('/api/students/q', {                params: this.queryDto            });            this.students = resp.data.data.list;            this.total = resp.data.data.total;        }    },    data() {        return {            students: [],            total: 0,            queryDto: {                page: 1,                size: 5            }        }    }}export default options;</script></code></pre><ul><li>三种情况都应该触发查询<ul><li>mounted 组件挂载完成后</li><li>页号变化时</li><li>页大小变化时</li></ul></li><li>查询传参应该根据后台需求，灵活采用不同方式<ul><li>本例中因为是 get 请求，无法采用请求体，只能用 params 方式传参</li></ul></li><li>返回响应的格式也许会很复杂，需要掌握【根据返回的响应结构，获取数据】的能力</li></ul><h4><span id="分页搜索">分页搜索</span></h4><pre class=" language-vue"><code class="language-vue"><template>    <div>        <el-input placeholder="请输入姓名" size="mini" v-model="queryDto.name"></el-input>        <el-select placeholder="请选择性别" size="mini" v-model="queryDto.sex" clearable>            <el-option value="男"></el-option>            <el-option value="女"></el-option>        </el-select>        <el-select placeholder="请选择年龄" size="mini" v-model="queryDto.age" clearable>            <el-option value="0,20" label="0到20岁"></el-option>            <el-option value="21,30" label="21到30岁"></el-option>            <el-option value="31,40" label="31到40岁"></el-option>            <el-option value="41,120" label="41到120岁"></el-option>        </el-select>        <el-button type="primary" size="mini" @click="search()">搜索</el-button>        <el-divider></el-divider>        <el-table v-bind:data="students">            <el-table-column label="编号" prop="id"></el-table-column>            <el-table-column label="姓名" prop="name"></el-table-column>            <el-table-column label="性别" prop="sex"></el-table-column>            <el-table-column label="年龄" prop="age"></el-table-column>        </el-table>        <el-pagination :total="total" :page-size="queryDto.size" :current-page="queryDto.page" layout="prev,pager,next,sizes,->,total" :page-sizes="[5, 10, 15, 20]" @current-change="currentChange" @size-change="sizeChange"></el-pagination>    </div></template><script>import axios from '../util/myaxios'const options = {    mounted() {        this.query();    },    methods: {        currentChange(page) {            this.queryDto.page = page;            this.query();        },        sizeChange(size) {            this.queryDto.size = size;            this.query();        },        async query() {            const resp = await axios.get('/api/students/q', {                params: this.queryDto            });            this.students = resp.data.data.list;            this.total = resp.data.data.total;        },        search() {            this.query();        }    },    data() {        return {            students: [],            total: 0,            queryDto: {                name: '',                sex: '',                age: '',                  page: 1,                size: 5            }        }    }}export default options;</script></code></pre><ul><li>sex 与  age 均用 <code>&#39;&#39;</code> 表示用户没有选择的情况</li><li>age 取值 <code>0,20</code> 会被 spring 转换为 <code>new int[]&#123;0, 20&#125;</code></li><li>age 取值 <code>&#39;&#39;</code> 会被 spring 转换为 <code>new int[0]</code></li></ul><h4><span id="级联选择">级联选择</span></h4><p>级联选择器中选项的数据结构为</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span><span class="token string">'主页'</span><span class="token punctuation">,</span>children<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">101</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span><span class="token string">'菜单1'</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">105</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span><span class="token string">'子项1'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">106</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span><span class="token string">'子项2'</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">102</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span><span class="token string">'菜单2'</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">107</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span><span class="token string">'子项3'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">108</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span><span class="token string">'子项4'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">109</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span><span class="token string">'子项5'</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">103</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span><span class="token string">'菜单3'</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">110</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span><span class="token string">'子项6'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">111</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span><span class="token string">'子项7'</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">104</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span><span class="token string">'菜单4'</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>下面的例子是将后端返回的一维数组【树化】</p><pre class=" language-vue"><code class="language-vue"><template>    <el-cascader :options="ops"></el-cascader></template><script>import axios from '../util/myaxios'const options = {    async mounted() {        const resp = await axios.get('/api/menu')        console.log(resp.data.data)        const array = resp.data.data;        const map = new Map();         // 1. 将所有数据存入 map 集合(为了接下来查找效率)        for(const {id,name,pid} of array) {            map.set(id, {value:id, label:name, pid:pid})        }        // 2. 建立父子关系        // 3. 找到顶层对象        const top = [];        for(const obj of map.values()) {            const parent = map.get(obj.pid);            if(parent !== undefined) {                parent.children ??= [];                parent.children.push(obj);            } else {                top.push(obj)            }        }        this.ops = top;    },    data(){        return {            ops: []        }    }};export default options;</script></code></pre><h3><span id="2-vue-router">2) Vue-Router</span></h3><p>vue 属于单页面应用，所谓的路由，就是根据浏览器路径不同，用不同的<strong>视图组件</strong>替换这个页面内容展示</p><h4><span id="配置路由">配置路由</span></h4><p>新建一个路由 js 文件，例如 src/router/example14.js，内容如下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> ContainerView <span class="token keyword">from</span> <span class="token string">'@/views/example14/ContainerView.vue'</span><span class="token keyword">import</span> LoginView <span class="token keyword">from</span> <span class="token string">'@/views/example14/LoginView.vue'</span><span class="token keyword">import</span> NotFoundView <span class="token keyword">from</span> <span class="token string">'@/views/example14/NotFoundView.vue'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> ContainerView  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/login'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> LoginView  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/404'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> NotFoundView  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre><ul><li>最重要的就是建立了【路径】与【视图组件】之间的映射关系</li><li>本例中映射了 3 个路径与对应的视图组件</li></ul><p>在 main.js 中采用我们的路由 js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> e14 <span class="token keyword">from</span> <span class="token string">'./views/Example14View.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router/example14'</span>  <span class="token comment" spellcheck="true">// 修改这里</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token keyword">import</span> Element <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Element<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>e14<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><p>根组件是 Example14View.vue，内容为：</p><pre class=" language-vue"><code class="language-vue"><template>    <div class="all">        <router-view></router-view>    </div></template></code></pre><ul><li>样式略</li><li>其中 <code>&lt;router-view&gt;</code> 起到占位作用，改变路径后，这个路径对应的视图组件就会占据 <code>&lt;router-view&gt;</code> 的位置，替换掉它之前的内容</li></ul><h4><span id="动态导入">动态导入</span></h4><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/example14/ContainerView.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/login'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/example14/LoginView.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/404'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/example14/NotFoundView.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre><ul><li>静态导入是将所有组件的 js 代码打包到一起，如果组件非常多，打包后的 js 文件会很大，影响页面加载速度</li><li>动态导入是将组件的 js 代码放入独立的文件，用到时才加载</li></ul><h4><span id="嵌套路由">嵌套路由</span></h4><p>组件内再要切换内容，就需要用到嵌套路由（子路由），下面的例子是在【ContainerView 组件】内定义了 3 个子路由</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/example14/ContainerView.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> <span class="token string">'/c/p1'</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>         path<span class="token punctuation">:</span><span class="token string">'c/p1'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/example14/container/P1View.vue'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>         path<span class="token punctuation">:</span><span class="token string">'c/p2'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/example14/container/P2View.vue'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>         path<span class="token punctuation">:</span><span class="token string">'c/p3'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/example14/container/P3View.vue'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/login'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/example14/LoginView.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/404'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/example14/NotFoundView.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'*'</span><span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> <span class="token string">'/404'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>子路由变化，切换的是【ContainerView 组件】中 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 部分的内容</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><ul><li>redirect 可以用来重定向（跳转）到一个新的地址</li><li>path 的取值为 * 表示匹配不到其它 path 时，就会匹配它</li></ul><h4><span id="elementui-布局">ElementUI 布局</span></h4><p>通常主页要做布局，下面的代码是 ElementUI 提供的【上-【左-右】】布局</p><pre class=" language-vue"><code class="language-vue"><template>    <div class="container">        <el-container>            <el-header></el-header>            <el-container>                <el-aside width="200px"></el-aside>                <el-main>                    <router-view></router-view>                </el-main>            </el-container>        </el-container>    </div></template></code></pre><h4><span id="路由跳转">路由跳转</span></h4><h5><span id="标签式">标签式</span></h5><pre class=" language-vue"><code class="language-vue"><el-aside width="200px">    <router-link to="/c1/p1">P1</router-link>    <router-link to="/c1/p2">P2</router-link>    <router-link to="/c1/p3">P3</router-link></el-aside></code></pre><h5><span id="编程式">编程式</span></h5><pre class=" language-vue"><code class="language-vue"><el-header>    <el-button type="primary" icon="el-icon-edit" circle size="mini" @click="jump('/c1/p1')"></el-button>    <el-button type="success" icon="el-icon-check" circle size="mini" @click="jump('/c1/p2')"></el-button>    <el-button type="warning" icon="el-icon-star-off" circle size="mini" @click="jump('/c1/p3')"></el-button></el-header></code></pre><p>jump 方法</p><pre class=" language-vue"><code class="language-vue"><script>const options = {    methods : {        jump(url) {            this.$router.push(url);        }    }}export default options;</script></code></pre><ul><li>其中 this.$router 是拿到路由对象</li><li>push 方法根据 url 进行跳转</li></ul><h5><span id="导航菜单">导航菜单</span></h5><pre class=" language-vue"><code class="language-vue"><el-menu router background-color="#545c64" text-color="#fff" active-text-color="#ffd04b">    <el-submenu index="/c1">        <span slot="title">            <i class="el-icon-platform-eleme"></i>            菜单1        </span>        <el-menu-item index="/c1/p1">子项1</el-menu-item>        <el-menu-item index="/c1/p2">子项2</el-menu-item>        <el-menu-item index="/c1/p3">子项3</el-menu-item>    </el-submenu>    <el-menu-item index="/c2">        <span slot="title">            <i class="el-icon-phone"></i>            菜单2        </span>    </el-menu-item>    <el-menu-item index="/c3">        <span slot="title">            <i class="el-icon-star-on"></i>            菜单3        </span>    </el-menu-item></el-menu></code></pre><ul><li>图标和菜单项文字建议用 <code>&lt;span slot=&#39;title&#39;&gt;&lt;/span&gt;</code> 包裹起来</li><li><code>el-menu</code> 标签上加上 <code>router</code> 属性，表示结合导航菜单与路由对象，此时，就可以利用菜单项的 <code>index</code> 属性来路由跳转</li></ul><h4><span id="动态路由与菜单">动态路由与菜单</span></h4><p>将菜单、路由信息（仅主页的）存入数据库中</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> menu<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> path<span class="token punctuation">,</span> component<span class="token punctuation">,</span> icon<span class="token punctuation">)</span> <span class="token keyword">values</span>    <span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">'菜单1'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token string">'/m1'</span><span class="token punctuation">,</span>    <span class="token boolean">null</span><span class="token punctuation">,</span>         <span class="token string">'el-icon-platform-eleme'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">'菜单2'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token string">'/m2'</span><span class="token punctuation">,</span>    <span class="token boolean">null</span><span class="token punctuation">,</span>         <span class="token string">'el-icon-delete-solid'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">'菜单3'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token string">'/m3'</span><span class="token punctuation">,</span>    <span class="token boolean">null</span><span class="token punctuation">,</span>         <span class="token string">'el-icon-s-tools'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">'菜单4'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token string">'/m4'</span><span class="token punctuation">,</span>    <span class="token string">'M4View.vue'</span><span class="token punctuation">,</span> <span class="token string">'el-icon-user-solid'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token string">'子项1'</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">'/m1/c1'</span><span class="token punctuation">,</span> <span class="token string">'C1View.vue'</span><span class="token punctuation">,</span> <span class="token string">'el-icon-s-goods'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">106</span><span class="token punctuation">,</span> <span class="token string">'子项2'</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">'/m1/c2'</span><span class="token punctuation">,</span> <span class="token string">'C2View.vue'</span><span class="token punctuation">,</span> <span class="token string">'el-icon-menu'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">107</span><span class="token punctuation">,</span> <span class="token string">'子项3'</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">'/m2/c3'</span><span class="token punctuation">,</span> <span class="token string">'C3View.vue'</span><span class="token punctuation">,</span> <span class="token string">'el-icon-s-marketing'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">,</span> <span class="token string">'子项4'</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">'/m2/c4'</span><span class="token punctuation">,</span> <span class="token string">'C4View.vue'</span><span class="token punctuation">,</span> <span class="token string">'el-icon-s-platform'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">109</span><span class="token punctuation">,</span> <span class="token string">'子项5'</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">'/m2/c5'</span><span class="token punctuation">,</span> <span class="token string">'C5View.vue'</span><span class="token punctuation">,</span> <span class="token string">'el-icon-picture'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token string">'子项6'</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">'/m3/c6'</span><span class="token punctuation">,</span> <span class="token string">'C6View.vue'</span><span class="token punctuation">,</span> <span class="token string">'el-icon-upload'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token string">'子项7'</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">'/m3/c7'</span><span class="token punctuation">,</span> <span class="token string">'C7View.vue'</span><span class="token punctuation">,</span> <span class="token string">'el-icon-s-promotion'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不同的用户查询的的菜单、路由信息是不一样的</p><p>例如：访问 <code>/api/menu/admin</code> 返回所有的数据</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">102</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"菜单2"</span><span class="token punctuation">,</span>        <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"el-icon-delete-solid"</span><span class="token punctuation">,</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/m2"</span><span class="token punctuation">,</span>        <span class="token property">"pid"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"component"</span><span class="token operator">:</span> <span class="token null">null</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">107</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"子项3"</span><span class="token punctuation">,</span>        <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"el-icon-s-marketing"</span><span class="token punctuation">,</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/m2/c3"</span><span class="token punctuation">,</span>        <span class="token property">"pid"</span><span class="token operator">:</span> <span class="token number">102</span><span class="token punctuation">,</span>        <span class="token property">"component"</span><span class="token operator">:</span> <span class="token string">"C3View.vue"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">108</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"子项4"</span><span class="token punctuation">,</span>        <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"el-icon-s-platform"</span><span class="token punctuation">,</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/m2/c4"</span><span class="token punctuation">,</span>        <span class="token property">"pid"</span><span class="token operator">:</span> <span class="token number">102</span><span class="token punctuation">,</span>        <span class="token property">"component"</span><span class="token operator">:</span> <span class="token string">"C4View.vue"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">109</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"子项5"</span><span class="token punctuation">,</span>        <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"el-icon-picture"</span><span class="token punctuation">,</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/m2/c5"</span><span class="token punctuation">,</span>        <span class="token property">"pid"</span><span class="token operator">:</span> <span class="token number">102</span><span class="token punctuation">,</span>        <span class="token property">"component"</span><span class="token operator">:</span> <span class="token string">"C5View.vue"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>访问 <code>/api/menu/wang</code> 返回</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">103</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"菜单3"</span><span class="token punctuation">,</span>        <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"el-icon-s-tools"</span><span class="token punctuation">,</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/m3"</span><span class="token punctuation">,</span>        <span class="token property">"pid"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"component"</span><span class="token operator">:</span> <span class="token null">null</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">110</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"子项6"</span><span class="token punctuation">,</span>        <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"el-icon-upload"</span><span class="token punctuation">,</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/m3/c6"</span><span class="token punctuation">,</span>        <span class="token property">"pid"</span><span class="token operator">:</span> <span class="token number">103</span><span class="token punctuation">,</span>        <span class="token property">"component"</span><span class="token operator">:</span> <span class="token string">"C6View.vue"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"子项7"</span><span class="token punctuation">,</span>        <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"el-icon-s-promotion"</span><span class="token punctuation">,</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/m3/c7"</span><span class="token punctuation">,</span>        <span class="token property">"pid"</span><span class="token operator">:</span> <span class="token number">103</span><span class="token punctuation">,</span>        <span class="token property">"component"</span><span class="token operator">:</span> <span class="token string">"C7View.vue"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>前端根据他们身份不同，动态添加路由和显示菜单</p><h5><span id="动态路由">动态路由</span></h5><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">addServerRoutes</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> path<span class="token punctuation">,</span> component <span class="token punctuation">}</span> <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 动态添加路由</span>      <span class="token comment" spellcheck="true">// 参数1：父路由名称</span>      <span class="token comment" spellcheck="true">// 参数2：路由信息对象</span>      router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">,</span>        name<span class="token punctuation">:</span> id<span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`@/views/example15/container/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>component<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>js 这边只保留几个固定路由，如主页、404 和 login</li><li>以上方法执行时，将服务器返回的路由信息加入到名为 c 的父路由中去</li><li>这里要注意组件路径，前面 @/views 是必须在 js 这边完成拼接的，否则 import 函数会失效</li></ul><h5><span id="重置路由">重置路由</span></h5><p>在用户注销时应当重置路由</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">resetRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  router<span class="token punctuation">.</span>matcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> routes <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matcher<span class="token punctuation">}</span></code></pre><h5><span id="页面刷新">页面刷新</span></h5><p>页面刷新后，会导致动态添加的路由失效，解决方法是将路由数据存入 sessionStorage</p><pre class=" language-vue"><code class="language-vue"><script>import axios from '@/util/myaxios'import {resetRouter, addServerRoutes} from '@/router/example15'const options = {    data() {        return {            username: 'admin'        }    },    methods: {        async login() {                   resetRouter(); // 重置路由                 const resp = await axios.get(`/api/menu/${this.username}`)            const array = resp.data.data;            // localStorage     即使浏览器关闭，存储的数据仍在            // sessionStorage   以标签页为单位，关闭标签页时，数据被清除            sessionStorage.setItem('serverRoutes', JSON.stringify(array))            addServerRoutes(array); // 动态添加路由            this.$router.push('/');        }    }}export default options;</script></code></pre><p>页面刷新，重新创建路由对象时，从 sessionStorage 里恢复路由数据</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 从 sessionStorage 中恢复路由数据</span><span class="token keyword">const</span> serverRoutes <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'serverRoutes'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>serverRoutes<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> array <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>serverRoutes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">addServerRoutes</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 动态添加路由</span><span class="token punctuation">}</span></code></pre><h5><span id="动态菜单">动态菜单</span></h5><p>代码部分</p><pre class=" language-vue"><code class="language-vue"><script>const options = {    mounted() {        const serverRoutes = sessionStorage.getItem('serverRoutes');        const array = JSON.parse(serverRoutes);        const map = new Map();        for(const obj of array) {            map.set(obj.id, obj);        }        const top = [];        for(const obj of array) {            const parent = map.get(obj.pid);            if(parent) {                parent.children ??= [];                parent.children.push(obj);            } else {                top.push(obj);            }        }        this.top = top;    },    data() {        return {            top: []        }    }}export default options;</script></code></pre><p>菜单部分</p><pre class=" language-vue"><code class="language-vue"><el-menu router background-color="#545c64" text-color="#fff" active-text-color="#ffd04b" :unique-opened="true">    <template v-for="m1 of top"><el-submenu v-if="m1.children" :key="m1.id" :index="m1.path">    <span slot="title">        <i :class="m1.icon"></i> {{m1.name}}        </span>    <el-menu-item v-for="m2 of m1.children" :key="m2.id" :index="m2.path">        <span slot="title">            <i :class="m2.icon"></i> {{m2.name}}        </span>        </el-menu-item>        </el-submenu><el-menu-item v-else :key="m1.id" :index="m1.path">    <span slot="title">        <i :class="m1.icon"></i> {{m1.name}}        </span>        </el-menu-item>    </template></el-menu></code></pre><ul><li>没有考虑递归菜单问题，认为菜单只有两级</li></ul><h3><span id="3-vuex">3) Vuex</span></h3><h4><span id="入门">入门</span></h4><p>vuex 可以在多个组件之间共享数据，并且共享的数据是【响应式】的，即数据的变更能及时渲染到模板</p><ul><li>与之对比 localStorage 与 sessionStorage 也能共享数据，但缺点是数据并非【响应式】</li></ul><p>首先需要定义 state 与 mutations 他们一个用来读取共享数据，一个用来修改共享数据</p><p>src/store/index.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*  读取数据，走 state, getters  修改数据，走 mutations, actions*/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">updateName</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>修改共享数据</p><pre class=" language-vue"><code class="language-vue"><template>    <div class="p">        <el-input placeholder="请修改用户姓名" size="mini" v-model="name"></el-input>        <el-button type="primary" size="mini" @click="update()">修改</el-button>    </div></template><script>const options = {    methods: {        update(){            this.$store.commit('updateName', this.name);        }    },    data () {        return {            name:''        }    }}export default options;</script></code></pre><ul><li>mutations 方法不能直接调用，只能通过 <code>store.commit(mutation方法名, 参数)</code> 来间接调用</li></ul><p>读取共享数据</p><pre class=" language-vue"><code class="language-vue"><template>    <div class="container">        <el-container>            <el-header>                <div class="t">                    欢迎您：{{ $store.state.name }}, {{ $store.state.age }}                </div>            </el-header>            <el-container>                <el-aside width="200px">                </el-aside>                <el-main>                    <router-view></router-view>                </el-main>            </el-container>        </el-container>    </div></template></code></pre><h4><span id="mapstate">mapState</span></h4><p>每次去写 <code>$store.state.name</code> 这样的代码显得非常繁琐，可以用 vuex 帮我们生成计算属性</p><pre class=" language-vue"><code class="language-vue"><template>    <div class="container">        <el-container>            <el-header>                <div class="t">欢迎您：{{ name }}, {{ age }}</div>            </el-header>            <el-container>                <el-aside width="200px">                </el-aside>                <el-main>                    <router-view></router-view>                </el-main>            </el-container>        </el-container>    </div></template><script>import { mapState } from 'vuex'const options = {    computed: {        ...mapState(['name', 'age'])    }}export default options;</script></code></pre><ul><li>mapState 返回的是一个对象，对象内包含了 name() 和 age() 的这两个方法作为计算属性</li><li>此对象配合 <code>...</code> 展开运算符，填充入 computed 即可使用</li></ul><h4><span id="mapmutations">mapMutations</span></h4><pre class=" language-vue"><code class="language-vue"><template>    <div class="p">        <el-input placeholder="请修改用户姓名" size="mini" v-model="name"></el-input>        <el-button type="primary" size="mini" @click="updateName(name)">修改</el-button>    </div></template><script>import {mapMutations} from 'vuex'const options = {    methods: {        ...mapMutations(['updateName'])    },    data () {        return {            name:''        }    }}export default options;</script></code></pre><ul><li>类似的，调用 mutation 修改共享数据也可以简化</li><li>mapMutations 返回的对象中包含的方法，就会调用 store.commit() 来执行 mutation 方法</li><li>注意参数传递略有不同</li></ul><h4><span id="actions">actions</span></h4><p>mutations 方法内不能包括修改不能立刻生效的代码，否则会造成 Vuex 调试工具工作不准确，必须把这些代码写在 actions 方法中</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*  读取数据，走 state, getters  修改数据，走 mutations, actions*/</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'@/util/myaxios'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">updateName</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 错误的用法，如果在mutations方法中包含了异步操作，会造成开发工具不准确</span>    <span class="token comment" spellcheck="true">/* async updateServerName(state) {      const resp = await axios.get('/api/user');      const {name, age} = resp.data.data;      state.name = name;      state.age = age;    } */</span>    <span class="token function">updateServerName</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span>      state<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      state<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">async</span> <span class="token function">updateServerName</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'updateServerName'</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>首先应当调用 actions 的 updateServerName 获取数据</li><li>然后再由它间接调用 mutations 的 updateServerName 更新共享数据</li></ul><p>页面使用 actions 的方法可以这么写</p><pre class=" language-vue"><code class="language-vue"><template>    <div class="p">        <el-button type="primary" size="mini" @click="updateServerName()">从服务器获取数据,存入store</el-button>    </div></template><script>import { mapActions } from 'vuex'const options = {    methods: {        ...mapActions(['updateServerName'])    }}export default options;</script></code></pre><ul><li><p>mapActions 会生成调用 actions 中方法的代码</p></li><li><p>调用 actions 的代码内部等价于，它返回的是 Promise 对象，可以用同步或异步方式接收结果</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'action名称'</span><span class="token punctuation">,</span> 参数<span class="token punctuation">)</span></code></pre></li></ul><h2><span id="3-vue-实战">3. Vue 实战</span></h2><p>课程不准备从头开发一个 Vue 项目，这里我准备采用这样的教学方法：带着大家看一个较为典型的基于 Vue 的项目实现，分析其中几个重点流程</p><p>这里选择了 vue-element-admin 这个项目骨架，它采用的技术与我们之前学过的较为契合</p><ul><li>vue 2</li><li>element-ui 2</li><li>vue-router 3</li><li>vuex 3</li><li>axios</li></ul><h3><span id="安装">安装</span></h3><pre class=" language-cmd"><code class="language-cmd">git clone https://gitee.com/panjiachen/vue-element-admin.git client-actioncd client-actiongit branch -agit checkout -b i18n remotes/origin/i18ngit config --global url."https://".insteadOf git://npm installnpm run dev</code></pre><ul><li>需要切换分支到 i18n，否则不支持国际化（中文）功能</li><li>npm install 要多试几次，因为中间会连接 gitbub 下载一些依赖，网络不稳定会导致失败</li><li>npm run dev 运行后回自动打开浏览器，使用的端口是 9527</li></ul><h3><span id="后端路径">后端路径</span></h3><p>开发环境下执行下面命令</p><pre><code>npm run dev</code></pre><ul><li>会同时启动 mock-server</li></ul><p>在开发环境下，后端访问路径起始路径配置在文件 <code>.env.development</code> 中</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">VUE_APP_BASE_API</span> <span class="token punctuation">=</span> <span class="token attr-value">'/dev-api'</span></code></pre><ul><li>默认向后台的请求都发给 <code>http://localhost:9527/dev-api</code> 的 mock-server 获得的都是模拟数据</li><li>需要跟真实后台联调时，可以改动以上地址为 <code>VUE_APP_BASE_API = &#39;http://localhost:8080/api&#39;</code></li></ul><p>发送请求的 axios 工具被封装在 src/utils/request.js 中</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> MessageBox<span class="token punctuation">,</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'@/store'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> getToken <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/utils/auth'</span><span class="token comment" spellcheck="true">// create an axios instance</span><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VUE_APP_BASE_API<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// url = base url + request url</span>  <span class="token comment" spellcheck="true">// withCredentials: true, // send cookies when cross-domain requests</span>  timeout<span class="token punctuation">:</span> <span class="token number">5000</span> <span class="token comment" spellcheck="true">// request timeout</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ...</span></code></pre><p>原有代码的 URI 路径都是这样的：</p><pre><code>/vue-element-admin/user/login/vue-element-admin/user/info/vue-element-admin/user/logout...</code></pre><p>如果觉得不爽，可以来一个全局替换</p><pre><code>/user/login/user/info/user/logout...</code></pre><p>token 的请求头修改一下，在 src/utils/request.js 中</p><pre class=" language-js"><code class="language-js"><span class="token operator">...</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do something before request is sent</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// let each request carry token</span>      <span class="token comment" spellcheck="true">// ['X-Token'] is a custom headers key</span>      <span class="token comment" spellcheck="true">// please modify it according to the actual situation</span>      config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Authorization'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> config  <span class="token punctuation">}</span><span class="token punctuation">,</span>  error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do something with request error</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// for debug</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre><h3><span id="登录流程">登录流程</span></h3><h4><span id="1-srcviewsloginindexvue">1. <code>src/views/login/index.vue</code></span></h4><pre class=" language-vue"><code class="language-vue"><script>import { validUsername } from '@/utils/validate'import LangSelect from '@/components/LangSelect'import SocialSign from './components/SocialSignin'export default {  // ...  methods: {        handleLogin() {      this.$refs.loginForm.validate(valid => {        if (valid) {          this.loading = true          this.$store.dispatch('user/login', this.loginForm)            .then(() => {              this.$router.push({ path: this.redirect || '/', query: this.otherQuery })              this.loading = false            })            .catch(() => {              this.loading = false            })        } else {          console.log('error submit!!')          return false        }      })    }    // ...  }}</script></code></pre><p>这里调用了 store 的 actions，<code>user/login</code></p><ul><li>因为是异步调用，因此只能用 actions</li><li>登录成功会优先跳转至 this.redirect 路径、否则跳转至 /</li><li>/ 查看 <code>src/router/index.js</code> 的路由表可知，会重定向至 /dashboard</li></ul><h4><span id="2-srcstoremodulesuserjs">2. <code>src/store/modules/user.js</code></span></h4><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> login<span class="token punctuation">,</span> logout<span class="token punctuation">,</span> getInfo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/api/user'</span><span class="token comment" spellcheck="true">// ...</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// user login</span>  <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> userInfo    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">{</span> username<span class="token punctuation">:</span> username<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> password <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> response        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'SET_TOKEN'</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>token<span class="token punctuation">)</span>        <span class="token function">setToken</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>token<span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><ul><li>发请求用了 <code>src/api/user.js</code>，请求成功使用 commit 将 token 存入 mutations，同时往 cookie 存储了一份</li><li>这里的 response 其实是真正的 response.data，见后面的说明</li><li>评价<ul><li>向 cookie 或 sessionStorage 存储 token 即可，token 无需做成响应式，不必放入 store</li><li>作者使用了 Promise API，其实可以改变为 await 方式，提高可读性</li></ul></li></ul><h4><span id="3-srcapiuserjs">3. <code>src/api/user.js</code></span></h4><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/user/login'</span><span class="token punctuation">,</span>    method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    data  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ...</span></code></pre><ul><li>其中 request 相当于我们之前封装的 myaxios</li></ul><h4><span id="4-srcutilsrequestjs">4. <code>src/utils/request.js</code></span></h4><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> MessageBox<span class="token punctuation">,</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'@/store'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> getToken <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/utils/auth'</span><span class="token comment" spellcheck="true">// create an axios instance</span><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VUE_APP_BASE_API<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// url = base url + request url</span>  <span class="token comment" spellcheck="true">// withCredentials: true, // send cookies when cross-domain requests</span>  timeout<span class="token punctuation">:</span> <span class="token number">5000</span> <span class="token comment" spellcheck="true">// request timeout</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ... </span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// ...</span>  response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> response<span class="token punctuation">.</span>data    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">20000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> res    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> service</code></pre><ul><li>其中响应拦截器发现响应正确，返回 resp.data 这样，其它处代码解构时少了一层 data</li></ul><h4><span id="5-srcpermissionjs">5. <code>src/permission.js</code></span></h4><p>登录成功后，只是获得了 token，还未获取用户信息，获取用户信息是在路由跳转的 beforeEach 里做的</p><pre class=" language-mermaid"><code class="language-mermaid">sequenceDiagram participant c as 登录页participant r as Routerparticipant s as Storeparticipant t as Tomcatrect rgba(255,0,0,0.2)c ->> +s: login(username,password)s ->> +t: login(username,password)t -->> -s: tokens ->> s: 存储 tokens -->> -c: endrect rgba(0,255,0,0.2)c ->> +r: 跳转至 /r ->> +s: beforeEach getInfo(token)s ->> +t: getInfo(token)t -->> -s: name,avatar,roles等s ->> s: 存储用户信息s -->> -r: r ->> r: 根据roles动态生成路由r -->> -c: end</code></pre><p>关键代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token comment" spellcheck="true">// ...</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">const</span> hasToken <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> roles <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'user/getInfo'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>登录后跳转至 / 之前进入这里的 beforeEach 方法，方法内主要做两件事<ul><li>一是调用 actions 方法获取用户角色，见 6</li><li>二是根据用户角色，动态生成路由，见 7</li></ul></li></ul><h4><span id="6-srcstoremodulesuserjs">6. <code>src/store/modules/user.js</code></span></h4><p>这里用其中 getInfo 方法获取用户信息，其中角色返回给 beforeEach </p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> login<span class="token punctuation">,</span> logout<span class="token punctuation">,</span> getInfo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/api/user'</span><span class="token comment" spellcheck="true">// ...</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit<span class="token punctuation">,</span> state <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">getInfo</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> response        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'Verification failed, please Login again.'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> roles<span class="token punctuation">,</span> name<span class="token punctuation">,</span> avatar<span class="token punctuation">,</span> introduction <span class="token punctuation">}</span> <span class="token operator">=</span> data        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>roles <span class="token operator">||</span> roles<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'getInfo: roles must be a non-null array!'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'SET_ROLES'</span><span class="token punctuation">,</span> roles<span class="token punctuation">)</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'SET_NAME'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'SET_AVATAR'</span><span class="token punctuation">,</span> avatar<span class="token punctuation">)</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'SET_INTRODUCTION'</span><span class="token punctuation">,</span> introduction<span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4><span id="7-srcrouterindexjs">7. <code>src/router/index.js</code></span></h4><p>路由表中路由分成两部分，静态路由与动态路由</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> constantRoutes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/login/index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hidden<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Layout<span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> <span class="token string">'/dashboard'</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'dashboard'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/dashboard/index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">'Dashboard'</span><span class="token punctuation">,</span>        meta<span class="token punctuation">:</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'dashboard'</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">'dashboard'</span><span class="token punctuation">,</span> affix<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">]</span></code></pre><ul><li>其中 hidden: true 的路由只做路由跳转，不会在左侧导航菜单展示</li></ul><p>动态路由</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> asyncRoutes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/permission'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Layout<span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> <span class="token string">'/permission/page'</span><span class="token punctuation">,</span>    alwaysShow<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// will always show the root menu</span>    name<span class="token punctuation">:</span> <span class="token string">'Permission'</span><span class="token punctuation">,</span>    meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'permission'</span><span class="token punctuation">,</span>      icon<span class="token punctuation">:</span> <span class="token string">'lock'</span><span class="token punctuation">,</span>      roles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'editor'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// you can set roles in root nav</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'page'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/permission/page'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">'PagePermission'</span><span class="token punctuation">,</span>        meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>          title<span class="token punctuation">:</span> <span class="token string">'pagePermission'</span><span class="token punctuation">,</span>          roles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// or you can only set roles in sub nav</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'directive'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/permission/directive'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">'DirectivePermission'</span><span class="token punctuation">,</span>        meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>          title<span class="token punctuation">:</span> <span class="token string">'directivePermission'</span>          <span class="token comment" spellcheck="true">// if do not set roles, means: this page does not require permission</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'role'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/permission/role'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">'RolePermission'</span><span class="token punctuation">,</span>        meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>          title<span class="token punctuation">:</span> <span class="token string">'rolePermission'</span><span class="token punctuation">,</span>          roles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/icon'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Layout<span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/icons/index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">'Icons'</span><span class="token punctuation">,</span>        meta<span class="token punctuation">:</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'icons'</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">'icon'</span><span class="token punctuation">,</span> noCache<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> roles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><ul><li>动态路由中关联了角色信息，根据用户的角色决定那些路由可用，但这样做的缺点是把角色和路由绑定死了</li></ul><h4><span id="8-srclayoutindexvue">8. <code>src/layout/index.vue</code></span></h4><p>它对应的是我们之前介绍的 Container.vue 完成主页布局的，路由路径是 /</p><p><img src="/2022/11/22/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-vue2/BaiduNetdiskDownload\Java程序员要掌握的前端\文档\imgs\image-20220827194047788.png" alt="image-20220827194047788"></p><p>其中又由多部分组成，其中固定不变的是</p><ul><li>侧边栏</li><li>导航栏</li><li>标签栏</li><li>设置</li></ul><p>变化的是中间的 dashboard 部分（AppMain），它由 router-view 配合子路由切换显示</p><ul><li>进入 / 后，就会 redirect 重定向到 /dashboard 子路由</li><li>进入首页后，会有一个 <code>/api/transaction/list</code> 的后台请求报 404，作为练习，把它补充完整</li></ul><h3><span id="第三方登录">第三方登录</span></h3><pre class=" language-mermaid"><code class="language-mermaid">sequenceDiagramparticipant a7 as 前端(9527)participant a8 as 后端(8080)participant g as giteerect rgba(0,255,0,0.2) a7 ->> +g: 打开新窗口, 请求 /oauth/authorizeg ->> g: 认证通过endrect rgba(255,0,0,0.2)g ->> -a8: 重定向 redirect uriendrect rgba(0,255,0,0.2)a8 ->> +g: 请求 /oauth/tokeng ->> -a8: 返回 access_token(gitee)endrect rgba(0,255,0,0.2)a8 ->> +g: 请求 /api/v5/userg -->> -a8: enda8 ->> 8: 生成 token(8080)rect rgba(0,0,255,0.2)a8 ->> +a7: 新窗口将 token(8080) 发送给老窗口(9527)end</code></pre><ol><li><p>9527 打开新窗口，请求 <code>https://gitee.com/oauth/authorize?client_id=$&#123;client_id&#125;&amp;redirect_uri=$&#123;redirect_uri&#125;&amp;response_type=code</code></p></li><li><p>gitee 认证通过，重定向至 8080，并携带 code</p></li><li><p>8080 发送请求 <code>https://gitee.com/oauth/token</code> 携带 client_id、client_secret、code，gitee 返回 access_token 给 8080</p><ul><li><p>这时走的是 https 协议，并且不经过浏览器，能够保证数据传输的安全性</p></li><li><p>重定向到 8080 时，如果被有心人拿到了 code，也没事，因为接下来会把 client_secret 发给 gitee 验证（client_secret 应当只存在 8080），只要 client_secret 不泄露，就可以保证安全</p></li><li><p>如果改成前端拿 code 换 access_token，那就意味着 access_token 得保存在前端，所有保存在前端的都有风险</p></li></ul></li><li><p>8080 可以访问 gitee 的 api 了，拿到用户信息，存入数据库，返回 8080 的 token</p></li><li><p>8080 可以通过 window.opener.postMessage 把 token 给 9527 的老窗口</p><ul><li>这里又会涉及到跨域，不过 9527 与 8080 直接存在信任关系，设置一下就好</li></ul></li><li><p>9527 再走之前的逻辑就可以了，在 router 的 beforeEach 方法里，用 8080 token 换用户信息</p></li></ol><h3><span id="增删改查">增删改查</span></h3><p>首先，在 api 里添加与后端交互的代码：<code>src/api/student.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/students'</span><span class="token punctuation">,</span>    method<span class="token punctuation">:</span> <span class="token string">'get'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/students/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>    method<span class="token punctuation">:</span> <span class="token string">'delete'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> dto<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/students/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>    method<span class="token punctuation">:</span> <span class="token string">'put'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> dto  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/students`</span></span><span class="token punctuation">,</span>    method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> dto  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>然后，添加新的路由：<code>src/router/index.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> asyncRoutes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/student'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Layout<span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/student/index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        meta<span class="token punctuation">:</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'学生管理'</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">'el-icon-s-help'</span><span class="token punctuation">,</span> roles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">]</span></code></pre><ul><li>注意 title 这里没有考虑国际化</li></ul><p>最后，添加新的视图界面：<code>src/views/student/index.vue</code></p><pre class=" language-vue"><code class="language-vue"><template>  <div>    <el-table :data="students">      <el-table-column label="编号" prop="id"></el-table-column>      <el-table-column label="姓名" prop="name"></el-table-column>      <el-table-column label="性别" prop="sex"></el-table-column>      <el-table-column label="年龄" prop="age"></el-table-column>      <el-table-column fixed="right" label="操作" width="100">        <template slot-scope="scope">          <el-button @click="handleUpdate(scope.row)" type="text" size="small">修改</el-button>          <el-button @click="handleDelete(scope.row)" type="text" size="small">删除</el-button>        </template>      </el-table-column>    </el-table>    <el-dialog width="22%" :visible.sync="updateDialogVisible">      <el-form :model="updateForm">        <el-form-item label="编号">          <el-input size="mini" :readonly="true" v-model="updateForm.id"></el-input>        </el-form-item>        <el-form-item label="姓名">          <el-input size="mini" v-model="updateForm.name"></el-input>        </el-form-item>        <el-form-item label="性别">          <el-select size="mini" v-model="updateForm.sex">            <el-option value="男"></el-option>            <el-option value="女"></el-option>          </el-select>        </el-form-item>        <el-form-item label="年龄">          <el-input size="mini" v-model="updateForm.age"></el-input>        </el-form-item>        <el-form-item>          <el-button type="primary" size="mini" @click="confirmUpdate()">确定</el-button>        </el-form-item>      </el-form>    </el-dialog>  </div></template><script>import { all, deleteById, update, insert } from '@/api/student'const options = {  mounted() {    this.all()  },  data() {    return {      students: [],      updateDialogVisible: false,      updateForm: {        id: 0,        name: '',        sex: '男',        age: 0      }    }  },  methods: {    async confirmUpdate() {      await update(this.updateForm.id, this.updateForm)      this.updateDialogVisible = false      this.all()    },    handleUpdate(row) { // {id, name, sex, age}      this.updateDialogVisible = true      this.updateForm = { ...row }      // this.updateForm = row // 错误写法，不能让他俩指向同一个对象    },    async handleDelete(row) {      try {        await this.$confirm('此操作将永久删除该学生, 是否继续?', '提示', {          confirmButtonText: '确定',          cancelButtonText: '取消',          type: 'warning'        })        await deleteById(row.id)        this.all()      } catch (e) {        console.log('取消删除')      }    },    async all() {      const { data } = await all()      this.students = data    }  }}export default options</script><style scoped>.el-input,.el-select {  width: 180px;}</style></code></pre><ul><li>其中 handleUpdate 和 handleDelete 接收的参数，都是代表了当前行的学生对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java程序员要掌握的前端-HTML&amp;CSS</title>
      <link href="/2022/08/18/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-html-css/"/>
      <url>/2022/08/18/java-cheng-xu-yuan-yao-zhang-wo-de-qian-duan-html-css/</url>
      
        <content type="html"><![CDATA[<h1><span id="前言">前言</span></h1><p>Java 程序员一提起前端知识，心情那是五味杂陈，百感交集。</p><ul><li>说不学它吧，说不定进公司以后，就会被抓壮丁去时不时写点前端代码</li><li>说学它吧，HTML、CSS、JavaScript 哪个不得下大功夫才能精通？</li><li>学一点够不够用呢？如果只学基础的 JavaScript 是不够用的，前端都已经工程化了，Vue、React 这些框架你去看吧，光有点基础根本看不懂，甚至连前端页面路径在哪儿配置，如何跳转都不甚了解，所以得学，而且要学的还不少，请把前端当作 web 不可或缺的一部分来学习。</li><li>学习前端好处挺多，我听说过这么一句挺有道理的话：一个程序员至少应该掌握一门静态语言，如 Java，还应该掌握一门动态语言，如 JavaScript。而且，你不觉得学了前端，就如打通了程序员的任督二脉，可以独立接活了嘛</li></ul><p>这门课为什么不由前端老师来讲？</p><ul><li>前端老师不知道后端学员的痛点，他认为重要的咱不关心，他认为是常识一带而过的又恰恰是咱迷茫的地方，作为后端老师，我更懂后端学员</li><li>前端老师不懂后端知识，只能用前端思维来讲前端，如果授课老师懂 Java，能用一些现有知识对比讲解，能起到快速突破的效果</li><li>前端每个框架动辄需要数十个小时的学习，咱耗不起，我们更希望学到对我们最有用的那部分，其它的省省吧，总不能夺了前端程序员的饭碗</li></ul><p>课程安排</p><ul><li>整个课程分成五章<ul><li>HTML / CSS 这部分对咱们来说，不是重点，但又不能不讲，这俩知识作为第一章，必学</li><li>JavaScript 这部分是重点，尤其是 ES6 以后的一些新语法，不理解这些，前端代码你根本看不懂，必学</li><li>Vue2，Vue3，React 这三章是三选一的关系，根据你入职公司的使用的前端技术不同，有针对地学习<ul><li>后三章会涵盖 TypeScript、VueCli、Vuex、VueRouter、ElementUI、Vite、CreateReactApp、React、Redux、ReactRouter 等库和工具的使用</li></ul></li><li>jquery 经过调研，还有一些学员毕业后确实会用到，所以也作为一个可选章节进行学习</li></ul></li></ul><h1><span id="第一章-html-与-css">第一章. HTML 与 CSS</span></h1><p>HTML 是什么：即 HyperText Markup language 超文本标记语言，咱们熟知的网页就是用它编写的，HTML 的作用是定义网页的内容和结构。</p><ul><li>HyperText 是指用超链接的方式组织网页，把网页联系起来</li><li>Markup 是指用 <code>&lt;标签&gt;</code> 的方式赋予内容不同的功能和含义</li></ul><p>CSS 是什么：即 Cascading  Style  Sheets 级联（层叠）样式表，它描述了网页的表现与展示效果</p><h2><span id="1-html-元素">1. HTML 元素</span></h2><p>HTML 由一系列元素 <code>elements</code> 组成，例如</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello, world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><ul><li><p>整体称之为元素</p></li><li><p><code>&lt;p&gt;</code> 和 <code>&lt;/p&gt;</code> 分别称为起始和结束标签</p></li><li><p>标签包围起来的 Hello, world 称之为内容</p></li><li><p>p 是预先定义好的 html 标签，作用是将内容作为一个单独的段落</p></li></ul><p>元素还可以有属性，如</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello, world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><ul><li>属性一般是预先定义好的，这里的 id 属性是给元素一个唯一的标识</li></ul><p>元素之间可以嵌套，如</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>HTML 是一门非常<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>强大<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>的语言<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>错误嵌套写法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>HTML 是一门非常<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>强大的语言<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></code></pre><p>不包含内容的元素称之为空元素，如</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li>img 作用是用来展示图片</li><li>src 属性用来指明图片路径</li></ul><h2><span id="2-html-页面">2. HTML 页面</span></h2><p>前面介绍的只是单独的 HTML 元素，它们可以充当一份完整的 HTML 页面的组成部分</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>测试页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello, world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li><code>html</code> 元素囊括了页面中所有其它元素，整个页面只需一个，称为根元素</li><li><code>head</code> 元素包含的是那些不用于展现内容的元素，如 <code>title</code>，<code>link</code>，<code>meta</code> 等</li><li><code>body</code> 元素包含了对用户展现内容的元素，例如后面会学到的用于展示文本、图片、视频、音频的各种元素</li></ul><h2><span id="3-常见元素">3. 常见元素</span></h2><h3><span id="1-文本">1) 文本</span></h3><h4><span id="heading">Heading</span></h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>1号标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>2号标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>3号标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>4号标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>5号标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>6号标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span></code></pre><h4><span id="paragraph">Paragraph</span></h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h4><span id="list">List</span></h4><p>无序列表 unordered list</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>有序列表</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p>多级列表</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        北京市        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>海淀区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>朝阳区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>昌平区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        河北省        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>石家庄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>保定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><h4><span id="anchor">Anchor</span></h4><p>锚，超链接</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网页地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h3><span id="2-多媒体">2) 多媒体</span></h3><h4><span id="image">Image</span></h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>文件路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>src 格式有 3 种</p><ul><li><p>文件地址</p></li><li><p>data URL，格式如下</p><pre><code>data:媒体类型;base64,数据</code></pre></li><li><p>object URL，需要配合 javascript 使用</p></li></ul><h4><span id="video">Video</span></h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>文件路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre><h4><span id="audio">Audio</span></h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>文件路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span></code></pre><h3><span id="3-表单">3) 表单</span></h3><h4><span id="作用与语法">作用与语法</span></h4><p>表单的作用：<strong>收集</strong>用户填入的<strong>数据</strong>，并将这些数据<strong>提交给服务器</strong></p><p>表单的语法</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>服务器地址<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请求方式<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>数据格式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 表单项 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交按钮<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><ul><li>method 请求方式有 <ul><li>get （默认）提交时，数据跟在 URL 地址之后</li><li>post 提交时，数据在请求体内</li></ul></li><li>enctype 在 post 请求时，指定请求体的数据格式<ul><li>application/x-www-form-urlencoded（默认）</li><li>multipart/form-data</li></ul></li><li>其中表单项提供多种收集数据的方式<ul><li>有 name 属性的表单项数据，才会被发送给服务器</li></ul></li></ul><h4><span id="常见的表单项">常见的表单项</span></h4><p>文本框</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uesrname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>密码框</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>隐藏框</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>日期框</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>单选</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>多选</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fav<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>唱歌<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fav<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>逛街<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fav<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>游戏<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>文件上传</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2><span id="4-http-请求">4. HTTP 请求</span></h2><h3><span id="1-请求组成">1) 请求组成</span></h3><p>请求由三部分组成</p><ol><li>请求行</li><li>请求头</li><li>请求体</li></ol><p>可以用 telnet 程序测试</p><h3><span id="2-请求方式与数据格式">2) 请求方式与数据格式</span></h3><h4><span id="get-请求示例">get 请求示例</span></h4><pre><code>GET /test2?name=%E5%BC%A0&amp;age=20 HTTP/1.1Host: localhost</code></pre><ul><li>%E5%BC%A0 是【张】经过 URL 编码后的结果</li></ul><h4><span id="post-请求示例">post 请求示例</span></h4><pre><code>POST /test2 HTTP/1.1Host: localhostContent-Type: application/x-www-form-urlencodedContent-Length: 21name=%E5%BC%A0&amp;age=18</code></pre><p>application/x-www-form-urlencoed 格式细节：</p><ul><li>参数分成名字和值，中间用 = 分隔</li><li>多个参数使用 &amp; 进行分隔</li><li>【张】等特殊字符需要用 encodeURIComponent() 编码为 【%E5%BC%A0】后才能发送</li></ul><h4><span id="json-请求示例">json 请求示例</span></h4><pre><code>POST /test3 HTTP/1.1Host: localhostContent-Type: application/jsonContent-Length: 25&#123;&quot;name&quot;:&quot;zhang&quot;,&quot;age&quot;:18&#125;</code></pre><p>json 对象格式</p><pre><code>&#123;&quot;属性名&quot;:属性值&#125;</code></pre><p>其中属性值可以是</p><ul><li>字符串 “”</li><li>数字</li><li>true, false</li><li>null</li><li>对象</li><li>数组</li></ul><p>json 数组格式</p><pre><code>[元素1, 元素2, ...]</code></pre><h4><span id="multipart-请求示例">multipart 请求示例</span></h4><pre><code>POST /test2 HTTP/1.1Host: localhostContent-Type: multipart/form-data; boundary=123Content-Length: 125--123Content-Disposition: form-data; name=&quot;name&quot;lisi--123Content-Disposition: form-data; name=&quot;age&quot;30--123--</code></pre><ul><li>boundary=123 用来定义分隔符</li><li>起始分隔符是 <code>--分隔符</code></li><li>结束分隔符是 <code>--分隔符--</code></li></ul><h4><span id="数据格式小结">数据格式小结</span></h4><p>客户端发送</p><ul><li>编码 <ul><li>application/x-www-form-urlencoded ：url 编码</li><li>application/json：utf-8 编码</li><li>multipart/form-data：每部分编码可以不同</li></ul></li><li>表单只支持以 application/x-www-form-urlencoded 和 multipart/form-data 格式发送数据</li><li>文件上传需要用 multipart/form-data 格式</li><li>js 代码可以支持任意格式发送数据 </li></ul><p>服务端接收</p><ul><li>对 application/x-www-form-urlencoded 和 multipart/form-data 格式的数据，Spring 接收方式是统一的，只需要用 java bean 的属性名对应请求参数名即可</li><li>对于 applicaiton/json 格式的数据，Spring 接收需要使用 @RequestBody 注解 + java bean 的方式</li></ul><h3><span id="3-session-原理">3) session 原理</span></h3><p>Http 无状态，有会话</p><ul><li>无状态是指，请求之间相互独立，第一次请求的数据，第二次请求不能重用</li><li>有会话是指，客户端和服务端都有相应的技术，可以暂存数据，让数据在请求间共享</li></ul><p>服务端使用了 session 技术来暂存数据</p><p>存</p><pre><code>GET /s1?name=zhang HTTP/1.1Host: localhost</code></pre><p>取</p><pre><code>GET /s2 HTTP/1.1Host: localhostCookie: JSESSIONID=560FA845D02AE09B176E1BC5D9816A5D</code></pre><p>session 技术实现身份验证</p><pre class=" language-mermaid"><code class="language-mermaid">sequenceDiagramparticipant Clientparticipant L as LoginControllerparticipant i as LoginInterceptorparticipant Sessionrect rgb(200, 223, 255)Client ->> +L : 登录请求L ->> L : 检查用户名，密码，验证通过L ->> +Session : 存入用户名Session -->> -L: L -->> -Client: 登录成功endrect rgb(200, 190, 255)Client ->> +i : 其它请求i ->> +Session : 获取用户名Session -->> -i : i ->> i: 用户名存在，放行i -->> -Client : end</code></pre><h3><span id="4-jwt-原理">4) jwt 原理</span></h3><p>jwt 技术实现身份验证</p><pre class=" language-mermaid"><code class="language-mermaid">sequenceDiagramparticipant Clientparticipant L as LoginControllerparticipant i as LoginInterceptorrect rgb(200, 223, 255)Client ->> +L : 登录请求L ->> L : 检查用户名，密码，验证通过L -->> -Client : 登录成功，返回tokenendrect rgb(150, 190, 155)Client ->> +i : 其它请求，携带tokeni ->> i : 校验token，校验无误，放行i -->> -Client : end</code></pre><p>生成 token</p><pre><code>GET /j1?name=zhang&amp;pass=123 HTTP/1.1Host: localhost</code></pre><p>校验 token</p><pre><code>GET /j2 HTTP/1.1Host: localhostAuthorization: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9._1-P_TLlzQPb1_lCyGwplMZaKQ8Mcw_plBbYPZ3OX28</code></pre><h2><span id="5-css">5. CSS</span></h2><p>即 Cascading  Style  Sheets，它描述了网页的表现与展示效果</p><h3><span id="1-选择器">1) 选择器</span></h3><ul><li><p>type 选择器 - 根据标签名进行匹配（元素选择器）</p></li><li><p>class 选择器 - 根据元素的 class 属性进行匹配</p></li><li><p>id 选择器  - 根据元素的 id 属性进行匹配</p></li></ul><h3><span id="2-属性和值">2) 属性和值</span></h3><ul><li>background-color : red;</li><li>…</li><li>display</li></ul><h3><span id="3-布局">3) 布局</span></h3><p>与布局相关的 html 元素</p><ul><li>div</li><li>template</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长津湖经典语句</title>
      <link href="/2022/01/09/chang-jin-hu-jing-dian-yu-ju/"/>
      <url>/2022/01/09/chang-jin-hu-jing-dian-yu-ju/</url>
      
        <content type="html"><![CDATA[<p>一个蛋从外面被敲开，注定被吃掉。    你要是能从里面自己啄开，没准是只鹰。</p><p>让你的敌人瞧得起你，那才叫硬气</p><p>打得一拳开，免得百拳来。</p><p>不相信有完不成的任务，不相信有克服不了的困难，不相信有战胜不了的敌人。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《编写高质量代码 改善java程序的151个建议》读书笔记-下</title>
      <link href="/2021/12/25/bian-xie-gao-zhi-liang-dai-ma-gai-shan-java-cheng-xu-de-151-ge-jian-yi-du-shu-bi-ji-xia/"/>
      <url>/2021/12/25/bian-xie-gao-zhi-liang-dai-ma-gai-shan-java-cheng-xu-de-151-ge-jian-yi-du-shu-bi-ji-xia/</url>
      
        <content type="html"><![CDATA[<p>《编写高质量代码 改善java程序的151个建议》读书笔记-下</p><p>本篇博客记录《编写高质量代码 改善java程序的151个建议》这本书的读书笔记。方便自己查看，也方便大家查阅，在此感谢原书作者<a href="https://weread.qq.com/web/reader/3cc32750597de83cc5abc31ke4d32d5015e4da3b7fbb1fa">秦小波</a>对java的独特见解，帮助java爱好者的成长。</p><h2><span id="第6章-枚举和注解">第6章 枚举和注解</span></h2><p>日光之下，并无新事。——《圣经》</p><p>​        枚举和注解都是在Java 1.5中引入的，虽然它们是后起之秀，但其功效不可小觑，枚举改变了常量的声明方式，注解耦合了数据和代码。本章就如何更好地使用注解和枚举提出了多条建议，以便读者能够在系统开发中更好地使用它们。</p><h3><span id="建议83推荐使用枚举定义常量">建议83：推荐使用枚举定义常量</span></h3><p>​        常量声明是每一个项目都不可或缺的，在Java1.5之前，我们只有两种方式的声明：类常量和接口常量，若在项目中使用的是Java1.5之前的版本，基本上都是如此定义的。不过，在1.5版本以后有了改进，即新增了一种常量声明方式：枚举声明常量，看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Season <span class="token punctuation">{</span>    Spring<span class="token punctuation">,</span> Summer<span class="token punctuation">,</span> Autumn<span class="token punctuation">,</span> Winter<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        这是一个简单的枚举常量命名，清晰又简单。顺便提一句，JLS(Java Language Specification，Java语言规范)提倡枚举项全部大写，字母之间用下划线分割，这也是从常量的角度考虑的(当然，使用类似类名的命名方式也是比较友好的)。</p><p>　　那么枚举常量与我们经常使用的类常量和静态常量相比有什么优势？问得好，枚举的优点主要表现在四个方面：</p><p>1.枚举常量简单：简不简单，我们来对比一下两者的定义和使用情况就知道了。先把Season枚举翻写成接口常量，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Season</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> SPRING <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> SUMMER <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> AUTUMN <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> WINTER <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        此处定义了春夏秋冬四个季节，类型都是int，这与Season枚举的排序值是相同的。首先对比一下两者的定义，枚举常量只需定义每个枚举项，不需要定义枚举值，而接口常量(或类常量)则必须定义值，否则编译不通过，即使我们不需要关注其值是多少也必须定义；其次，虽然两者被引用的方式相同(都是 “类名 . 属性”，如Season.SPRING),但是枚举表示的是一个枚举项，字面含义是春天，而接口常量确是一个int类型，虽然其字面含义也是春天，但在运算中我们势必要关注其int值。</p><p>2.枚举常量属于稳态型</p><p>　　例如我们要描述一下春夏秋冬是什么样子，使用接口常量应该是这样写。　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">describe</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// s变量不能超越边界，校验条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> Season<span class="token punctuation">.</span>SPRING<span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is spring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> Season<span class="token punctuation">.</span>SUMMER<span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is summer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　很简单，先使用switch语句判断哪一个是常量，然后输出。但问题是我们得对输入值进行检查，确定是否越界，如果常量非常庞大，校验输入就成了一件非常麻烦的事情，但这是一个不可逃避的过程，特别是如果我们的校验条件不严格，虽然编译能照样通过，但是运行期就会产生无法预知的后果。</p><p>　　我们再来看看枚举常量是否能够避免校验的问题，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">describe</span><span class="token punctuation">(</span>Season s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> Spring<span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is "</span><span class="token operator">+</span>Season<span class="token punctuation">.</span>Spring<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Summer<span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is summer"</span><span class="token operator">+</span>Season<span class="token punctuation">.</span>Summer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>不用校验，已经限定了是Season枚举，所以只能是Season类的四个实例，即春夏秋冬4个枚举项，想输入一个int类型或其它类型？门都没有！这是我们最看重枚举的地方：<strong>在编译期间限定类型，不允许发生越界的情况</strong>。</p><p>3.枚举具有内置方法</p><p>　　有一个简单的问题：如果要列出所有的季节常量，如何实现呢？接口常量或类常量可以通过反射来实现，这没错，只是虽然能实现，但会非常繁琐，大家可以自己写一个反射类实现此功能(当然，一个一个地动手打印出输出常量，也可以算是列出)。对于此类问题可以非常简单的解决，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Season s <span class="token operator">:</span> Season<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过values方法获得所有的枚举项，然后打印出来即可。如此简单，得益于枚举内置的方法，每个枚举都是java.lang.Enum的子类，该基类提供了诸如获得排序值的ordinal方法、compareTo比较方法等，大大简化了常量的访问。</p><p>4.枚举可以自定义的方法</p><p>　　这一点似乎并不是枚举的优点，类常量也可以有自己的方法呀，但关键是枚举常量不仅可以定义静态方法，还可以定义非静态方法，而且还能够从根本上杜绝常量类被实例化。比如我们要在常量定义中获得最舒服季节的方法，使用常量枚举的代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Season <span class="token punctuation">{</span>    Spring<span class="token punctuation">,</span> Summer<span class="token punctuation">,</span> Autumn<span class="token punctuation">,</span> Winter<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Season <span class="token function">getComfortableSeason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Spring<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    　我们知道，每个枚举项都是该枚举的一个实例，对于我们的例子来说，也就表示Spring其实是Season的一个实例，Summer也是其中一个实例，那我们在枚举中定义的静态方法既可以在类(也就是枚举Season)中引用，也可以在实例(也就是枚举项Spring、Summer、Autumn、Winter)中引用，看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The most comfortable season is "</span><span class="token operator">+</span>Season<span class="token punctuation">.</span><span class="token function">getComfortableSeason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>那如果使用类常量要如何实现呢？代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Season</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> SPRING <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> SUMMER <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> AUTUMN <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> WINTER <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">int</span> <span class="token function">getComfortableSeason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> SPRING<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>想想看，我们怎么才能打印出”The most comfortable season is Spring” 这句话呢？除了使用switch和if判断之外没有其它办法了。</p><p>　　虽然枚举在很多方面比接口常量和类常量好用，但是有一点它是比不上接口常量和类常量的，那就是继承，枚举类型是不能继承的，也就是说一个枚举常量定义完毕后，除非修改重构，否则无法做扩展，而接口常量和类常量则可以通过继承进行扩展。但是，一般常量在项目构建时就定义完毕了，很少会出现必须通过扩展才能实现业务逻辑的场景。</p><p><strong><font color="red">注意： 在项目中推荐使用枚举常量代替接口常量或类常量。</font></strong></p><h3><span id="建议84使用构造函数协助描述枚举项">建议84：使用构造函数协助描述枚举项</span></h3><p>​    　一般来说，我们经常使用的枚举项只有一个属性，即排序号，其默认值是从0、1、2……，这一点我们很熟悉，但是除了排序号之外，枚举还有一个(或多个)属性：枚举描述，他的含义是通过枚举的构造函数，声明每个枚举项(也就是枚举的实例)必须具有的属性和行为，这是对枚举项的描述或补充，目的是使枚举项描述的意义更加清晰准确。例如有这样一段代码：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Season <span class="token punctuation">{</span>    <span class="token function">Spring</span><span class="token punctuation">(</span><span class="token string">"春"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Summer</span><span class="token punctuation">(</span><span class="token string">"夏"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Autumn</span><span class="token punctuation">(</span><span class="token string">"秋"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Winter</span><span class="token punctuation">(</span><span class="token string">"冬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>    <span class="token function">Season</span><span class="token punctuation">(</span>String _desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        desc <span class="token operator">=</span> _desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获得枚举描述</span>    <span class="token keyword">public</span> String <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    其枚举选项是英文的，描述是中文的，如此设计使其表述的意义更加精确，方便了多个作者共同引用该常量。若不考虑描述的使用（即访问getDesc方法），它与如下接口定义的描述很相似：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Season</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//春</span>    <span class="token keyword">int</span> SPRING <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//夏</span>    <span class="token keyword">int</span> SUMMER <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//......</span><span class="token punctuation">}</span></code></pre><p>​    　比较两段代码，很容易看出使用枚举项描述是一个很好的解决办法，非常简单、清晰。因为是一个描述(Description)，那我们在开发时就可以赋予更多的含义，比如可以通过枚举构造函数声明业务值，定义可选项，添加属性等，看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Role <span class="token punctuation">{</span>    <span class="token function">Admin</span><span class="token punctuation">(</span><span class="token string">"管理员"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LifeTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Scope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string">"普通用户"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LifeTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Scope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> LifeTime lifeTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> Scope scope<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* setter和getter方法略 */</span>    <span class="token function">Role</span><span class="token punctuation">(</span>String _name<span class="token punctuation">,</span> LifeTime _lifeTime<span class="token punctuation">,</span> Scope _scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>        lifeTime <span class="token operator">=</span> _lifeTime<span class="token punctuation">;</span>        scope <span class="token operator">=</span> _scope<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">LifeTime</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Scope</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>　　这是一个角色定义类，描述了两个角色：管理员和普通用户，同时它还通过构造函数对这两个角色进行了描述：</p><ul><li>name：表示的是该角色的中文名称</li><li>lifeTime：表示的是该角色的生命周期，也就是多长时间该角色失效</li><li>scope：表示的该角色的权限范围</li></ul><p>　　大家可以看出，这样一个描述可以使开发者对Admin和User两个常量有一个立体多维度的认知，有名称，有周期，还有范围，而且还可以在程序中方便的获得此类属性。所以，推荐大家在枚举定义中为每个枚举项定义描述，特别是在大规模的项目开发中，大量的常量定义使用枚举项描述比在接口常量或类常量中增加注释的方式友好的多，简洁的多。</p><h3><span id="建议85小心switch带来的空指针异常">建议85：小心switch带来的空指针异常</span></h3><p>使用枚举定义常量时。会伴有大量switch语句判断，目的是为了每个枚举项解释其行为，例如这样一个方法：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSports</span><span class="token punctuation">(</span>Season season<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>season<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> Spring<span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春天放风筝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Summer<span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"夏天游泳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Autumn<span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋天是收获的季节"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Winter<span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"冬天滑冰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的代码传入了一个Season类型的枚举，然后使用switch进行匹配，目的是输出每个季节的活动，现在的问题是这段代码又没有问题：</p><p>　　我们先来看看它是如何被调用的，因为要传递进来的是Season类型，也就是一个实例对象，那当然允许为空了，我们就传递一个null值进去看看代码又没有问题，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">doSports</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　似乎会打印出“输出错误”，因为switch中没有匹配到指定值，所以会打印出defaut的代码块，是这样的吗？不是，运行后的结果如下：</p><pre class=" language-java"><code class="language-java">Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NullPointerException    at com<span class="token punctuation">.</span>book<span class="token punctuation">.</span>study85<span class="token punctuation">.</span>Client85<span class="token punctuation">.</span><span class="token function">doSports</span><span class="token punctuation">(</span>Client85<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>book<span class="token punctuation">.</span>study85<span class="token punctuation">.</span>Client85<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>Client85<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">)</span></code></pre><p>　    竟然是空指针异常，也就是switch的那一行，怎么会有空指针呢？这就与枚举和switch的特性有关了，此问题也是在开发中经常发生的。我们知道，目前Java中的switch语句只能判断byte、short、char、int类型（JDk7允许使用String类型），这是Java编译器的限制。问题是为什么枚举类型也可以跟在switch后面呢？</p><p>　　因为编译时，编译器判断出switch语句后跟的参数是枚举类型，然后就会根据枚举的排序值继续匹配，也就是或上面的代码与以下代码相同：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSports</span><span class="token punctuation">(</span>Season season<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>season<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> season<span class="token punctuation">.</span>Spring<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春天放风筝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> season<span class="token punctuation">.</span>Summer<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"夏天游泳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//......</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    看明白了吧，switch语句是先计算season变量的排序值，然后与枚举常量的每个排序值进行对比，在我们的例子中season是null，无法执行ordinal()方法，于是就报空指针异常了。问题清楚了，解决很简单，在doSports方法中判断输入参数是否为null即可。</p><h3><span id="建议86在switch的default代码块中增加assertionerror错误">建议86：在switch的default代码块中增加AssertionError错误</span></h3><p>​        switch后跟枚举类型，case后列出所有的枚举项，这是一个使用枚举的主流写法，那留着default语句似乎没有任何作用，程序已经列举了所有的可能选项，肯定不会执行到defaut语句，看上去纯属多余嘛！错了，这个default还是很有作用的。以我们定义的日志级别来说明，这是一个典型的枚举常量，如下所示:　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> LogLevel<span class="token punctuation">{</span>    DEBUG<span class="token punctuation">,</span>INFO<span class="token punctuation">,</span>WARN<span class="token punctuation">,</span>ERROR<span class="token punctuation">}</span></code></pre><p>　　一般在使用的时候，会通过switch语句来决定用户设置的日志级别，然后输出不同级别的日志代码，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span><span class="token operator">:</span>DEBUG<span class="token operator">:</span>        <span class="token comment" spellcheck="true">//.....</span>    <span class="token keyword">case</span><span class="token operator">:</span>INFO<span class="token operator">:</span>        <span class="token comment" spellcheck="true">//......</span>    <span class="token keyword">case</span><span class="token operator">:</span>WARN<span class="token operator">:</span>        <span class="token comment" spellcheck="true">//......</span>    <span class="token keyword">case</span><span class="token operator">:</span>ERROR<span class="token operator">:</span>        <span class="token comment" spellcheck="true">//......</span><span class="token punctuation">}</span></code></pre><p>　　由于把所有的枚举项都列举完了，不可能有其它值，所以就不需要default代码快了，这是普遍认识，但问题是我们的switch代码与枚举之间没有强制约束关系，也就是说两者只是在语义上建立了联系，并没有一个强制约束，比如LogLevel的枚举项发生变化了，增加了一个枚举项FATAL，如果此时我们对switch语句不做任何修改，编译虽不会出问题，但是运行期会发生非预期的错误：FATAL类型的日志没有输出。</p><p>　　为了避免出现这类错误，建议在default后直接抛出一个AssertionError错误，其含义就是“不要跑到这里来，一跑到这里就会出问题”，这样可以保证在增加一个枚举项的情况下，若其它代码未修改，运行期马上就会出错，这样一来就很容易找到错误，方便立即排除。</p><p>　　<strong>当然也有其它方法解决此问题，比如修改IDE工具，以Eclipse为例，可以把Java–&gt;Compiler—&gt;Errors/Warnings中的“Enum type constant not covered on ‘switch’ ”设置为Error级别，如果不判断所有的枚举项就不能编译通过。</strong></p><h3><span id="建议87使用valueof前必须进行校验">建议87：使用valueOf前必须进行校验</span></h3><p>　　我们知道每个枚举项都是java.lang.Enum的子类，都可以访问Enum类提供的方法，比如hashCode、name、valueOf等，其中valueOf方法会把一个String类型的名称转换为枚举项，也就是在枚举项中查找出字面值与参数相等的枚举项。虽然这个方法简单，但是JDK却做了一个对于开发人员来说并不简单的处理，我们来看代码：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注意summer是小写</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> params <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Spring"</span><span class="token punctuation">,</span> <span class="token string">"summer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 查找字面值与name相同的枚举项，其中Season是前面例子中枚举Season</span>        Season s <span class="token operator">=</span> Season<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 有枚举项时</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 没有该枚举项</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无相关枚举项"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　这段程序看起来没什么错吧，其中考虑到从String转换为枚举类型可能存在着转换不成功的情况，比如没有匹配找到指定值，此时ValueOf的返回值应该为空，所以后面又跟着if…else判断输出。我们看看运行结果　</p><pre class=" language-java"><code class="language-java">SpringException in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalArgumentException<span class="token operator">:</span> No <span class="token keyword">enum</span> constant com<span class="token punctuation">.</span>book<span class="token punctuation">.</span>study01<span class="token punctuation">.</span>Season<span class="token punctuation">.</span>summer    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>Unknown Source<span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>book<span class="token punctuation">.</span>study01<span class="token punctuation">.</span>Season<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>Season<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>book<span class="token punctuation">.</span>study85<span class="token punctuation">.</span>Client85<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>Client85<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">)</span></code></pre><p>　　报无效的参数异常，也就说我们的summer(注意s是小写)，无法转换为Season枚举，无法转换就 不转换嘛，那也别抛出IllegalArgumentException异常啊，一但抛出这个异常，后续的代码就不会执行了，这与我们的习惯不符合呀，例如我们从List中查找一个元素，即使不存在也不会报错，顶多indexOf方法返回-1。那么我们来深入分析一下该问题，valueOf方法的源代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> T <span class="token function">valueOf</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> enumType<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通过反射，从常量列表中查找</span>    T result <span class="token operator">=</span> enumType<span class="token punctuation">.</span><span class="token function">enumConstantDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"Name is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//最后抛出无效参数异常</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No enum constant "</span> <span class="token operator">+</span> enumType<span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　valueOf方法先通过反射从枚举类的常量声明中查找，若找到就直接返回，若找不到则抛出无效参数异常。valueOf的本意是保护编码中的枚举安全性，使其不产生空枚举对象，简化枚举操作，但是却引入了一个我们无法避免的IllegalArgumentException异常。</p><p>　　大家是否觉得此处的valueOf方法的源码不对，这里要输入两个参数，而我们的Season.valueOf只传递一个String类型的参数，真的是这样吗？是的，因为valueOf（String name）方法是不可见的，是JVM内置的方法，我们只有通过阅读公开的valueOf方法来了解其运行原理了。</p><p>　　问题清楚了，有两个方法可以解决此问题：</p><p>　　(1)、使用try……catch捕捉异常</p><p>　　这里是最直接也是最简单的方式，产生IllegalArgumentException即可确认为没有同名的枚举的枚举项，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    Season s <span class="token operator">=</span> Season<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//有该枚举项时</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无相关枚举项"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　(2)、扩展枚举类：由于Enum类定义的方法基本上都是final类型的，所以不希望被覆写，我们可以学习String和List，通过增加一个contains方法来判断是否包含指定的枚举项，然后再继续转换，代码如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Season <span class="token punctuation">{</span>    Spring<span class="token punctuation">,</span> Summer<span class="token punctuation">,</span> Autumn<span class="token punctuation">,</span> Winter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否包含指定的枚举项</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 所有的枚举值</span>        Season<span class="token punctuation">[</span><span class="token punctuation">]</span> season <span class="token operator">=</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Season s <span class="token operator">:</span> season<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    　Season枚举具备了静态方法contains后，就可以在valueOf前判断一下是否包含指定的枚举名称了，若包含则可以通过valueOf转换为枚举，若不包含则不转换。</p><h3><span id="建议88用枚举实现工厂方法模式更简洁">建议88：用枚举实现工厂方法模式更简洁</span></h3><p>​        工厂方法模式(Factory Method Pattern)是” 创建对象的接口，让子类决定实例化哪一个类，并使一个类的实例化延迟到其它子类”。工厂方法模式在我们的开发中经常会用到。下面以汽车制造为例，看看一般的工厂方法模式是如何实现的，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象产品</span><span class="token keyword">interface</span> <span class="token class-name">Car</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体产品类</span><span class="token keyword">class</span> <span class="token class-name">FordCar</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体产品类</span><span class="token keyword">class</span> <span class="token class-name">BuickCar</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//工厂类</span><span class="token keyword">class</span> <span class="token class-name">CarFactory</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//生产汽车</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Car <span class="token function">createCar</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Car</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> <span class="token operator">|</span> IllegalAccessException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　这是最原始的工厂方法模式，有两个产品：福特汽车和别克汽车，然后通过工厂方法模式来生产。有了工厂方法模式，我们就不用关心一辆车具体是怎么生成的了，只要告诉工厂” 给我生产一辆福特汽车 “就可以了，下面是产出一辆福特汽车时客户端的代码：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//生产车辆</span>    Car car <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">createCar</span><span class="token punctuation">(</span>FordCar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　这就是我们经常使用的工厂方法模式，但经常使用并不代表就是最优秀、最简洁的。此处再介绍一种通过枚举实现工厂方法模式的方案，谁优谁劣你自行评价。枚举实现工厂方法模式有两种方法：</p><p>(1)、枚举非静态方法实现工厂方法模式</p><p>　　我们知道每个枚举项都是该枚举的实例对象，那是不是定义一个方法可以生成每个枚举项对应产品来实现此模式呢？代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> CarFactory <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义生产类能生产汽车的类型</span>    FordCar<span class="token punctuation">,</span> BuickCar<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生产汽车</span>    <span class="token keyword">public</span> Car <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> FordCar<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FordCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> BuickCar<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BuickCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">"无效参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　create是一个非静态方法，也就是只有通过FordCar、BuickCar枚举项才能访问。采用这种方式实现工厂方法模式时，客户端要生产一辆汽车就很简单了，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 生产车辆</span>    Car car <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span>BuickCar<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>(2)、通过抽象方法生成产品</p><p>　　枚举类型虽然不能继承，但是可以用abstract修饰其方法，此时就表示该枚举是一个抽象枚举，需要每个枚举项自行实现该方法，也就是说枚举项的类型是该枚举的一个子类，我们俩看代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> CarFactory <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义生产类能生产汽车的类型</span>    FordCar<span class="token punctuation">{</span>        <span class="token keyword">public</span> Car <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FordCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    BuickCar<span class="token punctuation">{</span>        <span class="token keyword">public</span> Car <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BuickCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//抽象生产方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Car <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    　首先定义一个抽象制造方法create，然后每个枚举项自行实现，这种方式编译后会产生CarFactory的匿名子类，因为每个枚举项都要实现create抽象方法。客户端调用与上一个方案相同，不再赘述。</p><p>　　大家可能会问，为什么要使用枚举类型的工厂方法模式呢？那是因为使用枚举类型的工厂方法模式有以下三个优点：</p><ul><li>避免错误调用的发生：一般工厂方法模式中的生产方法(也就是createCar方法)，可以接收三种类型的参数：类型参数(如我们的例子)、String参数(生产方法中判断String参数是需要生产什么产品)、int参数(根据int值判断需要生产什么类型的的产品)，这三种参数都是宽泛的数据类型，很容易发生错误(比如边界问题、null值问题)，而且出现这类错误编译器还不会报警，例如：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 生产车辆</span>    Car car <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">createCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    　Car是一个接口，完全合乎createCar的要求，所以它在编译时不会报任何错误，但一运行就会报出InstantiationException异常，而使用枚举类型的工厂方法模式就不存在该问题了，不需要传递任何参数，只需要选择好生产什么类型的产品即可。</p><ul><li>性能好，使用简洁：枚举类型的计算时以int类型的计算为基础的，这是最基本的操作，性能当然会快，至于使用便捷，注意看客户端的调用，代码的字面意思就是” 汽车工厂，我要一辆别克汽车，赶快生产”。</li><li>降低类间耦合：不管生产方法接收的是Class、String还是int的参数，都会成为客户端类的负担，这些类并不是客户端需要的，而是因为工厂方法的限制必须输入的，例如Class参数，对客户端main方法来说，他需要传递一个FordCar.class参数才能生产一辆福特汽车，除了在create方法中传递参数外，业务类不需要改Car的实现类。这严重违背了迪米特原则(Law of Demeter 简称LoD),也就是最少知识原则：一个对象应该对其它对象有最少的了解。</li></ul><p>　　而枚举类型的工厂方法就没有这种问题了，它只需要依赖工厂类就可以生产一辆符合接口的汽车，完全可以无视具体汽车类的存在。</p><h3><span id="建议89枚举项的数量限制在64个以内">建议89：枚举项的数量限制在64个以内</span></h3><p>　为了更好地使用枚举，Java提供了两个枚举集合：EnumSet和EnumMap，这两个集合使用的方法都比较简单，EnumSet表示其元素必须是某一枚举的枚举项，EnumMap表示Key值必须是某一枚举的枚举项，由于枚举类型的实例数量固定并且有限，相对来说EnumSet和EnumMap的效率会比其它Set和Map要高。</p><p>   虽然EnumSet很好用，但是它有一个隐藏的特点，我们逐步分析。在项目中一般会把枚举用作常量定义，可能会定义非常多的枚举项，然后通过EnumSet访问、遍历，但它对不同的枚举数量有不同的处理方式。为了进行对比，我们定义两个枚举，一个数量等于64，一个是65（大于64即可，为什么是64而不是128,512呢，一会解释），代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//普通枚举项，数量等于64</span><span class="token keyword">enum</span> Const<span class="token punctuation">{</span>    A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>D<span class="token punctuation">,</span>E<span class="token punctuation">,</span>F<span class="token punctuation">,</span>G<span class="token punctuation">,</span>H<span class="token punctuation">,</span>I<span class="token punctuation">,</span>J<span class="token punctuation">,</span>K<span class="token punctuation">,</span>L<span class="token punctuation">,</span>M<span class="token punctuation">,</span>N<span class="token punctuation">,</span>O<span class="token punctuation">,</span>P<span class="token punctuation">,</span>Q<span class="token punctuation">,</span>R<span class="token punctuation">,</span>S<span class="token punctuation">,</span>T<span class="token punctuation">,</span>U<span class="token punctuation">,</span>V<span class="token punctuation">,</span>W<span class="token punctuation">,</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">,</span>    AA<span class="token punctuation">,</span>BB<span class="token punctuation">,</span>CC<span class="token punctuation">,</span>DD<span class="token punctuation">,</span>EE<span class="token punctuation">,</span>FF<span class="token punctuation">,</span>GG<span class="token punctuation">,</span>HH<span class="token punctuation">,</span>II<span class="token punctuation">,</span>JJ<span class="token punctuation">,</span>KK<span class="token punctuation">,</span>LL<span class="token punctuation">,</span>MM<span class="token punctuation">,</span>NN<span class="token punctuation">,</span>OO<span class="token punctuation">,</span>PP<span class="token punctuation">,</span>QQ<span class="token punctuation">,</span>RR<span class="token punctuation">,</span>SS<span class="token punctuation">,</span>TT<span class="token punctuation">,</span>UU<span class="token punctuation">,</span>VV<span class="token punctuation">,</span>WW<span class="token punctuation">,</span>XX<span class="token punctuation">,</span>YY<span class="token punctuation">,</span>ZZ<span class="token punctuation">,</span>    AAA<span class="token punctuation">,</span>BBB<span class="token punctuation">,</span>CCC<span class="token punctuation">,</span>DDD<span class="token punctuation">,</span>EEE<span class="token punctuation">,</span>FFF<span class="token punctuation">,</span>GGG<span class="token punctuation">,</span>HHH<span class="token punctuation">,</span>III<span class="token punctuation">,</span>JJJ<span class="token punctuation">,</span>KKK<span class="token punctuation">,</span>LLL<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//大枚举，数量超过64</span><span class="token keyword">enum</span> LargeConst<span class="token punctuation">{</span>    A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>D<span class="token punctuation">,</span>E<span class="token punctuation">,</span>F<span class="token punctuation">,</span>G<span class="token punctuation">,</span>H<span class="token punctuation">,</span>I<span class="token punctuation">,</span>J<span class="token punctuation">,</span>K<span class="token punctuation">,</span>L<span class="token punctuation">,</span>M<span class="token punctuation">,</span>N<span class="token punctuation">,</span>O<span class="token punctuation">,</span>P<span class="token punctuation">,</span>Q<span class="token punctuation">,</span>R<span class="token punctuation">,</span>S<span class="token punctuation">,</span>T<span class="token punctuation">,</span>U<span class="token punctuation">,</span>V<span class="token punctuation">,</span>W<span class="token punctuation">,</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">,</span>    AA<span class="token punctuation">,</span>BB<span class="token punctuation">,</span>CC<span class="token punctuation">,</span>DD<span class="token punctuation">,</span>EE<span class="token punctuation">,</span>FF<span class="token punctuation">,</span>GG<span class="token punctuation">,</span>HH<span class="token punctuation">,</span>II<span class="token punctuation">,</span>JJ<span class="token punctuation">,</span>KK<span class="token punctuation">,</span>LL<span class="token punctuation">,</span>MM<span class="token punctuation">,</span>NN<span class="token punctuation">,</span>OO<span class="token punctuation">,</span>PP<span class="token punctuation">,</span>QQ<span class="token punctuation">,</span>RR<span class="token punctuation">,</span>SS<span class="token punctuation">,</span>TT<span class="token punctuation">,</span>UU<span class="token punctuation">,</span>VV<span class="token punctuation">,</span>WW<span class="token punctuation">,</span>XX<span class="token punctuation">,</span>YY<span class="token punctuation">,</span>ZZ<span class="token punctuation">,</span>    AAAA<span class="token punctuation">,</span>BBBB<span class="token punctuation">,</span>CCCC<span class="token punctuation">,</span>DDDD<span class="token punctuation">,</span>EEEE<span class="token punctuation">,</span>FFFF<span class="token punctuation">,</span>GGGG<span class="token punctuation">,</span>HHHH<span class="token punctuation">,</span>IIII<span class="token punctuation">,</span>JJJJ<span class="token punctuation">,</span>KKKK<span class="token punctuation">,</span>LLLL<span class="token punctuation">,</span>MMMM<span class="token punctuation">}</span></code></pre><p>​    Const的枚举项数量是64，LagrgeConst的枚举项数量是65,接下来我们希望把这两个枚举转换为EnumSet，然后判断一下它们的class类型是否相同，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client89</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        EnumSet<span class="token operator">&lt;</span>Const<span class="token operator">></span> cs <span class="token operator">=</span> EnumSet<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EnumSet<span class="token operator">&lt;</span>LargeConst<span class="token operator">></span> lcs <span class="token operator">=</span> EnumSet<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>LargeConst<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印出枚举数量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Const的枚举数量："</span><span class="token operator">+</span>cs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LargeConst的枚举数量："</span><span class="token operator">+</span>lcs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出两个EnumSet的class</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cs<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lcs<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        程序很简单，现在的问题是：cs和lcs的class类型是否相同？应该相同吧，都是EnumSet类的工厂方法allOf生成的EnumSet类，而且JDK API也没有提示EnumSet有子类。我们来看看输出结果：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160927105808235-1641372744.png" alt="img"></p><p>​        很遗憾，两者不相等。就差一个元素，两者就不相等了？确实如此，这也是我们重点关注枚举项数量的原因。先来看看Java是如何处理的，首先跟踪allOf方法，其源码如下： 　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>E<span class="token operator">>></span> EnumSet<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">allOf</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>E<span class="token operator">></span> elementType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//生成一个空EnumSet</span>    EnumSet<span class="token operator">&lt;</span>E<span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">noneOf</span><span class="token punctuation">(</span>elementType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加入所有的枚举项</span>    result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　allOf通过noneOf方法首先生成了一个EnumSet对象，然后把所有的枚举都加进去，问题可能就出在EnumSet的生成上了，我们来看看noneOf的源码：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>E<span class="token operator">>></span> EnumSet<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">noneOf</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>E<span class="token operator">></span> elementType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获得所有的枚举项</span>    Enum<span class="token punctuation">[</span><span class="token punctuation">]</span> universe <span class="token operator">=</span> <span class="token function">getUniverse</span><span class="token punctuation">(</span>elementType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>universe <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassCastException</span><span class="token punctuation">(</span>elementType <span class="token operator">+</span> <span class="token string">" not an enum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//枚举数量小于等于64</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>universe<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">64</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegularEnumSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>elementType<span class="token punctuation">,</span> universe<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">//枚举数量大于64</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JumboEnumSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>elementType<span class="token punctuation">,</span> universe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    看到这里，恍然大悟，Java原来是如此处理的：当枚举项数量小于等于64时，创建一个RegularEnumSet实例对象，大于64时则创建一个JumboEnumSet实例对象。</p><p>　　为什么要如此处理呢？这还要看看这两个类之间的差异，首先看RegularEnumSet类，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RegularEnumSet</span><span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>E<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">EnumSet</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 3411599620347842686L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Bit vector representation of this set.  The 2^k bit indicates the     * presence of universe[k] in this set.     */</span>    <span class="token comment" spellcheck="true">//记录所有的枚举号，注意是long型</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> elements <span class="token operator">=</span> 0L<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token function">RegularEnumSet</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>E<span class="token operator">></span>elementType<span class="token punctuation">,</span> Enum<span class="token punctuation">[</span><span class="token punctuation">]</span> universe<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>elementType<span class="token punctuation">,</span> universe<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//加入所有元素</span>    <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>universe<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            elements <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">>>></span> <span class="token operator">-</span>universe<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//其它代码略</span><span class="token punctuation">}</span></code></pre><p>​        我们知道枚举项的排序值ordinal 是从0、1、2……依次递增的，没有重号，没有跳号，RegularEnumSet就是利用这一点把每个枚举项的ordinal映射到一个long类型的每个位置上的，注意看addAll方法的elements元素，它使用了无符号右移操作，并且操作数是负值，位移也是负值，这表示是负数(符号位是1)的”无符号左移”：符号位为0，并补充低位，简单的说，Java把一个不多于64个枚举项映射到了一个long类型变量上。这才是EnumSet处理的重点，其他的size方法、contains方法等都是根据elements方法等都是根据elements计算出来的。想想看，一个long类型的数字包含了所有的枚举项，其效率和性能能肯定是非常优秀的。</p><p>　　我们知道long类型是64位的，所以RegularEnumSet类型也就只能负责枚举项的数量不大于64的枚举(这也是我们以64来举例，而不以128,512举例的原因)，大于64则由JumboEnumSet处理，我们看它是怎么处理的：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">JumboEnumSet</span><span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>E<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">EnumSet</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 334349849919042784L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Bit vector representation of this set.  The ith bit of the jth     * element of this array represents the  presence of universe[64*j +i]     * in this set.     */</span>    <span class="token comment" spellcheck="true">//映射所有的枚举项</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> elements<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Redundant - maintained for performance</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">JumboEnumSet</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>E<span class="token operator">></span>elementType<span class="token punctuation">,</span> Enum<span class="token punctuation">[</span><span class="token punctuation">]</span> universe<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>elementType<span class="token punctuation">,</span> universe<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//默认长度是枚举项数量除以64再加1</span>        elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">long</span><span class="token punctuation">[</span><span class="token punctuation">(</span>universe<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//elements中每个元素表示64个枚举项</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        elements<span class="token punctuation">[</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>>>=</span> <span class="token operator">-</span>universe<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        size <span class="token operator">=</span> universe<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　JumboEnumSet类把枚举项按照64个元素一组拆分成了多组，每组都映射到一个long类型的数字上，然后该数组再放置到elements数组中，简单来说JumboEnumSet类的原理与RegularEnumSet相似，只是JumboEnumSet使用了long数组容纳更多的枚举项。不过，这样的程序看着会不会觉得郁闷呢？其实这是因为我们在开发中很少使用位移操作。大家可以这样理解：RegularEnumSet是把每个枚举项映射到一个long类型数字的每个位上，JumboEnumSet是先按照64个一组进行拆分，然后每个组再映射到一个long类型数字的每个位上。</p><p>　　从以上的分析可知，EnumSet提供的两个实现都是基本的数字类型操作，其性能肯定比其他的Set类型要好的多，特别是Enum的数量少于64的时候，那简直就是飞一般的速度。</p><p>　　<strong>注意：枚举项数量不要超过64，否则建议拆分。</strong></p><h3><span id="建议90小心注解继承">建议90：小心注解继承</span></h3><p>　Java从1.5版本开始引入注解(Annotation),其目的是在不影响代码语义的情况下增强代码的可读性，并且不改变代码的执行逻辑，对于注解始终有两派争论，正方认为注解有益于数据与代码的耦合，”在有代码的周边集合数据”；反方认为注解把代码和数据混淆在一起，增加了代码的易变性，消弱了程序的健壮性和稳定性。这些争论暂且搁置，我们要说的是一个我们不常用的元注解(Meta-Annotation):@Inheruted,它表示一个注解是否可以自动继承，我们开看它如何使用。</p><p>　　思考一个例子，比如描述鸟类，它有颜色、体型、习性等属性，我们以颜色为例，定义一个注解来修饰一下，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Inherited<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Inherited</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Desc</span> <span class="token punctuation">{</span>    <span class="token keyword">enum</span> Color <span class="token punctuation">{</span>        White<span class="token punctuation">,</span> Grayish<span class="token punctuation">,</span> Yellow    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 默认颜色是白色的</span>    Color <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> Color<span class="token punctuation">.</span>White<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　该注解Desc前增加了三个注解：Retention表示的是该注解的保留级别，Target表示的是注解可以标注在什么地方，@Inherited表示该注解会被自动继承。注解定义完毕，我们把它标注在类上，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Desc</span><span class="token punctuation">(</span>c <span class="token operator">=</span> Color<span class="token punctuation">.</span>White<span class="token punctuation">)</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Color <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 麻雀</span><span class="token keyword">class</span> <span class="token class-name">Sparrow</span> <span class="token keyword">extends</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Color color<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认是浅灰色</span>    <span class="token keyword">public</span> <span class="token function">Sparrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Grayish<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 构造函数定义鸟的颜色</span>    <span class="token keyword">public</span> <span class="token function">Sparrow</span><span class="token punctuation">(</span>Color _color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        color <span class="token operator">=</span> _color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Color <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 鸟巢，工厂方法模式</span><span class="token keyword">enum</span> BirdNest <span class="token punctuation">{</span>    Sparrow<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 鸟类繁殖</span>    <span class="token keyword">public</span> Bird <span class="token function">reproduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Desc bd <span class="token operator">=</span> Sparrow<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Desc<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bd <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Sparrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Sparrow</span><span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　上面程序声明了一个Bird抽象类，并且标注了Desc注解，描述鸟类的颜色是白色，然后编写一个麻雀Sparrow类，它有两个构造函数，一个是默认的构造函数，也就是我们经常看到的麻雀是浅灰色的，另外一个构造函数是自定义麻雀的颜色，之后又定义了一个鸟巢(工厂方法模式)，它是专门负责鸟类繁殖的，它的生产方法reproduce会根据实现类注解信息生成不同颜色的麻雀。我们编写一个客户端调用，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Bird bird <span class="token operator">=</span> BirdNest<span class="token punctuation">.</span>Sparrow<span class="token punctuation">.</span><span class="token function">reproduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Color color <span class="token operator">=</span> bird<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Bird's color is :"</span> <span class="token operator">+</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    现在问题是这段客户端程序会打印出什么来？因为采用了工厂方法模式，它最主要的问题就是bird变量到底采用了那个构造函数来生成，是无参构造函数还是有参构造？如果我们单独看子类Sparrow，它没有被添加任何注释，那工厂方法中的bd变量就应该是null了，应该调用的是无参构造。是不是如此呢？我们来看运行结果：“Bird‘s Color is White ”；</p><p>　　白色？这是我们添加到父类Bird上的颜色，为什么？这是因为我们在注解上加了@Inherited注解，它表示的意思是我们只要把注解@Desc加到父类Bird上，它的所有子类都会从父类继承@Desc注解，不需要显示声明，这与Java的继承有点不同，若Sparrow类继承了Bird却不用显示声明，只要@Desc注解释可自动继承的即可。</p><p>　　采用@Inherited元注解有利有弊，利的地方是一个注解只要标注到父类，所有的子类都会自动具有父类相同的注解，整齐，统一而且便于管理，弊的地方是单单阅读子类代码，我们无从知道为何逻辑会被改变，因为子类没有显示标注该注解。总体上来说，使用@Inherited元注解弊大于利，特别是一个类的继承层次较深时，如果注解较多，则很难判断出那个注解对子类产生了逻辑劫持。</p><h3><span id="建议91枚举和注解结合使用威力更大">建议91：枚举和注解结合使用威力更大</span></h3><p>　　我们知道注解的写法和接口很类似，都采用了关键字interface，而且都不能有实现代码，常量定义默认都是public static final 类型的等，它们的主要不同点是：注解要在interface前加上@字符，而且不能继承，不能实现，这经常会给我们的开发带来些障碍。　　</p><p>　　我们来分析一下ACL(Access Control  List,访问控制列表)设计案例，看看如何避免这些障碍，ACL有三个重要元素：</p><ul><li>资源，有哪些信息是要被控制起来的。</li><li>权限级别，不同的访问者规划在不同的级别中。</li><li>控制器(也叫鉴权人)，控制不同的级别访问不同的资源。</li></ul><p>　　鉴权人是整个ACL的设计核心，我们从最主要的鉴权人开始，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Identifier</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//无权访问时的礼貌语</span>    String REFUSE_WORD  <span class="token operator">=</span>  <span class="token string">"您无权访问"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//鉴权</span>    <span class="token keyword">public</span>  <span class="token keyword">boolean</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    　这是一个鉴权人接口，定义了一个常量和一个鉴权方法。接下来应该实现该鉴权方法，但问题是我们的权限级别和鉴权方法之间是紧耦合，若分拆成两个类显得有点啰嗦，怎么办？我们可以直接顶一个枚举来实现，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> CommonIdentifier <span class="token keyword">implements</span> <span class="token class-name">Identifier</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 权限级别</span>    Reader<span class="token punctuation">,</span> Author<span class="token punctuation">,</span> Admin<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    定义了一个通用鉴权者，使用的是枚举类型，并且实现了鉴权者接口。现在就剩下资源定义了，这很容易定义，资源就是我们写的类、方法等，之后再通过配置来决定哪些类、方法允许什么级别的访问，这里的问题是：怎么把资源和权限级别关联起来呢？使用XML配置文件？是个方法，但对我们的示例程序来说显得太繁重了，如果使用注解会更简洁些，不过这需要我们首先定义出权限级别的注解，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">Access</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//什么级别可以访问，默认是管理员</span>    CommonIdentifier <span class="token function">level</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> CommonIdentifier<span class="token punctuation">.</span>Admin<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    　该注解释标注在类上面的，并且会保留到运行期。我们定义一个资源类，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Access</span><span class="token punctuation">(</span>level<span class="token operator">=</span>CommonIdentifier<span class="token punctuation">.</span>Author<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p>　　Foo类只能是作者级别的人访问。场景都定义完毕了，那我们看看如何模拟ACL实现，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化商业逻辑</span>    Foo b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取注解</span>    Access access <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Access<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 没有Access注解或者鉴权失败</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> access <span class="token operator">||</span> <span class="token operator">!</span>access<span class="token punctuation">.</span><span class="token function">level</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没有Access注解或者鉴权失败</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>access<span class="token punctuation">.</span><span class="token function">level</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>REFUSE_WORD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　看看这段代码，简单，易读，而且如果我们是通过ClassLoader类来解释该注解的，那会使我们的开发更简洁，所有的开发人员只要增加注解即可解决访问控制问题。注意看加粗代码，access是一个注解类型，我们想使用Identifier接口的identity鉴权方法和REFUSE_WORD常量，但注解释不能集成的，那怎么办?此处，可通过枚举类型CommonIdentifier从中间做一个委派动作(Delegate),委派？你可以然identity返回一个对象，或者在Identifier上直接定义一个常量对象，那就是“赤裸裸” 的委派了。</p><h3><span id="建议92注意override不同版本的区别">建议92：注意@Override不同版本的区别</span></h3><p>　    @Override注解用于方法的覆写上，它是在编译器有效，也就是Java编译器在编译时会根据注解检查方法是否真的是覆写，如果不是就报错，拒绝编译。该注解可以很大程度地解决我们的误写问题，比如子类和父类的方法名少写一个字符，或者是数字0和字母O为区分出来等，这基本是每个程序员都曾将犯过的错误。在代码中加上@Override注解基本上可以杜绝出现此类问题，但是@Override有个版本问题，我们来看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FooImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　这是一个简单的@Override示例，接口中定义了一个doSomething方法，实现类FooImpl实现此方法，并且在方法前加上了@Override注解。这段代码在Java1.6版本上编译没问题，虽然doSomething方法只是实现了接口的定义，严格来说并不是覆写，但@Override出现在这里可减少代码中出现的错误。</p><p>　　可如果在Java1.5版本上编译此段代码可能会出现错误：</p><p>　　　　　　The method doSomeThing() of type FooImpl must override  a superclass method </p><p>　　注意，这是个错误，不能继续编译，原因是<strong>Java1.5版本的@Override是严格遵守覆写的定义</strong>：子类方法与父类方法必须具有相同的方法名、输出参数、输出参数(允许子类缩小)、访问权限(允许子类扩大)，父类必须是一个类，不能是接口，否则不能算是覆写。而这在Java1.6就开放了很多，实现接口的方法也可以加上@Override注解了，可以避免粗心大意导致方法名称与接口不一致的情况发生。</p><p>　　在多环境部署应用时，需呀考虑@Override在不同版本下代表的意义，如果是Java1.6版本的程序移植到1.5版本环境中，就需要删除实现接口方法上的@Override注解。</p><h2><span id="第7章-泛型和反射">第7章 泛型和反射</span></h2><p>Don’t let complexity stop you. Be activists. Take on the big inequities. Itwill be one of the great experiences of your lives.</p><p>不要让这个世界的复杂性阻碍你的前进。要成为一个行动主义者，将解决人类的不平等视为己任。它将成为你生命中最重要的经历之一。——比尔·盖茨在哈佛大学的演讲</p><p>​    泛型可以减少强制类型的转换，可以规范集合的元素类型，还可以提高代码的安全性和可读性，正是因为有这些优点，自从Java引入泛型后，项目的编码规则上便多了一条：优先使用泛型。反射可以“看透”程序的运行情况，可以让我们在运行期知晓一个类或实例的运行状况，可以动态地加载和调用，虽然有一定的性能忧患，但它带给我们的便利远远大于其性能缺陷。</p><h3><span id="建议93java的泛型是可以擦除的">建议93：Java的泛型是可以擦除的</span></h3><p>​    java泛型(Generic) 的引入加强了参数类型的安全性，减少了类型的转换，它与C++中的模板(Temeplates) 比较类似，但是有一点不同的是：Java的泛型在编译器有效，在运行期被删除，也就是说所有的泛型参数类型在编译后会被清除掉，我们来看一个例子，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//arrayMethod接收数组参数，并进行重载</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">arrayMethod</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> intArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">arrayMethod</span><span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> intArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//listMethod接收泛型List参数，并进行重载</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listMethod</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> stringList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listMethod</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> intList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    程序很简单，编写了4个方法，arrayMethod方法接收String数组和Integer数组，这是一个典型的重载，listMethod接收元素类型为String和Integer的list变量。现在的问题是，这段程序是否能编译？如果不能？问题出在什么地方？</p><p>　　事实上，这段程序时无法编译的，编译时报错信息如下：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160929095002516-214649817.png" alt="img"></p><p>​        这段错误的意思：简单的的说就是方法签名重复，其实就是说listMethod(List<integer> intList)方法在编译时擦除类型后是listMethod(List<e> intList)与另一个方法重复。这就是Java泛型擦除引起的问题：在编译后所有的泛型类型都会做相应的转化。转换规则如下：</e></integer></p><ul><li>List<string>、List<integer>、List<t>擦除后的类型为List</t></integer></string></li><li>List<string>[] 擦除后的类型为List[].</string></li><li>List&lt;? extends E&gt; 、List&lt;? super E&gt; 擦除后的类型为List<e>.</e></li><li>List&lt;T extends Serializable &amp; Cloneable &gt;擦除后的类型为List&lt; Serializable&gt;.</li></ul><p>　　明白了这些规则，再看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String str <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    Java编译后字节码中已经没有泛型的任何信息了，也就是说一个泛型类和一个普通类在经过编译后都指向了同一字节码，比如Foo<t>类，经过编译后将只有一份Foo.class类，不管是Foo<string>还是Foo<integer>引用的都是同一字节码。Java之所以如此处理，有两个原因：</integer></string></t></p><ul><li>避免JVM的大换血。C++泛型生命期延续到了运行期，而Java是在编译期擦除掉的，我们想想，如果JVM也把泛型类型延续到运行期，那么JVM就需要进行大量的重构工作了。</li><li>版本兼容：在编译期擦除可以更好的支持原生类型(Raw Type)，在Java1.5或1.6…平台上，即使声明一个List这样的原生类型也是可以正常编译通过的，只是会产生警告信息而已。</li></ul><p>　　明白了Java泛型是类型擦除的，我们就可以解释类似如下的问题了：</p><ol><li>泛型的class对象是相同的：每个类都有一个class属性，泛型化不会改变class属性的返回值，例如：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>list2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　以上代码返回true，原因很简单，List<string>和List<integer>擦除后的类型都是List，没有任何区别。</integer></string></p><p>　　2.泛型数组初始化时不能声明泛型，如下代码编译时通不过：　</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> listArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    　原因很简单，可以声明一个带有泛型参数的数组，但不能初始化该数组，因为执行了类型擦除操作，List&lt;Object>[]与List&lt;String>[] 就是同一回事了，编译器拒绝如此声明。</span></code></pre><p>​        3.instanceof不允许存在泛型参数</p><p>　　　　以下代码不能通过编译，原因一样，泛型类型被擦除了：　　</p><pre class=" language-java"><code class="language-java">  List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3><span id="建议94不能初始化泛型参数和数组">建议94：不能初始化泛型参数和数组</span></h3><p>　泛型类型在编译期被擦除，我们在类初始化时将无法获得泛型的具体参数，比如这样的代码：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> tArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　这段代码有神么问题呢？t、tArray、list都是类变量，都是通过new声明了一个类型，看起来非常相似啊！但这段代码是编译不过的，因为编译器在编译时需要获得T类型，但泛型在编译期类型已经被擦除了，所有new T()和 new T[5]都会报错(有人可能会有疑问，泛型类型可以擦除为顶级Object，那T类型擦除成Object不就可以编译了吗？这样也不行，泛型只是Java语言的一部分，Java语言毕竟是一个强类型、编译型的安全语言，要确保运行期的稳定性和安全性就必须要求在编译器上严格检查)。可为什么new ArrayList<t>()却不会报错呢？</t></p><p>　　这是因为ArrayList表面是泛型，其实已经在编译期转为Object了，我们来看一下ArrayList的源代码就清楚了，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span>        RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 容纳元素的数组</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造函数</span>    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获得一个元素</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回前强制类型转换</span>        <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 其它代码略 */</span><span class="token punctuation">}</span></code></pre><p>　　注意看elementData的定义，它容纳了ArrayList的所有元素，其类型是Object数组，因为Object是所有类的父类，数组又允许协变(Covariant)，因此elementData数组可以容纳所有的实例对象。元素加入时向上转型为Object类型(E类型转换为Object)，取出时向下转型为E类型，如此处理而已。</p><p>　　在某些情况下，我们需要泛型数组，那该如何处理呢？代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不再初始化，由构造函数初始化</span>    <span class="token keyword">private</span> T t<span class="token punctuation">;</span>    <span class="token keyword">private</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> tArray<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造函数初始化</span>    <span class="token keyword">public</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> tType <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> tType<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tArray <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>tType<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　此时，运行就没有什么问题了，剩下的问题就是怎么在运行期获得T的类型，也就是tType参数，一般情况下泛型类型是无法获取的，不过，在客户端调用时多传输一个T类型的class就会解决问题。</p><p>　　类的成员变量是在类初始化前初始化的，所以要求在初始化前它必须具有明确的类型，否则就只能声明，不能初始化。</p><h3><span id="建议95强制声明泛型的实际类型">建议95：强制声明泛型的实际类型</span></h3><p>​    Arrays工具类有一个方法asList可以把一个变长参数或数组转变为列表，但是它有一个缺点：它所生成的list长度是不可变的，而这在我们的项目开发中有时会很不方便。如果你期望生成的列表长度可变，那就需要自己来写一个数组的工具类了，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ArrayUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把一个变长参数转化为列表，并且长度可变</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">asList</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　这很简单，与Arrays.asList的调用方式相同，我们传入一个泛型对象，然后返回相应的List，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 正常用法</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> ArrayUtils<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 参数为空</span>    List list2 <span class="token operator">=</span> ArrayUtils<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 参数为整型和浮点型的混合</span>    List list3 <span class="token operator">=</span> ArrayUtils<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　这里有三个变量需要说明：</p><p>(1)、变量list1：变量list1是一个常规用法，没有任何问题，泛型实际参数类型是String，返回结果就是一个容纳String元素的List对象。</p><p>(2)、变量list2：变量list2它容纳的是什么元素呢？我们无法从代码中推断出list2列表到底容纳的是什么元素(因为它传递的参数是空，编译器也不知道泛型的实际参数类型是什么)，不过，编译器会很聪明地推断出最顶层类Object就是其泛型类型，也就是说list2的完整定义如下：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list2 <span class="token operator">=</span> ArrayUtils<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　如此一来，编译器就不会给出” unchecked “警告了。现在新的问题又出现了：如果期望list2是一个Integer类型的列表，而不是Object列表，因为后续的逻辑会把Integer类型加入到list2中，那该如何处理呢？</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//　强制类型转换(把asList强制转换成List&lt;Integer>)？行不通，虽然Java泛型是编译期擦出的，但是List&lt;Object>和List&lt;Integer>没有继承关系，不能强制转换。　</span><span class="token comment" spellcheck="true">//重新声明一个List&lt;Integer>，然后读取List&lt;Object>元素，一个一个地向下转型过去？麻烦，而且效率又低。</span></code></pre><p>　  最好的解决办法是强制声明泛型类型，代码如下：　</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> intList <span class="token operator">=</span> ArrayUtils<span class="token punctuation">.</span>&lt;Integer<span class="token operator">></span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　就这么简单，asList方法要求的是一个泛型参数，那我们就在输入前定义这是一个Integer类型的参数，当然，输出也是Integer类型的集合了。</p><p>(3)、变量list3：变量list3有两种类型的元素：整数类型和浮点类型，那它生成的List泛型化参数应该是什么呢？是Integer和Float的父类Number？你太高看编译器了，它不会如此推断的，当它发现多个元素的实际类型不一致时就会直接确认泛型类型是Object，而不会去追索元素的公共父类是什么，但是对于list3，我们更期望它的泛型参数是Number，都是数字嘛，参照list2变量，代码修改如下：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Number<span class="token operator">></span> list3 <span class="token operator">=</span> ArrayUtils<span class="token punctuation">.</span>&lt;Number<span class="token operator">></span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　Number是Integer和Float的父类，先把三个输入参数、输出参数同类型，问题是我们要在什么时候明确泛型类型呢？一句话：无法从代码中推断出泛型的情况下，即可强制声明泛型类型。</p><h3><span id="建议96不同的场景使用不同的泛型通配符">建议96：不同的场景使用不同的泛型通配符</span></h3><p>​    　Java泛型支持通配符(Wildcard)，可以单独使用一个“?”表示任意类，也可以使用extends关键字表示某一个类(接口)的子类型，还可以使用super关键字表示某一个类(接口)的父类型，但问题是什么时候该用extends，什么该用super呢？</p><p>(1)、泛型结构只参与 “读” 操作则限定上界(extends关键字)</p><p>　　阅读如下代码，想想看我们的业务逻辑操作是否还能继续：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Object obj <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 业务逻辑操作</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　从List列表中读取元素的操作(比如一个数字列表中的求和计算)，你觉得方法read能继续写下去吗？</p><p>　　答案是：不能，我们不知道list到底存放的是什么元素，只能推断出E类型是父类，但问题是E类型的父类又是什么呢？无法再推断，只有运行期才知道，那么编码器就无法操作了。当然，你可以把它当做是Object类来处理，需要时再转换成E类型—这完全违背了泛型的初衷。在这种情况下，“读” 操作如果期望从List集合中读取数据就需要使用extends关键字了，也就是要界定泛型的上界，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>E e <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 业务逻辑操作</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    　此时，已经推断出List集合中取出的元素时E类型的元素。具体是什么类型的元素就要等到运行期才确定了，但它一定是一个确定的类型，比如read(Arrays.asList(“A”))调用该方法时，可以推断出List中的元素类型是String，之后就可以对List中的元素进行操作了。如加入到另外的List<e>中，或者作为Map&lt;E,V&gt;的键等。</e></p><p>(2)、泛型结构只参与“写” 操作则限定下界(使用super关键字)</p><p>　　先看如下代码能否编译：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//加入一个元素</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　编译失败，失败的原因是list中的元素类型不确定，也就是编译器无法推断出泛型类型到底是什么，是Integer类型？是Double？还是Byte？这些都符合extends关键字的定义，由于无法确定实际的泛型类型，所以编译器拒绝了此类操作。</p><p>　　在此种情况下，只有一个元素时可以add进去的：null值，这是因为null是一个万用类型，它可以是所有类的实例对象，所以可以加入到任何列表中。</p><p>　　Object是否可以？不可以，因为它不是Number子类，而且即使把List变量修改为List&lt;? extends Object&gt; 类型也不能加入，原因很简单，编译器无法推断出泛型类型，加什么元素都是无效的。</p><p>　　在这种“写”的操作的情况下，使用super关键字限定泛型的下界才是正道，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Number<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//加入元素</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　甭管它是Integer的123，还是浮点数3.14，都可以加入到list列表中，因为它们都是Number的类型，这就保证了泛型类的可靠性。</p><p>　　对于是要限定上界还是限定下界，JDK的Collections.copy方法是一个非常好的例子，它实现了把源列表的所有元素拷贝到目标列表中对应的索引位置上，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> dest<span class="token punctuation">,</span> List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> srcSize <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>srcSize <span class="token operator">></span> dest<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"Source does not fit in dest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>srcSize <span class="token operator">&lt;</span> COPY_THRESHOLD <span class="token operator">||</span>        <span class="token punctuation">(</span>src <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span> <span class="token operator">&amp;&amp;</span> dest <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>srcSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            dest<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> src<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ListIterator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> di<span class="token operator">=</span>dest<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListIterator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> si<span class="token operator">=</span>src<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>srcSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            di<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            di<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>si<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　源列表是用来提供数据的，所以src变量需要界定上界，要有extends关键字。目标列表是用来写数据的，所以dest变量需要界定下界，带有super关键字。</p><p>　　如果一个泛型结构既用作 “读” 操作又用作“写操作”，那该如何进行限定呢？不限定，使用确定的泛型类型即可，如List<e>.</e></p><h3><span id="建议97警惕泛型是不能协变和逆变的">建议97：警惕泛型是不能协变和逆变的</span></h3><p>　    什么叫协变和逆变？</p><p>　　在编程语言的类型框架中，协变和逆变是指宽类型和窄类型在某种情况下(如参数、泛型、返回值)替换或交换的特性，简单的说，协变是一个窄类型替换宽类型，而逆变则是用宽类型覆盖窄类型。其实，在Java中协变和逆变我们已经用了很久了，只是我们没发觉而已，看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Number <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　子类的doStuff方法返回值的类型比父类方法要窄，此时doStuff方法就是一个协变方法，同时根据Java的覆写定义来看，这又属于覆写。那逆变是怎么回事呢？代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span>Integer i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span>Number n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 　子类的doStuff方法的参数类型比父类要宽，此时就是一个逆变方法，子类扩大了父类方法的输入参数，但根据覆写的定义来看，doStuff不属于覆写，只是重载而已。由于此时的doStuff方法已经与父类没有任何关系了，只是子类独立扩展出的一个行为，所以是否声明为doStuff方法名意义不大，逆变已经不具有特别的意义了，我们重点关注一下协变，先看如下代码是否是协变：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Base base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　base变量是否发生了协变？是的，发生了协变，base变量是Base类型，它是父类，而其赋值却是在子类实例，也就是用窄类型覆盖了宽类型。这也叫多态，两者同含义。</p><p>　　说了这么多，下面再再来想想泛型是否支持协变和逆变呢，答案是：泛型既不支持协变，也不支持逆变。为什么会不支持呢？</p><p>(1)、泛型不支持协变：数组和泛型很相似，一个是中括号，一个是尖括号，那我们就以数组为参照对象，看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//数组支持协变</span>    Number <span class="token punctuation">[</span><span class="token punctuation">]</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//编译不通过，泛型不支持协变</span>    List<span class="token operator">&lt;</span>Number<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　ArrayList是List的子类型，Integer是Number的子类型，里氏替换原则在此行不通了，原因就是Java为了保证运行期的安全性，必须保证泛型参数的类型是固定的，所以它不允许一个泛型参数可以同时包含两种类型，即使是父子类关系也不行。</p><p>　　泛型不支持协变，但可以使用通配符模拟协变，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Number子类型(包括Number类型) 都可以是泛型参数类型</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　“ ? extends Number “ 表示的意思是，允许Number的所有子类(包括自身) 作为泛型参数类型，但在运行期只能是一个具体类型，或者是Integer类型，或者是Double类型，或者是Number类型，也就是说通配符只在编码期有效，运行期则必须是一个确定的类型。</p><p>(2)、泛型不支持逆变</p><p>　　java虽然允许逆变存在，但在对类型赋值上是不允许逆变的，你不能把一个父类实例对象赋给一个子类类型变量，泛型自然也不允许此种情况发生了。但是它可以使用super关键字来模拟实现，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Integer的父类型(包括Integer)都可以是泛型参数类型</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　“ ? super Integer “ 的意思是可以把所有的Integer父类型(自身、父类或接口) 作为泛型参数，这里看着就像是把一个Number类型的ArrayList赋值给了Integer类型的List，其外观类似于使用一个宽类型覆盖一个窄类型，它模拟了逆变的实现。</p><p>　　泛型既不支持协变，也不支持逆变，带有泛型参数的子类型定义与我们经常使用的类类型也不相同，其基本类型关系如下表所示：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/image-20211225195753140-16404334753096.png" alt="image-20211225195753140"></p><h3><span id="建议98采用顺序是list中泛型顺序依次为t-object">建议98：采用顺序是List中泛型顺序依次为T、?、Object</span></h3><pre class=" language-java"><code class="language-java">　<span class="token comment" spellcheck="true">//List&lt;T>、List&lt;?>、List&lt;Object>这三者都可以容纳所有的对象，但使用的顺序应该是首选List&lt;T>，次之List&lt;?>，最后选择List&lt;Object>，原因如下：</span></code></pre><p>(1)、List<t>是确定的某一个类型</t></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//　List&lt;T>表示的是List集合中的元素都为T类型，具体类型在运行期决定；List&lt;？>表示的是任意类型，与List&lt;T>类似，而List&lt;Object>则表示List集合中的所有元素为Object类型，因为Object是所有类的父类，所以List&lt;Object>也可以容纳所有的类类型，从这一字面意义上分析，List&lt;T>更符合习惯：编码者知道它是某一个类型，只是在运行期才确定而已。</span></code></pre><p>(2)List<t>可以进行读写操作</t></p><p>　　List<t>可以进行诸如add，remove等操作，因为它的类型是固定的T类型，在编码期不需要进行任何的转型操作。</t></p><p>　　List<t>是只读类型的，不能进行增加、修改操作，因为编译器不知道List中容纳的是什么类型的元素，也就无法校验类型是否安全了，而且List&lt;?&gt;读取出的元素都是Object类型的，需要主动转型，所以它经常用于泛型方法的返回值。注意List&lt;？&gt;虽然无法增加，修改元素，但是却可以删除元素，比如执行remove、clear等方法，那是因为它的删除动作与泛型类型无关。</t></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//　List&lt;Object> 也可以读写操作，但是它执行写入操作时需要向上转型(Up cast)，在读取数据的时候需要向下转型，而此时已经失去了泛型存在的意义了。</span><span class="token comment" spellcheck="true">//打个比方，有一个篮子用来容纳物品，比如西瓜，番茄等.List&lt;?>的意思是说，“嘿，我这里有一个篮子，可以容纳固定类别的东西，比如西瓜，番茄等”。List&lt;?>的意思是说：“嘿，我有一个篮子，我可以容纳任何东西，只要是你想得到的”。而List&lt;Object>就更有意思了，它说" 嘿，我也有一个篮子，我可以容纳所有物质，只要你认为是物质的东西都可以容纳进来 "。</span><span class="token comment" spellcheck="true">//推而广之，Dao&lt;T>应该比Dao&lt;？>、Dao&lt;Object>更先采用，Desc&lt;Person>则比Desc&lt;？>、Desc&lt;Object></span></code></pre><h3><span id="建议99严格限定泛型类型采用多重界限">建议99：严格限定泛型类型采用多重界限</span></h3><p>　　从哲学来说，很难描述一个具体的人，你可以描述他的长相、性格、工作等，但是人都是由多重身份的，估计只有使用多个And(与操作)将所有的描述串联起来才能描述一个完整的人，比如我，上班时我是一个职员，下班了坐公交车我是一个乘客，回家了我是父母的孩子，是儿子的父亲……角色时刻在变换。那如果我们要使用Java程序来对一类人进行管理，该如何做呢？比如在公交车费优惠系统中，对部分人员(如工资低于2500元的上班族并且是站立的乘客)车费打8折，该如何实现呢？</p><p>　　注意这里的类型参数有两个限制条件：一个为上班族；二为乘客。具体到我们的程序中就应该是一个泛型参数具有两个上界(Upper Bound)，首先定义两个接口及实现类，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Staff</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 工资</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Passenger</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 是否是站立状态</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isStanding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义我这个类型的人</span><span class="token keyword">class</span> <span class="token class-name">Me</span> <span class="token keyword">implements</span> <span class="token class-name">Staff</span><span class="token punctuation">,</span> Passenger <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isStanding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　“Me”这种类型的人物有很多，比如系统分析师也是一个职员，也坐公交车，但他的工资实现就和我不同，再比如Boss级的人物，偶尔也坐公交车，对大老板来说他也只是一个职员，他的实现类也不同，也就是说如果我们使用“T extends Me”是限定不了需求对象的，那该怎么办呢？可以考虑使用多重限定，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client99</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//工资低于2500的并且站立的乘客车票打8折</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Staff</span> <span class="token operator">&amp;</span> Passenger<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">discount</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2500</span> <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span><span class="token function">isStanding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 恭喜您，您的车票打八折!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">discount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　使用“&amp;”符号设定多重边界，指定泛型类型T必须是Staff和Passenger的共有子类型，此时变量t就具有了所有限定的方法和属性，要再进行判断就一如反掌了。在Java的泛型中，可以使用”&amp;”符号关联多个上界并实现多个边界限定，而且只有上界才有此限定，下界没有多重限定的情况。想想你就会明白：多个下界，编码者可自行推断出具体的类型，比如“? super Integer” 和 “? extends Double”,可以更细化为Number类型了，或者Object类型了，无需编译器推断了。</p><p>　　为什么要说明多重边界？是因为编码者太少使用它了，比如一个判断用户权限的方法，使用的是策略模式(Strategy Pattern) ,示意代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">UserHandler</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断用户是否有权限执行操作</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">permit</span><span class="token punctuation">(</span>T user<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Job<span class="token operator">></span> jobs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> iList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断 是否是管理员</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>Admin<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Admin admin <span class="token operator">=</span> <span class="token punctuation">(</span>Admin<span class="token punctuation">)</span> user<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断管理员是否有此权限</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断普通用户是否有此权限</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Job</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>　 此处进行了一次泛型参数类别判断，这里不仅仅违背了单一职责原则(Single Responsibility Principle)，而且让泛型很“汗颜” ：已经使用了泛型限定参数的边界了，还要进行泛型类型判断。事实上，使用多重边界可以很方便的解决此问题，而且非常优雅，建议大家 在开发中考虑使用多重限定。</p><h3><span id="建议100数组的真实类型必须是泛型类型的子类型">建议100：数组的真实类型必须是泛型类型的子类型</span></h3><p>　　List接口的toArray方法可以把一个集合转化为数组，但是使用不方便，toArray()方法返回的是一个Object数组，所以需要自行转变。toArray(T[] a)虽然返回的是T类型的数组，但是还需要传入一个T类型的数组，这也挺麻烦的，我们期望输入的是一个泛型化的List，这样就能转化为泛型数组了，来看看能不能实现，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    T<span class="token punctuation">[</span><span class="token punctuation">]</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　上面要输出的参数类型定义为Object数组，然后转型为T类型数组，之后遍历List赋值给数组的每个元素，这与ArrayList的toArray方法很类似(注意只是类似)，客户端的调用如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>String str <span class="token operator">:</span><span class="token function">toArray</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　编译没有任何问题，运行后出现如下异常：　　</p><pre class=" language-java"><code class="language-java">Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassCastException<span class="token operator">:</span> <span class="token punctuation">[</span>Ljava<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">;</span> cannot be cast to <span class="token punctuation">[</span>Ljava<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">;</span>    at com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>advice100<span class="token punctuation">.</span>Client100<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>Client100<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">)</span></code></pre><p>　　类型转换异常，也就是说不能把一个Object数组转换为String数组，这段异常包含了两个问题：</p><ul><li>为什么Object数组不能向下转型为String数组：数组是一个容器，只有确保容器内的所有元素类型与期望的类型有父子关系时才能转换，Object数组只能保证数组内的元素时Object类型，却不能确保它们都是String的父类型或子类，所以类型转换失败。</li><li>为什么是main方法抛出异常，而不是toArray方法：其实，是在toArray方法中进行的类型向下转换，而不是main方法中。那为什么异常会在main方法中抛出，应该在toArray方法的“ T[] t = (T[]) new Object[list.size()];”这段代码才对呀?那是因为泛型是类型擦除的，toArray方法经过编译后与如下代码相同：　　</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArrayTwo</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 此处的强制类型转换没必要存在，只是为了与源代码对比</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> <span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">toArrayTwo</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　阅读完此段代码后就很清楚了：toArray方法返回后进行一次类型转换，Object数组转换成了String数组，于是就报ClassCastException异常了。</p><p>　　Object数组不能转为String数组，T类型又无法在运行期获得，那该如何解决这个问题呢？其实，要想把一个Object数组转换为String数组，只要Object数组的实际类型也就是String就可以了，例如：　</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// objArray的实际类型和表面类型都是String数组</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 抛出ClassCastException</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strArray <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> objArray<span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//objs的真实类型是String数组，显示类型为Object数组</span>Object objs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>ss<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//顺利转换为String数组</span>String strs<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>objs<span class="token punctuation">;</span></code></pre><p>　　明白了这个问题，我们就把泛型数组声明为泛型的子类型吧！代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">,</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//声明并初始化一个T类型的数组</span>    T<span class="token punctuation">[</span><span class="token punctuation">]</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>tClass<span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　通过反射类Array声明了一个T类型的数组,由于我们无法在运行期获得泛型类型的参数，因此就需要调用者主动传入T参数类型。此时，客户端再调用就不会出现任何异常了。</p><p>　　在这里我们看到，当一个泛型类(特别是泛型集合)转变为泛型数组时，泛型数组的真实类型不能是泛型的父类型(比如顶层类Object)，只能是泛型类型的子类型(当然包括自身类型)，否则就会出现类型转换异常。</p><h3><span id="建议101注意class类的特殊性">建议101：注意Class类的特殊性</span></h3><p>　　Java语言是先把Java源文件编译成后缀为class的字节码文件，然后再通过ClassLoader机制把这些类文件加载到内存中，最后生成实例执行的，这是Java处理的基本机制，但是加载到内存中的数据的如何描述一个类的呢？比如在Dog.class文件中定义一个Dog类，那它在内存中是如何展现的呢？</p><p>　　Java使用一个元类(MetaClass)来描述加载到内存中的类数据，这就是Class类，它是一个描述类的类对象，比如Dog.class文件加载到内存中后就会有一个class的实例对象描述之。因为是Class类是“类中类”，也就有预示着它有很多特殊的地方：</p><ol><li><p>无构造函数：Java中的类一般都有构造函数，用于创建实例对象，但是Class类却没有构造函数，不能实例化，Class对象是在加载类时由Java虚拟机通过调用类加载器中的difineClass方法自动构造的。</p></li><li><p>可以描述基本类型：虽然8个基本类型在JVM中并不是一个对象，它们一般存在于栈内存中，但是Class类仍然可以描述它们，例如可以使用int.class表示int类型的类对象。</p></li><li><p>其对象都是单例模式：一个Class的实例对象描述一个类，并且只描述一个类，反过来也成立。一个类只有一个Class实例对象，如下代码返回的<strong>结果都为true</strong>：　</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 类的属性class所引用的对象与实例对象的getClass返回值相同</span><span class="token keyword">boolean</span> b1<span class="token operator">=</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b2<span class="token operator">=</span><span class="token string">"ABC"</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// class实例对象不区分泛型</span><span class="token keyword">boolean</span> b3<span class="token operator">=</span>ArrayList<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>　Class类是Java的反射入口，只有在获得了一个类的描述对象后才能动态的加载、调用，一般获得一个Class对象有三种途径：</p><ol><li><p>类属性方式：如String.class</p></li><li><p>对象的getClass方法，如new String().getClass()</p></li><li><p>forName方法加载：如Class.forName(“ java.lang.String”)</p><p>　获得了Class对象后，就可以通过getAnnotations()获得注解，通过getMethods()获得方法，通过getConstructors()获得构造函数等，这位后续的反射代码铺平了道路。</p></li></ol><h3><span id="建议102适时选择getdeclaredxxx和getxxx">建议102：适时选择getDeclaredXXX和getXXX</span></h3><p>　　Java的Class类提供了很多的getDeclaredXXX方法和getXXX方法，例如getDeclaredMethod和getMethod成对出现，getDeclaredConstructors和getConstructors也是成对出现，那这两者之间有什么差别呢？看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client102</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span>            SecurityException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 方法名称</span>        String methodName <span class="token operator">=</span> <span class="token string">"doStuff"</span><span class="token punctuation">;</span>        Method m1 <span class="token operator">=</span> Foo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        Method m2 <span class="token operator">=</span> Foo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//静态内部类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　此段代码运行后输出如下：</p><pre class=" language-java"><code class="language-java">Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NoSuchMethodException<span class="token operator">:</span> com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>advice102<span class="token punctuation">.</span>Client102$Foo<span class="token punctuation">.</span><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Class<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1622</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>advice102<span class="token punctuation">.</span>Client102<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>Client102<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>　　该异常是说m2变量的getMethod方法没有找到doStuff方法，明明有这个方法呀，为什么没有找到呢？这是因为getMethod方法获得的是所有public访问级别的方法，包括从父类继承的方法，而getDeclaredMethod获得的是自身类的方法，包括公用的(public)方法、私有(private)方法，而且不受限于访问权限。</p><p>　　其它的getDeclaredConstructors和getConstructors、getDeclaredFileds和getFields等于此相似。Java之所以如此处理，是因为反射本意只是正常代码逻辑的一种补充，而不是让正常代码逻辑发生翻天覆地的变化，所以public的属性和方法最容易获取，私有属性和方法也可以获取，但要限定本类。</p><p>　　那么问题来了：如果需要列出所有继承自父类的方法，该如何实现呢？简单，先获得父类，然后使用getDeclaredMethods，之后持续递归即可。</p><h3><span id="建议103反射访问属性或方法时将accessible设置为true">建议103：反射访问属性或方法时将Accessible设置为true</span></h3><p>　　Java中通过反射执行一个方法的过程如下：获取一个方法对象，然后根据isAccessible返回值确定是否能够执行，如果返回值为false则需要调用setAccessible（true），最后再调用invoke执行方法，具体如下：　</p><pre class=" language-java"><code class="language-java">Method method<span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检查是否可以访问</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">isAccessible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//执行方法</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​        此段代码已经成了习惯用法：通过反射方法执行方法时，必须在invoke之前检查Accessible属性。这是一个好习惯，也确实该如此，但方法对象的Accessible属性并不是用来决定是否可以访问的，看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Do Stuff..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　定义一个public类的public方法，这是一个没有任何限制的方法，按照我们对Java语言的理解，此时doStuff方法可以被任何一个类访问。我们编写一个客户端类来检查该方法是否可以反射执行：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span>SecurityException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span>IllegalArgumentException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 反射获取方法</span>    Method m <span class="token operator">=</span> Foo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"doStuff"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打印是否可以访问</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Accessible："</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">isAccessible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行方法</span>    m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　很简单的反射操作，获得一个方法，然后检查是否可以访问，最后执行方法输出。让我们来猜想一下结果：因为Foo类是public的，方法也是public的，全部都是最开放的访问权限Accessible也应该等于true。但是运行结果却是：</p><p>　　<strong>Accessible：false</strong><br>   <strong>Do Stuff…</strong></p><p>　　为什么Accessible属性会等于false？而且等于false还能执行？这是因为Accessible的属性并不是我们语法层级理解的访问权限，而是指是否更容易获得，是否进行安全检查。</p><p>　　我们知道，动态修改一个类或执行方法时都会受到Java安全体制的制约，而安全的处理是非常耗资源的(性能非常低)，因此对于运行期要执行的方法或要修改的属性就提供了Accessible可选项：由开发者决定是否要逃避安全体系的检查。</p><p>　　阅读源代码是最好的理解方式，我们来看AccessibleObject类的源代码，它提供了取消默认访问控制检查的功能。首先查看isAccessible方法，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessibleObject</span> <span class="token keyword">implements</span> <span class="token class-name">AnnotatedElement</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义反射的默认操作权限suppressAccessChecks</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">private</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>Permission ACCESS_PERMISSION <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ReflectPermission</span><span class="token punctuation">(</span><span class="token string">"suppressAccessChecks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//是否重置了安全检查，默认为false</span>    <span class="token keyword">boolean</span> override<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token keyword">protected</span> <span class="token function">AccessibleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//是否可以快速获取，默认是不能</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccessible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> override<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　AccessibleObject是Filed、Method、Constructor的父类，决定其是否可以快速访问而不进行访问控制检查，在AccessibleObject类中是以override变量保存该值的，但是具体是否快速执行时在Method的invoke方法中决定的，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span>InvocationTargetException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//见擦汗是否可以快速获取，其值是父类AccessibleObject的override变量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>override<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//不能快速获取，执行安全检查   </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Reflection<span class="token punctuation">.</span><span class="token function">quickCheckMemberAccess</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> caller <span class="token operator">=</span> Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkAccess</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    MethodAccessor ma <span class="token operator">=</span> methodAccessor<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// read volatile</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ma <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ma <span class="token operator">=</span> <span class="token function">acquireMethodAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//直接执行方法</span>    <span class="token keyword">return</span> ma<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> 　看了这段代码，大家就清楚了：Accessible属性只是用来判断是否需要进行安全检查的，如果不需要则直接执行，这就可以大幅度的提升系统性能了(当然了，取消了安全检查，也可以运行private方法、访问private属性的)。经过测试，在大量的反射情况下，设置Accessible为true可以提高性能20倍左右。</p><p>　　AccessibleObject的其它两个子类Field和Constructor与Method的情形类似：Accessible属性决定Field和Constructor是否受访问控制检查。我们在设置Field或执行Constructor时，务必要设置Accessible为true，这并不仅仅是因为操作习惯的问题，还是为我们的系统性能考虑。</p><h3><span id="建议104使用forname动态加载类文件">建议104：使用forName动态加载类文件</span></h3><p>　　动态加载(Dynamic Loading)是指在程序运行时加载需要的类库文件，对Java程序来说，一般情况下，一个类文件在启动时或首次初始化时会被加载到内存中，而反射则可以在运行时再决定是否需要加载一个类，比如从Web上接收一个String参数作为类名，然后在JVM中加载并初始化，这就是动态加载，此动态加载通常是通过Class.forName(String)实现的，只是这个forName方法到底是什么意思呢？</p><p>　　我们知道一个类文件只有在被加载到内存中才可能生成实例对象，也就是说一个对象的生成必然会经过两个步骤：</p><ul><li><p>加载到内存中生成Class的实例对象</p></li><li><p>通过new关键字生成实例对象</p><p>　如果我们使用的是import关键字产生的依赖包，JVM在启动时会自动加载所有的依赖包的类文件，这没有什么问题，如果好动态加载类文件，就要使用forName的方法了，但问题是我们为什么要使用forName方法动态加载一个类文件呢？那是因为我们不知道生成的实例对象是什么类型(如果知道就不用动态加载)，而且方法和属性都不可访问呀。问题又来了：动态加载的意义在什么地方呢？</p></li></ul><p>　　意义在于：加载一个类即表示要初始化该类的static变量，特别是static代码块，在这里我们可以做大量的工作，比如注册自己，初始化环境等，这才是我们要重点关注的逻辑，例如如下代码：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>advice103<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client103</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//动态加载</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.study.advice103.Utils"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Utils</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态代码块</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Do Something....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　注意看Client103类，我们并没有对Utils做任何初始化，只是通过forName方法加载了Utils类，但是却产生了一个“Do Something…..”的输出，这就是因为Utils类加载后，JVM会自动初始化其static变量和static静态代码块，这是类加载机制所决定的。</p><p>　　对于动态加载，最经典的应用是数据库驱动程序的加载片段，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//加载驱动</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql..jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String url<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/db?user=&amp;password="</span><span class="token punctuation">;</span>Connection conn <span class="token operator">=</span>DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>Statement stmt <span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　在没有Hibernate和Ibatis等ORM框架的情况下，基本上每个系统都会有这么一个JDBC链接类，然后提供诸如Query、Delete等的方法，大家有没有想过为什么要加上forName这句话呢？没有任何的输出呀，要它干什么用呢？事实上非常有用，我们看一下Driver的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Driver</span> <span class="token keyword">extends</span> <span class="token class-name">NonRegisteringDriver</span>    <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Driver</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token keyword">public</span> <span class="token function">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">throws</span> SQLException    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//静态代码块</span>    <span class="token keyword">static</span>     <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//把自己注册到DriverManager中</span>            DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span>SQLException E<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//异常处理</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　该程序的逻辑是这样的：数据库驱动程序已经由NonRegisteringDriver实现了，Driver类只是负责把自己注册到DriverManager中。当程序动态加载该驱动时，也就是执行到Class.forName(“com.mysql..jdbc.Driver”)时，Driver类会被加载到内存中，于是static代码块开始执行，也就是把自己注册到DriverManager中。</p><p>　　需要说明的是，forName只是把一个类加载到内存中，并不保证由此产生一个实例对象，也不会执行任何方法，之所以会初始化static代码，那是由类加载机制所决定的，而不是forName方法决定的。也就是说，如果没有static属性或static代码块，forName就是加载类，没有任何的执行行为。</p><p>　　<strong><font color="red">注意：forName只是加载类，并不执行任何代码。</font></strong></p><h3><span id="建议105动态加载不适合数组">建议105：动态加载不适合数组</span></h3><p>　上一个建议解释了为什么要用forName，本建议就来说说那些地方不适合动态加载。如果forName要加载一个类，那它首先必须是一个类___8个基本类型排除在外,它们不是一个具体的类；其次，它必须具有可追溯的类路径，否则就会报ClassNotFoundException。</p><p>　在Java中，数组是一个非常特殊的类，虽然它是一个类，但没有定义类类路径，例如这样的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>    String <span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String[]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　String []是一个类型声明，它作为forName的参数应该也是可行的吧！但是非常遗憾，其运行结果如下：</p><pre class=" language-java"><code class="language-java">Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassNotFoundException<span class="token operator">:</span> java<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Class<span class="token punctuation">.</span><span class="token function">forName0</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">186</span><span class="token punctuation">)</span></code></pre><p>　　产生ClassNotFoundException异常的原因是数组算是一个类，在声明时可以定义为String[]，但编译器编译后为不同的数组类型生成不同的类，具体如下表所示：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/image-20211225210357001-16404374389067.png" alt="image-20211225210357001"></p><p>　　在编码期，我们可以声明一个变量为String[]，但是经过编译后就成为了[Ljava.lang.String。明白了这一点，再根据以上的表格可知，动态加载一个对象数组只要加载编译后的数组对象就可以了，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//加载一个数组</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"[Ljava.lang.String;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载一个Long数组</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"[J"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　虽然以上代码可以加载一个数组类，但这是没有任何意义的，因为它不能产生一个数组对象，也就是说以上代码只是把一个String类型的数组类和Long类型的数组类加载到了内存中(如果内存中没有改类的话)，并不能通过newInstance方法生成一个实例对象，因为它没有定义数组的长度，在Java中数组是定长的，没有长度的数组是不允许存在的。</p><p>　　既然反射不能定义一个数组，那问题就来了：如何动态加载一个数组呢？比如依据输入动态生成一个数组。其实可以使用Array数组反射类动态加载，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 动态创建数组</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个多维数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　因为数组比较特殊，要想动态创建和访问数组，基本的反射是无法实现的，“上帝对你关闭一扇门，同时会为你打开一扇窗。”，于是Java就专门定义了一个Array数组反射工具类来实现动态探知数组的功能。</p><p>　　<strong><font color="red">注意：通过反射操作数组使用Array类，不要采用通用的反射处理API。</font></strong></p><h3><span id="建议106动态代理可以使代理模式更加灵活">建议106：动态代理可以使代理模式更加灵活</span></h3><p>　　Java的反射框架提供了动态代理(Dynamic Proxy)机制，允许在运行期对目标类生成代理，避免重复开发。我们知道一个静态代理是通过主题角色(Proxy)和具体主题角色(Real Subject)共同实现主题角色(Subject)的逻辑的，只是代理角色把相关的执行逻辑委托给了具体角色而已，一个简单的静态代理如下所示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义一个方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 具体主题角色</span><span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 实现方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实现具体业务逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 要代理那个实现类</span>    <span class="token keyword">private</span> Subject subject <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认被代理者</span>    <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通过构造函数传递被代理者</span>    <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>Subject _subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        subject <span class="token operator">=</span> _subject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 预处理</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// doSomething</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 善后处理</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// doSomething</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　这是一个简单的静态代理。Java还提供了java.lang.reflect.Proxy用于实现动态代理：只要提供一个抽象主题角色和具体主题角色，就可以动态实现其逻辑的，其实例代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义一个方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 具体主题角色</span><span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 实现方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实现具体业务逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SubjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 被代理的对象</span>    <span class="token keyword">private</span> Subject subject<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SubjectHandler</span><span class="token punctuation">(</span>Subject _subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        subject <span class="token operator">=</span> _subject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 预处理</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"预处理..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//直接调用被代理的方法</span>        Object obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 后处理</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后处理..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　注意这里没有代理主题角色，取而代之的是SubjectHandler 作为主要的逻辑委托处理，其中invoke方法是接口InvocationHandler定义必须实现的，它完成了对真实方法的调用。</p><p>　　我们来详细解释一下InvocationHandler接口，动态代理是根据被代理的接口生成的所有方法的，也就是说给定一个或多个接口，动态代理会宣称“我已经实现该接口下的所有方法了”，那大家想想看，动态代理是怎么才能实现接口中的方法呢？在默认情况下所有方法的返回值都是空的，是的，虽然代理已经实现了它，但是没有任何的逻辑含义，那怎么办？好办，通过InvocationHandler接口的实现类来实现，所有的方法都是由该Handler进行处理的，即所有被代理的方法都由InvocationHandler接管实际的处理任务。</p><p>　　我们开看看动态代理的场景，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//具体主题角色，也就是被代理类</span>    Subject subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//代理实例的处理Handler</span>    InvocationHandler handler <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SubjectHandler</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前加载器</span>    ClassLoader cl <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//动态代理</span>    Subject proxy <span class="token operator">=</span> <span class="token punctuation">(</span>Subject<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span>subject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行具体主题角色方法</span>    proxy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　此时就实现了，不用显式创建代理类即实现代理的功能，例如可以在被代理的角色执行前进行权限判断，或者执行后进行数据校验。</p><p>　　动态代理很容易实现通用的代理类，只要在InvocationHandler的invoke方法中读取持久化的数据即可实现，而且还能实现动态切入的效果，这也是AOP(Aspect Oriented Programming)变成理念。</p><h3><span id="建议107使用反射增加装饰模式的普适性">建议107：使用反射增加装饰模式的普适性</span></h3><p>　　装饰模式(Decorator Pattern)的定义是“动态的给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比于生成子类更为灵活”，不过，使用Java的动态代理也可以实现装饰模式的效果，而且其灵活性、适应性都会更强。</p><p>　　我们以卡通片《猫和老鼠》(Tom and Jerry)为例，看看如何包装小Jerry让它更强大。首先定义Jerry的类：老鼠（Rat类），代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Rat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Jerry will play with Tom ......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>　　接下来，我们要给Jerry增加一些能力，比如飞行，钻地等能力，当然使用继承也很容易实现，但我们这里只是临时的为Rat类增加这些能力，使用装饰模式更符合此处的场景，首先定义装饰类，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义某种能力</span><span class="token keyword">interface</span> <span class="token class-name">Feature</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//加载特性</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//飞行能力</span><span class="token keyword">class</span> <span class="token class-name">FlyFeature</span> <span class="token keyword">implements</span> <span class="token class-name">Feature</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加一对翅膀..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//钻地能力</span><span class="token keyword">class</span> <span class="token class-name">DigFeature</span> <span class="token keyword">implements</span> <span class="token class-name">Feature</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加钻地能力..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>　　此处定义了两种能力：一种是飞行，另一种是钻地，我们如果把这两种属性赋予到Jerry身上，那就需要一个包装动作类了，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DecorateAnimal</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 被包装的动物</span>    <span class="token keyword">private</span> Animal animal<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用哪一个包装器</span>    <span class="token keyword">private</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Feature</span><span class="token operator">></span> clz<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DecorateAnimal</span><span class="token punctuation">(</span>Animal _animal<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Feature</span><span class="token operator">></span> _clz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        animal <span class="token operator">=</span> _animal<span class="token punctuation">;</span>        clz <span class="token operator">=</span> _clz<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        InvocationHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 具体包装行为</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>                    <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                Object obj <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                animal<span class="token punctuation">.</span><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> obj<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前加载器</span>        ClassLoader cl <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态代理，又handler决定如何包装</span>        Feature proxy <span class="token operator">=</span> <span class="token punctuation">(</span>Feature<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> clz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　注意看doStuff方法，一个装饰类型必然是抽象构建(Component)的子类型，它必须实现doStuff方法，此处的doStuff方法委托给了动态代理执行，并且在动态代理的控制器Handler中还设置了决定装饰方式和行为的条件(即代码中InvocationHandler匿名类中的if判断语句)，当然，此处也可以通过读取持久化数据的方式进行判断，这样就更加灵活了。</p><p>　　抽象构建有了，装饰类也有了，装饰动作类也完成了，那我们就可以编写客户端进行调用了，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义Jerry这只老鼠</span>    Animal jerry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为Jerry增加飞行能力</span>    jerry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecorateAnimal</span><span class="token punctuation">(</span>jerry<span class="token punctuation">,</span> FlyFeature<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//jerry增加挖掘能力</span>    jerry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecorateAnimal</span><span class="token punctuation">(</span>jerry<span class="token punctuation">,</span> DigFeature<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Jerry开始戏弄毛了</span>    jerry<span class="token punctuation">.</span><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　此类代码只一个比较通用的装饰模式，只需要定义被装饰的类及装饰类即可，装饰行为由动态代理实现，实现了对装饰类和被装饰类的完全解耦，提供了系统的扩展性。</p><h3><span id="建议108反射让模板方法模式更强大">建议108：反射让模板方法模式更强大</span></h3><p>　　模板方法模式(Template Method Pattern)的定义是：定义一个操作中的算法骨架，将一些步骤延迟到子类中，使子类不改变一个算法的结构即可重定义该算法的某些特定步骤。简单的说，就是父类定义抽象模板作为骨架，其中包括基本方法(是由子类实现的方法，并且在模板方法中被调用)和模板方法（实现对基本方法的调度，完成固定的逻辑），它是用了简单的继承和覆写机制，我么来看一个基本的例子。</p><p>　　我们经常会开发一些测试或演示程序，期望系统在启动时自动初始化，以方便测试或讲解，一般的做法是写一个SQL文件，在系统启动前自动导入，不过，这样不仅麻烦而且容易出错，于是我们就手写了一个自动初始化数据的框架：在系统（或容器）自动启动时自行初始化数据。但问题是每个应用程序要初始化的内容我们并不知道，只能由实现者自行编写，那我们就必须给作者预留接口，此时就得考虑使用模板方法模式了，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbsPopulator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 模板方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">dataInitialing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用基本方法</span>        <span class="token function">doInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基本方法</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　    这里定义了一个抽象模板类AbsPopulator，它负责数据初始化，但是具体要初始化哪些数据则是由doInit方法决定的，这是一个抽象方法，子类必须实现，我们来看一个用户表数据的加载：　　</p><pre><code>public class UserPopulator extends AbsPopulator&#123;    @Override    protected void doInit() &#123;        //初始化用户表，如创建、加载数据等    &#125;&#125;</code></pre><p>　　该系统在启动时查找所有的AbsPopulator实现类，然后dataInitialing实现数据的初始化。那大家可能要想了，怎么让容器指导这个AbsPopulator类呢？很简单，如果是使用Spring作为Ioc容器的项目，直接在dataInitialing方法上加上@PostConstruct注解，Spring容器启动完毕后自动运行dataInitialing方法。具体大家看spring的相关知识，这里不再赘述。</p><p>　　现在问题是：初始化一张User表需要非常多的操作，比如先建表，然后筛选数据，之后插入，最后校验，如果把这些都放入到一个doInit方法里会非常庞大(即使提炼出多个方法承担不同的责任，代码的可读性依然很差)，那该如何做呢？又或者doInit是没有任何的也无意义的，是否可以起一个优雅而又动听的名字呢？</p><p>　　答案是我们可以使用反射增强模板方法模式，使模板方法实现对一批固定的规则的基本方法的调用。代码是最好的交流语言，我们看看怎么改造AbsPopulator类，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbsPopulator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 模板方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">dataInitialing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获得所有的public方法</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method m <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断是否是数据初始化方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInitDataMethod</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 判断是否是数据初始化方法，基本方法鉴定器</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isInitDataMethod</span><span class="token punctuation">(</span>Method m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// init开始</span>                <span class="token operator">&amp;&amp;</span> Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 公开方法</span>                <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Void<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回值是void</span>                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">isVarArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出参数为空</span>                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不能是抽象方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　在一般的模板方法模式中，抽象模板(这里是AbsPopulator类)需要定义一系列的基本方法，一般都是protected访问级别的，并且是抽象方法，这标志着子类必须实现这些基本方法，这对子类来说既是一个约束也是一个负担。但是使用了反射后，不需要定义任何抽象方法，只需要定义一个基本方法鉴定器(例子中的isInitDataMethod)即可加载符合规则的基本方法。鉴别器在此处的作用是鉴别子类方法中哪些是基本方法，模板方法(例子中的dataInitaling)则需要基本方法鉴定器返回的结果通过反射执行相应的方法。</p><p>　　此时，如果需要进行大量的初始化工作，子类的实现就非常简单了，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserPopulator</span> <span class="token keyword">extends</span> <span class="token class-name">AbsPopulator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 初始化用户表，如创建、加载数据等 */</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 初始化密码 */</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initJobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 初始化工作任务 */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　UserPopulator类中的方法只要符合基本方法鉴别器条件即会被模板方法调用，方法的数据量也不再受父类的约束，实现了子类灵活定义基本方法、父类批量调用的功能，并且缩减了子类的代码量。</p><p>　　如果大家熟悉JUnit的话，就会看出此处的实现与JUnit非常相似，JUnit4之前要求测试的方法名必须是以test开头的，并且无返回值、无参数，而且是public修饰，其实现的原理与此非常类似，大家有兴趣可以看看Junit的源码。</p><h3><span id="建议109不需要太多关注反射效率">建议109：不需要太多关注反射效率</span></h3><p>　　反射的效率是一个老生常谈的问题，有”经验” 的开发人员经常会使用这句话恐吓新人：反射的效率是非常低的，不到万不得已就不要使用。事实上，这句话前半句是对的，后半句是错的。</p><p>　　反射的效率相对于正常的代码执行确实低很多，但它是一个非常有效的运行期工具类，只要代码结构清晰、可读性好那就先开发起来，等到进行性能测试时证明此处性能确实有问题再修改也不迟(一般情况下，反射并不是性能的终极杀手，而代码结构混乱、可读性差则可能会埋下性能隐患)。我们看这样一个例子，在运行期获得泛型类的泛型，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Utils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获得一个泛型类的实际泛型类型</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getGenricClassType</span><span class="token punctuation">(</span>Class <span class="token class-name">clz</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Type type <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ParameterizedType pt <span class="token operator">=</span> <span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span> type<span class="token punctuation">;</span>            Type<span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> pt<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>types<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> types<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 若有多个泛型参数，依据位置索引返回</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> types<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　前面我们讲过，Java泛型只存在于编译器，那为什么这个工具类可以取得运行期的泛型类型呢?那是因为该工具只支持继承的泛型类，如果是在Java编译时已经确定了泛型类的类型参数，那当然可以通过泛型类获得了。例如有这样一个泛型类：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseDao</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获得T运行期的类型</span>    <span class="token keyword">private</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clz <span class="token operator">=</span> Utils<span class="token punctuation">.</span><span class="token function">getGenricClassType</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据主键获得一条记录</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clz<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//操作user表</span><span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDao</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p>　　对于UserDao类，编译器编译时已经明确了其参数类型是String，因此可以通过反射的方式来获取其类型，这也是getGenricClassType方法使用的场景。</p><p>　　BaseDao和UserDao是ORM中的常客，BaseDao实现对数据库的基本操作，比如增删改查，而UserDao则是一个比较具体的数据库操作，其作用是对User表进行操作，如果BaseDao能够提供足够多的基本方法，比如单表的增删改查，哪些与UserDao类似的BaseDao子类就可以省却大量的开发工作。但问题是持久层的session对象(这里模拟的是Hibernate 　Session)需要明确一个具体的类型才能操作，比如get查询，需要获得两个参数：实体类类型(用于确定映射的数据表)和主键，主键好办，问题是实体类类型怎么获得呢？</p><p>　　子类进行传递?麻烦，而且也容易产生错误。</p><p>　　读取配置问题？可行，但效率不高。</p><p>　　最好的办法就是父类泛型化，子类明确泛型参数，然后通过反射读取相应的类型即可，于是就有了我们代码中clz变量：通过反射获得泛型类型。如此实现后，UserDao可不用定义任何方法，继承过来的父类操作方法已经满足基本需求了，这样的代码结构清晰，可读性又好。</p><p>　　想想看，如果考虑反射效率问题，没有clz变量，不使用反射，每个BaseDao的子类都要实现一个查询操作，代码将会大量重复，违反了” Don’t Repeat Yourself “ 这条最基本的编码规则，这会致使项目重构、优化难度加大，代码的复杂度也会提高很多。</p><p>   对于反射效率的问题，不要做任何的提前优化和预期，这基本上是杞人忧天，很少有项目是因为反射问题引起系统效率故障的（除非是拷贝的垃圾代码），而且根据二八原则，80%的性能消耗在20%的代码上，这20%的代码才是我们关注的重点，不要单单把反射作为重点关注对象。</p><p>　　<strong><font color="red">注意：反射效率低是个真命题，但因为这一点而不使用它就是个假命题。</font></strong></p><h2><span id="第8章-异常">第8章 异常</span></h2><p>大成若缺，其用不弊。大盈若冲，其用不穷。——老子《道德经》</p><p>​        不管人类的思维有多么缜密，也存在“智者千虑必有一失”的缺憾。无论计算机技术怎么发展，也不可能穷尽所有的情景—这个世界是不完美的，是有缺陷的，完美的世界只存在于理想中。</p><p>​        对于软件帝国的缔造者来说，程序也是不完美的，异常情况随时都会出现，我们需要它为我们描述例外事件，需要它处理非预期的情景，需要它帮我们建立“完美世界”。</p><h3><span id="建议110提倡异常封装">建议110：提倡异常封装</span></h3><p>Java语言的异常处理机制可以去确保程序的健壮性，提高系统的可用率，但是Java API提供的异常都是比较低级的(这里的低级是指 “ 低级别的 “ 异常)，只有开发人员才能看的懂，才明白发生了什么问题。而对于终端用户来说，这些异常基本上就是天书，与业务无关，是纯计算机语言的描述，那该怎么办？这就需要我们对异常进行封装了。异常封装有三方面的优点：</p><p><strong>(1)、提高系统的友好性</strong></p><p>　　例如，打开一个文件，如果文件不存在，则回报FileNotFoundException异常，如果该方法的编写者不做任何处理，直接抛到上层，则会降低系统的友好性，代码如下所示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>    InputStream is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"无效文件.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 文件操作 */</span><span class="token punctuation">}</span></code></pre><p>　　此时doStuff的友好性极差，出现异常时(如果文件不存在)，该方法直接把FileNotFoundException异常抛到上层应用中(或者是最终用户)，而上层应用(或用户要么自己处理)，要么接着抛，最终的结果就是让用户面对着” 天书 “ 式的文字发呆，用户不知道这是什么问题，只是知道系统告诉他” 哦，我出错了，什么错误？你自己看着办吧 “。</p><p>　　解决办法就是封装异常，可以把异常的阅读者分为两类：开发人员和用户。开发人员查找问题，需要打印出堆栈信息，而用户则需要了解具体的业务原因，比如文件太大、不能同时编写文件等，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doStuff2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MyBussinessException<span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        InputStream is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"无效文件.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方便开发人员和维护人员而设置的异常信息</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//抛出业务异常</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyBussinessException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 文件操作 */</span><span class="token punctuation">}</span></code></pre><p><strong>(2)、提高系统的可维护性</strong></p><p>　　看如下代码：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">doStuff3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//doSomething</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>　　这是大家很容易犯的错误，抛出异常是吧?分类处理多麻烦，就写一个catch块来处理所有的异常吧，而且还信誓旦旦的说” JVM会打印出栈中的错误信息 “，虽然这没错，但是该信息只有开发人员自己看的懂，维护人员看到这段异常时基本上无法处理，因为需要到代码逻辑中去分析问题。</p><p>　　正确的做法是对异常进行分类处理，并进行封装输出，代码如下：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">doStuff4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//doSomething</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>FileNotFoundException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"文件未找到，使用默认配置文件...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>SecurityException e1<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" 无权访问，可能原因是......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　如此包装后，维护人员看到这样的异常就有了初步的判断，或者检查配置，或者初始化环境，不需要直接到代码层级去分析了。</p><p><strong>(3)、解决Java异常机制自身的缺陷</strong></p><p>　　Java中的异常一次只能抛出一个，比如doStuff方法有两个逻辑代码片段，如果在第一个逻辑片段中抛出异常，则第二个逻辑片段就不再执行了，也就无法抛出第二个异常了，现在的问题是：如何才能一次抛出两个(或多个)异常呢？</p><p>　　其实，使用自行封装的异常可以解决该问题，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 容纳所有的异常</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Throwable<span class="token operator">></span> causes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Throwable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造函数，传递一个异常列表</span>    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token operator">></span> _causes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        causes<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>_causes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 读取所有的异常</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Throwable<span class="token operator">></span> <span class="token function">getExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> causes<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　MyException异常只是一个异常容器，可以容纳多个异常，但它本身并不代表任何异常含义，它所解决的是一次抛出多个异常的问题，具体调用如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MyException <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Throwable<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Throwable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第一个逻辑片段</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Do Something</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第二个逻辑片段</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Do Something</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 检查是否有必要抛出异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　这样一来，DoStuff方法的调用者就可以一次获得多个异常了，也能够为用户提供完整的例外情况说明。可能有人会问：这种情况会出现吗？怎么回要求一个方法抛出多个异常呢？</p><p>　　绝对有可能出现，例如Web界面注册时，展现层依次把User对象传递到逻辑层，Register方法需要对各个Field进行校验并注册，例如用户名不能重复，密码必须符合密码策略等，不要出现用户第一次提交时系统显示” 用户名重复 “，在用户修改用户名再次提交后，系统又提示” 密码长度小于6位 “ 的情况，这种操作模式下的用户体验非常糟糕，最好的解决办法就是异常封装，建立异常容器，一次性地对User对象进行校验，然后返回所有的异常。</p><h3><span id="建议111采用异常链传递异常">建议111：采用异常链传递异常</span></h3><p>　　设计模式中有一个模式叫做责任链模式(Chain of Responsibility) ,它的目的是将多个对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止，异常的传递处理也应该采用责任链模式。</p><p>　　上一建议中我们提出了异常需要封装，但仅仅封装还是不够的，还需要传递异常。我们知道，一个系统友好性的标志是用户对该系统的” 粘性”，粘性越高，系统越友好，粘性越低系统友好性越差，那问题是怎么提高系统的“粘性”呢？友好的界面和功能是一个方面，另外一个方面就是系统出现非预期情况的处理方式了。</p><p>　　比如我们的JavaEE项目一般都有三层结构：持久层，逻辑层，展现层，持久层负责与数据库交互，逻辑层负责业务逻辑的实现，展现层负责UI数据库的处理，有这样一个模块：用户第一次访问的时候，需要从持久层user.xml中读取信息，如果该文件不存在则提示用户创建之，那问题来了：如果我们直接把持久层的异常FileNotFoundException抛弃掉，逻辑层根本无法得知发生了何事，也就不能为展现层提供一个友好的处理结果了，最终倒霉的就是发展层：没有办法提供异常信息，只能告诉用户说“出错了，我也不知道出什么错了”___毫无友好性可言。</p><p>　　正确的做法是先封装，然后传递，过程如下：</p><p>(1)、把FIleNotFoundException封装为MyException。</p><p>(2)、抛出到逻辑层，逻辑层根据异常代码(或者自定义的异常类型)确定后续处理逻辑，然后抛出到展现层。</p><p>(3)、展现层自行决定要展现什么，如果是管理员则可以展现低层级的异常，如果是普通用户则展示封装后的异常。</p><p>　　明白了异常为什么要传递，那接着的问题就是如何传递了。很简单，使用异常链进行异常的传递，我们以IOException为例来看看是如何传递的，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IOException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">IOException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义异常原因</span>    <span class="token keyword">public</span> <span class="token function">IOException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义异常原因，并携带原始异常</span>    <span class="token keyword">public</span> <span class="token function">IOException</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//保留原始异常信息</span>    <span class="token keyword">public</span> <span class="token function">IOException</span><span class="token punctuation">(</span>Throwable cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　在IOException的构造函数中，上一个层级的异常可以通过异常链进行传递，链中传递异常的代码如下所示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//doSomething</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　捕捉到Exception异常，然后把它转化为IOException异常并抛出(此种方式也叫作异常转译)，调用者获得该异常后再调用getCause方法即可获得Exception的异常信息，如此即可方便地查找到产生异常的基本信息，便于解决问题。</p><p>　　结合上一建议来说，异常需要封装和传递，我们在进行系统开发时不要” 吞噬 “ 异常，也不要赤裸裸的抛出异常，封装后再抛出，或者通过异常链传递，可以达到系统更健壮，更友好的目的。</p><h3><span id="建议112受检异常尽可能转化为非受检异常">建议112：受检异常尽可能转化为非受检异常</span></h3><p>　为什么说是” 尽可能”的转化呢？因为” 把所有的受检异常(Checked Exception)”都转化为非受检异常(Unchecked Exception)” 这一想法是不现实的：受检异常是正常逻辑的一种补偿手段，特别是对可靠性要求比较高的系统来说，在某些条件下必须抛出受检异常以便由程序进行补偿处理，也就是说受检异常有合理存在的理由，那为什么要把受检异常转化为非受检异常呢？难道说受检异常有什么缺陷或者不足吗？是的，受检异常确实有不足的地方：</p><p><strong>(1)、受检异常使接口声明脆弱</strong></p><p>　　OOP(Object Oriented Programming,面向对象程序设计) 要求我们尽量多地面向接口编程，可以提高代码的扩展性、稳定性等，但是涉及异常问题就不一样了，例如系统初期是这样设计一个接口的：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//修改用户密码，抛出安全异常</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changePassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MySecurityException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　随着系统的开发，User接口有了多个实现者，比如普通的用户UserImpl、模拟用户MockUserImpl(用作测试或系统管理)、非实体用户NonUserImpl(如自动执行机，逻辑处理器等)，此时如果发现changePassword方法可能还需要抛出RejectChangeException(拒绝修改异常，如自动执行正在处理的任务时不能修改其代码)，那就需要修改User接口了：changePassword方法增加抛出RejectChangeException异常，这会导致所有的User调用者都要追加了对RejectChangeException异常问题的处理。</p><p>　　这里产生了两个问题：一、 异常是主逻辑的补充逻辑，修改一个补充逻辑，就会导致主逻辑也被修改，也就是出现了实现类 “ 逆影响 “ 接口的情景，我们知道实现类是不稳定的，而接口是稳定的，一旦定义了异常，则增加了接口的不稳定性，这是面向对象设计的严重亵渎；二、实现的变更最终会影响到调用者，破坏了封装性，这也是迪米特法则所不能容忍的。</p><p><strong>(2)、受检异常使代码的可读性降低</strong></p><p>　　一个方法增加可受检异常，则必须有一个调用者对异常进行处理，比如无受检异常方法doStuff是这样调用的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　doStuff方法一旦增加受检异常就不一样了，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　doStuff方法增加了throws Exception，调用者就必须至少增加4条语句来处理该异常，代码膨胀许多，可读性也降低了，特别是在多个异常需要捕捉的情况下，多个catch块多个异常处理，而且还可能在catch块中再次抛出异常，这大大降低了代码的可读性。</p><p><strong>(3)、受检异常增加了开发工作量</strong></p><p>　　我们知道，异常需要封装和传递，只有封装才能让异常更容易理解，上层模块才能更好的处理，可这会导致低层级的异常没玩没了的封装，无端加重了开发的工作量。比如FileNotFoundException进行封装，并抛出到上一个层级，于是增加了开发工作量。</p><p>　　受检异常有这么多的缺点，那有没有什么方法可以避免或减少这些缺点呢？有，很简单的一个规则：将受检异常转化为非受检异常即可，但是我们也不能把所有的受检异常转化为非受检异常，原因是在编码期上层模块不知道下层模块会抛出何种非受检异常，只有通过规则或文档来描述，可以这样说：　</p><ul><li>受检异常提出的是” 法律下的自由 “，必须遵守异常的约定才能自由编写代码。</li><li>非受检异常则是“ 协约性质的自由 ”，你必须告诉我你要抛什么异常，否则不会处理。</li></ul><p>　　以User接口为例，我们在声明接口时不再声明异常，而是在具体实现时根据不同的情况产生不同的非受检异常，这样持久层和逻辑层抛出的异常将会由展现自行决定如何展示，不再受异常的规则约束了，大大简化开发工作，提高了代码的可读性。</p><p>　　那问题又来了，在开发和设计时什么样的受检异常有必要化为非受检异常呢？” 尽可能 “ 是以什么作为判断依据呢？受检异常转换为非受检异常是需要根据项目的场景来决定的，例如同样是刷卡，员工拿着自己的工卡到考勤机上打考勤，此时如果附近有磁性物质干扰，则考勤机可以把这种受检异常转化为非受检异常，黄灯闪烁后不做任何记录登记，因为考勤失败这种情景不是” 致命 “的业务逻辑，出错了，重新刷一下即可。但是到银行网点取钱就不一样了，拿着银行卡到银行取钱，同样有磁性物质干扰，刷不出来，那这种异常就必须登记处理，否则会成为威胁银行卡安全的事件。汇总成一句话：当受检异常威胁到了系统的安全性，稳定性，可靠性、正确性时，则必须处理，不能转化为非受检异常，其它情况则可以转化为非受检异常。</p><p>　　注意：受检异常威胁到系统的安全性，稳定性、可靠性、正确性时，不能转换为非受检异常。</p><h3><span id="建议113不要在finally块中处理返回值">建议113：不要在finally块中处理返回值</span></h3><p>　在finally代码块中处理返回值，这是考试和面试中经常出现的题目。虽然可以以此来出考试题，但在项目中绝对不能再finally代码块中出现return语句，这是因为这种处理方式非常容易产生” 误解 “，会误导开发者。例如如下代码：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client113</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这里是永远不会到达的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//该方法抛出受检异常</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token keyword">int</span> _p<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_p <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DataFormatException</span><span class="token punctuation">(</span><span class="token string">" 数据格式错误 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> _p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 异常处理</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　对于这段代码，有两个问题：main方法中的doStuff方法的返回值是什么？doStuff方法永远都不会抛出异常吗？</p><p>　　答案是：doStuff(-1)的值是-1，doStuff(100)的值也是-1，调用doStuff方法永远都不会抛出异常，有这么神奇？原因就是我们在finally代码块中加入了return语句，而这会导致出现以下两个问题：</p><p><strong>(1)、覆盖了try代码块中的return返回值</strong></p><p>　　当执行doStuff(-1)时，doStuff方法产生了DataFormatException异常，catch块在捕捉此异常后直接抛出，之后代码执行到finally代码块，就会重置返回值，结果就是-1了。也就是出现先返回，再重置返回的情况。</p><p>　　有人可能会思考，是不是可以定义变量，在finally中修改后return呢？代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 重新修改一下返回值</span>        a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　该方法的返回值永远是1，不会是-1或0(为什么不会执行到” return 0 “ 呢？原因是finally执行完毕后该方法已经有返回值了，后续代码就不会再执行了)，这都是源于异常代码块的处理方式，在代码中try代码块就标志着运行时会有一个Throwale线程监视着该方法的运行，若出现异常，则交由异常逻辑处理。</p><p>　　我们知道方法是在栈内存中运行的，并且会按照“ 先进后出 ”的原则执行，main方法调用了doStuff方法，则main方法在下层，doStuff方法在上层，当doStuff方法执行完” return a “ 时，此方法的返回值已经确定int类型1(a变量的值，注意基本类型都是拷贝值，而不是引用)，此时finally代码块再修改a的值已经与doStuff返回者没有任何关系了，因此该方法永远都会返回1.</p><p>　　继续追问，那是不是可以在finally代码块中修改引用类型的属性以达到修改返回值的效果呢？代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Person <span class="token function">doStuffw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> person<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 重新修改一下值</span>        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> person<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　此方法的返回值永远都是name为李四的Person对象，原因是Person是一个引用对象，在try代码块中的返回值是Person对象的地址，finally中再修改那当然会是李四了。</p><p><strong>(2)、屏蔽异常</strong></p><p>　　为什么明明把异常throw出去了，但main方法却捕捉不到呢？这是因为异常线程在监视到有异常发生时，就会登记当前的异常类型为DataFormatException，但是当执行器执行finally代码块时，则会重新为doStuff方法赋值，也就是告诉调用者” 该方法执行正确，没有产生异常，返回值为1 “，于是乎，异常神奇的消失了，其简化代码如下所示：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//正常抛出异常</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//告诉JVM：该方法正常返回</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这里是永远不会到达的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　上面finally代码块中的return已经告诉JVM：doSomething方法正常执行结束，没有异常，所以main方法就不可能获得任何异常信息了。这样的代码会使可读性大大降低，读者很难理解作者的意图，增加了修改的难度。</p><p>　　在finally中处理return返回值，代码看上去很完美，都符合逻辑，但是执行起来就会产生逻辑错误，最重要的一点是finally是用来做异常的收尾处理的，一旦加上了return语句就会<strong>让程序的复杂度徒然上升</strong>，而且会产生一些隐蔽性非常高的错误。</p><p>　　与return语句相似，System.exit(0)或RunTime.getRunTime().exit(0)出现在异常代码块中也会产生非常多的错误假象，增加代码的复杂性，大家有兴趣可以自行研究一下.</p><p>　　<strong><font color="red">注意：不要在finally代码块中出现return语句.</font></strong></p><h3><span id="建议114不要在构造函数中抛出异常">建议114：不要在构造函数中抛出异常</span></h3><p>　　Java异常的机制有三种：</p><ul><li>Error类及其子类表示的是错误，它是不需要程序员处理也不能处理的异常，比如VirtualMachineError虚拟机错误，ThreadDeath线程僵死等。</li><li>RunTimeException类及其子类表示的是非受检异常，是系统可能会抛出的异常，程序员可以去处理，也可以不处理，最经典的就是NullPointException空指针异常和IndexOutOfBoundsException越界异常。</li><li>Exception类及其子类(不包含非受检异常)，表示的是受检异常，这是程序员必须处理的异常，不处理则程序不能通过编译，比如IOException表示的是I/O异常，SQLException表示的数据库访问异常。　　</li></ul><p>我们知道，一个对象的创建过程经过内存分配，静态代码初始化、构造函数执行等过程，对象生成的关键步骤是构造函数，那是不是也允许在构造函数中抛出异常呢？从Java语法上来说，完全可以在构造函数中抛出异常，三类异常都可以，但是从系统设计和开发的角度来分析，则尽量不要在构造函数中抛出异常，我们以三种不同类型的异常来说明之。</p><p><strong>(1)、构造函数中抛出错误是程序员无法处理的</strong></p><p>　　在构造函数执行时，若发生了VirtualMachineError虚拟机错误，那就没招了，只能抛出，程序员不能预知此类错误的发生，也就不能捕捉处理。</p><p><strong>(2)、构造函数不应该抛出非受检异常</strong></p><p>　　我们来看这样一个例子，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> _age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 不满18岁的用户对象不能建立</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"年龄必须大于18岁."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSomething......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　这段代码的意图很明显，年龄不满18岁的用户不会生成一个Person实例对象，没有对象，类行为doSomething方法就不可执行，想法很好，但这会导致不可预测的结果，比如我们这样引用Person类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person p <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*其它的业务逻辑*/</span><span class="token punctuation">}</span></code></pre><p>　　很显然，p对象不能建立，因为是一个RunTimeException异常，开发人员可以捕捉也可以不捕捉，代码看上去逻辑很正确，没有任何瑕疵，但是事实上，这段程序会抛出异常，无法执行。这段代码给了我们两个警示：</p><ol><li><strong>加重了上层代码编写者的负担</strong>：捕捉这个RuntimeException异常吧，那谁来告诉我有这个异常呢？只有通过文档约束了，一旦Person类的构造函数经过重构后再抛出其它非受检异常，那main方法不用修改也是可以测试通过的，但是这里就可能会产生隐藏的缺陷，而写还是很难重现的缺陷。不捕捉这个RuntimeException异常，这个是我们通常的想法，既然已经写成了非受检异常，main方法的编码者完全可以不处理这个异常嘛，大不了不执行Person的方法！这是非常危险的，一旦产生异常，整个线程都不再继续执行，或者链接没有关闭，或者数据没有写入数据库，或者产生内存异常，这些都是会对整个系统产生影响。</li><li><strong>后续代码不会执行</strong>：main方法的实现者原本是想把p对象的建立作为其代码逻辑的一部分，执行完doSomething方法后还需要完成其它逻辑，但是因为没有对非受检异常进行捕捉，异常最终会抛出到JVM中，这会导致整个线程执行结束后，后面所有的代码都不会继续执行了，这就对业务逻辑产生了致命的影响。</li></ol><p><strong>(3)、构造函数尽可能不要抛出受检异常</strong></p><p>　　我们来看下面的例子，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//父类</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 父类抛出IOException</span>    <span class="token keyword">public</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 子类抛出Exception异常</span>    <span class="token keyword">public</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　就这么一段简单的代码，展示了在构造函数中抛出受检异常的三个不利方面：</p><ol><li><strong>导致子类膨胀</strong>：在我们的例子中子类的无参构造函数不能省略，原因是父类的无参构造函数抛出了IOException异常，子类的无参构造函数默认调用的是父类的构造函数，所以子类无参构造函数也必须抛出IOException或其父类。</li><li><strong>违背了里氏替换原则</strong>：”里氏替换原则” 是说父类能出现的地方子类就可以出现，而且将父类替换为子类也不会产生任何异常。那我们回头看看Sub类是否可以替换Base类，比如我们的上层代码是这样写的：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Base base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　然后，我们期望把new Base()替换成new Sub()，而且代码能够正常编译和运行。非常可惜，编译不通过，原因是Sub的构造函数抛出了Exception异常，它比父类的构造函数抛出更多的异常范围要宽，必须增加新的catch块才能解决。　　</p><p>　　可能大家要问了，为什么Java的构造函数允许子类的构造函数抛出更广泛的异常类呢？这正好与类方法的异常机制相反，类方法的异常是这样要求的：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 父类</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 父类方法抛出Exception</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子类</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 父类方法抛出Exception</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　子类的方法可以抛出多个异常，但都必须是覆写方法的子类型，对我们的例子来说，Sub类的testMethod方法抛出的异常必须是Exception的子类或Exception类，这是Java覆写的要求。构造函数之所以于此相反，是因为构造函数没有覆写的概念，只是构造函数间的引用调用而已，所以在构造函数中抛出受检异常会违背里氏替换原则原则，使我们的程序缺乏灵活性。</p><p>　　<strong>3.子类构造函数扩展受限：</strong>子类存在的原因就是期望实现扩展父类的逻辑，但父类构造函数抛出异常却会让子类构造函数的灵活性大大降低，例如我们期望这样的构造函数。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 父类</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子类</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//异常处理后再抛出</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//收尾处理</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　很不幸，这段代码编译不通过，原因是构造函数Sub没有把super()放在第一句话中，想把父类的异常重新包装再抛出是不可行的(当然，这里有很多种 “曲线” 的实现手段，比如重新定义一个方法，然后父子类的构造函数都调用该方法，那么子类构造函数就可以自由处理异常了)，这是Java语法机制。</p><p>　　将以上三种异常类型汇总起来，对于构造函数，错误只能抛出，这是程序人员无能为力的事情；非受检异常不要抛出，抛出了 “ 对己对人 “ 都是有害的；受检异常尽量不抛出，能用曲线的方式实现就用曲线方式实现，总之一句话：在构造函数中尽可能不出现异常。</p><p>　　<strong><font color="red">注意 ：在构造函数中不要抛出异常，尽量曲线实现。</font></strong></p><h3><span id="建议115使用throwable获得栈信息">建议115：使用Throwable获得栈信息</span></h3><p>​    AOP编程可以很轻松的控制一个方法调用哪些类，也能够控制哪些方法允许被调用，一般来说切面编程(比如AspectJ)，只能控制到方法级别，不能实现代码级别的植入(Weave)，比如一个方法被类A的m1方法调用时返回1，在类B的m2方法调用时返回0(同参数情况下)，这就要求被调用者具有识别调用者的能力。在这种情况下，可以使用Throwable获得栈信息，然后鉴别调用者并分别输出，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取得当前栈信息</span>        StackTraceElement<span class="token punctuation">[</span><span class="token punctuation">]</span> sts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Throwable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 检查是否是methodA方法调用</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>StackTraceElement st <span class="token operator">:</span> sts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"methodA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用者</span><span class="token keyword">class</span> <span class="token class-name">Invoker</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//该方法打印出true</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//该方法打印出false</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　注意看Invoker类，两个方法methodA和methodB都调用了Foo的method方法，都是无参调用，返回值却不同，这是我们的Throwable类发挥效能了。JVM在创建一本Throwable类及其子类时会把当前线程的栈信息记录下来，以便在输出异常时准确定位异常原因，我们来看Throwable源代码。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Throwable</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> StackTraceElement<span class="token punctuation">[</span><span class="token punctuation">]</span> UNASSIGNED_STACK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StackTraceElement</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//出现异常记录的栈帧</span>    <span class="token keyword">private</span> StackTraceElement<span class="token punctuation">[</span><span class="token punctuation">]</span> stackTrace <span class="token operator">=</span> UNASSIGNED_STACK<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认构造函数</span>    <span class="token keyword">public</span> <span class="token function">Throwable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//记录栈帧</span>        <span class="token function">fillInStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//本地方法，抓取执行时的栈信息</span>    <span class="token keyword">private</span> <span class="token keyword">native</span> Throwable <span class="token function">fillInStackTrace</span><span class="token punctuation">(</span><span class="token keyword">int</span> dummy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> Throwable <span class="token function">fillInStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stackTrace <span class="token operator">!=</span> null <span class="token operator">||</span> backtrace <span class="token operator">!=</span> null <span class="token comment" spellcheck="true">/* Out of protocol state */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fillInStackTrace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stackTrace <span class="token operator">=</span> UNASSIGNED_STACK<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　在出现异常时(或主动声明一个Throwable对象时)，JVM会通过fillInStackTrace方法记录下栈帧信息，然后生成一个Throwable对象，这样我们就可以知道类间的调用顺序，方法名称及当前行号等了。</p><p>　　获得栈信息可以对调用者进行判断，然后决定不同的输出，比如我们的methodA和methodB方法，同样地输入参数，同样的调用方法，但是输出却不同，这看起来很想是一个bug：方法methodA调用method方法正常显示，而方法methodB调用却会返回错误数据，因此我们虽然可以根据调用者的不同产生不同的逻辑，但这仅局限在对此方法的广泛认知上，更多的时候我们使用method方法的变形体，代码如下:　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取得当前栈信息</span>        StackTraceElement<span class="token punctuation">[</span><span class="token punctuation">]</span> sts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Throwable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 检查是否是methodA方法调用</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>StackTraceElement st <span class="token operator">:</span> sts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"methodA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"除了methodA方法外，该方法不允许其它方法调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　只是把“return false” 替换成了一个运行期异常，除了methodA方法外，其它方法调用都会产生异常，该方法常用作离线注册码校验，让破解者视图暴力破解时，由于执行者不是期望的值，因此会返回一个经过包装和混淆的异常信息，大大增加了破解难度。</p><h3><span id="建议116异常只为异常服务">建议116：异常只为异常服务</span></h3><p>​    　异常只为异常服务，这是何解？难道异常还能为其它服务不成？确实能，异常原本是正常逻辑的一个补充，但是有时候会被当做主逻辑使用，看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//判断一个枚举是否包含String枚举项</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">boolean</span> <span class="token function">Contain</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clz<span class="token punctuation">,</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        Enum<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>clz<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>RuntimeException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//只要是抛出异常，则认为不包含</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　判断一个枚举是否包含指定的枚举项，这里会根据valueOf方法是否抛出异常来进行判断，如果抛出异常(一般是IllegalArgumentException异常)，则认为是不包含，若不抛出异常则可以认为包含该枚举项，看上去这段代码很正常，但是其中有是哪个错误：</p><ol><li><strong>异常判断降低了系统的性能</strong></li><li><strong>降低了代码的可读性，只有详细了解valueOf方法的人才能读懂这样的代码，因为valueOf抛出的是一个非受检异常</strong></li><li><strong>隐藏了运行期可能产生的错误，catch到异常，但没有做任何处理。</strong></li></ol><p>　　我们这段代码是用一段异常实现了一个正常的业务逻辑，这导致代码产生了坏味道。要解决从问题也很容易，即不在主逻辑中实使用异常，代码如下：　　</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 判断一个枚举是否包含String枚举项</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">boolean</span> <span class="token function">Contain</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clz<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 遍历枚举项</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> clz<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 枚举项名称是否相等</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　异常只能用在非正常的情况下，不能成为正常情况下的主逻辑，也就是说，异常是是主逻辑的辅助场景，不能喧宾夺主。</p><p>　　而且，异常虽然是描述例外事件的，但能避免则避免之，除非是确实无法避免的异常，例如：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 其它业务处理</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 异常处理</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　这样一段代码经常在我们的项目中出现，但经常写并不代表不可优化，这里的异常类FileNotFoundException完全可以在它诞生前就消除掉：先判断文件是否存在，然后再生成FileInputStream对象，这也是项目中常见的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 经常出现的异常，可以先做判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 其它业务处理</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 异常处理</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　虽然增加了if判断语句，增加了代码量，但是却减少了FileNotFoundException异常出现的几率，提高了程序的性能和稳定性。</p><h3><span id="建议117多使用异常把性能问题放一边">建议117：多使用异常，把性能问题放一边</span></h3><p>　　我们知道异常是主逻辑的例外逻辑，举个简单的例子来说，比如我在马路上走(这是主逻辑)，突然开过一辆车，我要避让(这是受检异常，必须处理)，继续走着，突然一架飞机从我头顶飞过(非受检异常)，我们可以选在继续行走(不捕捉)，也可以选择指责其噪音污染(捕捉，主逻辑的补充处理)，再继续走着，突然一颗流星砸下来，这没有选择，属于错误，不能做任何处理。这样具备完整例外场景的逻辑就具备了OO的味道，任何一个事务的处理都可能产生非预期的效果，问题是需要以何种手段来处理，如果不使用异常就需要依靠返回值的不同来进行处理了，这严重失去了面向对象的风格。</p><p>　　我们在编写用例文档（User case Specification）时，其中有一项叫做 “ 例外事件 “，是用来描述主场景外的例外场景的，例如用户登录的用例，就会在” 例外事件 “中说明” 连续3此登录失败即锁定用户账号 “，这就是登录事件的一个异常处理，具体到我们的程序中就是：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//正常登陆</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>InvalidLoginException lie<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//    用户名无效</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>InvalidPasswordException pe<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//密码错误的异常</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>TooMuchLoginException<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//多次登陆失败的异常</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    　如此设计则可以让我们的login方法更符合实际的处理逻辑，同时使主逻辑(正常登录，try代码块)更加清晰。当然了，使用异常还有很多优点，可以让正常代码和异常代码分离、能快速查找问题(栈信息快照)等，但是异常有一个缺点：性能比较慢。</p><p>　　Java的异常机制确实比较慢，这个”比较慢”是相对于诸如String、Integer等对象来说的，单单从对象的创建上来说，new一个IOException会比String慢5倍，这从异常的处理机制上也可以解释：因为它要执行fillInStackTrace方法，要记录当前栈的快照，而String类则是直接申请一个内存创建对象，异常类慢一筹也就在所难免了。</p><p>　　而且，异常类是不能缓存的，期望先建立大量的异常对象以提高异常性能也是不现实的。</p><p>　　难道异常的性能问题就没有任何可以提高的办法了？确实没有，但是我们不能因为性能问题而放弃使用异常，而且经过测试，在JDK1.6下，一个异常对象的创建时间只需1.4毫秒左右(注意是毫秒，通常一个交易是在100毫秒左右)，难道我们的系统连如此微小的性能消耗都不予许吗？</p><p>　<strong><font color="red">注意：性能问题不是拒绝异常的借口。</font></strong></p><h2><span id="第9章-多线程和并发">第9章 多线程和并发</span></h2><p>​    We’re here to put a dent in the universe.Otherwise why else even behere?</p><p>​    活着就是为了改变世界，难道还有其他原因吗？——Steve Paul Jobs（史蒂夫·乔布斯）</p><p>​    多线程技术可以更好地利用系统资源，减少对用户的响应时间，提高系统的性能和效率，但同时也增加了系统的复杂性和运维难度，特别是在高并发、大压力、高可靠性的项目中，线程资源的同步、抢占、互斥等都需要<strong>慎重考虑</strong>，以避免产生性能损耗和线程死锁。</p><h3><span id="建议118不推荐覆写start方法">建议118：不推荐覆写start方法</span></h3><p>​    多线程比较简单的实现方式是继承Thread类，然后覆写run方法，在客户端程序中通过调用对象的start方法即可启动一个线程，这是多线程程序的标准写法。不知道大家能够还能回想起自己写的第一个多线程的demo呢？估计一般是这样写的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MultiThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用线程体        run();</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//MultiThread do someThing</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    覆写run方法，这好办，写上自己的业务逻辑即可，但为什么要覆写start方法呢？最常见的理由是：要在客户端调用start方法启动线程，不覆写start方法怎么启动run方法呢？于是乎就覆写了start方法，在方法内调用run方法。客户端代码是一个标准程序，代码如下　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//多线程对象</span>    MultiThread m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//启动多线程</span>    m<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　相信大家都能看出，这是一个错误的多线程应用，main方法根本就没有启动一个子线程，整个应用程序中只有一个主线程在运行，并不会创建任何其它的线程。对此，有很简单的解决办法。只要删除MultiThread类的start方法即可。</p><p>　　然后呢？就结束了吗？是的，很多时候确实到此结束了。那为什么不必而且不能覆写start方法，仅仅就是因为” 多线程应用就是这样写的 “ 这个原因吗？</p><p>　　要说明这个问题，就需要看一下Thread类的源码了。Thread类的start方法的代码（这个是JDK7版本的）如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断线程状态，必须是为启动状态</span>        <span class="token comment" spellcheck="true">/**         * This method is not invoked for the main method thread or "system"         * group threads created/set up by the VM. Any new functionality added         * to this method in the future may have to also be added to the VM.         *         * A zero status value corresponds to state "NEW".         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加入线程组中</span>        <span class="token comment" spellcheck="true">/*         * Notify the group that this thread is about to be started so that it         * can be added to the group's list of threads and the group's unstarted         * count can be decremented.         */</span>        group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 分配栈内存，启动线程，运行run方法</span>            <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                 * do nothing. If start0 threw a Throwable then it will be                 * passed up the call stack                 */</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>　　　<span class="token comment" spellcheck="true">// 本地方法</span>     <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　这里的关键是本地方法start0,它实现了启动线程、申请栈内存、运行run方法、修改线程状态等职责，线程管理和栈内存管理都是由JVM负责的，如果覆盖了start方法，也就是撤销了线程管理和栈内存管理的能力，这样如何启动一个线程呢？事实上，不需要关注线程和栈内存的管理，主需要编码者实现多线程的逻辑即可(即run方法体)，这也是JVM比较聪明的地方，简化多线程应用。</p><p>　　那可能有人要问了：如果确实有必要覆写start方法，那该如何处理呢?这确实是一个罕见的要求，不过覆写也容易，只要在start方法中加上super.start()即可，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MultiThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 线程启动前的业务处理 */</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 线程启动后的业务处理 */</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// MultiThread do someThing</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　注意看start方法，调用了父类的start方法，没有主动调用run方法，这是由JVM自行调用的，不用我们显示实现，而且是一定不能实现。此方式虽然解决了” 覆写start方法 “的问题，但是基本上无用武之地，到目前为止还没有发现一定要覆写start方法的多线程应用，所以要求覆写start的场景。都可以使用其他的方式实现，例如类变量、事件机制、监听等方式。</p><p><strong><font color="red">注意：继承自Thread类的多线程类不必覆写start方法。</font></strong></p><h3><span id="建议119启动线程前stop方法是不可靠的">建议119：启动线程前stop方法是不可靠的</span></h3><p>　　有这样一个案例，我们需要一个高效率的垃圾邮件制造机，也就是有尽可能多的线程来尽可能多的制造垃圾邮件，垃圾邮件重要的信息保存在数据库中，如收件地址、混淆后的标题、反应垃圾处理后的内容等，垃圾制造机的作用就是从数据库中读取这些信息，判断是否符合条件(如收件地址必须包含@符号、标题不能为空等)，然后转换成一份真实的邮件发出去。</p><p>　　整个应用逻辑很简单，这必然是一个多线程应用，垃圾邮件制造机需要继承Thread类，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//垃圾邮件制造机</span><span class="token keyword">class</span> <span class="token class-name">SpamMachine</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//制造垃圾邮件</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制造大量垃圾邮件......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　在客户端代码中需要发挥计算机的最大潜能来制造邮件，也就是说开尽可能多的线程，这里我们使用一个while循环来处理，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不分昼夜的制造垃圾邮件</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//多线程多个垃圾邮件制造机</span>        SpamMachine sm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpamMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//xx条件判断，不符合提交就设置该线程不可执行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sm<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果线程是stop状态，则不会启动</span>        sm<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　在此段代码中，设置了一个极端条件：所有的线程在启动前都执行stop方法，虽然它是一个过时的方法，但它的运行逻辑还是正常的，况且stop方法在此处的目的并不是停止一个线程，而是设置线程为不可启用状态。想来这应该是没有问题的，但是运行结果却出现了奇怪的现象：部分线程还是启动了，也就是在某些线程(没有规律)中的start方法正常执行了。在不符合判断规则的情况下，不可启用状态的线程还是启用了。这是为什么呢？</p><p>　　这是线程启动start方法的一个缺陷。Thread类的stop方法会根据线程状态来判断是终结线程还是设置线程为不可运行状态，对于未启动的线程(线程状态为NEW)来说，会设置其标志位为不可启动，而其他的状态则是直接停止。stop方法的JDK1.6源代码（JDk1.6以上源码于此可能有变化，需要重新观察源码）如下：　　</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Deprecated</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// If the thread is already dead, return.</span>    <span class="token comment" spellcheck="true">// A zero status value corresponds to "NEW".</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">stop1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadDeath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">stop1</span><span class="token punctuation">(</span>Throwable th<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SecurityManager security <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>th <span class="token keyword">instanceof</span> <span class="token class-name">ThreadDeath</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        security<span class="token punctuation">.</span><span class="token function">checkPermission</span><span class="token punctuation">(</span>SecurityConstants<span class="token punctuation">.</span>STOP_THREAD_PERMISSION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// A zero status value corresponds to "NEW"</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Wake up thread if it was suspended; no-op otherwise</span>        <span class="token function">stop0</span><span class="token punctuation">(</span>th<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Must do the null arg check that the VM would do with stop0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>th <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Remember this stop attempt for if/when start is used</span>        stopBeforeStart <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        throwableFromStop <span class="token operator">=</span> th<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里设置了stopBeforeStart变量，标志着是在启动前设置了停止标志，在start方法中(JDK6源码)是这样校验的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * This method is not invoked for the main method thread or "system"     * group threads created/set up by the VM. Any new functionality added      * to this method in the future may have to also be added to the VM.     *     * A zero status value corresponds to state "NEW".         */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 在启动前设置了停止状态</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stopBeforeStart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">stop0</span><span class="token punctuation">(</span>throwableFromStop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　注意看start0方法和stop0方法的顺序，start0方法在前，也就说既是stopBeforeStart为true(不可启动)，也会启动一个线程，然后再stop0结束这个线程，而罪魁祸首就在这里！</p><p>　　明白了原因，我们的情景代码就很容易修改了，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不分昼夜的制造垃圾邮件</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 多线程多个垃圾邮件制造机</span>        SpamMachine sm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpamMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// xx条件判断，不符合提交就设置该线程不可执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">SpamMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　不再使用stop方法进行状态的设置，直接通过判断条件来决定线程是否可启用。对于start方法的缺陷，一般不会引起太大的问题，只是增加了线程启动和停止的精度而已。</p><h3><span id="建议120不使用stop方法停止线程">建议120：不使用stop方法停止线程</span></h3><p>　　线程启动完毕后，在运行时可能需要中止，Java提供的终止方法只有一个stop，但是我不建议使用这个方法，因为它有以下三个问题：</p><p>(1)、stop方法是过时的：从Java编码规则来说，已经过时的方法不建议采用。</p><p>(2)、stop方法会导致代码逻辑不完整：stop方法是一种” 恶意 “ 的中断，一旦执行stop方法，即终止当前正在运行的线程，不管线程逻辑是否完整，这是非常危险的。看如下的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 子线程休眠1秒</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 异常处理</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此处是业务逻辑，永远不会执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 启动线程</span>    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 主线程休眠0.1秒</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 子线程停止</span>    thread<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　这段代码的逻辑是这样的：子线程是一个匿名内部类，它的run方法在执行时会休眠一秒，然后执行后续的逻辑，而主线程则是休眠0.1秒后终止子线程的运行，也就说JVM在执行tread.stop()时，子线程还在执行sleep(1000)，此时stop方法会清除栈内信息，结束该线程，这也就导致了run方法的逻辑不完整，输出语句println代表的是一段逻辑，可能非常重要，比如子线程的主逻辑、资源回收、情景初始化等，但是因为stop线程了，这些都不再执行，于是就产生了业务逻辑不完整的情况。</p><p>　　这是极度危险的，因为我们不知道子线程会在什么时候被终止，stop连基本的逻辑完整性都无法保证。而且此种操作也是非常隐蔽的，子线程执行到何处会被关闭很难定位，这位以后的维护带来了很多麻烦。</p><p>(3)、stop方法会破坏原子逻辑</p><p>　　多线程为了解决共享资源抢占的问题，使用了锁概念，避免资源不同步，但是正因为此，stop方法却会带来更大的麻烦，它会丢弃所有的锁，导致原子逻辑受损。例如有这样一段程序：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MultiThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 同步代码块，保证原子操作</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自增</span>            a<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//线程休眠0.1秒</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 自减</span>            a<span class="token operator">--</span><span class="token punctuation">;</span>            String tn <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tn <span class="token operator">+</span> <span class="token string">":a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　MultiThread实现了Runnable接口，具备多线程能力，其中run方法中加上了synchronized代码块，表示内部是原子逻辑，它会先自增然后自减，按照synchronized同步代码块的规则来处理，此时无论启动多少线程，打印出来的结果应该是a=0，但是如果有一个正在执行的线程被stop，就会破坏这种原子逻辑，代码如下：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MultiThread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 启动t1线程</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//停止t1线程</span>    t1<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　首先说明的是所有线程共享了一个MultiThread的实例变量t，其次由于在run方法中加入了同步代码块，所以只能有一个线程进入到synchronized块中。这段代码的执行顺序如下：</p><ol><li>线程t1启动，并执行run方法，由于没有其它线程同步代码块的锁，所以t1线程执行后自加后执行到sleep方法即开始休眠，此时a=1</li><li>JVM又启动了5个线程，也同时运行run方法，由于synchronized关键字的阻塞作用，这5个线程不能执行自增和自减操作，等待t1线程锁释放。</li><li>主线程执行了t1.stop方法，终止了t1线程，注意，由于a变量是所有线程共享的，所以其它5个线程获得的a变量也是1</li><li>其它5个线程依次获得CPU执行机会，打印出a值</li></ol><p>　　分析了这么多，相信大家也明白了输出结果，结果如下：</p><p>　　　　Thread-5:a = 1<br>　　　　Thread-4:a = 1<br>　　　　Thread-3:a = 1<br>　　　　Thread-2:a = 1<br>　　　　Thread-1:a = 1</p><p>　　原本期望synchronized同步代码块中的逻辑都是原子逻辑，不受外界线程的干扰，但是结果却出现原子逻辑被破坏的情况，这也是stop方法被废弃的一个重要原因：破坏了原子逻辑。</p><p>　　既然终止一个线程不能使用stop方法，那怎样才能终止一个正在运行的线程呢？答案也简单，使用自定义的标志位决定线程的执行情况，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SafeStopThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 此变量必须加上volatile</span>    <span class="token comment" spellcheck="true">/*     * volatile: 1.作为指令关键字，确保本条指令不会因编译器的优化而省略，且要求每次直接读值.     * 2.被设计用来修饰被不同线程访问和修改的变量。如果不加入volatile     * ，基本上会导致这样的结果：要么无法编写多线程程序，要么编译器失去大量优化的机会。     */</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> stop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断线程体是否运行</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// doSomething</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　这是很简单的办法，在线程体中判断是否需要停止运行，即可保证线程体的逻辑完整性，而且也不会破坏原子逻辑。可能大家对JavaAPI比较熟悉，于是提出疑问：Thread不是还提供了interrupt中断线程的方法吗？这个方法可不是过时方法，那可以使用吗?它可以终止一个线程吗？</p><p>　　interrupt，名字看上去很像是终止一个线程的方法，但它不能终止一个正在执行着的线程，它只是修改中断标志而已，例如下面一段代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 线程一直运行</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Running......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 启动线程</span>    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 中断线程</span>    thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　执行这段代码，你会发现一直有Running在输出，永远不会停止，似乎执行了interrupt没有任何变化，那是因为interrupt方法不能终止一个线程状态，它只会改变中断标志位(如果在thread.interrupt()前后输出thread.isInterrupted()则会发现分别输出了false和true)，如果需要终止该线程，还需要自己进行判断，例如我们可以使用interrupt编写出更简洁、安全的终止线程代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SafeStopThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断线程体是否运行</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// do SomeThing</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    　总之，如果期望终止一个正在运行的线程，则不能使用已过时的stop方法。需要自行编码实现，如此即可保证原子逻辑不被破坏，代码逻辑不会出现异常。当然，如果我们使用的是线程池(比如ThreadPoolExecutor类)，那么可以通过shutdown方法逐步关闭池中的线程，它采用的是比较温和、安全的关闭线程方法，完全不会产生类似stop方法的弊端。</p><h3><span id="建议121线程优先级只使用三个等级">建议121：线程优先级只使用三个等级</span></h3><p>​        线程的优先级(Priority)决定了线程获得CPU运行的机会，优先级越高获得的运行机会越大，优先级越低获得的机会越小。Java的线程有10个级别(准确的说是11个级别，级别为0的线程是JVM的，应用程序不能设置该级别)，那是不是说级别是10的线程肯定比级别是9的线程先运行呢?我们来看如下一个多线程类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">int</span> _priority<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置优先级别</span>        t<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>_priority<span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 消耗CPU的计算</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Math<span class="token punctuation">.</span><span class="token function">hypot</span><span class="token punctuation">(</span><span class="token number">924526789</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 输出线程优先级</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Priority："</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　该多线程实现了Runnable接口，实现了run方法，注意在run方法中有一个比较占用CPU的计算，该计算毫无意义，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//启动20个不同优先级的线程</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">TestThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​     这里创建了20个线程，每个线程在运行时都耗尽了CPU的资源，因为优先级不同，线程调度应该是先处理优先级高的，然后处理优先级低的，也就是先执行2个优先级为10的线程，然后执行2个优先级为9的线程，2个优先级为8的线程……但是结果却并不是这样的。</p><p>　　<strong>Priority：5</strong><br>　　<strong>Priority：7</strong><br>　　<strong>Priority：10</strong><br>　　<strong>Priority：6</strong><br>　　<strong>Priority：9</strong><br>　　<strong>Priority：6</strong><br>　　<strong>Priority：5</strong><br>　　<strong>Priority：7</strong><br>　　<strong>Priority：10</strong><br>　　<strong>Priority：3</strong><br>　　<strong>Priority：4</strong><br>　　<strong>Priority：8</strong><br>　　<strong>Priority：8</strong><br>　　<strong>Priority：9</strong><br>　　<strong>Priority：4</strong><br>　　<strong>Priority：1</strong><br>　　<strong>Priority：3</strong><br>　　<strong>Priority：1</strong><br>　　<strong>Priority：2</strong><br>　　<strong>Priority：2</strong></p><p>　　println方法虽然有输出损耗，可能会影响到输出结果，但是不管运行多少次，你都会发现两个不争的事实：</p><p>(1)、并不是严格按照线程优先级来执行的</p><p>　　比如线程优先级为5的线程比优先级为7的线程先执行，优先级为1的线程比优先级为2的线程先执行，很少出现优先级为2的线程比优先级为10的线程先执行(注意，这里是” 很少 “，是说确实有可能出现，只是几率低，因为优先级只是表示线程获得CPU运行的机会，并不代表强制的排序号)。</p><p>(2)、优先级差别越大，运行机会差别越明显</p><p>　　比如优先级为10的线程通常会比优先级为2的线程先执行，但是优先级为6的线程和优先级为5的线程差别就不太明显了，执行多次，你会发现有不同的顺序。</p><p>　　这两个现象是线程优先级的一个重要表现，之所以会出现这种情况，是因为线程运行是需要获得CPU资源的，那谁能决定哪个线程先获得哪个线程后获得呢？这是依照操作系统设置的线程优先级来分配的，也就是说，每个线程要运行，需要操作系统分配优先级和CPU资源，对于JAVA来说，JVM调用操作系统的接口设置优先级，比如windows操作系统优先级都相同吗？</p><p>　　事实上，不同的操作系统线程优先级是不同的，Windows有7个优先级，Linux有140个优先级，Freebsd则由255个(此处指的优先级个数，不同操作系统有不同的分类，如中断级线程，操作系统级等，各个操作系统具体用户可用的线程数量也不相同)。Java是跨平台的系统，需要把这10个优先级映射成不同的操作系统的优先级，于是界定了Java的优先级只是代表抢占CPU的机会大小，优先级越高，抢占CPU的机会越大，被优先执行的可能性越高，优先级相差不大，则抢占CPU的机会差别也不大，这就是导致了优先级为9的线程可能比优先级为10的线程先运行。</p><p>　　Java的缔造者们也觉察到了线程优先问题，于是Thread类中设置了三个优先级，此意就是告诉开发者，建议使用优先级常量，而不是1到10的随机数字。常量代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * The minimum priority that a thread can have.      */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MIN_PRIORITY <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The default priority that is assigned to a thread.      */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> NORM_PRIORITY <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The maximum priority that a thread can have.      */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MAX_PRIORITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　在编码时直接使用这些优先级常量，可以说在大部分情况下MAX_PRIORITY的线程回比MIN_PRIORITY的线程优先运行，但是不能认为是必然会先运行，不能把这个优先级做为核心业务的必然条件，Java无法保证优先级高肯定会先执行，只能保证高优先级有更多的执行机会。因此，建议在开发时只使用此三类优先级，没有必要使用其他7个数字，这样也可以保证在不同的操作系统上优先级的表现基本相同。</p><p>　　大家也许会问，如果优先级相同呢？这很好办，也是由操作系统决定的。基本上是按照FIFO原则(先入先出，First Input First Output)，但也是不能完全保证。</p><h3><span id="建议122使用线程异常处理器提升系统可靠性">建议122：使用线程异常处理器提升系统可靠性</span></h3><p>　    我们要编写一个Socket应用，监听指定端口，实现数据包的接收和发送逻辑，这在早期系统间进行数据交互是经常使用的，这类接口通常需要考虑两个问题：一个是避免线程阻塞，保证接收的数据尽快处理；二是：接口的稳定性和可靠性问题，数据包很复杂，接口服务的系统也很多，一旦守候线程出现异常就会导致Socket停止，这是非常危险的，那我们有什么办法避免吗？</p><p>　　Java1.5版本以后在Thread类中增加了setUncaughtExceptionHandler方法，实现了线程异常的捕捉和处理。可能大家会有一个疑问：如果Socket应用出现了不可预测的异常是否可以自动重启呢？其实使用线程异常处理器很容易解决，我们来看一个异常处理器应用实例，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TcpServer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建后即运行</span>    <span class="token keyword">public</span> <span class="token function">TcpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">setUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TcpServerExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统正常运行:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 抛出异常</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 异常处理器</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TcpServerExceptionHandler</span> <span class="token keyword">implements</span>            <span class="token class-name">Thread<span class="token punctuation">.</span>UncaughtExceptionHandler</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">uncaughtException</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">,</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 记录线程异常信息</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 出现异常,自行重启，请分析原因。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 重启线程，保证业务不中断</span>            <span class="token keyword">new</span> <span class="token class-name">TcpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    　这段代码的逻辑比较简单，在TcpServer类创建时即启动一个线程，提供TCP服务，例如接收和发送文件，具体逻辑在run方法中实现。同时，设置了该线程出现运行期异常(也就是Uncaught Exception)时，由TcpServerExceptionHandler异常处理器来处理异常。那么TcpServerExceptionHandler做什么事呢？两件事：</p><ul><li>记录异常信息，以便查找问题</li><li>重新启动一个新线程，提供不间断的服务</li></ul><p>　　有了这两点，TcpServer就可以稳定的运行了，即使出现异常也能自动重启，客户端代码比较简单，只需要new TcpServer()即可，运行结果如下：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20161019095811248-9027011.png" alt="img"></p><p>​    　从运行结果上可以看出，当Thread-0出现异常时，系统自动重启了Thread-1线程，继续提供服务，大大提高了系统的性能。</p><p>　　这段程序只是一个示例程序，若要在实际环境中应用，则需要注意以下三个方面：</p><ul><li>共享资源锁定：如果线程产生异常的原因是资源被锁定，自动重启应用知会增加系统的负担，无法提供不间断服务。例如一个即时通信服务(XMPP Server)出现信息不能写入的情况，即使再怎么启动服务，也是无法解决问题的。在此情况下最好的办法是停止所有的线程，释放资源。</li><li>脏数据引起系统逻辑混乱：异常的产生中断了正在执行的业务逻辑，特别是如果正在处理一个原子操作(像即时通讯服务器的用户验证和签到这两个事件应该在一个操作中处理，不允许出现验证成功，但签到不成功的情况)，但如果此时抛出了运行期异常就有可能会破坏正常的业务逻辑，例如出现用户认证通过了，但签到不成功的情况，在这种情境下重启应用服务器，虽然可以提供服务，但对部分用户却产生了逻辑异常。</li><li>内存溢出：线程异常了，但由该线程创建的对象并不会马上回收，如果再重亲启动新线程，再创建一批对象，特别是加入了场景接管，就非常危险了，例如即时通信服务，重新启动一个新线程必须保证原在线用户的透明性，即用户不会察觉服务重启，在此种情况下，就需要在线程初始化时加载大量对象以保证用户的状态信息，但是如果线程反复重启，很可能会引起OutOfMemory内存泄露问题。</li></ul><h3><span id="建议123volatile不能保证数据同步">建议123：volatile不能保证数据同步</span></h3><p>​    　volatile关键字比较少用，原因无外乎两点，一是在Java1.5之前该关键字在不同的操作系统上有不同的表现，所带来的问题就是移植性较差；而且比较难设计，而且误用较多，这也导致它的”名誉” 受损。</p><p>　　我们知道，每个线程都运行在栈内存中，每个线程都有自己的工作内存(Working Memory,比如寄存器Register、高速缓冲存储器Cache等)，线程的计算一般是通过工作内存进行交互的，其示意图如下图所示：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20161018131753435-157368081.png" alt="img"></p><p>　从示意图上我们可以看到，线程在初始化时从主内存中加载所需的变量值到工作内存中，然后在线程运行时，如果是读取，则直接从工作内存中读取，若是写入则先写到工作内存中，之后刷新到主内存中，这是JVM的一个简答的内存模型，但是这样的结构在多线程的情况下有可能会出现问题，比如：A线程修改变量的值，也刷新到了主内存，但B、C线程在此时间内读取的还是本线程的工作内存，也就是说它们读取的不是最”新鲜”的值，此时就出现了不同线程持有的公共资源不同步的情况。</p><p>　　对于此类问题有很多解决办法，比如使用synchronized同步代码块，或者使用Lock锁来解决该问题，不过，Java可以使用volatile更简单地解决此类问题，比如在一个变量前加上volatile关键字，可以确保每个线程对本地变量的访问和修改都是直接与内存交互的，而不是与本线程的工作内存交互的，保证每个线程都能获得最”新鲜”的变量值，其示意图如下：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20161018134019029-840148773.png" alt="img"></p><p>　　明白了volatile变量的原理，那我们思考一下：volatile变量是否能够保证数据的同步性呢？两个线程同时修改一个volatile是否会产生脏数据呢？我们看看下面代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">UnsafeThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 共享资源</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 增加CPU的繁忙程度,不必关心其逻辑含义</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Math<span class="token punctuation">.</span><span class="token function">hypot</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">92456789</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　上面的代码定义了一个多线程类，run方法的主要逻辑是共享资源count的自加运算，而且我们还为count变量加上了volatile关键字，确保是从内存中读取和写入的，如果有多个线程运行，也就是多个线程执行count变量的自加操作，count变量会产生脏数据吗？想想看，我们已经为count加上了volatile关键字呀！模拟多线程的代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 理想值，并作为最大循环次数</span>    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环次数,防止造成无限循环或者死循环</span>    <span class="token keyword">int</span> loops <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 主线程组,用于估计活动线程数</span>    ThreadGroup tg <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>loops<span class="token operator">++</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 共享资源清零</span>        UnsafeThread ut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnsafeThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ut<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 先等15毫秒，等待活动线程为1</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>tg<span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 检查实际值与理论值是否一致</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ut<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 出现线程不安全的情况</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"循环到："</span> <span class="token operator">+</span> loops <span class="token operator">+</span> <span class="token string">" 遍，出现线程不安全的情况"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此时，count= "</span> <span class="token operator">+</span> ut<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　想让volatite变量”出点丑”，还是需要花点功夫的。此段程序的运行逻辑如下：</p><ul><li>启动100个线程，修改共享资源count的值</li><li>暂停15秒，观察活动线程数是否为1(即只剩下主线程再运行)，若不为1，则再等待15秒。</li><li>判断共享资源是否是不安全的，即实际值与理想值是否相同，若不相同，则发现目标，此时count的值为脏数据。</li><li>如果没有找到，继续循环，直到达到最大循环为止。</li></ul><p>运行结果如下：</p><p>　　　<strong>循环到：40 遍，出现线程不安全的情况</strong><br>　　　<strong>此时，count= 999</strong><br>　　这只是一种可能的结果，每次执行都有可能产生不同的结果。这也说明我们的count变量没有实现数据同步，在多个线程修改的情况下，count的实际值与理论值产生了偏差，直接说明了volatile关键字并不能保证线程的安全。<br>　　在解释原因之前，我们先说一下自加操作。count++表示的是先取出count的值然后再加1，也就是count=count+1，所以，在某个紧邻时间片段内会发生如下神奇的事情：</p><p>(1)、第一个时间片段</p><p>　　A线程获得执行机会，因为有关键字volatile修饰，所以它从主内存中获得count的最新值为998，接下来的事情又分为两种类型：</p><ul><li>如果是单CPU，此时调度器暂停A线程执行，让出执行机会给B线程，于是B线程也获得了count的最新值998.</li><li>如果是多CPU，此时线程A继续执行，而线程B也同时获得了count的最新值998.</li></ul><p>(2)、第二个片段</p><ul><li>如果是单CPU，B线程执行完+1操作(这是一个原子处理)，count的值为999，由于是volatile类型的变量，所以直接写入主内存，然后A线程继续执行，计算的结果也是999，重新写入主内存中。</li><li>如果是多CPU，A线程执行完加1动作后修改主内存的变量count为999，线程B执行完毕后也修改主内存中的变量为999</li></ul><p>这两个时间片段执行完毕后，原本期望的结果为1000，单运行后的值为999，这表示出现了线程不安全的情况。这也是我们要说明的：volatile关键字并不能保证线程安全，它只能保证当前线程需要该变量的值时能够获得最新的值，而不能保证线程修改的安全性。</p><p>顺便说一下，在上面的代码中，UnsafeThread类的消耗CPU计算是必须的，其目的是加重线程的负荷，以便出现单个线程抢占整个CPU资源的情景，否则很难模拟出volatile线程不安全的情况，大家可以自行模拟测试。</p><h3><span id="建议124异步运算考虑使用callable接口">建议124：异步运算考虑使用Callable接口</span></h3><p>　　多线程应用有两种实现方式，一种是实现Runnable接口，另一种是继承Thread类，这两个方法都有缺点：run方法没有返回值，不能抛出异常(这两个缺点归根到底是Runnable接口的缺陷，Thread类也实现了Runnable接口)，如果需要知道一个线程的运行结果就需要用户自行设计，线程类本身也不能提供返回值和异常。但是从Java1.5开始引入了一个新的接口Callable，它类似于Runnable接口，实现它就可以实现多线程任务，Callable的接口定义如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Computes a result, or throws an exception if unable to do so.     *     * @return computed result     * @throws Exception if unable to compute a result     */</span>    V <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　实现Callable接口的类，只是表明它是一个可调用的任务，并不表示它具有多线程运算能力，还是需要执行器来执行的，我们先编写一个任务类，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//税款计算器</span><span class="token keyword">class</span> <span class="token class-name">TaxCalculator</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 本金</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> seedMoney<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 接收主线程提供的参数</span>    <span class="token keyword">public</span> <span class="token function">TaxCalculator</span><span class="token punctuation">(</span><span class="token keyword">int</span> _seedMoney<span class="token punctuation">)</span> <span class="token punctuation">{</span>        seedMoney <span class="token operator">=</span> _seedMoney<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 复杂计算,运行一次需要2秒</span>        TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> seedMoney <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　这里模拟了一个复杂运算：税款计算器，该运算可能要花费10秒钟的时间，此时不能让用户一直等着吧，需要给用户输出点什么，让用户知道系统还在运行，这也是系统友好性的体现：用户输入即有输出，若耗时较长，则显示运算进度。如果我们直接计算，就只有一个main线程，是不可能有友好提示的，如果税金不计算完毕，也不会执行后续动作，所以此时最好的办法就是重启一个线程来运算，让main线程做进度提示，代码如下：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span>ExecutionException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 生成一个单线程的异步执行器</span>    ExecutorService es <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 线程执行后的期望值</span>    Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> future <span class="token operator">=</span> es<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaxCalculator</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>future<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 还没有运算完成，等待200毫秒</span>        TimeUnit<span class="token punctuation">.</span>MICROSECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出进度符号</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n计算完成，税金是："</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  元 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    es<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　在这段代码中，Executors是一个静态工具类，提供了异步执行器的创建能力，如单线程异步执行器newSingleThreadExecutor、固定线程数量的执行器newFixedThreadPool等，一般它是异步计算的入口类。future关注的是线程执行后的结果，比如没有运行完毕，执行结果是多少等。此段代码的运行结果如下所示：</p><p>　　　　　　**********************************************……</p><p>　　　　　　计算完成，税金是：10 元</p><p>　　执行时，”*”会依次递增，表示系统正在运算，为用户提供了运算进度，此类异步计算的好处是：</p><ul><li>尽可能多的占用系统资源，提供快速运算</li><li>可以监控线程的执行情况，比如是否执行完毕、是否有返回值、是否有异常等。</li><li>可以为用户提供更好的支持，比如例子中的运算进度等。</li></ul><h3><span id="建议125优先选择线程池">建议125：优先选择线程池</span></h3><p>　　在Java1.5之前，实现多线程比较麻烦，需要自己启动线程，并关注同步资源，防止出现线程死锁等问题，在1.5版本之后引入了并行计算框架，大大简化了多线程开发。我们知道一个线程有五个状态：新建状态(NEW)、可运行状态(Runnable，也叫作运行状态)、阻塞状态(Blocked)、等待状态(Waiting)、结束状态(Terminated)，线程的状态只能由新建转变为了运行状态后才能被阻塞或等待，最后终结，不可能产生本末倒置的情况，比如把一个结束状态的线程转变为新建状态，则会出现异常，例如如下代码会抛出异常：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建一个线程，新建状态</span>    Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程正在运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 运行状态</span>    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否是运行状态，若不是则等待10毫秒</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>State<span class="token punctuation">.</span>TERMINATED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        TimeUnit<span class="token punctuation">.</span>MICROSECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 直接由结束转变为云心态</span>    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　此段程序运行时会报java.lang.IllegalThreadStateException异常，原因就是不能从结束状态直接转变为运行状态，我们知道一个线程的运行时间分为3部分：T1为线程启动时间，T2为线程的运行时间，T3为线程销毁时间，如果一个线程不能被重复使用，每次创建一个线程都需要经过启动、运行、销毁时间，这势必增大系统的响应时间，有没有更好的办法降低线程的运行时间呢？</p><p>　　T2是无法避免的，只有通过优化代码来实现降低运行时间。T1和T2都可以通过线程池(Thread Pool)来缩减时间，比如在容器(或系统)启动时，创建足够多的线程，当容器(或系统)需要时直接从线程池中获得线程，运算出结果，再把线程返回到线程池中___ExecutorService就是实现了线程池的执行器，我们来看一个示例代码：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2个线程的线程池</span>    ExecutorService es <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 多次执行线程体</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        es<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 关闭执行器</span>    es<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　此段代码首先创建了一个包含两个线程的线程池，然后在线程池中多次运行线程体，输出运行时的线程名称，结果如下：</p><p>　　　　　　　　pool-1-thread-1<br>　　　　　　　　pool-1-thread-2<br>　　　　　　　　pool-1-thread-1<br>　　　　　　　　pool-1-thread-2</p><p> 　本次代码执行了4遍线程体，按照我们之前阐述的” 一个线程不可能从结束状态转变为可运行状态 “，那为什么此处的2个线程可以反复使用呢？这就是我们要搞清楚的重点。</p><p>　　线程池涉及以下几个名词：</p><ul><li>工作线程(Worker)：线程池中的线程，只有两个状态：可运行状态和等待状态，没有任务时它们处于等待状态，运行时它们循环的执行任务。</li><li>任务接口(Task)：这是每个任务必须实现的接口，以供工作线程调度器调度，它主要规定了任务的入口、任务执行完的场景处理，任务的执行状态等。这里有两种类型的任务：具有返回值(异常)的Callable接口任务和无返回值并兼容旧版本的Runnable接口任务。</li><li>任务对列(Work Quene)：也叫作工作队列，用于存放等待处理的任务，一般是BlockingQuene的实现类，用来实现任务的排队处理。</li></ul><p>　　我们首先从线程池的创建说起，Executors.newFixedThreadPool(2)表示创建一个具有两个线程的线程池，源代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Executors</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//生成一个最大为nThreads的线程池执行器</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                      0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　这里使用了LinkedBlockingQueue作为队列任务管理器，所有等待处理的任务都会放在该对列中，需要注意的是，此队列是一个阻塞式的单端队列。线程池建立好了，那就需要线程在其中运行了，线程池中的线程是在submit第一次提交任务时建立的，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//检查任务是否为null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把Runnable任务包装成具有返回值的任务对象，不过此时并没有执行，只是包装</span>    RunnableFuture<span class="token operator">&lt;</span>Object<span class="token operator">></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行此任务</span>    <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回任务预期执行结果</span>    <span class="token keyword">return</span> ftask<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　此处的代码关键是execute方法，它实现了三个职责。</p><ul><li>创建足够多的工作线程数，数量不超过最大线程数量，并保持线程处于运行或等待状态。</li><li>把等待处理的任务放到任务队列中</li><li>从任务队列中取出任务来执行</li></ul><p>　　其中此处的关键是工作线程的创建，它也是通过new Thread方式创建的一个线程，只是它创建的并不是我们的任务线程(虽然我们的任务实现了Runnable接口，但它只是起了一个标志性的作用)，而是经过包装的Worker线程，代码如下：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 运行一次任务</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">runTask</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 这里的task才是我们自定义实现Runnable接口的任务 */</span>        task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 该方法其它代码略 */</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 工作线程也是线程，必须实现run方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Runnable task <span class="token operator">=</span> firstTask<span class="token punctuation">;</span>            firstTask <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">runTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>                task <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">workerDone</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 任务队列中获得任务</span>    Runnable <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 其它代码略 */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> r <span class="token operator">=</span> workQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　此处为示意代码，删除了大量的判断条件和锁资源。execute方法是通过Worker类启动的一个工作线程，执行的是我们的第一个任务，然后改线程通过getTask方法从任务队列中获取任务，之后再继续执行，但问题是任务队列是一个BlockingQuene，是阻塞式的，也就是说如果该队列的元素为0，则保持等待状态，直到有任务进入为止，我们来看LinkedBlockingQuene的take方法，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    E x<span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>takeLock<span class="token punctuation">;</span>    takeLock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果队列中的元素为0，则等待</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// propagate to a non-interrupted thread</span>            <span class="token keyword">throw</span> ie<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 等待状态结束，弹出头元素</span>        x <span class="token operator">=</span> <span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果队列数量还多于一个，唤醒其它线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>            notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        takeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> capacity<span class="token punctuation">)</span>        <span class="token function">signalNotFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回头元素</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    　分析到这里，我们就明白了线程池的创建过程：创建一个阻塞队列以容纳任务，在第一次执行任务时创建做够多的线程(不超过许可线程数)，并处理任务，之后每个工作线程自行从任务对列中获得任务，直到任务队列中的任务数量为0为止，此时，线程将处于等待状态，一旦有任务再加入到队列中，即召唤醒工作线程进行处理，实现线程的可复用性。</p><p>　　使用线程池减少的是线程的创建和销毁时间，这对于多线程应用来说非常有帮助，比如我们常用的Servlet容器，每次请求处理的都是一个线程，如果不采用线程池技术，每次请求都会重新创建一个新的线程，这会导致系统的性能符合加大，响应效率下降，降低了系统的友好性。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> java </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>员工的离职成本</title>
      <link href="/2021/12/19/yuan-gong-de-chi-zhi-cheng-ben/"/>
      <url>/2021/12/19/yuan-gong-de-chi-zhi-cheng-ben/</url>
      
        <content type="html"><![CDATA[<h2><span id="员工的离职成本">员工的离职成本</span></h2><p>一个员工的离职成本，很恐怖！</p><p><strong>对于用人单位来说，一个员工离职后留下的坑，并不是再找一个人填上就万事大吉了。</strong></p><p><strong>一般来说，核心人才的流失，至少有1-2个月的招聘期、3个月的适应期，6个月的融入期；此外，还有相当于4个月工资的招聘费用，超过40%的失败率。</strong></p><p>员工离职后，从找新人到新人顺利上手，光是替换成本就高达离职员工年薪150%，如果离开的是管理人员则代价更高。</p><p>更为纠结的是，权威机构估算，一个员工离职会引起大约3个员工产生离职的想法。</p><p>照此计算的话，如果员工离职率为10%，则有 30%的员工正在找工作；如果员工离职率为20%，则有60%的员工正在找工作。</p><p>员工3个月离职和2年离职，差别也很大。</p><p>关于员工离职的原因，你当然可以引用某位名人的观点，无非就是两个：<font color="red"> <strong>钱没给到位、心委屈了。</strong> </font></p><p>不同层级、不同工作年限的员工提离职，其实有更复杂、包罗万象的原因。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/image-20211219211426238.png" alt="image-20211219211426238"></p><h3><span id></span></h3><h3><span id="入职2周离职"><strong>入职2周离职</strong></span></h3><p>入职2周离职，说明新员工看到的实际状况与预期产生了较大差距，这些情况包括公司环境、入职培训、待遇、制度等方方面面的第一感受。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/image-20211219211501926.png" alt="image-20211219211501926"></p><p>在入职面谈时，就把实际情况尽可能的讲清楚，不隐瞒也不渲染，让新员工能够客观的认识他的新东家，这样就不会有巨大的心理落差，不要担心即将到手的新人不来了，该走的总是留不住。</p><p>然后把入职的各个环节工作进行系统梳理，包括从招聘到通知入职、报道、入职培训、与用人部门交接等环节，充分考虑到新人的感受和内心需求，进行系统规划和介绍，让新人感受到被尊重、被重视，让他了解他想了解的内容。</p><h3><span id="入职3个月离职"><strong>入职3个月离职</strong></span></h3><p>入职3个月离职，主要与工作本身有关。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/image-20211219211523614.png" alt="image-20211219211523614"></p><p>这可能说明公司的岗位设置、工作职责、任职资格、面试标准等方面存在某些问题，需要认真审查是哪方面的原因，以便及时补救，降低在招聘环节的无效劳动。</p><h3><span id="入职6个月离职"><strong>入职6个月离职</strong></span></h3><p>入职6个月离职，多半与直接的上级领导有关。HR要想办法让公司的管理者们接受领导力培训，了解并掌握基本的领导力应具备的素质。管理者要了解下级的优势，并让他的优势与岗位职责匹配，为公司发挥最大效用，同时也让员工体现出了他的价值。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/image-20211219211551483.png" alt="image-20211219211551483"></p><p>一个优秀的管理者就是一个教练，他有义务和责任发掘潜能和优势，并培养下属，成为下属成功的重要推动力。同一个部门换一个领导结果可能完全不一样，同样一批员工的表现可能也截然相反，一个可能战斗力十足、激情四射，另一个可能抱怨漫天、团队涣散、离职频发。</p><p>直接上级应该是最先了解下属的各种动向和倾向的，他的一句话可能解决问题也能造成矛盾，如果没有处理好，队伍士气下降、战斗力下滑，就会进入不良循环。因此在1年内离职员工较多的团队，要注意他的直接上级可能出问题了。</p><h3><span id="2年左右离职"><strong>2年左右离职</strong></span></h3><p>2年左右离职，一般与企业文化有关系。这时的员工一般对企业已经完全了解，各种处事方式、人际关系、人文环境、授权、职业发展等等了解的都很全面，甚至包括公司战略、老板的爱好。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/image-20211219211611540.png" alt="image-20211219211611540"></p><p>作为企业，要每日三省吾身，察觉到公司内的不良因素，公司不在大小，都需要良好的工作氛围让员工愉悦。</p><h3><span id="3-5年离职"><strong>3-5年离职</strong></span></h3><p>3-5年离职与职业发展有关。学习不到新知识和技能，薪酬提升空间不大，没有更多高级职位提供，此时员工最好的解决办法就是跳槽。但对企业来讲，这个阶段的员工价值最大，离职损失较大。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/image-20211219211638140.png" alt="image-20211219211638140"></p><p>应根据不同类型员工的需求结构不同，设计合理的职业发展通道；了解员工的心理动态，倾听他们的心声；调研职业市场供求关系，主动调整薪酬、职位设计，我们的目的是保留员工，其他的政策都可考虑根据情况灵活调整。</p><h3><span id="5年以上离职"><strong>5年以上离职</strong></span></h3><p>5年以上的员工，忍耐力增强。此时离职一方面是职业厌倦导致，我们需要给予他新的职责，多一些创新类工作，来激发他们的积极性。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/image-20211219211700538.png" alt="image-20211219211700538"></p><p>另一方面是个人发展与企业发展速度不统一导致，谁发展的慢就成了被淘汰的对象，员工疏于学习、停滞不前，必然被企业疏远和冷落；企业发展太慢，员工的上升空间打不开，事业心重的员工看不到新的希望，必然会另谋高就了。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/image-20211219211725020.png" alt="image-20211219211725020"></p><p>以上从在职时间长短角度考虑的离职主要原因，具体还要根据实际情况进行判断，及时作出调整，把离职率控制在最低，企业的损失也将是最小的。</p><p><strong><font color="red">面对高昂的离职成本，更重要的是，请善待员工，特别是优秀员工！</font></strong></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《编写高质量代码 改善java程序的151个建议》读书笔记-上</title>
      <link href="/2021/12/19/bian-xie-gao-zhi-liang-dai-ma-gai-shan-java-cheng-xu-de-151-ge-jian-yi-du-shu-bi-ji-shang/"/>
      <url>/2021/12/19/bian-xie-gao-zhi-liang-dai-ma-gai-shan-java-cheng-xu-de-151-ge-jian-yi-du-shu-bi-ji-shang/</url>
      
        <content type="html"><![CDATA[<p>《编写高质量代码 改善java程序的151个建议》读书笔记-上</p><p>本篇博客记录《编写高质量代码 改善java程序的151个建议》这本书的读书笔记。方便自己查看，也方便大家查阅，在此感谢原书作者<a href="https://weread.qq.com/web/reader/3cc32750597de83cc5abc31ke4d32d5015e4da3b7fbb1fa">秦小波</a>对java的独特见解，帮助java爱好者的成长。</p><h2><span id="第1章-java开发中通用的方法和准则">第1章 Java开发中通用的方法和准则</span></h2><p>​    The reasonable man adapts himself to the world;the unreasonable onepersists in trying to adapt the world to himself.明白事理的人使自己适应世界；不明事理的人想让世界适应自己。——萧伯纳</p><h3><span id="建议1不要在常量和变量中出现易混淆的字母">建议1：不要在常量和变量中出现易混淆的字母</span></h3><p>​    包名全小写，类名首字母全大写，常量全部大写并用下划线分隔，变量采用驼峰命名法(Camel Case)命名等，这些都是最基本的Java编码规范，是每个javaer都应熟知的规则，但是在变量的声明中要注意不要引入容易混淆的字母。尝试阅读如下代码，思考打印结果的i是多少：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> i<span class="token operator">=</span>1l<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i的两倍是："</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>   肯定会有人说：这么简单的例子还能出错？运行结果肯定是22！实践是检验真理的唯一标准，将其Run一下看看，或许你会很奇怪，结果是2，而不是22.难道是编译器出问题了，少了个”2”?</p><p>   因为赋给变量i的值就是数字”1”,只是后面加了长整型变量的标示字母”l”而已。别说是我挖坑让你跳，如果有类似程序出现在项目中，当你试图通过阅读代码来理解作者的思想时，此情景就可能会出现。所以为了让你的程序更容易理解，字母”l”(包括大写字母”O”)尽量不要和数字混用，以免使读者的理解和程序意图产生偏差。如果字母和数字混合使用，字母”l”务必大写，字母”O”则增加注释。</p><p><strong><font color="red">注意：字母l作为长整型标志时务必大写。</font></strong></p><h3><span id="建议2莫让常量蜕变成变量">建议2：莫让常量蜕变成变量</span></h3><p>​    常量蜕变成变量？你胡扯吧，加了final和static的常量怎么可能会变呢？不可能为此赋值的呀。真的不可能吗？看看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"常量会变哦:"</span> <span class="token operator">+</span> Constant<span class="token punctuation">.</span>RAND_CONST<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Constant</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RAND_CONST <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    RAND_CONST是常量吗?它的值会变吗？绝对会变！这种常量的定义方式是绝对不可取的，常量就是常量，在编译期就必须确定其值，不应该在运行期更改，否则程序的可读性会非常差，甚至连作者自己都不能确定在运行期发生了何种神奇的事情。</p><p>  甭想着使用常量会变的这个功能来实现序列号算法、随机种子生成，除非这真的是项目中的唯一方案，否则就放弃吧，常量还是当常量使用。</p><p><strong><font color="red">注意：务必让常量的值在运行期保持不变。</font></strong></p><h3><span id="建议3三元操作符的类型务必一致">建议3：三元操作符的类型务必一致</span></h3><p>​    三元操作符是if-else的简化写法，在项目中使用它的地方很多，也非常好用，但是好用又简单的东西并不表示就可以随意使用，看看如下代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>    String str <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">?</span> <span class="token number">90</span> <span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String str1 <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">?</span> <span class="token number">90</span> <span class="token operator">:</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两者是否相等："</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    分析一下这段程序，i是80，小于100，两者的返回值肯定都是90，再转成String类型，其值也绝对相等，毋庸置疑的。嗯，分析的有点道理，但是变量str中的三元操作符的第二个操作数是100，而str1中的第二个操作数是100.0，难道木有影响吗?不可能有影响吧，三元操作符的条件都为真了，只返回第一个值嘛，于第二个值有毛线关系，貌似有道理。</p><p>　　运行之后，结果却是：”两者是否相等：false”，不相等，why?</p><p>　　问题就出在了100和100.0这两个数字上，在变量str中，三元操作符的第一个操作数90和第二个操作数100都是int类型，类型相同，返回的结果也是int类型的90，而变量str1中的第一个操作数(90)是int类型，第二个操作数100.0是浮点数，也就是两个操作数的类型不一致，可三元操作符必须要返回一个数据，而且类型要确定，不可能条件为真时返回int类型，条件为假时返回float类型，编译器是不允许如此的，所以它会进行类型转换int类型转换为浮点数90.0，也就是三元操作符的返回值是浮点数90.0，那么当然和整型的90不相等了。这里为什么是整型转成浮点型，而不是浮点型转成整型呢？这就涉及三元操作符类型的转换规则:</p><ol><li><p> 若两个操作数不可转换，则不作转换，返回值是Object类型；</p></li><li><p> 若两个操作数是明确类型的表达式(比如变量)，则按照正常的二进制数字转换，int转为long，long转为float等;</p></li><li><p> 若两个操作数中有一个是数字S,另外一个是表达式，且其类型标志位T，那么，若数字S在T的范围内，则转换为T类型；若S超出了T的范围，则T转换为S;</p></li><li><p> 若两个操作数都是直接量数字，则返回值类型范围较大者。</p></li></ol><p>   转换规则：从存储范围小的类型到存储范围大的类型。<br>   <strong>具体规则为：byte→short(char)→int→long→float→double</strong></p><p><strong><font color="red">知道什么原因了，相应的解决办法也就有了：保证三元操作符中的两个操作数类型一致，避免此错误的发生。</font></strong></p><h3><span id="建议4避免带有变长参数的方法重载">建议4：避免带有变长参数的方法重载</span></h3><p>​    在项目和系统开发中，为了提高方法的灵活度和可复用性，我们经常要传递不确定数量的参数到方法中，在JAVA5之前常用的设计技巧就是把形参定义成Collection类型或其子类类型，或者数组类型，这种方法的缺点就是需要对空参数进行判断和筛选，比如实参为null值和长度为0的Collection或数组。而Java5引入了变长参数(varags)就是为了更好地挺好方法的复用性，让方法的调用者可以”随心所欲”地传递实参数量，当然变长参数也是要遵循一定规则的，比如<strong>变长参数必须是方法中的最后一个参数；一个方法不能定义多个变长参数</strong>等，这些基本规则需要牢记，但是即使记住了这些规则，仍然有可能出现错误，看如下代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Client client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 499元的货物 打75折</span>        client<span class="token punctuation">.</span><span class="token function">calPrice</span><span class="token punctuation">(</span><span class="token number">499</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 简单折扣计算</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">,</span> <span class="token keyword">int</span> discount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">float</span> knockdownPrice <span class="token operator">=</span> price <span class="token operator">*</span> discount <span class="token operator">/</span> <span class="token number">100.0F</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简单折扣后的价格是："</span> <span class="token operator">+</span> <span class="token function">formatCurrency</span><span class="token punctuation">(</span>knockdownPrice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 复杂多折扣计算</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> discounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">float</span> knockdownPrice <span class="token operator">=</span> price<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> discount <span class="token operator">:</span> discounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            knockdownPrice <span class="token operator">=</span> knockdownPrice <span class="token operator">*</span> discount <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"复杂折扣后的价格是："</span> <span class="token operator">+</span> <span class="token function">formatCurrency</span><span class="token punctuation">(</span>knockdownPrice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">formatCurrency</span><span class="token punctuation">(</span><span class="token keyword">float</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> NumberFormat<span class="token punctuation">.</span><span class="token function">getCurrencyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    这是一个计算商品折扣的模拟类，带有两个参数的calPrice方法（该方法的业务逻辑是：提供商品的原价和折扣率，即可获得商品的折扣价）是一个简单的折扣计算方法，该方法在实际项目中经常会用到，这是单一的打折方法。而带有变长参数的calPrice方法是叫较复杂的折扣计算方式，多种折扣的叠加运算（模拟类是比较简单的实现）在实际中也经常见到，比如在大甩卖期间对VIP会员再度进行打折；或者当天是你的生日，再给你打个9折，也就是俗话中的折上折。</p><p>　　业务逻辑清楚了，我们来仔细看看这两个方法，它们是重载吗?当然是了，重载的定义是：”方法名相同，参数类型或数量不同”，很明显这两个方法是重载。但是这个重载有点特殊，calPrice(int price ,int… discounts)的参数范畴覆盖了calPrice（int price,int discount）的参数范畴。那问题就出来了：对于calPrice(499,75)这样的计算，到底该调用哪个方法来处理呢？</p><p>　　我们知道java编译器是很聪明的，它在编译时会根据方法签名来确定调用那个方法，比如：calPrice（499,75,95）这个调用，很明显75和95会被转成一个包含两个元素的数组，并传递到calPrice（int price,int…discounts）中，因为只有这一个方法符合这个实参类型，这很容易理解。但是我们现在面对的是calPrice(499,75)调用，这个75既可以被编译成int类型的75，也可以被编译成int数组{75}，即只包含一个元素的数组。那到底该调用哪一个方法呢？运行结果是:”简单折扣后的价格是：374.25”。看来调用了第一个方法，为什么会调用第一个方法，而不是第二个变长方法呢？因为java在编译时，首先会根据实参的数量和类型（这里2个实参，都为int类型，注意没有转成int数组）来进行处理，也就是找到calPrice(int price,int discount)方法，而且确认他是否符合方法签名条件。现在的问题是编译器为什么会首先根据两个int类型的实参而不是一个int类型，一个int数组类型的实参来查找方法呢？</p><p>　　因为int是一个原生数据类型，而数组本身是一个对象，编译器想要”偷懒”,于是它会从最简单的开始”猜想”，只要符合编译条件的即可通过，于是就出现了此问题。</p><p>　　问题阐述清楚了，为了让我们的程序能被”人类”看懂，还是<strong>慎重考虑变长参数的方法重载</strong>吧，否则让人伤脑筋不说，说不定哪天就陷入这类小陷阱里了。</p><h3><span id="建议5别让null值和空值威胁到变长方法">建议5：别让null值和空值威胁到变长方法</span></h3><p>上一建议讲解了变长参数的重载问题，本建议会继续讨论变长参数的重载问题，上一建议的例子是变长参数的范围覆盖了非变长参数的范围，这次讨论两个都是变长参数的方法说起，代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> is<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Client5 client5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client5<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token string">"china"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client5<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token string">"china"</span><span class="token punctuation">,</span> <span class="token string">"people"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client5<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token string">"china"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client5<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token string">"china"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    两个methodA都进行了重载，现在的问题是：上面的client5.methodA(“china”);client5.methodA(“china”, null);编译不通过，提示相同：方法模糊不清，编译器不知道调用哪一个方法，但这两处代码反应的味道是不同的。</p><p>　　对于methodA(“china”)方法，根据实参”china”(String类型)，两个方法都符合形参格式，编译器不知道调用那个方法，于是报错。我们思考一下此问题：Client5这个类是一个复杂的商业逻辑，提供了两个重载方法，从其它模块调用（系统内本地调用系统或系统外远程系统调用）时，调用者根据变长参数的规范调用，传入变长参数的参数数量可以是N个（N&gt;=0）,那当然可以写成client5.methodA(“china”)方法啊！完全符合规范，但是这个却让编译器和调用者郁闷，程序符合规则却不能运行，如此问题，谁之责任呢？是Client5类的设计者，他违反了KISS原则(Keep it Smile,Stupid,即懒人原则)，按照此设计的方法应该很容一调用，可是现在遵循规范却编译不通过，这对设计者和开发者而言都是应该禁止出现的。</p><p>　　对于Client5.methodA(“China”,null),直接量null是没有类型的，虽然两个methodA方法都符合调用要求，但不知道调用哪一个，于是报错了。仔细分析一下，除了不符合上面的懒人原则之外，还有一个非常不好的编码习惯，即调用者隐藏了实参类型，这是非常危险的，不仅仅调用者需要”猜测调用那个方法”，而且被调用者也可能产生内部逻辑混乱的情况。对于本例来说应该如此修改:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Client5 client5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String strs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>    client5<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token string">"china"</span><span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>也就是说让编译器知道这个null值是String类型的，编译即可顺利通过，也就减少了错误的发生。</p><h3><span id="建议6覆写变长方法也循规蹈矩">建议6：覆写变长方法也循规蹈矩</span></h3><p>在JAVA中，子类覆写父类的中的方法很常见，这样做既可以修正bug，也可以提供扩展的业务功能支持，同时还符合开闭原则(Open-Closed Principle)。</p><p>符合开闭原则(Open-Closed Principle)的主要特征：</p><p>　　1.对于扩展是开放的（Open for extension）。这意味着模块的行为是可以扩展的。当应用的需求改变时，我们可以对模块进行扩展，使其具有满足那些改变的新行为。也就是说，我们可以改变模块的功能。</p><p>　　2.对于修改是关闭的（Closed for modification）。对模块行为进行扩展时，不必改动模块的源代码或者二进制代码。模块的二进制可执行版本，无论是可链接的库、DLL或者.EXE文件，都无需改动。</p><p>下面我们看一下覆写必须满足的条件：</p><ol><li>覆写方法不能缩小访问权限；</li><li>参数列表必须与被覆写方法相同；</li><li>返回类型必须与被重写方法的相同；</li><li>重写方法不能抛出新的异常，或者超出父类范围的异常，但是可以抛出更少，更有限的异常，或者不抛出异常。</li></ol><p>看下面这段代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client6</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 向上转型</span>        Base base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        base<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不转型</span>        Sub sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sub<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 基类</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> discounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Base......fun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子类，覆写父类方法</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> discounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sub......fun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>该程序中sub.fun(100, 50)报错，提示找不到fun(int,int)方法。这太奇怪了：子类继承了父类的所有属性和方法，甭管是私有的还是公开的访问权限，同样的参数，同样的方法名，通过父类调用没有任何问题，通过子类调用，却编译不过，为啥？难到是没继承下来？或者子类缩小了父类方法的前置条件？如果是这样，就不应该覆写，@Override就应该报错呀。</p><p>　　事实上，<strong>base对象是把子类对象做了向上转型，形参列表由父类决定，由于是变长参数，在编译时,base.fun(100, 50);中的50这个实参会被编译器”猜测”而编译成”{50}”数组，再由子类Sub执行</strong>。我们再来看看直接调用子类的情况，这时编译器并不会把”50”座类型转换因为数组本身也是一个对象，编译器还没有聪明到要在两个没有继承关系的类之间转换，要知道JAVA是要求严格的类型匹配的，类型不匹配编译器自然就会拒绝执行，并给予错误提示。</p><p>　　这是个特例，覆写的方法参数列表竟然与父类不相同，这违背了覆写的定义，并且会引发莫名其妙的错误。所以读者在对变长参数进行覆写时，如果要使用次类似的方法，请仔细想想是不是要一定如此。</p><p><strong><font color="red">注意：覆写的方法参数与父类相同，不仅仅是类型、数量，还包括显示形式.</font></strong></p><h3><span id="建议7警惕自增的陷阱">建议7：警惕自增的陷阱</span></h3><p>​    记得大学刚开始学C语言时，老师就说：自增有两种形式，分别是i++和++i,i++表示的先赋值后加1，++i是先加1后赋值，这样理解了很多年也木有问题，直到遇到如下代码，我才怀疑我的理解是不是错了:　　　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client7</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            count<span class="token operator">=</span>count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count = "</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个程序输出的count等于几？是count自加10次吗？答案等于10？可以肯定的说，这个运行结果是count=0。为什么呢？</p><p>　　count++是一个表达式，是由返回值的，它的返回值就是count自加前的值，Java对自加是这样处理的：首先把count的值(注意是值，不是引用)拷贝到一个临时变量区，然后对count变量+1，最后返回临时变量区的值。程序第一次循环处理步骤如下:</p><ol><li>JVM把count的值（其值是0）拷贝到临时变量区；</li><li>count的值+1，这时候count的值是1；</li><li>返回临时变量区的值，注意这个值是0，没修改过；</li><li>返回值赋给count，此时count的值被重置为0.</li></ol><p>“count=count++”这条语句可以按照如下代码理解：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mockAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先保存初始值</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 做自增操作</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回原始值</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    于是第一次循环后count的值为0，其它9次循环也是一样的，最终你会发现count的值始终没有改变，仍然保持着最初的状态.</p><p>　　此例中代码作者的本意是希望count自增，所以想当然的赋值给自身就可以了，不曾想到调到Java自增的陷阱中了，解决办法很简单，把”count=count++”改为”count++”即可。该问题在不同的语言环境中有着不同的实现：C++中”count=count++”与”count++”是等效的，而在PHP中保持着与JAVA相同的处理方式。每种语言对自增的实现方式各不相同。</p><h3><span id="建议8不要让旧语法困扰你">建议8：不要让旧语法困扰你</span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client8</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数据定义初始化</span>        <span class="token keyword">int</span> fee <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 其它业务处理</span>        saveDefault<span class="token operator">:</span> <span class="token function">save</span><span class="token punctuation">(</span>fee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"saveDefault...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">int</span> fee<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"save...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这段代码分析一下，输出结果，以及语法含义：</p><ol><li>首先这段代码中有标号(:)操作符，C语言的同学一看便知，类似JAVA中的保留关键字 go to 语句，但Java中抛弃了goto语法，只是不进行语义处理，与此类似的还有const关键字。</li><li>Java中虽然没有了goto语法，但扩展了break和continue关键字，他们的后面都可以加上标号做跳转，完全实现了goto功能，同时也把goto的诟病带进来了。</li><li>运行之后代码输入为”save….”,运行时没错，但这样的代码，给大家阅读上造成了很大的问题，所以就语法就让他随风远去吧!</li></ol><h3><span id="建议9少用静态导入">建议9：少用静态导入</span></h3><p>​    从Java5开始引入了静态导入语法(import static),其目的是为了减少字符的输入量，提高代码的可阅读性，以便更好地理解程序。我们先俩看一个不用静态导入的例子，也就是一般导入：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client9</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算圆面积</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">claCircleArea</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计算球面积</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">claBallArea</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">4</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    这是很简单的两个方法，我们再这两个计算面积的方法中都引入了java.lang.Math类(该类是默认导入的)中的PI(圆周率)常量，而Math这个类写在这里有点多余，特别是如果Client9类中的方法比较多时。如果每次输入都需要敲入Math这个类，繁琐且多余，静态导入可以解决此问题，使用静态导入后的程序如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client9</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算圆面积</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">claCircleArea</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计算球面积</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">claBallArea</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">4</span> <span class="token operator">*</span> PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    静态导入的作用是把Math类中的Pi常量引入到本类中，这会是程序更简单，更容易阅读，只要看到PI就知道这是圆周率，不用每次都把类名写全了。但是，滥用静态导入会使程序更难阅读，更难维护，静态导入后，代码中就不需要再写类名了，但我们知道类是”一类事物的描述”，缺少了类名的修饰，静态属性和静态方法的表象意义可以被无限放大，这会让阅读者很难弄清楚其属性或者方法代表何意，绳子哪一类的属性(方法)都要思考一番（当然IDE的友好提示功能另说），把一个类的静态导入元素都引入进来了，那简直就是噩梦。我们来看下面的例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Double<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Integer<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>NumberFormat<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>NumberFormat<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client9</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">formatMessage</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"圆面积是: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> s <span class="token operator">=</span> PI <span class="token operator">*</span> <span class="token function">parseDouble</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        NumberFormat nf <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nf<span class="token punctuation">.</span><span class="token function">setMaximumFractionDigits</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">formatMessage</span><span class="token punctuation">(</span>nf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>就这么一段程序，看着就让人恼火，常量PI，这知道是圆周率；parseDouble方法可能是Double类的一个转换方法，这看名称可以猜的到。那紧接着getInstance()方法是哪个类的？是Client9本地类？不对呀，本地没有这个方法，哦，原来是NumberFormat类的方法，这个和formatMessage本地方法没有任何区别了—这代码太难阅读了，肯定有人骂娘。</p><p>　　所以，对于静态导入，一定要追寻两个原则：</p><ol><li><em><em>不使用</em>(星号)通配符，除非是导入静态常量类(只包含常量的类或接口)；</em>*</li><li><strong>方法名是具有明确、清晰表象意义的工具类。</strong></li></ol><p>何为具有明确、清晰表象意义的工具类，我们看看Junit中使用静态导入的例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">DaoTest</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//断言</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertFalse</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    我们从程序中很容易判断出assertEquals方法是用来断言两个值是否相等的，assertFalse方法则是断言表达式为假，如此确实减少了代码量，而且代码的可读性也提高了，这也是静态导入用到正确的地方带来的好处。</p><h3><span id="建议10不要在本类中覆盖静态导入的变量和方法">建议10：不要在本类中覆盖静态导入的变量和方法</span></h3><p>如果在一个类中的方法及属性与静态导入的方法及属性相同会出现什么问题呢?看下面的代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client10</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 常量名于静态导入的PI相同</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String PI <span class="token operator">=</span> <span class="token string">"祖冲之"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//方法名于静态导入的方法相同</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> abs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PI = "</span><span class="token operator">+</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abs(-100) = "</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上代码中定义了一个String类型的常量PI，又定义了一个abs方法，与静态导入的相同。首先说好消息，代码没有报错，接下来是坏消息:我们不知道那个属性和方法别调用了，因为常量名和方法名相同，到底调用了那一个方法呢？运行之后结果为：</p><p>　　PI = “祖冲之”，abs(-100) = 0;<br>　　很明显是本地的方法被调用了，为何不调用Math类中的属性和方法呢？那是因为编译器有一个**”最短路径”原则:如果能够在本类中查找到相关的变量、常量、方法、就不会去其它包或父类、接口中查找，以确保本类中的属性、方法优先。**</p><p><strong><font color="red">因此，如果要变更一个被静态导入的方法，最好的办法是在原始类中重构，而不是在本类中覆盖.</font></strong></p><h3><span id="建议11养成良好习惯显示声明uid">建议11：养成良好习惯，显示声明UID</span></h3><p>​    我们编写一个实现了Serializable接口（序列化标志接口）的类，Eclipse马上就会给一个黄色警告：需要添加一个Serial Version ID。为什么要增加？他是怎么计算出来的？有什么用?下面就来解释该问题。</p><p>　　类实现Serializable接口的目的是为了可持久化，比如网络传输或本地存储，为系统的分布和异构部署提供先决条件支持。若没有序列化，现在我们熟悉的远程调用、对象数据库都不可能存在，我们来看一个简单的序列化类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这是一个简单的JavaBean，实现了Serializable接口，可以在网络上传输，也可以在本地存储然后读取。这里我们以java消息服务(Java Message Service)方式传递对象（即通过网络传递一个对象），定义在消息队列中的数据类型为ObjectMessage，首先定义一个消息的生产者（Producer）,代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"混世魔王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 序列化，保存到磁盘上</span>        SerializationUtils<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里引入了一个工具类SerializationUtils，其作用是对一个类进行序列化和反序列化，并存储到硬盘上（模拟网络传输），其代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializationUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String FILE_NAME <span class="token operator">=</span> <span class="token string">"c:/obj.bin"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//序列化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span>Serializable s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>FILE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//反序列化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ObjectInputStream input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>FILE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过对象序列化过程，把一个内存块转化为可传输的数据流，然后通过网络发送到消息消费者（Customer）哪里，进行反序列化，生成实验对象，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//反序列化</span>        Person p<span class="token operator">=</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> SerializationUtils<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    这是一个反序列化的过程，也就是对象数据流转换为一个实例的过程，其运行后的输出结果为“混世魔王”。这太easy了,是的，这就是序列化和反序列化的典型Demo。但此处藏着一个问题：如果消息的生产者和消息的消费者（Person类）有差异，会出现何种神奇事件呢？比如：消息生产者中的Person类添加一个年龄属性，而消费者没有增加该属性。为啥没有增加？因为这个是分布式部署的应用，你甚至不知道这个应用部署在何处，特别是通过广播方式发消息的情况，漏掉一两个订阅者也是很正常的。</p><p>　　这中序列化和反序列化的类在不一致的情况下，反序列化时会报一个InalidClassException异常，原因是序列化和反序列化所对应的类版本发生了变化，JVM不能把数据流转换为实例对象。刨根问底：JVM是根据什么来判断一个类的版本呢？</p><p>   好问题，通过SerializableUID，也叫做流标识符（Stream Unique Identifier），即类的版本定义的，它可以显示声明也可以隐式声明。显示声明格式如下：</p><p>　　 private static final long serialVersionUID = 1867341609628930239L; </p><p> 而隐式声明则是我不声明，你编译器在编译的时候帮我生成。生成的依据是通过包名、类名、继承关系、非私有的方法和属性，以及参数、返回值等诸多因子算出来的，极度复杂，基本上计算出来的这个值是唯一的。</p><p>　　serialVersionUID如何生成已经说明了，我们再来看看serialVersionUID的作用。JVM在反序列化时，会比较数据流中的serialVersionUID与类的serialVersionUID是否相同，如果相同，则认为类没有改变，可以把数据load为实例相同；如果不相同，对不起，我JVM不干了，抛个异常InviladClassException给你瞧瞧。这是一个非常好的校验机制，可以保证一个对象即使在网络或磁盘中“滚过”一次，仍能做到“出淤泥而不染”，完美的实现了类的一致性。</p><p>　但是，有时候我们需要一点特例场景，例如我的类改变不大，JVM是否可以把我以前的对象反序列化回来？就是依据显示声明的serialVersionUID，向JVM撒谎说”我的类版本没有变化”，如此我买你编写的类就实现了向上兼容，我们修改Person类,里面添加private static final long serialVersionUID = 1867341609628930239L;</p><p>　　刚开始生产者和消费者持有的Person类一致，都是V1.0，某天生产者的Person类变更了，增加了一个“年龄”属性，升级为V2.0，由于种种原因（比如程序员疏忽，升级时间窗口不同等）消费端的Person类还是V1.0版本，添加的代码为 priavte int age;以及对应的setter和getter方法。</p><p>　　此时虽然生产这和消费者对应的类版本不同，但是显示声明的serialVersionUID相同，序列化也是可以运行的，所带来的业务问题就是消费端不能读取到新增的业务属性(age属性而已)。通过此例，我们反序列化也实现了版本向上兼容的功能，使用V1.0版本的应用访问了一个V2.0的对象，这无疑提高了代码的健壮性。我们在编写序列化类代码时随手添加一个serialVersionUID字段，也不会带来太多的工作量，但它却可以在关键时候发挥异乎寻常的作用。</p><p><strong><font color="red">显示声明serialVersionUID可以避免对象的不一致，但尽量不要以这种方式向JVM撒谎。</font></strong></p><h3><span id="建议12避免用序列化类在构造函数中为不变量赋值">建议12：避免用序列化类在构造函数中为不变量赋值</span></h3><p>​    我们知道带有final标识的属性是不变量，也就是只能赋值一次，不能重复赋值，但是在序列化类中就有点复杂了，比如这个类：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1867341609628930239L<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">final</span> String perName<span class="token operator">=</span><span class="token string">"程咬金"</span><span class="token punctuation">;</span>｝</code></pre><p>　这个Peson类（此时V1.0版本）被序列化，然后存储在磁盘上，在反序列化时perName属性会重新计算其值(这与static变量不同，static变量压根就没有保存到数据流中)比如perName属性修改成了”秦叔宝”(版本升级为V2.0)，那么反序列化的perName值就是”秦叔宝”。保持新旧对象的final变量相同，有利于代码业务逻辑统一，这是序列化的基本原则之一，也就是说，如果final属性是一个直接量，在反序列化时就会重新计算。对于基本原则不多说，现在说一下final变量的另一种赋值方式：通过构造函数赋值。代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1867341609628930239L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String perName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        perName <span class="token operator">=</span> <span class="token string">"程咬金"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    这也是我们常用的一种赋值方式，可以把Person类定义为版本V1.0，然后进行序列化，看看序列化后有什么问题,序列化代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Serialize</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//序列化以持久保持</span>        SerializationUtils<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    Person的实习对象保存到了磁盘上，它时一个贫血对象(承载业务属性定义，但不包含其行为定义)，我们做一个简单的模拟，修改一下PerName值代表变更，要注意的是serialVersionUID不变，修改后的代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1867341609628930239L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String perName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        perName <span class="token operator">=</span> <span class="token string">"秦叔宝"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时Person类的版本时V2.0但serialVersionUID没有改变，仍然可以反序列化，代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Deserialize</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> SerializationUtils<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>perName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现在问题出来了，打印出来的结果是”程咬金” 还是”秦叔宝”？答案是:”程咬金”。final类型的变量不是会重新计算嘛，打印出来的应该是秦叔宝才对呀。为什么会是程咬金？这是因为这里触及到了反序列化的两一个原则:<strong>反序列化时构造函数不会执行.</strong></p><p>　　反序列化的执行过程是这样的：JVM从数据流中获取一个Object对象，然后根据数据流中的类文件描述信息(在序列化时，保存到磁盘的对象文件中包含了类描述信息，注意是描述信息，不是类)查看，发现是final变量，需要重新计算，于是引用Person类中的perName值，而此时JVM又发现perName竟没有赋值，不能引用，于是它很聪明的不再初始化，保持原值状态，所以结果就是”程咬金”了。</p><p><strong><font color="red">注意：在序列化类中不使用构造函数为final变量赋值.</font></strong></p><h3><span id="建议13避免为final变量复杂赋值">建议13：避免为final变量复杂赋值</span></h3><p>​    为final变量赋值还有另外一种方式：通过方法赋值，及直接在声明时通过方法的返回值赋值，还是以Person类为例来说明，代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1867341609628930239L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过方法返回值为final变量赋值</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String pName <span class="token operator">=</span> <span class="token function">initName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">initName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"程咬金"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　pName属性是通过initName方法的返回值赋值的，这在复杂的类中经常用到，这比使用构造函数赋值更简洁，易修改，那么如此用法在序列化时会不会有问题呢？我们一起看看。Person类写好了（定义为V1.0版本），先把它序列化，存储到本地文件，其代码与之前相同，不在赘述。现在Person类的代码需要修改，initName的返回值改为”秦叔宝”.那么我们之前存储在磁盘上的的实例加载上来，pName的会是什么呢？</p><p>　　现在,Person类的代码需要修改，initName的返回值也改变了，代码如下:　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1867341609628930239L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过方法返回值为final变量赋值</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String pName <span class="token operator">=</span> <span class="token function">initName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">initName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"秦叔宝"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    上段代码仅仅修改了initName的返回值(Person类为V2.0版本)也就是通过new生成的对象的final变量的值都是”秦叔宝”，那么我们把之前存储在磁盘上的实例加载上来，pName的值会是什么呢？</p><p>　结果是”程咬金”，很诧异，上一建议说过final变量会被重新赋值，但是这个例子又没有重新赋值，为什么？</p><p>　　上个建议说的重新赋值，其中的”值”指的是简单对象。简单对象包括：8个基本类型，以及数组、字符串(字符串情况复杂，不通过new关键字生成的String对象的情况下，final变量的赋值与基本类型相同)，但是不能方法赋值。</p><p>　　其中的原理是这样的，保存到磁盘上(或网络传输)的对象文件包括两部分:</p><p>　　(1).类描述信息：包括类路径、继承关系、访问权限、变量描述、变量访问权限、方法签名、返回值、以及变量的关联类信息。要注意一点是，它并不是class文件的翻版，它不记录方法、构造函数、static变量等的具体实现。之所以类描述会被保存，很简单，是因为能去也能回嘛，这保证反序列化的健壮运行。</p><p>　　(2).非瞬态(transient关键字)和非静态(static关键字)的实体变量值</p><p>　　注意，这里的值如果是一个基本类型，好说，就是一个简单值保存下来；如果是复杂对象，也简单，连该对象和关联类信息一起保存，并且持续递归下去（关联类也必须实现Serializable接口，否则会出现序列化异常），也就是递归到最后，还是基本数据类型的保存。</p><p>　　正是因为这两个原因，一个持久化的对象文件会比一个class类文件大很多，有兴趣的读者可以自己测试一下，体积确实膨胀了不少。</p><p><strong>总结一下：反序列化时final变量在以下情况下不会被重新赋值:</strong></p><ol><li><strong>通过构造函数为final变量赋值</strong></li><li><strong>通过方法返回值为final变量赋值</strong></li><li><strong>final修饰的属性不是基本类型</strong></li></ol><h3><span id="建议14使用序列化类的私有方法巧妙解决部分属性持久化问题">建议14：使用序列化类的私有方法巧妙解决部分属性持久化问题</span></h3><p>​    部分属性持久化问题看似很简单，只要把不需要持久化的属性加上瞬态关键字(transient关键字)即可。这是一种解决方案，但有时候行不通。例如一个计税系统和一个HR系统，通过RMI(Remote Method Invocation,远程方法调用)对接，计税系统需要从HR系统获得人员的姓名和基本工资，以作为纳税的依据，而HR系统的工资分为两部分：基本工资和绩效工资，基本工资没什么秘密，绩效工资是保密的，不能泄露到外系统，这明显是连个相互关联的类，先看看薪水类Salary的代码：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Salary</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 2706085398747859680L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 基本工资</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> basePay<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 绩效工资</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> bonus<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Salary</span><span class="token punctuation">(</span><span class="token keyword">int</span> _basepay<span class="token punctuation">,</span> <span class="token keyword">int</span> _bonus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>basePay <span class="token operator">=</span> _basepay<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bonus <span class="token operator">=</span> _bonus<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Setter和Getter方法略</span><span class="token punctuation">}</span></code></pre><p>Person类和Salary类是关联关系，代码如下:　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 9146176880143026279L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Salary salary<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String _name<span class="token punctuation">,</span> Salary _salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> _name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> _salary<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Setter和Getter方法略</span><span class="token punctuation">}</span></code></pre><p>这是两个简单的JavaBean，都实现了Serializable接口，具备了序列化的条件。首先计税系统请求HR系统对一个Person对象进行序列化，把人员信息和工资信息传递到计税系统中，代码如下:　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Serialize</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 基本工资1000元，绩效工资2500元</span>        Salary salary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Salary</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 记录人员信息</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// HR系统持久化,并传递到计税系统</span>        SerializationUtils<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在通过网络传输到计税系统后，进行反序列化，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Deserialize</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> SerializationUtils<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"姓名: "</span><span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\t基本工资: "</span><span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBasePay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\t绩效工资: "</span><span class="token operator">+</span>p<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBonus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>打印出的结果为:姓名: 张三   基本工资: 1000   绩效工资: 2500</p><p>但是这不符合需求，因为计税系统只能从HR系统中获取人员姓名和基本工资，而绩效工资是不能获得的，这是个保密数据，不允许发生泄漏。怎么解决这个问题呢？你可能会想到以下四种方案:</p><ol><li>在bonus前加上关键字transient：这是一个方法，但不是一个好方法，加上transient关键字就标志着Salary失去了分布式部署的功能，它可能是HR系统核心的类了，一旦遭遇性能瓶颈，再想实现分布式部署就可能了，此方案否定;</li><li>新增业务对象：增加一个Person4Tax类，完全为计税系统服务，就是说它只有两个属性：姓名和基本工资。符合开闭原则，而且对原系统也没有侵入性，只是增加了工作量而已。但是这个方法不是最优方法;</li><li>请求端过滤：在计税系统获得Person对象后，过滤掉Salary的bonus属性，方案可行但不符合规矩，因为HR系统中的Salary类安全性竟然然外系统(计税系统来承担)，设计严重失职;</li><li>变更传输契约：例如改用XML传输，或者重建一个WebSerive服务，可以做但成本很高。</li></ol><p>下面展示一个优秀的方案，其中实现了Serializable接口的类可以实现两个私有方法：writeObject和readObject，以影响和控制序列化和反序列化的过程。我们把Person类稍作修改，看看如何控制序列化和反序列化，代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 9146176880143026279L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> Salary salary<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String _name<span class="token punctuation">,</span> Salary _salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> _name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> _salary<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//序列化委托方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span>ObjectOutputStream oos<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        oos<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>salary<span class="token punctuation">.</span><span class="token function">getBasePay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//反序列化委托方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream input<span class="token punctuation">)</span><span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        input<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        salary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Salary</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其它代码不做任何改动，运行之后结果为：姓名: 张三   基本工资: 1000   绩效工资: 0</p><p>在Person类中增加了writeObject和readObject两个方法，并且访问权限都是私有级别，为什么会改变程序的运行结果呢？其实这里用了序列化的独有机制：序列化回调。Java调用ObjectOutputStream类把一个对象转换成数据流时，会通过反射（Refection）检查被序列化的类是否有writeObject方法，并且检查其是否符合私有，无返回值的特性，若有，则会委托该方法进行对象序列化，若没有，则由ObjectOutputStream按照默认规则继续序列化。同样，在从流数据恢复成实例对象时，也会检查是否有一个私有的readObject方法，如果有，则会通过该方法读取属性值，此处有几个关键点需要说明：</p><ol><li>oos.defaultWriteObject():告知JVM按照默认的规则写入对象，惯例的写法是写在第一行。</li><li>input.defaultReadObject():告知JVM按照默认规则读入对象，惯例的写法是写在第一行。</li><li>oos.writeXX和input.readXX</li></ol><p>分别是写入和读出相应的值，类似一个队列，先进先出，如果此处有复杂的数据逻辑，建议按封装Collection对象处理。大家可能注意到上面的方式也是Person失去了分布式部署的能了，确实是，但是HR系统的难点和重点是薪水的计算，特别是绩效工资，它所依赖的参数很复杂（仅从数量上说就有上百甚至上千种），计算公式也不简单(一般是引入脚本语言，个性化公式定制)而相对来说Person类基本上都是静态属性，计算的可能性不大，所以即使为性能考虑，Person类为分布式部署的意义也不大。</p><h3><span id="建议15break万万不可忘">建议15：break万万不可忘</span></h3><p>​    我们经常会写一些转换类，比如货币转换，日期转换，编码转换等，在金融领域里用到的最多的要数中文数字转换了，比如把”1”转换为”壹”　，不过开源工具是不会提供此工具类的，因为它太贴近中国文化了，需要自己编写：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client15</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">toChineseNuberCase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">toChineseNuberCase</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String chineseNumber <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            chineseNumber <span class="token operator">=</span> <span class="token string">"零"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            chineseNumber <span class="token operator">=</span> <span class="token string">"壹"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            chineseNumber <span class="token operator">=</span> <span class="token string">"贰"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            chineseNumber <span class="token operator">=</span> <span class="token string">"叁"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            chineseNumber <span class="token operator">=</span> <span class="token string">"肆"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            chineseNumber <span class="token operator">=</span> <span class="token string">"伍"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            chineseNumber <span class="token operator">=</span> <span class="token string">"陆"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>            chineseNumber <span class="token operator">=</span> <span class="token string">"柒"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>            chineseNumber <span class="token operator">=</span> <span class="token string">"捌"</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>            chineseNumber <span class="token operator">=</span> <span class="token string">"玖"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> chineseNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    这是一个简单的代码，但运行结果却是”玖”，这个很简单，可能大家在刚接触语法时都学过，但虽简单，如果程序员漏写了，简单的问题会造成很大的后果，甚至经济上的损失。所以在用switch语句上记得加上break，养成良好的习惯。对于此类问题，除了平常小心之外，可以使用单元测试来避免，但大家都晓得，项目紧的时候，可能但单元测试都覆盖不了。所以对于此类问题，一个最简单的办法就是：修改IDE的警告级别，例如在Eclipse中，可以依次点击PerFormaces–&gt;Java–&gt;Compiler–&gt;Errors/Warings–&gt;Potential Programming problems,然后修改’switch’ case fall-through为Errors级别，如果你胆敢不在case语句中加入break，那Eclipse直接就报个红叉给你看，这样可以避免该问题的发生了。但还是啰嗦一句，养成良好习惯更重要!</p><h3><span id="建议16易变业务使用脚本语言编写">建议16：易变业务使用脚本语言编写</span></h3><p>　Java世界一直在遭受着异种语言的入侵，比如PHP，Ruby，Groovy、Javascript等，这些入侵者都有一个共同特征：全是同一类语言—–脚本语言，它们都是在运行期解释执行的。为什么Java这种强编译型语言会需要这些脚本语言呢？那是因为脚本语言的三大特征，如下所示：</p><ol><li>灵活：脚本语言一般都是动态类型，可以不用声明变量类型而直接使用，可以再运行期改变类型。　　</li><li>便捷：脚本语言是一种解释性语言，不需要编译成二进制代码，也不需要像Java一样生成字节码。它的执行时依靠解释器解释的，因此在运行期间变更代码很容易，而且不用停止应用；</li><li>简单：只能说部分脚本语言简单，比如Groovy，对于程序员来说，没有多大的门槛。</li></ol><p>　　脚本语言的这些特性是Java缺少的，引入脚本语言可以使Java更强大，于是Java6开始正式支持脚本语言。但是因为脚本语言比较多，Java的开发者也很难确定该支持哪种语言，于是JSCP（Java Community ProCess）很聪明的提出了JSR233规范，只要符合该规范的语言都可以在Java平台上运行（它对JavaScript是默认支持的）。</p><p>　　简单看看下面这个小例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">formual</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> var1 <span class="token operator">+</span> var2 <span class="token operator">*</span> factor<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这就是一个简单的脚本语言函数，可能你会很疑惑:factor(因子)这个变量是从那儿来的？它是从上下文来的，类似于一个运行的环境变量。该js保存在C:/model.js中，下一步需要调用JavaScript公式，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>Bindings<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>Invocable<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptEngine<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptEngineManager<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client16</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException<span class="token punctuation">,</span>            ScriptException<span class="token punctuation">,</span> NoSuchMethodException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获得一个JavaScript执行引擎</span>        ScriptEngine engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token string">"javascript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 建立上下文变量</span>        Bindings bind <span class="token operator">=</span> engine<span class="token punctuation">.</span><span class="token function">createBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bind<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"factor"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绑定上下文，作用于是当前引擎范围</span>        engine<span class="token punctuation">.</span><span class="token function">setBindings</span><span class="token punctuation">(</span>bind<span class="token punctuation">,</span> ScriptContext<span class="token punctuation">.</span>ENGINE_SCOPE<span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner input <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> first <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> second <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入参数是："</span><span class="token operator">+</span>first<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行Js代码</span>            engine<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"C:/model.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 是否可调用方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>engine <span class="token keyword">instanceof</span> <span class="token class-name">Invocable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Invocable in <span class="token operator">=</span> <span class="token punctuation">(</span>Invocable<span class="token punctuation">)</span> engine<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 执行Js中的函数</span>                Double result <span class="token operator">=</span> <span class="token punctuation">(</span>Double<span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">invokeFunction</span><span class="token punctuation">(</span><span class="token string">"formula"</span><span class="token punctuation">,</span> first<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运算结果是："</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上段代码使用Scanner类接受键盘输入的两个数字，然后调用JavaScript脚本的formula函数计算其结果，注意，除非输入了一个非int数字，否则当前JVM会一直运行，这也是模拟生成系统的在线变更情况。运行结果如下：</p><p>　输入参数是;1,2 运算结果是：3</p><p>此时，保持JVM的运行状态，我们修改一下formula函数，代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">formual</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> var1 <span class="token operator">+</span> var2 <span class="token operator">-</span> factor<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中,乘号变成了减号，计算公式发生了重大改变。回到JVM中继续输入，运行结果如下：</p><p>输入参数：1,2 运行结果是：2</p><p>   修改Js代码，JVM没有重启，输入参数也没有任何改变，仅仅改变脚本函数即可产生不同的效果。这就是脚本语言对系统设计最有利的地方：可以随时发布而不用部署；这也是我们javaer最喜爱它的地方—-即使进行变更，也能提供不间断的业务服务。</p><p>  Java6不仅仅提供了代码级的脚本内置，还提供了jrunscript命令工具，它可以再批处理中发挥最大效能，而且不需要通过JVM解释脚本语言，可以直接通过该工具运行脚本。想想看。这是多么大的诱惑力呀！而且这个工具是可以跨操作系统的，脚本移植就更容易了。</p><h3><span id="建议17慎用动态编译">建议17：慎用动态编译</span></h3><p>​    动态编译一直是java的梦想，从Java6开始支持动态编译了，可以再运行期直接编译.java文件，执行.class，并且获得相关的输入输出，甚至还能监听相关的事件。不过，我们最期望的还是定一段代码，直接编译，然后运行，也就是空中编译执行（on-the-fly），看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URI<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>JavaCompiler<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>JavaFileObject<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>SimpleJavaFileObject<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>StandardJavaFileManager<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>ToolProvider<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client17</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Java源代码</span>        String sourceStr <span class="token operator">=</span> <span class="token string">"public class Hello { public String sayHello (String name) {return \"Hello,\"+name+\"!\";}}"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 类名及文件名</span>        String clsName <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方法名</span>        String methodName <span class="token operator">=</span> <span class="token string">"sayHello"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前编译器</span>        JavaCompiler cmp <span class="token operator">=</span> ToolProvider<span class="token punctuation">.</span><span class="token function">getSystemJavaCompiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Java标准文件管理器</span>        StandardJavaFileManager fm <span class="token operator">=</span> cmp<span class="token punctuation">.</span><span class="token function">getStandardFileManager</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">,</span>                null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Java文件对象</span>        JavaFileObject jfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJavaObject</span><span class="token punctuation">(</span>clsName<span class="token punctuation">,</span> sourceStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 编译参数，类似于javac &lt;options>中的options</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> optionsList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 编译文件的存放地方，注意：此处是为Eclipse工具特设的</span>        optionsList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"-d"</span><span class="token punctuation">,</span> <span class="token string">"./bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 要编译的单元</span>        List<span class="token operator">&lt;</span>JavaFileObject<span class="token operator">></span> jfos <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>jfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置编译环境</span>        JavaCompiler<span class="token punctuation">.</span>CompilationTask task <span class="token operator">=</span> cmp<span class="token punctuation">.</span><span class="token function">getTask</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> fm<span class="token punctuation">,</span> null<span class="token punctuation">,</span>                optionsList<span class="token punctuation">,</span> null<span class="token punctuation">,</span> jfos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 编译成功</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 生成对象</span>            Object obj <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>clsName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token operator">></span> cls <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 调用sayHello方法</span>            Method m <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"Dynamic Compilation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">StringJavaObject</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleJavaFileObject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 源代码</span>    <span class="token keyword">private</span> String content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遵循Java规范的类名及文件</span>    <span class="token keyword">public</span> <span class="token function">StringJavaObject</span><span class="token punctuation">(</span>String _javaFileName<span class="token punctuation">,</span> String _content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token function">_createStringJavaObjectUri</span><span class="token punctuation">(</span>_javaFileName<span class="token punctuation">)</span><span class="token punctuation">,</span> Kind<span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span><span class="token punctuation">;</span>        content <span class="token operator">=</span> _content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 产生一个URL资源路径</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> URI <span class="token function">_createStringJavaObjectUri</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注意，此处没有设置包名</span>        <span class="token keyword">return</span> URI<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"String:///"</span> <span class="token operator">+</span> name <span class="token operator">+</span> Kind<span class="token punctuation">.</span>SOURCE<span class="token punctuation">.</span>extension<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 文本文件代码</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> CharSequence <span class="token function">getCharContent</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> ignoreEncodingErrors<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面代码较多，可以作为一个动态编译的模板程序。只要是在本地静态编译能够实现的任务，比如编译参数，输入输出，错误监控等，动态编译都能实现。</p><p>　　Java的动态编译对源提供了多个渠道。比如，可以是字符串，文本文件，字节码文件，还有存放在数据库中的明文代码或者字节码。汇总一句话，只要符合Java规范的就可以在运行期动态加载，其实现方式就是实现JavaFileObject接口，重写getCharContent、openInputStream、openOutputStream，或者实现JDK已经提供的两个SimpleJavaFileObject、ForwardingJavaFileObject,具体代码可以参考上个例子。</p><p>　　动态编译虽然是很好的工具，让我们可以更加自如的控制编译过程，但是在我们目前所接触的项目中还是使用较少。原因很简单，静态编译已经能够帮我们处理大部分的工作，甚至是全部的工作，即使真的需要动态编译，也有很好的替代方案，比如Jruby、Groovy等无缝的脚本语言。另外，我们在使用动态编译时，需要注意以下几点：</p><ol><li><strong>在框架中谨慎使用</strong>：比如要在struts中使用动态编译，动态实现一个类，它若继承自ActionSupport就希望它成为一个Action。能做到，但是debug很困难；再比如在Spring中，写一个动态类，要让它注入到Spring容器中，这是需要花费老大功夫的。</li><li><strong>不要在要求性能高的项目中使用</strong>：如果你在web界面上提供了一个功能，允许上传一个java文件然后运行，那就等于说:”我的机器没有密码，大家都可以看看”，这是非常典型的注入漏洞，只要上传一个恶意Java程序就可以让你所有的安全工作毁于一旦。</li><li><strong>记录动态编译过程</strong>：建议记录源文件，目标文件，编译过程，执行过程等日志，不仅仅是为了诊断，还是为了安全和审计，对Java项目来说，空中编译和运行时很不让人放心的，留下这些依据可以很好地优化程序。</li></ol><h3><span id="建议18避免instanceof非预期结果">建议18：避免instanceof非预期结果</span></h3><p> instanceof是一个简单的二元操作符，它是用来判断一个对象是否是一个类的实现，其操作类似于&gt;=、==，非常简单，我们看段程序，代码如下:　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client18</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// String对象是否是Object的实例 true</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token string">"String"</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// String对象是否是String的实例 true</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Object对象是否是String的实例 false</span>        <span class="token keyword">boolean</span> b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 拆箱类型是否是装箱类型的实例 编译不通过</span>        <span class="token keyword">boolean</span> b4 <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token keyword">instanceof</span> <span class="token class-name">Character</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 空对象是否是String的实例 false</span>        <span class="token keyword">boolean</span> b5 <span class="token operator">=</span> null <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换后的空对象是否是String的实例 false</span>        <span class="token keyword">boolean</span> b6 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> null <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Date是否是String的实例 编译不通过</span>        <span class="token keyword">boolean</span> b7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在泛型类型中判断String对象是否是Date的实例 false</span>        <span class="token keyword">boolean</span> b8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericClass</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDateInstance</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">GenericClass</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是否是Date类型</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDateInstance</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> t <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>就这么一段程序，instanceof的应用场景基本都出现了，同时问题也产生了：这段程序中哪些语句编译不通过，我们一个一个的解释说:</p><ul><li><p>“String” instanceof Object：返回值是true，这很正常,”String”是一个字符串，字符串又继承了Object，那当然返回true了。</p></li><li><p>new String() instanceof String：返回值是true，没有任何问题，一个类的对象当然是它的实例了。</p></li><li><p>new Object() instanceof String：返回值为false，Object是父类，其对象当然不是String类的实例了。要注意的是，这句话其实完全可以编译通过，只要instanceof关键字的左右两个操作数有继承或实现关系，就可以编译通过。</p></li><li><p>‘A’ instanceof Character：这句话编译不通过，为什么呢？因为’A’是一个char类型，也就是一个基本类型，不是一个对象，instanceof只能用于<strong>对象的判断</strong>，不能用于基本类型的判断。</p></li><li><p>null instanceof String：返回值为false，这是instanceof特有的规则，若做操作数为null，结果就直接返回false，不再运算右操作数是什么类。这对我们的程序非常有利，在使用instanceof操作符时，不用关心被判断的类(也就是左操作数)是否为null，这与我们经常用到的equals、toString方法不同。</p></li><li><p>(String) null instanceof String：返回值为false，不要看这里有个强制类型转换就认为结果是true，不是的，null是一个万用类型，也就是说它可以没类型，即使做类型转换还是个null。</p></li><li><p>new Date() instanceof String：编译不通过，因为Date类和String没有继承或实现关系，所以在编译时就直接报错了，instanceof操作符的左右操作数必须有继承或实现关系，否则编译会失败。</p></li><li><p>new GenericClass<string>().isDateInstance(“”)：编译不通过，非也，编译通过了，返回值为false，T是个String类型，于Date之间没有继承或实现关系，为什么”t instanceof Date”会编译通过呢？那是因为Java的泛型是为编码服务的，在编译成字节码时，T已经是Object类型了传递的实参是String类型，也就是说T的表面类型是Object，实际类型是String，那么”t instanceof Date”等价于”Object instanceof Date”了，所以返回false就很正常了。</string></p></li></ul><h3><span id="建议19断言绝对不是鸡肋">建议19：断言绝对不是鸡肋</span></h3><p>在防御式编程中经常会用断言(Assertion)对参数和环境做出判断，避免程序因不当的判断或输入错误而产生逻辑异常，断言在很多语言中都存在，C、C++、Python都有不同的断言表现形式.在Java中断言使用的是assert关键字，其基本用法如下：</p><p>　　assert&lt;布尔表达式&gt;</p><p>　　assert&lt;布尔表达式&gt; : &lt;错误信息&gt;</p><p>在布尔表达式为假时，跑出AssertionError错误，并附带了错误信息。assert的语法比较简单，有以下两个特性：</p><p>　　（1）、assert默认是不启用的</p><p>　　　　　　我们知道断言是为调试程序服务的，目的是为了能够迅速、方便地检查到程序异常，但Java在默认条件下是不启用的，要启用就要在编译、运行时加上相关的关键字，这就不多说，有需要的话可以参考一下Java规范。</p><p>　　（2）、assert跑出的异常AssertionError是继承自Error的</p><p>　　　　　　断言失败后，JVM会抛出一个AssertionError的错误，它继承自Error，注意，这是一个错误，不可恢复，也就是表明这是一个严重问题，开发者必须予以关注并解决之。</p><p>　　assert虽然是做断言的，但不能将其等价于if…else…这样的条件判断，它在以下两种情况下不可使用：</p><p>　　(1)、在对外的公开方法中</p><p>　　　　我们知道防御式编程最核心的一点就是：所有的外部因素(输入参数、环境变量、上下文)都是”邪恶”的，都存在着企图摧毁程序的罪恶本源，为了抵制它，我们要在程序处处检验。满地设卡，不满足条件，就不执行后续程序，以保护后续程序的正确性，处处设卡没问题，但就是不能用断言做输入校验，特别是公开方法。我们开看一个例子：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client19</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">StringUtils</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">encode</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">assert</span>    str <span class="token operator">!=</span> null <span class="token operator">:</span> <span class="token string">"加密的字符串为null"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*加密处理*/</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>encode方法对输入参数做了不为空的假设，如果为空，则抛出AssertionError错误，但这段程序存在一个严重的问题，encode是一个public方法，这标志着它时对外公开的，任何一个类只要能传递一个String类型的参数（遵守契约）就可以调用，但是Client19类按照规定和契约调用encode方法，却获得了一个AssertionError错误信息，是谁破坏了契约协议？—是encode方法自己。</p><p>　　(2)、在执行逻辑代码的情况下</p><p>　　　　assert的支持是可选的，在开发时可以让他运行，但在生产环境中系统则不需要其运行了（以便提高性能），因此在assert的布尔表达式中不能执行逻辑代码，否则会因为环境的不同而产生不同的逻辑，例如：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> Object element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"删除元素"</span> <span class="token operator">+</span> element <span class="token operator">+</span> <span class="token string">"失败"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*业务处理*/</span><span class="token punctuation">}</span></code></pre><p>这段代码在assert启用的环境下没有任何问题，但是一但投入到生成环境，就不会启用断言了，而这个方法就彻底完蛋了，list的删除动作永远不会执行，所以就永远不会报错或异常了，因为根本就没有执行嘛！</p><p>　　以上两种情况下不能使用断言assert，那在什么情况下能够使用assert呢？一句话：按照正常的执行逻辑不可能到达的代码区域可以防止assert。具体分为三种情况：</p><ol><li>在私有方法中放置assert作为输入参数的校验：在私有方法中可以放置assert校验输入参数，因为私有方法的使用者是作者自己，私有的方法的调用者和被调用者是一种契约关系，或者说没有契约关系，期间的约束是靠作者自己控制的，因此加上assert可以更好地预防自己犯错，或者无意的程序犯错。</li><li>流程控制中不可能到达的区域：这类似于Junit的fail方法，其标志性的意义就是，程序执行到这里就是错误的，例如：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 业务处理 */</span>    <span class="token punctuation">}</span>    <span class="token keyword">assert</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token string">"到达这里就表示错误"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.建立程序探针：我们可能会在一段程序中定义两个变量，分别代两个不同的业务含义，但是两者有固定的关系，例如:var1=var2 * 2，那我们就可以在程序中到处设”桩”了，断言这两者的关系，如果不满足即表明程序已经出现了异常，业务也就没有必要运行下去了。</p><h3><span id="建议20不要只替换一个类">建议20：不要只替换一个类</span></h3><p>​    我们经常在系统中定义一个常量接口（或常量类），以囊括系统中所涉及的常量，从而简化代码，方便开发，在很多的开源项目中已经采用了类似的方法，比如在struts2中，org.apache.struts2.StrutsConstants就是一个常量类，它定义Struts框架中与配置有关的常量，而org.apache.struts2.StrutsConstants则是一个常量接口，其中定义了OGNL访问的关键字。</p><p>​    关于常量接口(类)我们开看一个例子，首先定义一个常量类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constant</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义人类寿命极限</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_AGE<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这是一个非常简单的常量类，定义了人类的最大年龄，我们引用这个常量，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人类的寿命极限是："</span><span class="token operator">+</span>Constant<span class="token punctuation">.</span>MAX_AGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    运行结果easy，故省略。目前的代码是写在”智能型”IDE工具中完成的，下面暂时回溯到原始时代，也就是回归到用记事本编写代码的年代，然后看看会发生什么事情（为什么要如此，下面会给出答案）</p><p>　　修改常量Constant类，人类的寿命极限增加了，最大活到180,代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constant</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义人类寿命极限</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_AGE<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    然后重新编译，javac Constant，编译完成后执行：java Client，大家猜猜输出的年龄是多少？</p><p>　　输出的结果是:”人类的寿命极限是150”，竟然没有改成180，太奇怪了，这是为何？</p><p>　　原因是：对于final修饰的基本类型和String类型，编译器会认为它是稳定态的(Immutable Status)所以在编译时就直接把值编译到字节码中了，避免了在运行期引用（Run-time Reference），以提高代码的执行效率。对于我们的例子来说，Client类在编译时字节码中就写上了”150”,这个常量，而不是一个地址引用，因此无论你后续怎么修改常量类，只要不重新编译Client类，输出还是照旧。</p><p>　　对于final修饰的类(即非基本类型)，编译器会认为它不是稳定态的（Mutable Status），编译时建立的则是引用关系（该类型也叫作Soft Final）。如果Client类引入的常量是一个类或实例，及时不重新编译也会输出最新值。</p><p>　　<strong>千万不可小看了这点知识，细坑也能绊倒大象，比如在一个web项目中，开发人员修改了一个final类型的值（基本类型）考虑到重新发布的风险较大，或者是审批流程过于繁琐，反正是为了偷懒，于是直接采用替换class类文件的方式发布，替换完毕后应用服务器自动重启，然后简单测试一下，一切Ok，可运行几天后发现业务数据对不上，有的类(引用关系的类)使用了旧值，有的类（继承关系的类）使用的是新值，而且毫无头绪，让人一筹莫展，其实问题的根源就在于此。</strong></p><p>　　还有个小问题没有说明，我们的例子为什么不在IDE工具(比如Eclipse)中运行呢？那是因为在IDE中设置了自动编译不能重现此问题，若修改了Constant类，IDE工具会自动编译所有的引用类,”智能”化屏蔽了该问题，但潜在的风险其实仍然存在，我记得Eclipse应该有个设置自动编译的入口，有兴趣大家可以自己尝试一下。</p><p><strong><font color="red">注意：发布应用系统时禁止使用类文件替换方式，整体WAR包发布才是万全之策。但我觉得应特殊情况特殊对待，</font></strong></p><p><strong><font color="red">并不可以偏概全，大家以为呢？</font></strong></p><h2><span id="第2章-基本类型">第2章 基本类型</span></h2><p>​    不积跬步，无以至千里；不积小流，无以成江海。——荀子《劝学篇》</p><p>​    Java中的基本数据类型（Primitive Data Types）有8个：byte、char、short、int、long、float、double、boolean，它们是Java最基本的单元，我们的每一段程序中都有它们的身影，但我们对如此熟悉的“伙伴”又了解多少呢？积少成多，积土成山，本章我们就来一探这最基本的8个数据类型。</p><h3><span id="建议21用偶判断不用奇判断">建议21：用偶判断，不用奇判断</span></h3><p>​    判断一个数是奇数还是偶数是小学里的基本知识，能够被2整除的整数是偶数，不能被2整除的数是奇数，这规则简单明了，还有什么可考虑的？好，我们来看一个例子，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client21</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 接收键盘输入参数</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入多个数字判断奇偶："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">"-->"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"奇数"</span> <span class="token operator">:</span> <span class="token string">"偶数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输入多个数字，然后判断每个数字的奇偶性，不能被2整除的就是奇数，其它的都是偶数，完全是根据奇偶数的定义编写的程序，我们开看看打印的结果：</p><p>　　输入多个数字判断奇偶：1 2 0 -1 -2   1–&gt;奇数  2–&gt;偶数  0–&gt;偶数   <strong>-1–&gt;偶数</strong>    -2–&gt;偶数</p><p>前三个还很靠谱，第四个参数-1怎么可能是偶数呢，这Java也太差劲了吧。如此简单的计算也会出错！别忙着下结论，我们先来了解一下Java中的取余(%标识符)算法，模拟代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 模拟取余计算，dividend被除数，divisor除数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">remainder</span><span class="token punctuation">(</span><span class="token keyword">int</span> dividend<span class="token punctuation">,</span> <span class="token keyword">int</span> divisor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> dividend <span class="token operator">-</span> dividend <span class="token operator">/</span> divisor <span class="token operator">*</span> divisor<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看到这段程序，大家都会心的笑了，原来Java这么处理取余计算的呀，根据上面的模拟取余可知，当输入-1的时候，运算结果为-1，当然不等于1了，所以它就被判定为偶数了，也就是我们的判断失误了。问题明白了，修正也很简单，改为判断是否是偶数即可。代码如下：   i % 2 == 0 ? “偶数” : “奇数”;</p><p><strong><font color="red">注意：对于基础知识，我们应该”知其然，并知其所以然” </font></strong></p><h3><span id="建议22用整数类型处理货币">建议22：用整数类型处理货币</span></h3><p>在日常生活中，最容易接触到的小数就是货币，比如，你付给售货员10元钱购买一个9.6元的零食，售货员应该找你0.4元，也就是4毛钱才对，我们来看下面的程序：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client22</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10.00</span><span class="token operator">-</span><span class="token number">9.60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们的期望结果是0.4，也应该是这个数字，但是打印出来的却是:0.40000000000000036,这是为什么呢？</p><p>　　这是因为在计算机中浮点数有可能（注意是有可能）是不准确的，它只能无限接近准确值，而不能完全精确。为什么会如此呢？这是由浮点数的存储规则所决定的，我们先来看看0.4这个十进制小数如何转换成二进制小数，使用”乘2取整，顺序排列”法（不懂，这就没招了，这太基础了），我们发现0.4不能使用二进制准确的表示，在二进制数世界里它是一个无限循环的小数，也就是说，”展示” 都不能 “展示”，更别说在内存中存储了(浮点数的存储包括三部分：符号位、指数位、尾数，具体不再介绍)，可以这样理解，在十进制的世界里没有办法唯一准确表示1/3，那么在二进制的世界里当然也无法准确表示1/5(如果二进制也有分数的话倒是可以表示)，在二进制的世界里1/5是一个无限循环的小数。</p><p>　　大家可能要说了，那我对结果取整不就对了吗？代码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client22</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        NumberFormat f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.##"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">10.00</span><span class="token operator">-</span><span class="token number">9.60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>打印出的结果是0.4，看似解决了。但是隐藏了一个很深的问题。我们来思考一下金融行业的计算方法，会计系统一般记录小数点后的4为小数，但是在汇总、展现、报表中、则只记录小数点后的2位小数，如果使用浮点数来计算货币，想想看，在大批量加减乘除后结果会有很大的差距(其中还涉及到四舍五入的问题)！会计系统要求的就是准确，但是因为计算机的缘故不准确了，那真是罪过，要解决此问题有两种方法：</p><p>(1)、使用BigDecimal</p><p>　　　　BigDecimal是专门为弥补浮点数无法精确计算的缺憾而设计的类，并且它本身也提供了加减乘除的常用数学算法。特别是与数据库Decimal类型的字段映射时，BigDecimal是最优的解决方案。</p><p>(2)、<strong>使用整型</strong></p><p>　　　　把参与运算的值扩大100倍，并转为整型，然后在展现时再缩小100倍，这样处理的好处是计算简单，准确，一般在非金融行业(如零售行业)应用较多。此方法还会用于某些零售POS机，他们输入和输出的全部是整数，那运算就更简单了.</p><h3><span id="建议23不要让类型默默转换">建议23：不要让类型默默转换</span></h3><p>​    我们做一个小学生的题目，光速每秒30万公里，根据光线的旅行时间，计算月球和地球，太阳和地球之间的距离。代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client23</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 光速是30万公里/秒，常量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LIGHT_SPEED <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">10000</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"题目1：月球照射到地球需要一秒，计算月亮和地球的距离。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> dis1 <span class="token operator">=</span> LIGHT_SPEED <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月球与地球的距离是："</span> <span class="token operator">+</span> dis1 <span class="token operator">+</span> <span class="token string">" 米 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"题目2：太阳光照射到地球需要8分钟，计算太阳到地球的距离."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可能要超出整数范围，使用long型</span>        <span class="token keyword">long</span> dis2 <span class="token operator">=</span> LIGHT_SPEED <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"太阳与地球之间的距离是："</span> <span class="token operator">+</span> dis2 <span class="token operator">+</span> <span class="token string">" 米"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>估计有人鄙视了，这种小学生的乘法有神么可做的，不错，就是一个乘法运算，我们运行之后的结果如下：</p><p>　　　　<strong>题目1：月球照射到地球需要一秒，计算月亮和地球的距离。</strong><br>  　　 <strong>月球与地球的距离是：300000000 米</strong><br>   　 <strong>——————————-</strong><br>   　　<strong>题目2：太阳光照射到地球需要8分钟，计算太阳到地球的距离.</strong><br>   　　<strong>太阳与地球之间的距离是：-2028888064 米</strong></p><p>　　太阳和地球的距离竟然是负的，诡异。dis2不是已经考虑到int类型可能越界的问题，并使用了long型吗，怎么还会出现负值呢？</p><p>　　那是因为Java是先运算然后进行类型转换的，具体的说就是因为dis2的三个运算参数都是int型，三者相乘的结果虽然也是int型，但是已经超过了int的最大值，所以其值就是负值了(为什么是负值，因为过界了就会重头开始)，再转换为long型，结果还是负值。</p><p>　　问题知道了，解决起来也很简单，只要加个小小的L即可，代码如下：</p><p>　　long dis2 = LIGHT_SPEED * 60L * 8;</p><p>　　60L是一个长整型，乘出来的结果也是一个长整型的（此乃Java的基本转换规则，向数据范围大的方向转换，也就是加宽类型），在还没有超过int类型的范围时就已经转换为long型了，彻底解决了越界问题。在实际开发中，更通用的做法是主动声明类型转化(注意，不是强制类型转换)代码如下：</p><p>　　long dis2 = 1L * LIGHT_SPEED * 60L * 8</p><p>　　<strong>既然期望的结果是long型，那就让第一个参与的参数也是Long(1L)吧</strong>，也就说明”嗨”我已经是长整型了，你们都跟着我一块转为长整型吧。</p><p><strong><font color="red">注意：基本类型转换时，使用主动声明方式减少不必要的Bug. </font></strong></p><h3><span id="建议24边界还是边界">建议24：边界还是边界</span></h3><p>​    某商家生产的电子产品非常畅销，需要提前30天预订才能抢到手，同时还规定了一个会员可拥有的最多产品数量，目的是为了防止囤积压货肆意加价。会员的预订过程是这样的：先登录官方网站，选择产品型号，然后设置需要预订的数量，提交，符合规则即提示下单成功，不符合规则提示下单失败，后台的处理模拟如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client24</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 一个会员拥有产品的最多数量</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> LIMIT <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 会员当前用有的产品数量</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入需要预定的数量："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> order <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> order <span class="token operator">+</span> cur <span class="token operator">&lt;=</span> LIMIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你已经成功预定："</span> <span class="token operator">+</span> order <span class="token operator">+</span> <span class="token string">" 个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"超过限额，预定失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这是一个简单的订单处理程序，其中cur代表的是会员当前拥有的产品数量，LIMIT是一个会员最多拥有的产品数量（现实中，这两个参数当然是从数据库中获得的，不过这里是一个模拟程序），如果当前预订数量与拥有数量之和超过了最大数量，则预订失败，否则下单成功。业务逻辑很简单，同时在web界面上对订单数量做了严格的校验，比如不能是负值、不能超过最大数量等，但是人算不如天算，运行不到两小时数据库中就出现了异常数据：某会员拥有的产品数量与预定数量之和远远大于限额。怎么会这样呢？程序逻辑上不可能有问题呀，这如何产生的呢？我们来模拟一下，第一次输入：</p><p>　　请输入需要预定的数量：800   你已经成功预定800个产品</p><p>　　这完全满足条件，没有任何问题，继续输入：</p><p>　　请输入需要预定的数量：2147483647  你已经成功预定2147483647个产品</p><p>　　看到没有，这个数字已经远远超过了2000的限额，但是竟然预定成功了，真实神奇！<br>　　看着2147483647这个数字很眼熟？那就对了，这个数字就是int类型的最大值，没错，有人输入了一个最大值，使校验条件失败了，Why？我们来看程序，order的值是2147483647那再加上1000就超出int的范围了，其结果是-2147482649，那当然是小于正数2000了！一句归其原因：数字越界使校验条件失效。</p><p>　　<strong>在单元测试中，有一项测试叫做边界测试(也叫临界测试)，如果一个方法接收的是int类型的参数，那么以下三个值是必须测试的:0、正最大、负最小，其中正最大、负最小是边界值，如果这三个值都没有问题，方法才是比较安全可靠的。我们的例子就是因为缺少边界测试，致使生产系统产生了严重的偏差。</strong></p><p>　　也许你要疑惑了，Web界面已经做了严格的校验，为什么还能输入2147483647 这么大的数字呢？是否说明Web校验不严格?错了，不是这样的，Web校验都是在页面上通过JavaScript实现的，只能限制普通用户(这里的普通用户是指不懂html，不懂HTTP，不懂Java的简单使用者)，而对于高手，这些校验基本上就是摆设，HTTP是明文传输的，将其拦截几次，分析一下数据结构，然后写一个模拟器，一切前端校验就成了浮云！想往后台提交个什么数据还不是信手拈来！</p><h3><span id="建议25不要让四舍五入亏了一方">建议25：不要让四舍五入亏了一方</span></h3><p>​    本建议还是来重温一个小学数学问题：四舍五入。四舍五入是一种近似精确的计算方法，在Java5之前，我们一般是通过Math.round来获得指定精度的整数或小数的，这种方法使用非常广泛，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client25</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10.5近似值: "</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">10.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-10.5近似值: "</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果为：10.5近似值: 11    -10.5近似值: -10<br>　　这是四舍五入的经典案例，也是初级面试官很乐意选择的考题，绝对值相同的两个数字，近似值为什么就不同了呢？这是由Math.round采用的舍入规则决定的(采用的是正无穷方向舍入规则)，我们知道四舍五入是有误差的：其误差值是舍入的一半。我们以舍入运用最频繁的银行利息计算为例来阐述此问题。</p><p>　　我们知道银行的盈利渠道主要是利息差，从储户手里收拢资金，然后房贷出去，期间的利息差额便是所获得利润，对一个银行来说，对付给储户的利息计算非常频繁，人民银行规定每个季度末月的20日为银行结息日，一年有4次的结息日。</p><p>　　场景介绍完毕，我们回头来看看四舍五入，小于5的数字被舍去，大于5的数字进位后舍去，由于单位上的数字都是自然计算出来的，按照利率计算可知，被舍去的数字都分布在0~9之间，下面以10笔存款利息计算作为模型，以银行家的身份来思考这个算法：</p><p>　　四舍：舍弃的数值是：0.000、0.001、0.002、0.003、0.004因为是舍弃的，对于银行家来说就不需要付款给储户了，那每舍一个数字就会赚取相应的金额：0.000、0.001、0.002、0.003、0.004.</p><p>　　五入：进位的数值是：0.005、0.006、0.007、0.008、0.009，因为是进位，对银行家来说，每进一位就会多付款给储户，也就是亏损了，那亏损部分就是其对应的10进制补数：0.005、.0004、0.003、0.002、0.001.</p><p>　　因为舍弃和进位的数字是均匀分布在0~9之间，对于银行家来说，没10笔存款的利息因采用四舍五入而获得的盈利是：</p><p>　　0.000 + 0.001 + 0.002 + 0.003 + 0.004 - 0.005 - 0.004 - 0.003 - 0.002 - 0.001 = - 0.005；</p><p>　　也就是说，每10笔利息计算中就损失0.005元，即每笔利息计算就损失0.0005元，这对一家有5千万储户的银行家来说(对国内银行来说，5千万是个小数字)，每年仅仅因为四舍五入的误差而损失的金额是：</p><p>　　银行账户数量（5千万）<em>4（一年计算四次利息）</em>0.0005（每笔利息损失的金额）</p><p>　　5000<em>10000</em>0.0005*4=100000.0；即，每年因为一个算法误差就损失了10万元，事实上以上的假设条件都是非常保守的，实际情况可能损失的更多。那各位可能要说了，银行还要放贷呀，放出去这笔计算误差不就抵消了吗？不会抵消，银行的贷款数量是非常有限的其数量级根本无法和存款相比。</p><p>　　这个算法误差是由美国银行家发现的(那可是私人银行，钱是自己的，白白损失了可不行)，并且对此提出了一个修正算法，叫做银行家舍入(Banker’s Round)的近似算法，其规则如下：</p><ol><li>舍去位的数值小于5时，直接舍去；</li><li>舍去位的数值大于等于6时，进位后舍去；</li><li>当舍去位的数值等于5时，分两种情况：5后面还有其它数字(非0)，则进位后舍去；若5后面是0(即5是最后一个数字)，则根据5前一位数的奇偶性来判断是否需要进位，奇数进位，偶数舍去。</li></ol><p>　　以上规则汇总成一句话：<strong>四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一</strong>。我们举例说明，取2位精度；</p><p>　　round(10.5551) = 10.56  round(10.555) = 10.56  round(10.545) = 10.54 </p><p>　　要在Java5以上的版本中使用银行家的舍入法则非常简单，直接使用RoundingMode类提供的Round模式即可，示例代码如下：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>RoundingMode<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client25</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 存款</span>        BigDecimal d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">888888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 月利率，乘3计算季利率</span>        BigDecimal r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.001875</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算利息</span>        BigDecimal i <span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>RoundingMode<span class="token punctuation">.</span>HALF_EVEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"季利息是："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的例子中，我们使用了BigDecimal类，并且采用了setScale方法设置了精度，同时传递了一个RoundingMode.HALF_EVEN参数表示使用银行家法则进行近似计算，BigDecimal和RoundingMode是一个绝配，想要采用什么方式使用RoundingMode设置即可。目前Java支持以下七种舍入方式：</p><ol><li>ROUND_UP：原理零方向舍入。向远离0的方向舍入，也就是说，向绝对值最大的方向舍入，只要舍弃位非0即进位。</li><li>ROUND_DOWN：趋向0方向舍入。向0方向靠拢，也就是说，向绝对值最小的方向输入，注意：所有的位都舍弃，不存在进位情况。</li><li>ROUND_CEILING：向正无穷方向舍入。向正最大方向靠拢，如果是正数，舍入行为类似于ROUND_UP；如果为负数，则舍入行为类似于ROUND_DOWN.注意：Math.round方法使用的即为此模式。</li><li>ROUND_FLOOR：向负无穷方向舍入。向负无穷方向靠拢，如果是正数，则舍入行为类似ROUND_DOWN，如果是负数，舍入行为类似以ROUND_UP。</li><li>HALF_UP：最近数字舍入(5舍)，这就是我们经典的四舍五入。</li><li>HALF_DOWN：最近数字舍入(5舍)。在四舍五入中，5是进位的，在HALF_DOWN中却是舍弃不进位。</li><li><strong>HALF_EVEN：银行家算法</strong></li></ol><p>　　在普通的项目中舍入模式不会有太多影响，可以直接使用Math.round方法，但在大量与货币数字交互的项目中，一定要选择好近似的计算模式，尽量减少因算法不同而造成的损失。</p><p>==<strong>注意：根据不同的场景，慎重选择不同的舍入模式，以提高项目的精准度，减少算法损失。</strong>==</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>math<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Specifies a &lt;i>rounding behavior&lt;/i> for numerical operations * capable of discarding precision. Each rounding mode indicates how * the least significant returned digit of a rounded result is to be * calculated.  If fewer digits are returned than the digits needed to * represent the exact numerical result, the discarded digits will be * referred to as the &lt;i>discarded fraction&lt;/i> regardless the digits' * contribution to the value of the number.  In other words, * considered as a numerical value, the discarded fraction could have * an absolute value greater than one. * * &lt;p>Each rounding mode description includes a table listing how * different two-digit decimal values would round to a one digit * decimal value under the rounding mode in question.  The result * column in the tables could be gotten by creating a * {@code BigDecimal} number with the specified value, forming a * {@link MathContext} object with the proper settings * ({@code precision} set to {@code 1}, and the * {@code roundingMode} set to the rounding mode in question), and * calling {@link BigDecimal#round round} on this number with the * proper {@code MathContext}.  A summary table showing the results * of these rounding operations for all rounding modes appears below. * *&lt;p> *&lt;table border> * &lt;caption>&lt;b>Summary of Rounding Operations Under Different Rounding Modes&lt;/b>&lt;/caption> * &lt;tr>&lt;th>&lt;/th>&lt;th colspan=8>Result of rounding input to one digit with the given *                           rounding mode&lt;/th> * &lt;tr valign=top> * &lt;th>Input Number&lt;/th>         &lt;th>{@code UP}&lt;/th> *                                           &lt;th>{@code DOWN}&lt;/th> *                                                        &lt;th>{@code CEILING}&lt;/th> *                                                                       &lt;th>{@code FLOOR}&lt;/th> *                                                                                    &lt;th>{@code HALF_UP}&lt;/th> *                                                                                                   &lt;th>{@code HALF_DOWN}&lt;/th> *                                                                                                                    &lt;th>{@code HALF_EVEN}&lt;/th> *                                                                                                                                     &lt;th>{@code UNNECESSARY}&lt;/th> * * &lt;tr align=right>&lt;td>5.5&lt;/td>  &lt;td>6&lt;/td>  &lt;td>5&lt;/td>    &lt;td>6&lt;/td>    &lt;td>5&lt;/td>  &lt;td>6&lt;/td>      &lt;td>5&lt;/td>       &lt;td>6&lt;/td>       &lt;td>throw {@code ArithmeticException}&lt;/td> * &lt;tr align=right>&lt;td>2.5&lt;/td>  &lt;td>3&lt;/td>  &lt;td>2&lt;/td>    &lt;td>3&lt;/td>    &lt;td>2&lt;/td>  &lt;td>3&lt;/td>      &lt;td>2&lt;/td>       &lt;td>2&lt;/td>       &lt;td>throw {@code ArithmeticException}&lt;/td> * &lt;tr align=right>&lt;td>1.6&lt;/td>  &lt;td>2&lt;/td>  &lt;td>1&lt;/td>    &lt;td>2&lt;/td>    &lt;td>1&lt;/td>  &lt;td>2&lt;/td>      &lt;td>2&lt;/td>       &lt;td>2&lt;/td>       &lt;td>throw {@code ArithmeticException}&lt;/td> * &lt;tr align=right>&lt;td>1.1&lt;/td>  &lt;td>2&lt;/td>  &lt;td>1&lt;/td>    &lt;td>2&lt;/td>    &lt;td>1&lt;/td>  &lt;td>1&lt;/td>      &lt;td>1&lt;/td>       &lt;td>1&lt;/td>       &lt;td>throw {@code ArithmeticException}&lt;/td> * &lt;tr align=right>&lt;td>1.0&lt;/td>  &lt;td>1&lt;/td>  &lt;td>1&lt;/td>    &lt;td>1&lt;/td>    &lt;td>1&lt;/td>  &lt;td>1&lt;/td>      &lt;td>1&lt;/td>       &lt;td>1&lt;/td>       &lt;td>1&lt;/td> * &lt;tr align=right>&lt;td>-1.0&lt;/td> &lt;td>-1&lt;/td> &lt;td>-1&lt;/td>   &lt;td>-1&lt;/td>   &lt;td>-1&lt;/td> &lt;td>-1&lt;/td>     &lt;td>-1&lt;/td>      &lt;td>-1&lt;/td>      &lt;td>-1&lt;/td> * &lt;tr align=right>&lt;td>-1.1&lt;/td> &lt;td>-2&lt;/td> &lt;td>-1&lt;/td>   &lt;td>-1&lt;/td>   &lt;td>-2&lt;/td> &lt;td>-1&lt;/td>     &lt;td>-1&lt;/td>      &lt;td>-1&lt;/td>      &lt;td>throw {@code ArithmeticException}&lt;/td> * &lt;tr align=right>&lt;td>-1.6&lt;/td> &lt;td>-2&lt;/td> &lt;td>-1&lt;/td>   &lt;td>-1&lt;/td>   &lt;td>-2&lt;/td> &lt;td>-2&lt;/td>     &lt;td>-2&lt;/td>      &lt;td>-2&lt;/td>      &lt;td>throw {@code ArithmeticException}&lt;/td> * &lt;tr align=right>&lt;td>-2.5&lt;/td> &lt;td>-3&lt;/td> &lt;td>-2&lt;/td>   &lt;td>-2&lt;/td>   &lt;td>-3&lt;/td> &lt;td>-3&lt;/td>     &lt;td>-2&lt;/td>      &lt;td>-2&lt;/td>      &lt;td>throw {@code ArithmeticException}&lt;/td> * &lt;tr align=right>&lt;td>-5.5&lt;/td> &lt;td>-6&lt;/td> &lt;td>-5&lt;/td>   &lt;td>-5&lt;/td>   &lt;td>-6&lt;/td> &lt;td>-6&lt;/td>     &lt;td>-5&lt;/td>      &lt;td>-6&lt;/td>      &lt;td>throw {@code ArithmeticException}&lt;/td> *&lt;/table> * * * &lt;p>This {@code enum} is intended to replace the integer-based * enumeration of rounding mode constants in {@link BigDecimal} * ({@link BigDecimal#ROUND_UP}, {@link BigDecimal#ROUND_DOWN}, * etc. ). * * @see     BigDecimal * @see     MathContext * @author  Josh Bloch * @author  Mike Cowlishaw * @author  Joseph D. Darcy * @since 1.5 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RoundingMode <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * Rounding mode to round away from zero.  Always increments the         * digit prior to a non-zero discarded fraction.  Note that this         * rounding mode never decreases the magnitude of the calculated         * value.         *         *&lt;p>Example:         *&lt;table border>         *&lt;tr valign=top>&lt;th>Input Number&lt;/th>         *    &lt;th>Input rounded to one digit&lt;br> with {@code UP} rounding         *&lt;tr align=right>&lt;td>5.5&lt;/td>  &lt;td>6&lt;/td>         *&lt;tr align=right>&lt;td>2.5&lt;/td>  &lt;td>3&lt;/td>         *&lt;tr align=right>&lt;td>1.6&lt;/td>  &lt;td>2&lt;/td>         *&lt;tr align=right>&lt;td>1.1&lt;/td>  &lt;td>2&lt;/td>         *&lt;tr align=right>&lt;td>1.0&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>-1.0&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-1.1&lt;/td> &lt;td>-2&lt;/td>         *&lt;tr align=right>&lt;td>-1.6&lt;/td> &lt;td>-2&lt;/td>         *&lt;tr align=right>&lt;td>-2.5&lt;/td> &lt;td>-3&lt;/td>         *&lt;tr align=right>&lt;td>-5.5&lt;/td> &lt;td>-6&lt;/td>         *&lt;/table>         */</span>    <span class="token function">UP</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ROUND_UP<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * Rounding mode to round towards zero.  Never increments the digit         * prior to a discarded fraction (i.e., truncates).  Note that this         * rounding mode never increases the magnitude of the calculated value.         *         *&lt;p>Example:         *&lt;table border>         *&lt;tr valign=top>&lt;th>Input Number&lt;/th>         *    &lt;th>Input rounded to one digit&lt;br> with {@code DOWN} rounding         *&lt;tr align=right>&lt;td>5.5&lt;/td>  &lt;td>5&lt;/td>         *&lt;tr align=right>&lt;td>2.5&lt;/td>  &lt;td>2&lt;/td>         *&lt;tr align=right>&lt;td>1.6&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>1.1&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>1.0&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>-1.0&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-1.1&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-1.6&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-2.5&lt;/td> &lt;td>-2&lt;/td>         *&lt;tr align=right>&lt;td>-5.5&lt;/td> &lt;td>-5&lt;/td>         *&lt;/table>         */</span>    <span class="token function">DOWN</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ROUND_DOWN<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * Rounding mode to round towards positive infinity.  If the         * result is positive, behaves as for {@code RoundingMode.UP};         * if negative, behaves as for {@code RoundingMode.DOWN}.  Note         * that this rounding mode never decreases the calculated value.         *         *&lt;p>Example:         *&lt;table border>         *&lt;tr valign=top>&lt;th>Input Number&lt;/th>         *    &lt;th>Input rounded to one digit&lt;br> with {@code CEILING} rounding         *&lt;tr align=right>&lt;td>5.5&lt;/td>  &lt;td>6&lt;/td>         *&lt;tr align=right>&lt;td>2.5&lt;/td>  &lt;td>3&lt;/td>         *&lt;tr align=right>&lt;td>1.6&lt;/td>  &lt;td>2&lt;/td>         *&lt;tr align=right>&lt;td>1.1&lt;/td>  &lt;td>2&lt;/td>         *&lt;tr align=right>&lt;td>1.0&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>-1.0&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-1.1&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-1.6&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-2.5&lt;/td> &lt;td>-2&lt;/td>         *&lt;tr align=right>&lt;td>-5.5&lt;/td> &lt;td>-5&lt;/td>         *&lt;/table>         */</span>    <span class="token function">CEILING</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ROUND_CEILING<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * Rounding mode to round towards negative infinity.  If the         * result is positive, behave as for {@code RoundingMode.DOWN};         * if negative, behave as for {@code RoundingMode.UP}.  Note that         * this rounding mode never increases the calculated value.         *         *&lt;p>Example:         *&lt;table border>         *&lt;tr valign=top>&lt;th>Input Number&lt;/th>         *    &lt;th>Input rounded to one digit&lt;br> with {@code FLOOR} rounding         *&lt;tr align=right>&lt;td>5.5&lt;/td>  &lt;td>5&lt;/td>         *&lt;tr align=right>&lt;td>2.5&lt;/td>  &lt;td>2&lt;/td>         *&lt;tr align=right>&lt;td>1.6&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>1.1&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>1.0&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>-1.0&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-1.1&lt;/td> &lt;td>-2&lt;/td>         *&lt;tr align=right>&lt;td>-1.6&lt;/td> &lt;td>-2&lt;/td>         *&lt;tr align=right>&lt;td>-2.5&lt;/td> &lt;td>-3&lt;/td>         *&lt;tr align=right>&lt;td>-5.5&lt;/td> &lt;td>-6&lt;/td>         *&lt;/table>         */</span>    <span class="token function">FLOOR</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ROUND_FLOOR<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * Rounding mode to round towards {@literal "nearest neighbor"}         * unless both neighbors are equidistant, in which case round up.         * Behaves as for {@code RoundingMode.UP} if the discarded         * fraction is ≥ 0.5; otherwise, behaves as for         * {@code RoundingMode.DOWN}.  Note that this is the rounding         * mode commonly taught at school.         *         *&lt;p>Example:         *&lt;table border>         *&lt;tr valign=top>&lt;th>Input Number&lt;/th>         *    &lt;th>Input rounded to one digit&lt;br> with {@code HALF_UP} rounding         *&lt;tr align=right>&lt;td>5.5&lt;/td>  &lt;td>6&lt;/td>         *&lt;tr align=right>&lt;td>2.5&lt;/td>  &lt;td>3&lt;/td>         *&lt;tr align=right>&lt;td>1.6&lt;/td>  &lt;td>2&lt;/td>         *&lt;tr align=right>&lt;td>1.1&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>1.0&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>-1.0&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-1.1&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-1.6&lt;/td> &lt;td>-2&lt;/td>         *&lt;tr align=right>&lt;td>-2.5&lt;/td> &lt;td>-3&lt;/td>         *&lt;tr align=right>&lt;td>-5.5&lt;/td> &lt;td>-6&lt;/td>         *&lt;/table>         */</span>    <span class="token function">HALF_UP</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * Rounding mode to round towards {@literal "nearest neighbor"}         * unless both neighbors are equidistant, in which case round         * down.  Behaves as for {@code RoundingMode.UP} if the discarded         * fraction is > 0.5; otherwise, behaves as for         * {@code RoundingMode.DOWN}.         *         *&lt;p>Example:         *&lt;table border>         *&lt;tr valign=top>&lt;th>Input Number&lt;/th>         *    &lt;th>Input rounded to one digit&lt;br> with {@code HALF_DOWN} rounding         *&lt;tr align=right>&lt;td>5.5&lt;/td>  &lt;td>5&lt;/td>         *&lt;tr align=right>&lt;td>2.5&lt;/td>  &lt;td>2&lt;/td>         *&lt;tr align=right>&lt;td>1.6&lt;/td>  &lt;td>2&lt;/td>         *&lt;tr align=right>&lt;td>1.1&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>1.0&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>-1.0&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-1.1&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-1.6&lt;/td> &lt;td>-2&lt;/td>         *&lt;tr align=right>&lt;td>-2.5&lt;/td> &lt;td>-2&lt;/td>         *&lt;tr align=right>&lt;td>-5.5&lt;/td> &lt;td>-5&lt;/td>         *&lt;/table>         */</span>    <span class="token function">HALF_DOWN</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ROUND_HALF_DOWN<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * Rounding mode to round towards the {@literal "nearest neighbor"}         * unless both neighbors are equidistant, in which case, round         * towards the even neighbor.  Behaves as for         * {@code RoundingMode.HALF_UP} if the digit to the left of the         * discarded fraction is odd; behaves as for         * {@code RoundingMode.HALF_DOWN} if it's even.  Note that this         * is the rounding mode that statistically minimizes cumulative         * error when applied repeatedly over a sequence of calculations.         * It is sometimes known as {@literal "Banker's rounding,"} and is         * chiefly used in the USA.  This rounding mode is analogous to         * the rounding policy used for {@code float} and {@code double}         * arithmetic in Java.         *         *&lt;p>Example:         *&lt;table border>         *&lt;tr valign=top>&lt;th>Input Number&lt;/th>         *    &lt;th>Input rounded to one digit&lt;br> with {@code HALF_EVEN} rounding         *&lt;tr align=right>&lt;td>5.5&lt;/td>  &lt;td>6&lt;/td>         *&lt;tr align=right>&lt;td>2.5&lt;/td>  &lt;td>2&lt;/td>         *&lt;tr align=right>&lt;td>1.6&lt;/td>  &lt;td>2&lt;/td>         *&lt;tr align=right>&lt;td>1.1&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>1.0&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>-1.0&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-1.1&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-1.6&lt;/td> &lt;td>-2&lt;/td>         *&lt;tr align=right>&lt;td>-2.5&lt;/td> &lt;td>-2&lt;/td>         *&lt;tr align=right>&lt;td>-5.5&lt;/td> &lt;td>-6&lt;/td>         *&lt;/table>         */</span>    <span class="token function">HALF_EVEN</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ROUND_HALF_EVEN<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * Rounding mode to assert that the requested operation has an exact         * result, hence no rounding is necessary.  If this rounding mode is         * specified on an operation that yields an inexact result, an         * {@code ArithmeticException} is thrown.         *&lt;p>Example:         *&lt;table border>         *&lt;tr valign=top>&lt;th>Input Number&lt;/th>         *    &lt;th>Input rounded to one digit&lt;br> with {@code UNNECESSARY} rounding         *&lt;tr align=right>&lt;td>5.5&lt;/td>  &lt;td>throw {@code ArithmeticException}&lt;/td>         *&lt;tr align=right>&lt;td>2.5&lt;/td>  &lt;td>throw {@code ArithmeticException}&lt;/td>         *&lt;tr align=right>&lt;td>1.6&lt;/td>  &lt;td>throw {@code ArithmeticException}&lt;/td>         *&lt;tr align=right>&lt;td>1.1&lt;/td>  &lt;td>throw {@code ArithmeticException}&lt;/td>         *&lt;tr align=right>&lt;td>1.0&lt;/td>  &lt;td>1&lt;/td>         *&lt;tr align=right>&lt;td>-1.0&lt;/td> &lt;td>-1&lt;/td>         *&lt;tr align=right>&lt;td>-1.1&lt;/td> &lt;td>throw {@code ArithmeticException}&lt;/td>         *&lt;tr align=right>&lt;td>-1.6&lt;/td> &lt;td>throw {@code ArithmeticException}&lt;/td>         *&lt;tr align=right>&lt;td>-2.5&lt;/td> &lt;td>throw {@code ArithmeticException}&lt;/td>         *&lt;tr align=right>&lt;td>-5.5&lt;/td> &lt;td>throw {@code ArithmeticException}&lt;/td>         *&lt;/table>         */</span>    <span class="token function">UNNECESSARY</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ROUND_UNNECESSARY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Corresponding BigDecimal rounding constant</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> oldMode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Constructor     *     * @param oldMode The {@code BigDecimal} constant corresponding to     *        this mode     */</span>    <span class="token keyword">private</span> <span class="token function">RoundingMode</span><span class="token punctuation">(</span><span class="token keyword">int</span> oldMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oldMode <span class="token operator">=</span> oldMode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns the {@code RoundingMode} object corresponding to a     * legacy integer rounding mode constant in {@link BigDecimal}.     *     * @param  rm legacy integer rounding mode to convert     * @return {@code RoundingMode} corresponding to the given integer.     * @throws IllegalArgumentException integer is out of range     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RoundingMode <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> rm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>rm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> BigDecimal<span class="token punctuation">.</span>ROUND_UP<span class="token operator">:</span>            <span class="token keyword">return</span> UP<span class="token punctuation">;</span>        <span class="token keyword">case</span> BigDecimal<span class="token punctuation">.</span>ROUND_DOWN<span class="token operator">:</span>            <span class="token keyword">return</span> DOWN<span class="token punctuation">;</span>        <span class="token keyword">case</span> BigDecimal<span class="token punctuation">.</span>ROUND_CEILING<span class="token operator">:</span>            <span class="token keyword">return</span> CEILING<span class="token punctuation">;</span>        <span class="token keyword">case</span> BigDecimal<span class="token punctuation">.</span>ROUND_FLOOR<span class="token operator">:</span>            <span class="token keyword">return</span> FLOOR<span class="token punctuation">;</span>        <span class="token keyword">case</span> BigDecimal<span class="token punctuation">.</span>ROUND_HALF_UP<span class="token operator">:</span>            <span class="token keyword">return</span> HALF_UP<span class="token punctuation">;</span>        <span class="token keyword">case</span> BigDecimal<span class="token punctuation">.</span>ROUND_HALF_DOWN<span class="token operator">:</span>            <span class="token keyword">return</span> HALF_DOWN<span class="token punctuation">;</span>        <span class="token keyword">case</span> BigDecimal<span class="token punctuation">.</span>ROUND_HALF_EVEN<span class="token operator">:</span>            <span class="token keyword">return</span> HALF_EVEN<span class="token punctuation">;</span>        <span class="token keyword">case</span> BigDecimal<span class="token punctuation">.</span>ROUND_UNNECESSARY<span class="token operator">:</span>            <span class="token keyword">return</span> UNNECESSARY<span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"argument out of range"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="建议26提防包装类型的null值">建议26：提防包装类型的null值</span></h3><p>​    我们知道Java引入包装类型(Wrapper Types)是为了解决基本类型的实例化问题，以便让一个基本类型也能参与到面向对象的编程世界中。而在Java5中泛型更是对基本类型说了”不”，如果把一个整型放入List中，就必须使用Integer包装类型。我们看一段代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client26</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">testMethod</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">testMethod</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　testMethod接收一个元素是整型的List参数，计算所有元素之和，这在统计和项目中很常见，然后编写一个测试testMethod，在main方法中把1、2和空值都放到List中，然后调用方法计算，现在思考一下会不会报错。应该不会吧，基本类型和包装类型都是可以通过自动装箱（Autoboxing）和自动拆箱(AutoUnboxing)自由转换的，null应该可以转换为0吧，真的是这样吗？运行之后的结果是：　　Exception in thread “main” java.lang.NullPointerException　　运行失败，报空指针异常，我们稍稍思考一下很快就知道原因了：在程序for循环中，隐含了一个拆箱过程，在此过程中包装类型转换为了基本类型。我们知道拆箱过程是通过调用包装对象的intValue方法来实现的，由于包装类型为null，访问其intValue方法报空指针异常就在所难免了。问题清楚了，修改也很简单，加入null值检查即可，代码如下：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">testMethod</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        count <span class="token operator">+=</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> i <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    上面以Integer和int为例说明了拆箱问题，其它7个包装对象的拆箱过程也存在着同样的问题。包装对象和拆箱对象可以自由转换，这不假，但是要剔除null值，null值并不能转换为基本类型。对于此问题，我们谨记一点：<font color="red">包装类型参与运算时，要做null值校验。</font></p><h3><span id="建议27谨慎包装类型的大小比较">建议27：谨慎包装类型的大小比较</span></h3><p>​    基本类型是可以比较大小的，其所对应的包装类型都实现了Comparable接口，也说明了此问题，那我们来比较一下两个包装类型的大小，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client27</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">compare</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer i<span class="token punctuation">,</span> Integer j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代码很简单，产生了两个Integer对象，然后比较两个的大小关系，既然包装类型和基本类型是可以自由转换的，那上面的代码是不是就可以打印出两个相等的值呢？让事实说话，运行结果如下：</p><p>　　false false false</p><p>　　竟然是3个false，也就是说两个值之间不相等，也没大小关系，这个也太奇怪了吧。不奇怪，我们来一 一解释：</p><ol><li>i= =j：在java中”= =”是用来判断两个操作数是否有相等关系的，如果是基本类型则判断值是否相等，如果是对象则判断是否是一个对象的两个引用，也就是地址是否相等，这里很明显是两个对象，两个地址不可能相等。</li><li>i&gt;j 和 i&lt;j：在Java中，”&gt;” 和 “&lt;” 用来判断两个数字类型的大小关系，注意只能是数字类型的判断，对于Integer包装类型，是根据其intValue()方法的返回值(也就是其相应的基本类型)进行比较的(其它包装类型是根据相应的value值比较的，如doubleValue,floatValue等)，那很显然，两者不肯能有大小关系的。</li></ol><p>问题清楚了，修改总是比较容易的，直接使用Integer的实例compareTo方法即可，但是这类问题的产生更应该说是习惯问题，只要是两个对象之间的比较就应该采用相应的方法，而不是通过Java的默认机制来处理，除非你确定对此非常了解。</p><h3><span id="建议28优先使用整型池">建议28：优先使用整型池</span></h3><p>上一个建议我们解释了包装对象的比较问题，本建议将继续深入讨论相关问题，首先看看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client28</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tempInt <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n====="</span> <span class="token operator">+</span> tempInt <span class="token operator">+</span> <span class="token string">" 的相等判断====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 两个通过new产生的对象</span>            Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>tempInt<span class="token punctuation">)</span><span class="token punctuation">;</span>            Integer j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>tempInt<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" new 产生的对象："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 基本类型转换为包装类型后比较</span>            i <span class="token operator">=</span> tempInt<span class="token punctuation">;</span>            j <span class="token operator">=</span> tempInt<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 基本类型转换的对象："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过静态方法生成一个实例</span>            i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>tempInt<span class="token punctuation">)</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>tempInt<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" valueOf产生的对象："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输入多个数字，然后按照3中不同的方式产生Integer对象，判断其是否相等，注意这里使用了”==”，这说明判断的不是同一个对象。我们输入三个数字127、128、555，结果如下：</p><p>　　<strong>127</strong><br><strong>= = = = =127 的相等判断 = = == =</strong><br> <strong>new 产生的对象：false</strong><br> <strong>基本类型转换的对象：true</strong><br> <strong>valueOf产生的对象：true</strong><br><strong>128</strong><br><strong>= = = = =128 的相等判断= = = = =</strong><br> <strong>new 产生的对象：false</strong><br> <strong>基本类型转换的对象：false</strong><br> <strong>valueOf产生的对象：false</strong><br><strong>555</strong><br><strong>= = = = =555 的相等判断= = = = =</strong><br> <strong>new 产生的对象：false</strong><br> <strong>基本类型转换的对象：false</strong><br> <strong>valueOf产生的对象：false</strong></p><p>很不可思议呀，数字127的比较结果竟然和其它两个数字不同，它的装箱动作所产生的对象竟然是同一个对象，valueOf产生的也是同一个对象，但是大于127的数字和128和555的比较过程中产生的却不是同一个对象，这是为什么？我们来一个一个解释。</p><p>(1)、new产生的Integer对象</p><p>　　　　new声明的就是要生成一个新的对象，没二话，这是两个对象，地址肯定不等，比较结果为false。</p><p>(2)、装箱生成的对象</p><p>　　对于这一点，首先要说明的是装箱动作是通过valueOf方法实现的，也就是说后两个算法相同的，那结果肯定也是一样的，现在问题是：valueOf是如何生成对象的呢？我们来阅读以下Integer.valueOf的源码：　</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Returns an {@code Integer} instance representing the specified     * {@code int} value.  If a new {@code Integer} instance is not     * required, this method should generally be used in preference to     * the constructor {@link #Integer(int)}, as this method is likely     * to yield significantly better space and time performance by     * caching frequently requested values.     *     * This method will always cache values in the range -128 to 127,     * inclusive, and may cache other values outside of this range.     *     * @param  i an {@code int} value.     * @return an {@code Integer} instance representing {@code i}.     * @since  1.5     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">assert</span> IntegerCache<span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> IntegerCache<span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> IntegerCache<span class="token punctuation">.</span>high<span class="token punctuation">)</span>            <span class="token keyword">return</span> IntegerCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>IntegerCache<span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>​    这段代码的意思已经很明了了，如果是-128到127之间的int类型转换为Integer对象，则直接从cache数组中获得，那cache数组里是什么东西，JDK7的源代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Cache to support the object identity semantics of autoboxing for values between     * -128 and 127 (inclusive) as required by JLS.     *     * The cache is initialized on first usage.  The size of the cache     * may be controlled by the -XX:AutoBoxCacheMax=&lt;size> option.     * During VM initialization, java.lang.Integer.IntegerCache.high property     * may be set and saved in the private system properties in the     * sun.misc.VM class.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> Integer cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// high value may be configured by property</span>            <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>            String integerCacheHighPropValue <span class="token operator">=</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>VM<span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Maximum array size is Integer.MAX_VALUE</span>                h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            high <span class="token operator">=</span> h<span class="token punctuation">;</span>            cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token function">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>​    cache是IntegerCache内部类的一个静态数组，容纳的是-128到127之间的Integer对象。通过valueOf产生包装对象时，如果int参数在-128到127之间，则直接从整型池中获得对象，不在该范围内的int类型则通过new生成包装对象。</p><p>　　明白了这一点，要理解上面的输出结果就迎刃而解了，127的包装对象是直接从整型池中获得的，不管你输入多少次127这个数字，获得的对象都是同一个，那地址自然是相等的。而128、555超出了整型池范围，是通过new产生一个新的对象，地址不同，当然也就不相等了。</p><p>　　以上的理解也是整型池的原理，整型池的存在不仅仅提高了系统性能，同时也节约了内存空间，这也是我们使用整型池的原因，也就是在声明包装对象的时候使用valueOf生成，而不是通过构造函数来生成的原因。顺便提醒大家，在判断对象是否相等的时候，最好使用equals方法，避免使用”==”产生非预期效果。</p><p><strong><font color="red">注意：通过包装类型的valueOf生成的包装实例可以显著提高空间和时间性能。</font></strong></p><h3><span id="建议29优先选择基本类型">建议29：优先选择基本类型</span></h3><p>​    包装类型是一个类，它提供了诸如构造方法，类型转换，比较等非常实用的功能，而且在Java5之后又实现了与基本类型的转换，这使包装类型如虎添翼，更是应用广泛了，在开发中包装类型已经随处可见，但无论是从安全性、性能方面来说，还是从稳定性方面来说，基本类型都是首选方案。我们看一段代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client29</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Client29 c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client29</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">140</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分别传递int类型和Integer类型</span>        c<span class="token punctuation">.</span><span class="token function">testMethod</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 基本类型的方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span>Long a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 包装类型的方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的程序中首先声明了一个int变量i，然后加宽转变成long型，再调用testMethod()方法,分别传递int和long的基本类型和包装类型，诸位想想该程序是否能够编译？如果能编译，输出结果又是什么呢？</p><p>　　首先，这段程序绝对是能够编译的。不过，说不能编译的同学还是动了一番脑筋的，你可能猜测以下这些地方不能编译：</p><p>　　(1)、testMethod方法重载问题。定义的两个testMethod()方法实现了重载，一个形参是基本类型，一个形参是包装类型，这类重载很正常。虽然基本类型和包装类型有自动装箱、自动拆箱功能，但并不影响它们的重载，自动拆箱(装箱)只有在赋值时才会发生，和编译重载没有关系。</p><p>　　(2)、c.testMethod(i) 报错。i 是int类型，传递到testMethod(long a)是没有任何问题的，编译器会自动把 i 的类型加宽，并将其转变为long型，这是基本类型的转换法则，也没有任何问题。</p><p>　　(3)、c.testMethod(new Integer(i))报错。代码中没有testMethod(Integer i)方法，不可能接收一个Integer类型的参数，而且Integer和Long两个包装类型是兄弟关系，不是继承关系，那就是说肯定编译失败了？不，编译时成功的，稍后再解释为什么这里编译成功。</p><p>既然编译通过了，我们看一下输出：</p><p>　 <strong>基本类型的方法被调用</strong><br>    <strong>基本类型的方法被调用</strong></p><p>　　c.testMethod(i)的输出是正常的，我们已经解释过了，那第二个输出就让人困惑了，为什么会调用testMethod（long a）方法呢？这是因为自动装箱有一个重要原则：基本类型可以先加宽，再转变成宽类型的包装类型，但不能直接转变成宽类型的包装类型。这句话比较拗口，简单的说就是，int可以加宽转变成long，然后再转变成Long对象，但不能直接转变成包装类型，注意这里指的都是自动转换，不是通过构造函数生成，为了解释这个原则，我们再来看一个例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client29</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Client29 c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client29</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">140</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">testMethod</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span>Long a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 包装类型的方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    这段程序的编译是不通过的，因为i是一个int类型，不能自动转变为Long型，但是修改成以下代码就可以通过了：</p><p>int i = 140; long a =（long）i； c.testMethod(a);<br>这就是int先加宽转变成为long型，然后自动转换成Long型，规则说明了，我们继续来看testMethod(Integer.valueOf(i))是如何调用的，Integer.valueOf(i)返回的是一个Integer对象，这没错，但是Integer和int是可以互相转换的。没有testMethod(Integer i)方法？没关系，编译器会尝试转换成int类型的实参调用，Ok，这次成功了，与testMethod（i）相同了，于是乎被加宽转变成long型—结果也很明显了。整个testMethod(Integer.valueOf(i))的执行过程是这样的：</p><p>　　(1)、i 通过valueOf方法包装成一个Integer对象</p><p>　　(2)、由于没有testMethod(Integer i)方法，编译器会”聪明”的把Integer对象转换成int。</p><p>　　(3)、int自动拓宽为long，编译结束</p><p>　　使用包装类型确实有方便的方法，但是也引起一些不必要的困惑，比如我们这个例子，如果testMethod()的两个重载方法使用的是基本类型，而且实参也是基本类型，就不会产生以上问题，而且程序的可读性更强。自动装箱(拆箱)虽然很方便，但引起的问题也非常严重，我们甚至都不知道执行的是哪个方法。</p><p><strong><font color="red">注意：重申，基本类型优先考虑。</font></strong></p><h3><span id="建议30不要随便设置随机种子">建议30：不要随便设置随机种子</span></h3><p>​    随机数用的地方比较多，比如加密，混淆计算，我们使用随机数期望获得一个唯一的、不可仿造的数字，以避免产生相同的业务数据造成混乱。在Java项目中通常是通过Math.random方法和Random类来获得随机数的，我们来看一段代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client30</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"次:"</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    代码很简单，我们一般都是这样获得随机数的，运行此程序可知，三次打印，的随机数都不相同，即使多次运行结果也不同，这也正是我们想要随机数的原因，我们再来看看下面的程序：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client30</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"次:"</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面使用了Random的有参构造，运行结果如下：</p><p><strong>第1次:-1244746321</strong><br><strong>第2次:1060493871</strong><br><strong>第3次:-1826063944</strong><br><strong>第4次:1976922248</strong>　　</p><p> 　计算机不同输出的随机数也不同，但是有一点是相同的：在同一台机器上，甭管运行多少次，所打印的随机数都是相同的，也就是说第一次运行，会打印出这几个随机数，第二次运行还是打印出这三个随机数，只要是在同一台机器上，就永远都会打印出相同的随机数，似乎随机数不随机了，问题何在？</p><p>　　那是因为<strong>产生的随机数的种子被固定了</strong>，在Java中，随机数的产生取决于种子，随机数和种子之间的关系遵从以下两个原则：</p><ol><li>种子不同，产生不同的随机数</li><li>种子相同，即使实例不同也产生相同的随机数</li></ol><p>　　看完上面两个规则，我们再来看这个例子，会发现问题就出在有参构造上，Random类的默认种子(无参构造)是System.nonoTime()的返回值(JDK1.5版本以前默认种子是System.currentTimeMillis()的返回值)，注意这个值是距离某一个固定时间点的纳秒数，不同的操作系统和硬件有不同的固定时间点，也就是说不同的操作系统其纳秒值是不同的，而同一个操作系统纳秒值也会不同，随机数自然也就不同了.(顺便说下，System.nonoTime不能用于计算日期，那是因为”固定”的时间是不确定的，纳秒值甚至可能是负值，这点与System.currentTiemMillis不同)。</p><p>　　new Random(1000)显示的<strong>设置了随机种子</strong>为1000，运行多次，虽然实例不同，但都会获得相同的四个随机数，所以，除非必要，否则不要设置随机种子。</p><p>　　顺便提一下，在Java中有两种方法可以获得不同的随机数：通过，java.util.Random类获得随机数的原理和Math.random方法相同，Math.random方法也是通过生成一个Random类的实例，然后委托nextDouble()方法的，两者殊途同归，没有差别。</p><p><strong><font color="red">注意：若非必要，不要设置随机数种子</font></strong></p><h2><span id="第3章-类-对象及方法">第3章 类、对象及方法</span></h2><p>​    书读得多而不思考，你会觉得自己知道的很多。书读得多而思考，你会觉得自己不懂的越来越多。——伏尔泰</p><p>​    在面向对象编程（Object-Oriented Programming，OOP）的世界里，类和对象是真实世界的描述工具，方法是行为和动作的展示形式，封装、继承、多态则是其多姿多彩的主要实现方式，如此，OOP才会像现在这样繁荣昌盛、欣欣向荣。本章主要讲述关于Java类、对象、方法的种种规则、限制及建议，让读者在面向对象编程的世界中走得更远，飞得更高。</p><h3><span id="建议31在接口中不要存在实现代码">建议31：在接口中不要存在实现代码</span></h3><p>​    看到这样的标题，大家是否感到郁闷呢？接口中有实现代码吗？这怎么可能呢？确实，接口中可以声明常量，声明抽象方法，可以继承父接口，但就是不能有具体实现，因为接口是一种契约(Contract),是一种框架性协议，这表明它的实现类都是同一种类型，或者具备相似特征的一个集合体。对于一般程序，接口确实没有任何实现，但是在那些特殊的程序中就例外了，阅读如下代码：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client31</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用接口的实现</span>        B<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在接口中存在实现代码</span><span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> S s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我在接口中实现了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 被实现的接口</span><span class="token keyword">interface</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    仔细看main方法，注意那个B接口。它调用了接口常量，在没有实现任何显示实现类的情况下，它竟然打印出了结果，那B接口中的s常量(接口是S)是在什么地方被实现的呢？答案在B接口中。</p><p>　　在B接口中声明了一个静态常量s，其值是一个匿名内部类(Anonymous Inner Class)的实例对象，就是该匿名内部类（当然，也可以不用匿名，直接在接口中是实现内部类也是允许的）实现了S接口。你看，在接口中也存在着实现代码吧！</p><p>　　这确实很好，很强大，但是在一般的项目中，此类代码是严禁出现的，原因很简单：这是一种非常不好的编码习惯，接口是用来干什么的？接口是一个契约，不仅仅约束着实现，同时也是一个保证，保证提供的服务(常量和方法)是稳定的、可靠的，如果把实现代码写到接口中，那接口就绑定了可能变化的因素，这会导致实现不再稳定和可靠，是随时都可能被抛弃、被更改、被重构的。所以，接口中虽然可以有实现，但应避免使用。</p><p><strong><font color="red">注意：接口中不能出现实现代码。</font></strong></p><h3><span id="建议32静态变量一定要先声明后赋值">建议32：静态变量一定要先声明后赋值</span></h3><p>​    这个标题是否像上一个建议的标题一样让人郁闷呢？什么叫做变量一定要先声明后赋值？Java中的变量不都是先声明后使用的吗？难道还能先使用后声明?能不能暂且不说，我们看一个例子，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client32</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这段程序很简单，输出100嘛，对，确实是100，我们稍稍修改一下，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client32</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　注意变量 i 的声明和赋值调换了位置，现在的问题是：这段程序能否编译？如过可以编译，输出是多少？还要注意，这个变量i可是先使用(也就是赋值)后声明的。</p><p>　　答案是：可以编译，没有任何问题，输出结果为1。对，输出是 1 不是100.仅仅调换了位置，输出就变了，而且变量 i 还是先使用后声明的，难道颠倒了？</p><p>　　这要从静态变量的诞生说起，静态变量是类加载时被分配到数据区(Data Area)的，它在内存中只有一个拷贝，不会被分配多次，其后的所有赋值操作都是值改变，地址则保持不变。我们知道JVM初始化变量是先声明空间，然后再赋值，也就是说：在JVM中是分开执行的，等价于：</p><p>　　int i ; //分配空间</p><p>　　i = 100; //赋值</p><p>　　静态变量是在类初始化的时候首先被加载的，JVM会去查找类中所有的静态声明，然后分配空间，注意这时候只是完成了地址空间的分配，还没有赋值，之后JVM会根据类中静态赋值(包括静态类赋值和静态块赋值)的先后顺序来执行。对于程序来说，就是先声明了int类型的地址空间，并把地址传递给了i，然后按照类的先后顺序执行赋值操作，首先执行静态块中i = 100,接着执行 i = 1,那最后的结果就是 i =1了。</p><p>　　哦，如此而已，如果有多个静态块对 i 继续赋值呢？i 当然还是等于1了，谁的位置最靠后谁有最终的决定权。</p><p>　　有些程序员喜欢把变量定义放到类最底部，如果这是实例变量还好说，没有任何问题，但如果是静态变量，而且还在静态块中赋值了，那这结果就和期望的不一样了，所以遵循Java通用的开发规范”变量先声明后赋值使用”，是一个良好的编码风格。</p><p><strong><font color="red">注意：再次重申变量要先声明后使用，这不是一句废话。</font></strong></p><p>执行顺序：</p><p>1、父类静态变量和静态代码块（先声明的先执行）；</p><p>2、子类静态变量和静态代码块（先声明的先执行）；</p><p>3、父类的变量和代码块（先声明的先执行）；</p><p>4、父类的构造函数；</p><p>5、子类的变量和代码块（先声明的先执行）；</p><p>6、子类的构造函数。</p><h3><span id="建议33不要覆写静态方法">建议33：不要覆写静态方法</span></h3><p>​    我们知到在Java中可以通过覆写(Override)来增强或减弱父类的方法和行为，但覆写是针对非静态方法(也叫做实例方法，只有生成实例才能调用的方法)的，不能针对静态方法(static修饰的方法，也叫做类方法)，为什么呢？我们看一个例子，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client33</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Base base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用非静态方法</span>        base<span class="token punctuation">.</span><span class="token function">doAnything</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用静态方法</span>        base<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 我是父类静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是父类静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 父类非静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAnything</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是父类非静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 子类同名、同参数的静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是子类静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 覆写父类非静态方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAnything</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是子类非静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    注意看程序，子类的doAnything方法覆写了父类方法，真没有问题，那么doSomething方法呢？它与父类的方法名相同，输入、输出也相同，按道理来说应该是覆写，不过到底是不是覆写呢？我们看看输出结果：  <strong>我是子类非静态方法   我是父类静态方法</strong></p><p>　　这个结果很让人困惑，同样是调用子类方法，一个执行了父类方法，两者的差别仅仅是有无static修饰，却得到不同的结果，原因何在呢？</p><p>　　我们知道一个实例对象有两个类型：表面类型(Apparent Type)和实际类型(Actual Type)，表面类型是声明的类型，实际类型是对象产生时的类型，比如我们例子，变量base的表面类型是Base，实际类型是Sub。<strong>对于非静态方法，它是根据对象的实际类型来执行的</strong>，也就是执行了Sub类中的doAnything方法。而对于静态方法来说就比较特殊了，<strong>首先静态方法不依赖实例对象，它是通过类名来访问的</strong>；其次，可以通过对象访问静态方法，如果是通过对象访问静态方法，JVM则会通过对象的表面类型查找静态方法的入口，继而执行之。因此上面的程序打印出”我是父类非静态方法”，也就不足为奇了。</p><p>　　在子类中构建与父类方法相同的方法名、输入参数、输出参数、访问权限(权限可以扩大)，并且父类，子类都是静态方法，此种行为叫做隐藏(Hide),它与覆写有两点不同：</p><p>　　(1)、表现形式不同：隐藏用于静态方法，覆写用于非静态方法，在代码上的表现是@Override注解可用于覆写，不可用于隐藏。</p><p>　　(2)、职责不同：隐藏的目的是为了抛弃父类的静态方法，重现子类方法，例如我们的例子，Sub.doSomething的出现是为了遮盖父类的Base.doSomething方法，也就是i期望父类的静态方法不要做破坏子类的业务行为，而覆写是将父类的的行为增强或减弱，延续父类的职责。</p><p>　　解释了这么多，我们回头看看本建议的标题，静态方法不能覆写，可以再续上一句话，虽然不能覆写，但可以隐藏。顺便说一下，通过实例对象访问静态方法或静态属性不是好习惯，它给代码带来了”坏味道”，建议大家阅之戒之。</p><h3><span id="建议34构造函数尽量简化">建议34：构造函数尽量简化</span></h3><p>​    我们知道通过new关键字生成的对象必然会调用构造函数，构造函数的简繁情况会直接影响实例对象的创建是否繁琐，在项目开发中，我们一般都会制定构造函数尽量简单，尽可能不抛异常，尽量不做复杂运算等规范，那如果一个构造函数确实复杂了会怎么样？我们开看一段代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client34</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Server s<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleServer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> DEFAULT_PORT <span class="token operator">=</span> <span class="token number">40000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获得子类提供的端口号</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"端口号："</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 进行监听动作 */</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 由子类提供端口号，并作可用性检查</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SimpleServer</span> <span class="token keyword">extends</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化传递一个端口号</span>    <span class="token keyword">public</span> <span class="token function">SimpleServer</span><span class="token punctuation">(</span><span class="token keyword">int</span> _port<span class="token punctuation">)</span> <span class="token punctuation">{</span>        port <span class="token operator">=</span> _port<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 检查端口是否有效，无效则使用默认端口，这里使用随机数模拟</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span> <span class="token operator">?</span> port <span class="token operator">:</span> DEFAULT_PORT<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    该代码是一个服务类的简单模拟程序，Server类实现了服务器的创建逻辑，子类要在生成实例对象时传递一个端口号即可创建一个监听端口的服务，该代码的意图如下：</p><ol><li>通过SimpleServer的构造函数接收端口参数；</li><li>子类的构造函数默认调用父类的构造函数；</li><li>父类构造函数调用子类的getPort方法获得端口号；</li><li>父类的构造函数建立端口监听机制；</li><li>对象创建完毕，服务监听启动，正常运行。</li></ol><p>　　貌似很合理，再仔细看看代码，确实与我们的意图相吻合，那我们尝试多次运行看看，输出结果要么是”端口号：40000”，要么是”端口号：0”,永远不会出现”端口号：100”或是”端口号：1000”,这就奇怪了，40000还好说，那个0是怎么冒出来的呢？怠慢什么地方出现了问题呢？</p><p>　　要解释这个问题，我们首先要说说子类是如何实例化的。子类实例化时，会首先初始化父类(注意这里是初始化，不是生成父类对象)，也就是初始化父类的变量，调用父类的构造函数，然后才会初始化子类的变量，调用子类的构造函数，最后生成一个实例对象。了解了相关知识，我们再来看看上面的程序，其执行过程如下：</p><ol><li>子类SimpleServer的构造函数接收int类型的参数1000；</li><li>父类初始化常量，也就是DEFAULT_PORT初始化，并设置值为40000;</li><li>执行父类无参构造函数，也就是子类有参构造函数默认包含了super()方法；</li><li>父类无参构造函数执行到“int port = getPort() ”方法，调用子类的getPort方法实现；</li><li>子类的getPort方法返回port值(注意，此时port变量还没有赋值，是0)或DEFAULT_PORT(此时已经是40000)了；</li><li>父类初始化完毕，开始初始化子类的实例变量，port值赋值100；</li><li>执行子类构造函数，port值被重新赋值为1000；</li><li>子类SimpleServer实例化结束，对象创建完毕。</li></ol><p>　　终于清楚了，在类初始化时getPort方法返回值还没有赋值，port只是获得了默认初始值(int类型的实例变量默认初始值是0)，因此Server永远监听的是40000端口(0端口是没有意义的)。这个问题的产生从浅处说是类元素初始顺序导致的，从深处说是因为构造函数太复杂引起的。构造函数用作初始化变量，声明实例的上下文，这都是简单实现的，没有任何问题，但我们的例子却实现了一个复杂的逻辑，而这放在构造函数里就不合适了。</p><p>　　问题知道了，修改也很简单，把父类的无参构造函数中的所有实现都移动到一个叫做start的方法中，将SimpleServer类初始化完毕，再调用其start方法即可实现服务器的启动工作，简洁而又直观，这也是大部分JEE服务器的实现方式。</p><p>**<font color="red">注意：构造函数简化，再简化，应该达到”一眼洞穿”的境界</font>**。</p><h3><span id="建议35避免在构造函数中初始化其它类">建议35：避免在构造函数中初始化其它类</span></h3><p>​    构造函数是一个类初始化必须执行的代码，它决定着类初始化的效率，如果构造函数比较复杂，而且还关联了其它类，则可能产生想不到的问题，我们来看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client35</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Son son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        son<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 父类</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 相关类</span><span class="token keyword">class</span> <span class="token class-name">Other</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Other</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子类</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi, show me Something!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    这段代码并不复杂，只是在构造函数中初始化了其它类，想想看这段代码的运行结果是什么？会打印出”Hi ，show me Something!”吗？</p><p>　　答案是这段代码不能运行，报StatckOverflowError异常，栈(Stack)内存溢出，这是因为声明变量son时，调用了Son的无参构造函数，JVM又默认调用了父类的构造函数，接着Father又初始化了Other类，而Other类又调用了Son类，于是一个死循环就诞生了，知道内存被消耗完停止。</p><p>　　大家可能觉得这样的场景不会出现在开发中，我们来思考这样的场景，Father是由框架提供的，Son类是我们自己编写的扩展代码，而Other类则是框架要求的拦截类(Interceptor类或者Handle类或者Hook方法)，再来看看问题，这种场景不可能出现吗?　　</p><p>　　可能大家会觉得这样的场景不会出现，这种问题只要系统一运行就会发现，不可能对项目产生影响。</p><p>　　那是因为我们这里展示的代码比较简单，很容易一眼洞穿，一个项目中的构造函数可不止一两个，类之间的关系也不会这么简单，要想瞥一眼就能明白是否有缺陷这对所有人员来说都是不可能完成的任务，解决此类问题最好的办法就是：不要在构造函数中声明初始化其他类，养成良好习惯。</p><h3><span id="建议36使用构造代码块精简程序">建议36：使用构造代码块精简程序</span></h3><p>什么叫做代码块(Code Block)？用大括号把多行代码封装在一起，形成一个独立的数据体，实现特定算法的代码集合即为代码块，一般来说代码快不能单独运行的，必须要有运行主体。在Java中一共有四种类型的代码块：</p><ol><li>普通代码块：就是在方法后面使用”{}”括起来的代码片段，它不能单独运行，必须通过方法名调用执行；</li><li>静态代码块：在类中使用static修饰，并用”{}”括起来的代码片段，用于静态变量初始化或对象创建前的环境初始化。</li><li>同步代码块：使用synchronized关键字修饰，并使用”{}”括起来的代码片段，它表示同一时间只能有一个线程进入到该方法块中，是一种多线程保护机制。</li><li>构造代码块：在类中没有任何前缀和后缀,并使用”{}”括起来的代码片段；</li></ol><p>　　我么知道一个类中至少有一个构造函数(如果没有，编译器会无私的为其创建一个无参构造函数)，构造函数是在对象生成时调用的，那现在为你来了：构造函数和代码块是什么关系，构造代码块是在什么时候执行的？在回答这个问题之前，我们先看看编译器是如何处理构造代码块的，看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client36</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构造代码块</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行构造代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Client36</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行无参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Client36</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行有参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　这是一段非常简单的代码，它包含了构造代码块、无参构造、有参构造，我们知道代码块不具有独立执行能力，那么编译器是如何处理构造代码块的呢？很简单，编译器会把构造代码块插入到每个构造函数的最前端，上面的代码等价于：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client36</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Client36</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行构造代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行无参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Client36</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行构造代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行有参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    每个构造函数的最前端都被插入了构造代码块，很显然，在通过new关键字生成一个实例时会先执行构造代码块，然后再执行其他代码，也就是说：构造代码块会在每个构造函数内首先执行（需要注意的是：构造代码块不是在构造函数之前运行的，它依托于构造函数的执行），明白了这一点，我们就可以把构造代码块应用到如下场景中：</p><ol><li>初始化实例变量(Instance Variable):<strong>如果每个构造函数都要初始化变量，可以通过构造代码块来实现。</strong>当然也可以通过定义一个方法，然后在每个构造函数中调用该方法来实现，没错，可以解决，但是要在每个构造函数中都调用该方法，而这就是其缺点，若采用构造代码块的方式则不用定义和调用，会直接由编译器写入到每个构造函数中，这才是解决此问题的绝佳方式。</li><li>初始化实例环境：一个对象必须在适当的场景下才能存在，如果没有适当的场景，则就需要在创建该对象的时候创建次场景，例如在JEE开发中，要产生HTTP Request必须首先建立HTTP Session，在创建HTTP Request时就可以通过构造代码块来检查HTTP Session是否已经存在，不存在则创建之。</li></ol><p>　　以上两个场景利用了构造代码块的两个特性：在每个构造函数中都运行和在构造函数中它会首先运行。很好的利用构造代码块的这连个特性不仅可以减少代码量，还可以让程序更容易阅读，特别是当所有的构造函数都要实现逻辑，而且这部分逻辑有很复杂时，这时就可以通过编写多个构造代码块来实现。每个代码块完成不同的业务逻辑（当然了构造函数尽量简单，这是基本原则），按照业务顺序一次存放，这样在创建实例对象时JVM就会按照顺序依次执行，实现复杂对象的模块化创建。</p><h3><span id="建议37构造代码块会想你所想">建议37：构造代码块会想你所想</span></h3><p>​    上一建议中我们提议使用构造代码块来简化代码，并且也了解到编译器会自动把构造代码块插入到各个构造函数中，那我们接下来看看，编译器是不是足够聪明，能为我们解决真实的开发问题，有这样一个案例，统计一个类的实例变量数。你可要说了，这很简单，在每个构造函数中加入一个对象计数器补救解决了嘛？或者我们使用上一建议介绍的，使用构造代码块也可以，确实如此，我们来看如下代码是否可行：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client37</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实例对象数量："</span><span class="token operator">+</span>Student<span class="token punctuation">.</span><span class="token function">getNumOfObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对象计数器</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> numOfObjects <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构造代码块，计算产生的对象数量</span>        numOfObjects<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 有参构造调用无参构造</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String stuName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 有参构造不调用无参构造</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> stuAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回在一个JVM中，创建了多少实例对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getNumOfObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> numOfObjects<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    这段代码可行吗？能计算出实例对象的数量吗？如果编译器把构造代码块插入到各个构造函数中，那带有String形参的构造函数就可能有问题，它会调用无参构造，那通过它生成的Student对象就会执行两次构造代码块：一次是无参构造函数调用构造代码块，一次是执行自身的构造代码块，这样的话计算就不准确了，main函数实际在内存中产生了3个对象，但结果确是4。不过真的是这样吗？我们运行之后，结果是：</p><p>　　实例对象数量：3；</p><p>　　实例对象的数量还是3，程序没有问题，奇怪吗？不奇怪，上一建议是说编译器会把构造代码块插入到每一个构造函数中，但是有一个例外的情况没有说明：如果遇到this关键字(也就是构造函数调用自身的其它构造函数时)，则不插入构造代码块，对于我们的例子来说，编译器在编译时发现String形参的构造函数调用了无参构造，于是放弃插入构造代码块，所以只执行了一次构造代码块。</p><p>　　那Java编译器为何如此聪明？这还要从构造代码块的诞生说起，构造代码块是为了提取构造函数的共同量，减少各个构造函数的代码产生的，因此，Java就很聪明的认为把代码插入到this方法的构造函数中即可，而调用其它的构造函数则不插入，确保每个构造函数只执行一次构造代码块。</p><p>　　还有一点需要说明，大家千万不要以为this是特殊情况，那super也会类似处理了，其实不会，在构造块的处理上，super方法没有任何特殊的地方，编译器只把构造代码块插入到super方法之后执行而已。仅此不同。</p><p>　　注意：放心的使用构造代码块吧，Java已经想你所想了。</p><h3><span id="建议38使用静态内部类提高封装性">建议38：使用静态内部类提高封装性</span></h3><p>​        Java中的嵌套类(Nested Class)分为两种：静态内部类(也叫静态嵌套类，Static Nested Class)和内部类(Inner Class)。本次主要看看静态内部类。什么是静态内部类呢？是内部类，并且是静态(static修饰)的即为静态内部类，只有在是静态内部类的情况下才能把static修饰符放在类前，其它任何时候static都是不能修饰类的。</p><p>　　静态内部类的形式很好理解，但是为什么需要静态内部类呢？那是因为静态内部类有两个优点：<strong>加强了类的封装和提高了代码的可读性</strong>，我们通过下面代码来解释这两个优点。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 家庭</span>    <span class="token keyword">private</span> Home home<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String _name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* home、name的setter和getter方法略 */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Home</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 家庭地址</span>        <span class="token keyword">private</span> String address<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 家庭电话</span>        <span class="token keyword">private</span> String tel<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Home</span><span class="token punctuation">(</span>String _address<span class="token punctuation">,</span> String _tel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            address <span class="token operator">=</span> _address<span class="token punctuation">;</span>            tel <span class="token operator">=</span> _tel<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* address、tel的setter和getter方法略 */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    其中，Person类中定义了一个静态内部类Home,它表示的意思是”人的家庭信息”，由于Home类封装了家庭信息，不用再Person中再定义homeAddr,homeTel等属性，这就使封装性提高了。同时我们仅仅通过代码就可以分析出Person和Home之间的强关联关系，也就是说语义增强了，可读性提高了。所以在使用时就会非常清楚它表达的含义。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义张三这个人</span>    Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置张三的家庭信息</span>    p<span class="token punctuation">.</span><span class="token function">setHome</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Home</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"010"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        定义张三这个人，然后通过Person.Home类设置张三的家庭信息，这是不是就和我们真是世界的情形相同了？先登记人的主要信息，然后登记人员的分类信息。可能你由要问了，这和我们一般定义的类有神么区别呢？又有什么吸引人的地方呢？如下所示：</p><ol><li>提高封装性：从代码的位置上来讲，静态内部类放置在外部类内，其代码层意义就是，静态内部类是外部类的子行为或子属性，两者之间保持着一定的关系，比如在我们的例子中，看到Home类就知道它是Person的home信息。</li><li>提高代码的可读性：相关联的代码放在一起，可读性肯定提高了。</li><li>形似内部，神似外部：静态内部类虽然存在于外部类内，而且编译后的类文件也包含外部类(格式是：外部类+$+内部类)，但是它可以脱离外部类存在，也就说我们仍然可以通过new Home()声明一个home对象，只是需要导入”Person.Home”而已。　　</li></ol><p>　　解释了这么多，大家可能会觉得外部类和静态内部类之间是组合关系(Composition)了，这是错误的，外部类和静态内部类之间有强关联关系，这仅仅表现在”字面上”，而深层次的抽象意义则依类的设计.</p><p>　　那静态类内部类和普通内部类有什么区别呢？下面就来说明一下：</p><ol><li><strong>静态内部类不持有外部类的引用</strong>：在普通内部类中，我们可以直接访问外部类的属性、方法，即使是private类型也可以访问，这是因为内部类持有一个外部类的引用，可以自由访问。而静态内部类，则只可以访问外部类的静态方法和静态属性(如果是private权限也能访问，这是由其代码位置决定的)，其它的则不能访问。</li><li><strong>静态内部类不依赖外部类</strong>：普通内部类与外部类之间是相互依赖关系，内部类实例不能脱离外部类实例，也就是说它们会同生共死，一起声明，一起被垃圾回收，而静态内部类是可以独立存在的，即使外部类消亡了，静态内部类也是可以存在的。</li><li><strong>普通内部类不能声明static的方法和变量</strong>：普通内部类不能声明static的方法和变量，注意这里说的是变量，常量(也就是final static 修饰的属性)还是可以的，而静态内部类形似外部类，没有任何限制。</li></ol><h3><span id="建议39使用匿名类的构造函数">建议39：使用匿名类的构造函数</span></h3><p>阅读如下代码，看上是否可以编译：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List list1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List list2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    List list3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> list2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> list3<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> list3<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>```注意ArrayList后面的不通点：list1变量后面什么都没有，list2后面有一对<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>list3后面有两个嵌套的<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>这段程序能否编译呢？若能编译，那输结果是什么呢？　　答案是能编译，输出的是<span class="token number">3</span>个<span class="token boolean">false</span>。list1很容易理解，就是生命了ArrayList的实例对象，那list2和list3代表的是什么呢？　　<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>、list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>：list2代表的是一个匿名类的声明和赋值，它定义了一个继承于ArrayList的匿名类，只是没有任何覆写的方法而已，其代码类似于：　```java<span class="token comment" spellcheck="true">// 定义一个继承ArrayList的内部类</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">ArrayList</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明和赋值</span>List list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>```　<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>、list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>：这个语句就有点奇怪了，带了两对<span class="token punctuation">{</span><span class="token punctuation">}</span>，我们分开解释就明白了，这也是一个匿名类的定义，它的代码类似于```java<span class="token comment" spellcheck="true">// 定义一个继承ArrayList的内部类</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">ArrayList</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//初始化代码块</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明和赋值</span>List list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    看到了吧，就是多了一个初始化块而已，起到构造函数的功能，我们知道一个类肯定有一个构造函数，而且构造函数的名称和类名相同，那问题来了：匿名类的构造函数是什么呢？它没有名字呀！很显然，初始化块就是它的构造函数。当然，一个类中的构造函数块可以是多个，也就是说会出现如下代码：</p><pre><code>List list4 = new ArrayList()&#123;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&#125;;</code></pre><p>上面的代码是正确无误，没有任何问题的，现在清楚了，<strong>匿名类虽然没有名字，但也是可以有构造函数的</strong>，它用构造函数块来代替构造函数，那上面的3个输出就很明显了：虽然父类相同，但是类还是不同的。　　</p><h3><span id="建议40匿名类的构造函数很特殊">建议40：匿名类的构造函数很特殊</span></h3><p>​    在上一建议中我们讲到匿名类虽然没有名字，但可以有一个初始化块来充当构造函数，那这个构造函数是否就和普通的构造函数完全不一样呢？我们来看一个例子，设计一个计算器，进行加减运算，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token keyword">enum</span> Ops <span class="token punctuation">{</span>        ADD<span class="token punctuation">,</span> SUB    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> result<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 无参构造</span>    <span class="token keyword">public</span> <span class="token function">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 有参构造</span>    <span class="token keyword">public</span> <span class="token function">Calculator</span><span class="token punctuation">(</span><span class="token keyword">int</span> _i<span class="token punctuation">,</span> <span class="token keyword">int</span> _j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span> _i<span class="token punctuation">;</span>        j <span class="token operator">=</span> _j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置符号，是加法运算还是减法运算</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setOperator</span><span class="token punctuation">(</span>Ops _ops<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> _ops<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Ops<span class="token punctuation">.</span>ADD<span class="token punctuation">)</span> <span class="token operator">?</span> i <span class="token operator">+</span> j <span class="token operator">:</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 取得运算结果</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　代码的意图是，通过构造函数传递两个int类型的数字，然后根据设置的操作符(加法还是减法)进行运算，编写一个客户端调用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Calculator c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">{</span>            <span class="token function">setOperator</span><span class="token punctuation">(</span>Ops<span class="token punctuation">.</span>ADD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    这段匿名类的代码非常清晰：接收两个参数1和2，然后设置一个操作符号，计算其值，结果是3，这毫无疑问，但是这中间隐藏着一个问题：带有参数的匿名类声明时到底调用的是哪一个构造函数呢？我们把这段程序模拟一下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//加法计算</span><span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token keyword">extends</span> <span class="token class-name">Calculator</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span>        <span class="token function">setOperator</span><span class="token punctuation">(</span>Ops<span class="token punctuation">.</span>ADD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//覆写父类的构造方法</span>    <span class="token keyword">public</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> _i<span class="token punctuation">,</span> <span class="token keyword">int</span> _j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　匿名类和这个Add类等价吗？可能有人会说：上面只是把匿名类增加了一个名字，其它的都没有改动，那肯定是等价了，毫无疑问 ，那好，编写一个客户端调用Add类的方法看看。代码就略了，因为很简单new Add，然后调用父类的getResult方法就可以了，经过测试，输出结果为0（为什么而是0？这很容易，有参构造没有赋值）。这说明两者不等价，不过，原因何在呢？</p><p>　　因为匿名类的构造函数特殊处理机制，一般类(也就是没有显示名字的类)的所有构造函数默认都是调用父类的无参构造函数的，而匿名类因为没有名字，只能由构造代码块代替，也就无所谓有参和无参的构造函数了，它在初始化时直接调用了父类的同参数构造函数，然后再调用了自己的构造代码块，也就是说上面的匿名类和下面的代码是等价的：　　</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//加法计算</span><span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token keyword">extends</span> <span class="token class-name">Calculator</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span>        <span class="token function">setOperator</span><span class="token punctuation">(</span>Ops<span class="token punctuation">.</span>ADD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//覆写父类的构造方法</span>    <span class="token keyword">public</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> _i<span class="token punctuation">,</span> <span class="token keyword">int</span> _j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>_i<span class="token punctuation">,</span>_j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    它会首先调用父类有两个参数的构造函数，而不是无参构造，这是匿名类的构造函数与普通类的差别，但是这一点也确实鲜有人仔细琢磨，因为它的处理机制符合习惯呀，我传递两个参数，就是希望先调用父类有两个参数的构造，然后再执行我自己的构造函数，而Java的处理机制也正是如此处理的。</p><h3><span id="建议41让多重继承成为现实">建议41：让多重继承成为现实</span></h3><p>​    在Java中一个类可以多重实现，但不能多重继承，也就是说一个类能够同时实现多个接口，但不 能同时继承多个类。但有时候我们确实需要继承多个类，比如希望拥有多个类的行为功能，就很难使用单继承来解决问题了(当然，使用多继承是可以解决的)。幸 运的是Java中提供的内部类可以曲折的解决此问题，我们来看一个案例，定义一个父亲、母亲接口，描述父亲强壮、母亲温柔的理想情形，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Mother</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    其中strong和kind的返回值表示强壮和温柔的指数，指数越高强壮和温柔也就越高，这与游戏中设置人物的属性是一样的，我们继续开看父亲、母亲这两个实现：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FatherImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 父亲的强壮指数为8</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MotherImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Mother</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 母亲的温柔指数为8</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>父亲的强壮指数为8，母亲的温柔指数也为8，门当户对，那他们生的儿子和女儿一定更优秀了，我们看看儿子类，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">FatherImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Mother</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 儿子比父亲强壮</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">strong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MotherSpecial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MotherSpecial</span> <span class="token keyword">extends</span> <span class="token class-name">MotherImpl</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 儿子的温柔指数降低了</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    儿子继承自父亲，变得比父亲更强壮了(覆写父类strong方法)，同时儿子也具有母亲的优点，只是 温柔指数降低了。注意看，这里构造了MotherSpecial类继承母亲类，也就是获得了母亲类的行为和方法，这也是内部类的一个重要特性：内部类可以 继承一个与外部类无关的类，保证了内部类的独立性，正是基于这一点，多重继承才会成为可能。MotherSpecial的这种内部类叫做成员内部类(也叫 作实例内部类，Instance Inner Class)，我们再来看看女儿类，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Daughter</span> <span class="token keyword">extends</span> <span class="token class-name">MotherImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FatherImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//女儿的强壮指数降低了</span>                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">strong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">strong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    女儿继承了目前的温柔指数，同时又覆写了父亲的强壮指数，不多解释。注意看覆写的strong方法，这里是创建了一个匿名内部类(Anonymous Inner Class)来覆写父类的方法，以完成继承父亲行为的功能。</p><p>　　多重继承指的是一个类可以同时从多与一个的父亲那里继承行为与特征，按照这个定义，我们的儿子类、女儿类都实现了从父亲和母亲那里继承所有的功能，应该属于多重继承，这完全归功于内部类，大家在需要用到多重继承的时候，可以思考一下内部类。</p><p>　 　在现实生活中，也确实存在多重继承的问题，上面的例子说后人继承了父亲也继承了母亲的行为和特征，再比如我国的特产动物”四不像”（学名麋鹿），其外 形” 似鹿非鹿，似马非马，似牛非牛，似驴非驴 “，这你想要用单继承实现就比较麻烦了，如果用多继承则可以很好地解决此问题：定义鹿、马、牛、驴　四个类，然后建立麋鹿类的多个内部类，继承他们即可。 　　</p><h3><span id="建议42让工具类不可实例化">建议42：让工具类不可实例化</span></h3><p>​    Java项目中使用的工具类非常多，比如JDK自己的工具类 java.lang.Math、java.util.Collections等都是我们经常用到的。工具类的方法和属性都是静态的，不需要生成实例即可访 问，而且JDK也做了很好的处理，由于不希望被初始化，于是就设置了构造函数private的访问权限，表示出了类本身之外，谁都不能产生一个实例，我们 来看一下java.lang.Math代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Don't let anyone instantiate this class.     */</span>    <span class="token keyword">private</span> <span class="token function">Math</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    之所以要将”Don’t let anyone instantiate this class.” 留下来，是因为Math的构造函数设置为了private：我就是一个工具类，我只想要其它类通过类名来访问，我不想你通过实例对象来访问。这在平台型或 框架项目中已经足够了。但是如果已经告诉你不要这么做了，你还要生成一个Math对象实例来访问静态方法和属性(Java的反射是如此的发达，修改个构造 函数的访问权限易如反掌)，那我就不保证正确性了，隐藏问题随时都有可能爆发！那我们在项目中有没有更好地限制办法呢？有，即不仅仅设置成private 权限，还抛出异常，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">UtilsClazz</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">UtilsClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Don't instantiate "</span><span class="token operator">+</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    如此，才能保证一个工具类不会实例化，并且保证了所有的访问都是通过类名来进行的。需要注意的一点是，此工具类最好不要做集成的打算，因为如果子类可以实例化的话，就要调用父类的构造函数，可是父类没有可以被访问的构造函数，于是问题就会出现。　</p><p><strong><font color="red">注意：如果一个类不允许实例化，就要保证”平常” 渠道都不能实例它。</font></strong>　</p><h3><span id="建议43避免对象的浅拷贝">建议43：避免对象的浅拷贝</span></h3><p>​    我们知道一个类实现了Cloneable接口就表示它具备了被拷贝的能力。如果在覆写clone()方法就会完全具备拷贝能力。拷贝是在内存中运行的， 所以在性能方面比直接通过new生成的对象要快很多，特别是在大对象的生成上，这会使得性能的提升非常显著。但是对象拷贝也有一个比较容易忽略的问题：<strong>浅拷贝(Shadow Clone,也叫作影子拷贝)存在对象属性拷贝不彻底的问题</strong>。我们来看这样一段代码：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义父亲</span>        Person f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"父亲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义大儿子</span>        Person s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"大儿子"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 小儿子的信息时通过大儿子拷贝过来的</span>        Person s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小儿子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 的父亲是 "</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">getFather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 的父亲是 "</span> <span class="token operator">+</span> s2<span class="token punctuation">.</span><span class="token function">getFather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 父亲</span>    <span class="token keyword">private</span> Person father<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String _name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String _name<span class="token punctuation">,</span> Person _parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>        father <span class="token operator">=</span> _parent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Person <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*setter和getter方法略*/</span><span class="token punctuation">}</span></code></pre><p>​    程序中我们描述了这样一个场景：一个父亲，有两个儿子，大小儿子同根同种，所以小儿子的对象就通过拷贝大儿子的对象来生成，运行输出结果如下：</p><p>  　<strong>大儿子 的父亲是 父亲</strong><br>      <strong>小儿子 的父亲是 父亲</strong></p><p>　　这很正确，没有问题。突然有一天，父亲心血来潮想让大儿子去认个干爹，也就是大儿子的父亲名称需要重新设置一下，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义父亲</span>    Person f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"父亲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义大儿子</span>    Person s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"大儿子"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 小儿子的信息时通过大儿子拷贝过来的</span>    Person s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小儿子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//认干爹</span>    s1<span class="token punctuation">.</span><span class="token function">getFather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"干爹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 的父亲是 "</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">getFather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 的父亲是 "</span> <span class="token operator">+</span> s2<span class="token punctuation">.</span><span class="token function">getFather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    大儿子重新设置了父亲名称，我们期望的输出结果是：将大儿子的父亲名称修改为干爹，小儿子的父亲名称保持不变。运行一下结果如下：</p><p>　  <strong>大儿子 的父亲是 干爹</strong><br>      <strong>小儿子 的父亲是 干爹</strong></p><p>　　怎么回事，小儿子的父亲也成了”干爹”？两个儿子都木有了，这老子估计被要被气死了！出现这个问题的原因就在于clone方法，我们知道所有类都继承自 Object，Object提供了一个对象拷贝的默认方法，即页面代码中 的super.clone()方法，但是该方法是有缺陷的，他提供的是一种浅拷贝，也就是说它并不会把对象的所有属性全部拷贝一份，而是有选择的拷贝，它 的<strong>拷贝规则</strong>如下：</p><ol><li><strong><font color="red">基本类型：如果变量是基本类型，则拷贝其值。比如int、float等</font></strong></li><li><strong><font color="red">对 象：如果变量是一个实例对象，则拷贝其地址引用，也就是说此时拷贝出的对象与原有对象共享该实例变量，不受访问权限的控制，这在Java中是很疯狂的，因 为它突破了访问权限的定义：一个private修饰的变量，竟然可以被两个不同的实例对象访问，这让java的访问权限体系情何以堪。</font></strong></li><li><strong><font color="red">String字符串：这个比较特殊，拷贝的也是一个地址，是个引用，但是在修改时，它会从字符串池(String pool)中重新生成新的字符串，原有的字符串对象保持不变，在此处我们可以认为String是一个基本类型。</font></strong></li></ol><p>　　明白了这三个原则，上面的例子就很清晰了。小儿子的对象是通过大儿子拷贝而来的，其父亲是同一个人，也就是同一个对象，大儿子修改了父亲的名称后，小儿子也很跟着修改了——于是，父亲的两个儿子都没了。其实要更正也很简单，clone方法的代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Person <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person p <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setFather</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getFather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　然后再运行，小儿子的父亲就不会是干爹了，如此就实现了对象的深拷贝(Deep Clone)，保证拷贝出来的对象自成一体，不受”母体”影响，和new生成的对象没有什么区别。</p><p>　　<strong><font color="red">注意：浅拷贝只是Java提供的一种简单拷贝机制，不便于直接使用。</font></strong></p><h3><span id="建议44推荐使用序列化对象的拷贝">建议44：推荐使用序列化对象的拷贝</span></h3><p>　上一建议说了对象的浅拷贝问题，试下Cloneable接口就具备了拷贝能力，那我们开思考这样一个问题：如果一个项目中有大量的对象是通过拷贝生成 的，那我们该如何处理呢？每个类都系而一个clone方法，并且还有深拷贝？想想这是何等巨大的工作量呀！是否有更好的方法呢？</p><p>　　其实，可以通过序列化方式来处理，在内存中通过字节流的拷贝来实现，也就是把母对象写到一个字节流中，再从字节流中将其读出来，这样就可以重建一个对象了，该新对象与母对象之间不存在引用共享的问题，也就相当于深拷贝了一个对象，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CloneUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">CloneUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>CloneUtils<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">+</span> <span class="token string">" cannot instance "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 拷贝一个对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token operator">></span> T <span class="token function">clone</span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 拷贝产生的对象</span>        T cloneObj <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 读取对象字节数据</span>            ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 分配内存空间，写入原始对象，生成新对象</span>            ByteArrayInputStream bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 返回新对象， 并做类型转换</span>            cloneObj <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    此工具类要求被拷贝的对象实现了Serializable　接口，否则是没办法拷贝的（当然，使用反射是另一种技巧），上一建议中的例子只是稍微修改一下即可实现深拷贝，代码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 4989174799049521302L<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*删除掉clone方法，其它代码保持不变*/</span><span class="token punctuation">}</span></code></pre><p>​    被拷贝的类只要实现Serializable这个标志性接口即可，不需要任何实现，当然serialVersionUID常量还是要加上去的，然后我们就可以通过CloneUtils工具进行对象的深拷贝了，用词方法进行对象拷贝时需要注意两点：</p><ol><li>对象的内部属性都是可序列化的：如果有内部属性不可序列化，则会抛出序列化异常，这会让调试者很纳闷，生成一个对象怎么回出现序列化异常呢？从这一点考虑，也需要把CloneUtils工具的异常进行细化处理。</li><li>注 意方法和属性的特殊修饰符：比如final，static变量的序列化问题会被引入对象的拷贝中，这点需要特别注意，同时 transient变量（瞬态变量，不进行序列化的变量）也会影响到拷贝的效果。当然，采用序列化拷贝时还有一个更简单的方法，即使用Apache下的 commons工具包中SerializationUtils类，直接使用更加简洁.</li></ol><h3><span id="建议45覆写equals方法时不要识别不出自己">建议45：覆写equals方法时不要识别不出自己</span></h3><p>​    我们在写一个JavaBean时，经常会覆写equals方 法，其目的是根据业务规则判断两个对象是否相等，比如我们写一个Person类，然后根据姓名判断两个实例对象是否相同时，这在DAO（Data Access Objects）层是经常用到的。具体操作时先从数据库中获得两个DTO(Data Transfer Object,数据传输对象)，然后判断他们是否相等的，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String _name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    覆写的equals方法做了多个校验，考虑到Web上传递过来的对象有可能输入了前后空格，所以用trim方法剪切了一下，看看代码有没有问题，我们写一个main：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person p1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person p2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Person<span class="token operator">></span> list<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中是否包含张三："</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中是否包含张三："</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    上面的代码产生了两个Person对象(注意p2变量中的那个张三后面有一个空格)，然后放到list中，最后判断list是否包含了这两个对象。看上去没有问题，应该打印出两个true才对，但是结果却是：</p><p>　   <strong>列表中是否包含张三：true</strong><br>      <strong>列表中是否包含张三：false</strong>　　</p><p>　 　刚刚放到list中的对象竟然说没有，这太让人失望了，原因何在呢？list类检查是否包含元素时时通过调用对象的equals方法来判断的，也就是说 contains(p2)传递进去，会依次执行p2.equals(p1),p2.equals(p2),只有一个返回true，结果都是true，可惜 的是比较结果都是false，那问题出来了：难道</p><p>p2.equals(p2)因为false不成？</p><p>　　还真说对了，p2.equals(p2)确实是false，看看我们的equals方法，它把第二个参数进行了剪切！也就是说比较的如下等式：</p><pre class=" language-java"><code class="language-java"><span class="token string">"张三  "</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    注意前面的那个张三，是有空格的，那结果肯定是false了，错误也就此产生了，这是一个想做好事却办成了 “坏事” 的典型案例，它违背了equlas方法的**<font color="red">自反性原则：对于任何非空引用x，x.equals(x)应该返回true</font>**，问题直到了，解决非常简单，只要把trim()去掉即可。注意解决的只是当前问题，该equals方法还存在其它问题。</p><h3><span id="建议46equals应该考虑null值情景">建议46：equals应该考虑null值情景</span></h3><p>继续45建议的问题，我们解决了覆写equals的自反性问题，是不是就完美了呢？在把main方法重构一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token comment" spellcheck="true">/*其它部分没有任何修改，不再赘述*/</span><span class="token punctuation">}</span></code></pre><p>　    很小的改动，大家肯定晓得了运行结果是包”空指针”异常。原因也很简单：null.equalsIgnoreCase方法自然报错，此处就是为了说明覆写equals方法遵循的一个原则—</p><p>　　<strong><font color="red">对称性原则：对于任何引用x和y的情形，如果x.equals(y),把么y.equals(x)也应该返回true。</font></strong></p><p>　　解决也很简单，前面加上非空判断即可，很简单，就不贴代码了。</p><h3><span id="建议47在equals中使用getclass进行类型判断">建议47：在equals中使用getClass进行类型判断</span></h3><p>​    本节我们继续讨论覆写equals的问题，这次我们编写一个员工Employee类继承Person类，这很正常，员工也是人嘛，而且在JavaBean中继承也很多见，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String _name<span class="token punctuation">,</span> <span class="token keyword">int</span> _id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        id <span class="token operator">=</span> _id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Employee</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Employee e <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String _name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> null <span class="token operator">==</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    员工类增加了工号ID属性，同时也覆写了equals方法，只有在姓名和ID都相同的情况下才表示同一个员工，这是为了避免一个公司中出现同名同姓员工的情况。看看上面的代码，这里的条件已经相当完善了，应该不会出错了，那我们测试一下，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Employee e1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Employee e2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    上面定义了两个员工和一个社会闲杂人员，虽然他们同名同姓，但肯定不是同一个，输出都应该是false，但运行之后结果为： true true false</p><p>　　很不给力呀，p1竟然等于e1，也等于e2,为什么不是同一个类的两个实例竟然也会相等呢？这很简单，因为p1.equals(e1)是调用父类Person的equals方法进行判断的，它使用的是instanceof关键字检查e1是否是Person的实例，由于两者村子继承关系，那结果当然是true了，相等也就没有任何问题了，但是反过来就不成立了，e1和e2是不可能等于p1，这也是<strong>违反对称性原则</strong>的一个典型案例。</p><p>　　更玄的是p1与e1、e2相等，但e1和e2却不相等，似乎一个简单的符号传递都不能实现，这才是我们分析的重点：e1.equals(e2)调用的是子类Employee的equals方法，不仅仅要判断姓名相同，还要判断Id相同，两者工号是不同的，不相等也是自然的了。等式不传递是因为违反了equals的传递性原则，<strong>传递性原则指的是对于实例对象x、y、z来说，如果x.equals(y)返回true，y.equals(z)返回true，那么x.equals(z)也应该返回true。</strong></p><p>　　这种情况发生的关键是父类引用了instanceof关键字，它是用来判断一个类的实例对象的，这很容易让子类钻空子。想要解决也很简单，使用getClass来代替instanceof进行类型判断，Person的equals方法修改后如下所示：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> null <span class="token operator">==</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    当然，考虑到Employee也有可能被继承，也需要把它的instanceof修改为getClass。总之，在覆写equals时建议使用getClass进行类型判断，而不要使用instanceof。</p><h3><span id="建议48覆写equals方法必须覆写hashcode方法">建议48：覆写equals方法必须覆写hashCode方法</span></h3><p>​    覆写equals方法必须覆写hasCode方法，这条规则基本上每个Javaer都知道，这也是JDK的API上反复说明的，不过为什么要则这么做呢？这两个方法之间什么关系呢？本建议就来解释该问题，我们先看看代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client48</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Person类的实例作为map的key</span>        Map<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">{</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Person类的实例作为List的元素</span>        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">{</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代码中的Person类与上一建议的Person相同，equals方法完美无缺。在这段代码中，我们在声明时直接调用方法赋值，这其实也是一个内部匿名类，现在的问题是b1和b2值是否都为true?</p><p>　　我们先来看b1，Person类的equals覆写了，不再判断两个地址相等，而是根据人员的姓名来判断两个对象是否相等，所以不管我们的new Person(“张三”)产生了多少个对象，它们都是相等的。把张三放入List中，再检查List中是否包含，那结果肯定是true了。</p><p>　　接下来看b2，我们把张三这个对象作为了Map的键（Key），放进去的是张三，检查的对象还是张三，那应该和List的结果相同了，但是很遗憾，结果为false。原因何在呢？</p><p>　　<strong><font color="red">原因就是HashMap的底层处理机制是以数组的方式保存Map条目的(Map Entry)的，这其中的关键是这个数组的下标处理机制：依据传入元素hashCode方法的返回值决定其数组的下标，如果该数组位置上已经有Map条目，并且与传入的值相等则不处理，若不相等则覆盖；如果数组位置没有条目，则插入，并加入到Map条目的链表中。同理，检查键是否存在也是根据哈希码确定位置，然后遍历查找键值的。</font></strong></p><p>　　接着深入探讨，那对象元素的hashCode方法返回的是什么值呢？它是一个对象的哈希码，是由Object类的本地方法生成的，确保每个对象有一个哈希码（也是**<font color="red">哈希算法的基本要求：任意输入k，通过一定算法f(k)，将其转换为非可逆的输出，对于两个输入k1和k2，要求若k1=k2，则必须f(k1)=f(k2)，但也允许k1 != k2 , f(k1)=f(k2)的情况存在</font>**）。</p><p>　　那回到我们的例子上，由于我们没有覆写hashCode方法，两个张三对象的hashCode方法返回值(也就是哈希码)肯定是不相同的了，在HashMap的数组中也找不到对应的Map条目了，于是就返回了false。</p><p>　　问题清楚了，修改也很简单，在Person类中重写一下hashCode方法即可，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashCodeBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>​    其中<strong>HashCodeBuilder是org.apache.commons.lang.builder包下的一个哈希码生成工具</strong>，使用起来非常方便，大家可以直接项目中集成(为何不直接写hashCode方法？因为哈希码的生成有很多种算法，自己写麻烦，事儿又多，所以必要的时候才取”拿来主义”，不重复造轮子是最好的办法。)</p><h3><span id="建议49推荐覆写tostring方法">建议49：推荐覆写toString方法</span></h3><p>​    为什么要覆写toString方法，这个问题很简单，因为Java提供的默认toString方法不友好，打印出来看不懂，不覆写不行，看这样一段代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client49</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String _name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    输出结果是：Perso@188edd79.如果机器不同，@后面的内容也会不同，但格式都是相同的：类名+@+hashCode,这玩意是给机器看的，人哪能看懂呀！这就是因为我们没有覆写Object类的toString方法的缘故，修改一下，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s.name=%s"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        如此即就可以在需要的时候输出调试信息了，而且非常友好，特别是在bean流行的项目中(一般的Web项目就是这样)，有了这样的输出才能更好地debug，否则查找错误就有点麻烦！当然，当bean的属性较多时，自己实现就不可取了，不过可以直接使用apache的commons工具包中的ToStringBuilder类，简洁，实用又方便。可能有人会说，为什么通过println方法打印一个对象会调用toString方法？那是源于println的打印机制：如果是一个原始类型就直接打印，如果是一个类类型，则打印出其toString方法的返回值，如此而已。同时现在IDE也很先进，大家debug时也可查看对象的变量，但还是建议大家覆写toString方法，这样调试会更方便哦。</p><h3><span id="建议50使用package-info类为包服务">建议50：使用package-info类为包服务</span></h3><p>​    Java中有一个特殊的类：package-info类，它是专门为本包服务的，为什么说它特殊，主要体现在三个方面：</p><ol><li><p>它不能随便创建：在一般的IDE中，Eclipse、package-info等文件是不能随便被创建的，会报”Type name is notvalid”错误，类名无效。在Java中变量定义规范中规定如下字符是允许的：字母、数字、下划线，以及那个不怎么写的$符号，不过中划线可不在之列，那么怎么创建这个文件呢？很简单，用记事本创建一个，然后拷贝进去再改一下就成了，更直接的办法就是从别的项目中拷贝过来。</p></li><li><p>它服务的对象很特殊：一个类是一类或一组事物的描述，比如Dog这个类，就是描述”阿黄”的，那package-info这个类描述的是什么呢？它总是要有一个被描述或陈述的对象吧，它是描述和记录本包信息的。</p></li><li><p>package-info类不能有实现代码：package-info类再怎么特殊也是 一个类，也会被编译成 package-info.class,但是在package-info.java文件不能声明package-info类。　　　</p><p>　package-info类还有几个特殊的地方，比如不可以继承，没有接口，没有类间关系(关联、组合、聚合等)等，Java中既然有这么特殊的一个类，那肯定有其特殊的作用了，我们来看看它的特殊作用，主要表现在以下三个方面：</p></li></ol><ul><li>声明友好类和包内访问常量：这个比较简单，而且很实用，比如一个包中有很多内部访问的类或常量，就可以统一放到package-info类中，这样很方便，便于集中管理，可以减少友好类到处游走的情况，代码如下：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">PkgClazz</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PkgConstant</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String PACKAGE_CONST <span class="token operator">=</span> <span class="token string">"ABC"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意以上代码是放在package-info.java中的，虽然它没有编写package-info的实现，但是package-info.class类文件还是会生成。通过这样的定义，我们把一个包需要的常量和类都放置在本包下，在语义上和习惯上都能让程序员更适应。</p><ul><li>为在包上提供注解提供便利：比如我们要写一个注解(Annotation)，查看一下包下的对象，只要把注解标注到package-info文件中即可，而且在很多开源项目中也采用了此方法，比如struts2的@namespace、hibernate的@FilterDef等.</li><li>提供包的整体注释说明：如果是分包开发，也就是说一个包实现了一个业务逻辑或功能点或模块或组件，则该包需要一个很好的说明文档，说明这个包是做什么用的，版本变迁历史，与其他包的逻辑关系等，package-info文件的作用在此就发挥出来了，这些都可以直接定义到此文件中，通过javadoc生成文档时，会吧这些说明作为包文档的首页，让读者更容易对该包有一个整体的认识。当然在这点上它与package.html的作用是相同的，不过package-info可以在代码中维护文档的完整性，并且可以实现代码与文档的同步更新。　　</li></ul><p>　　创建package-info,也可以利用IDE工具如下图：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160913122230102-806179627.png" alt="img"></p><p>解释了这么多，总结成一句话：在需要用到包的地方，就可以考虑一下package-info这个特殊类，也许能起到事半功倍的作用。</p><h3><span id="建议51不要主动进行垃圾回收">建议51：不要主动进行垃圾回收</span></h3><p>​    很久很久以前，在java1.1的年代里，我们经常会看到System.gc这样的调用—主动对垃圾进行回收，不过，在Java知识深入人心后，这样的代码就逐渐销声匿迹了—这是好现象，因为主动进行垃圾回收是一个非常危险的动作。</p><p>　　之所以危险，是因为System.gc要停止所有的响应，才能检查内存中是否存在可以回收的对象，这对一个应用系统来说风险极大，如果是一个Web应用，所有的请求都会暂停，等待垃圾回收器执行完毕，若此时堆内存(heap)中的对象少的话还可以接受，一但对象较多（现在的web项目是越做越大，框架、工具也越来越多，加载到内存中的对象当然也就更多了），这个过程非常耗时，可能是0.01秒，也可能是1秒，甚至20秒，这就严重影响到业务的运行了。</p><p>　　例如：我们写这样一段代码：new String(“abc”)，该对象没有任何引用，对JVM来说就是个垃圾对象。JVM的垃圾回收器线程第一次扫描（扫描时间不确定，在系统不繁忙的时候执行）时给它贴上一个标签，说”你是可以回收的”，第二次扫描时才真正的回收该对象，并释放内存空间，如果我们直接调用System.gc，则是说“嗨，你，那个垃圾回收器过来检查一下有没有垃圾对象，回收一下”。瞧瞧看，程序主动找来垃圾回收器，这意味着正在运行的系统要让出资源，以供垃圾回收器执行，想想看吧，它会把所有的对象都检查一遍，然后处理掉那些垃圾对象。注意哦，是检查每个对象。</p><p>　　不要调用System.gc，即使<strong>经常出现内存溢出也不要调用</strong>，内存溢出是可分析的，是可以查找原因的，GC可不是一个好招数。</p><h2><span id="第4章-字符串">第4章 字符串</span></h2><p>Although the world is full of suffering, it is full also of the overcoming of it.</p><p>虽然世界充满了苦难，但总是能战胜的。——Hellen Keller（海伦·凯勒，美国作家）</p><p>​    在Class的班级里，Object班主任问道，“大家知道谁是我们班最受欢迎的同学吗？”大家面面相觑，不解其意，既而交头接耳，窃窃私语，猛然间，所有的目光都投向了String同学，时光仿佛戛然而止，String诧异地左顾右盼，然后羞红了脸，慢慢地低下了头，同时右手缓缓地举起来，直至胳膊完全伸直，形成一个大大“1”字。</p><h3><span id="建议52推荐使用string直接量赋值">建议52：推荐使用String直接量赋值</span></h3><p>​    一般对象都是通过new关键字生成的，但是String还有第二种生成方式，也就是我们经常使用的直接声明方式，这种方式是极力推荐的，但不建议使用new String（”A”）的方式赋值。为什么呢？我们看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client52</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str1 <span class="token operator">=</span> <span class="token string">"詹姆斯"</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> <span class="token string">"詹姆斯"</span><span class="token punctuation">;</span>        String str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"詹姆斯"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str4 <span class="token operator">=</span> str3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 两个直接量是否相等</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 直接量和对象是否相等</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 经过intern处理后的对象与直接量是否相等</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意看上面的程序，我们使用”==”判断的是两个对象的引用地址是否相同，也就是判断是否为同一个对象，打印的结果是true,false,true。即有两个直接量是同一个对象(进过intern处理后的String与直接量是同一个对象)，但直接通过new生成的对象却与之不等，原因何在？</p><p>　　原因是Java为了避免在一个系统中大量产生String对象(为什么会大量产生，因为String字符串是程序中最经常使用的类型)，于是就设计了一个字符串池(也叫作字符串常量池，String pool或String Constant Pool或String Literal Pool),在字符串池中容纳的都是String字符串对象，它的创建机制是这样的：创建一个字符串时，首先检查池中是否有字面值相等的字符串，如果有，则不再创建，直接返回池中该对象的引用，若没有则创建之，然后放到池中，并返回新建对象的引用，这个池和我们平常说的池非常接近。对于此例子来说，就是创建第一个”詹姆斯”字符串时，先检查字符串池中有没有该对象，发现没有，于是就创建了”詹姆斯”这个字符串并放到池中，待创建str2字符串时，由于池中已经有了该字符串，于是就直接返回了该对象的引用，此时，str1和str2指向的是同一个地址，所以使用”==”来判断那当然是相等的了。</p><p>　　那为什么使用new String(“詹姆斯”)就不相等了呢？因为直接声明一个String对象是不检查字符串池的，也不会把对象放到字符串池中，那当然”==”为false了。</p><p>　　那为什么intern方法处理后即又相等了呢？因为intern会检查当前对象在对象池中是否存在字面值相同的引用对象，如果有则返回池中的对象，如果没有则放置到对象池中，并返回当前对象。</p><p>　　可能有人要问了，放到池中，是不是要考虑垃圾回收问题呀？不用考虑了，虽然Java的每个对象都保存在堆内存中但是字符串非常特殊，它在编译期已经决定了其存在JVM的常量池(Constant Pool),垃圾回收不会对它进行回收的。</p><p>　　通过上面的介绍，我们发现Java在字符串的创建方面确实提供了非常好的机制，利用对象池不仅可以提高效率，同时减少了内存空间的占用，<strong>建议大家在开发中使用直接量赋值方式</strong>，除非必要才建立一个String对象。</p><h3><span id="建议53注意方法中传递的参数要求">建议53：注意方法中传递的参数要求</span></h3><p>​    有这样的一个简单需求，写一个方法，实现从原始字符串中删除与之匹配的所有字符串，比如在”好是好”中，删除”好”，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//删除字符串</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">remove</span><span class="token punctuation">(</span>String source<span class="token punctuation">,</span> String sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    StringUtils工具类很简单，它采用了String的replaceAll方法，该方法是做字符串替换的，我们编写一个测试用例，检查remove方法是否正确，如下所示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStringUtils</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assertTrue</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"好是好"</span><span class="token punctuation">,</span><span class="token string">"好"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"是"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertTrue</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"$是$"</span><span class="token punctuation">,</span><span class="token string">"$"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"是"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    单独运行第一个是绿条，单独运行第二个是红条，为什么第二个（assertTrue(StringUtils.remove(“是是”,”$”).equals(“是”))）不通过呢？</p><p>　　问题就出在replaceAll方法上，该方法确实需要传递两个String类型的参数，也确实进行了字符串替换，但是它要求第一个参数是正则表达式，符合正则表达式的字符串才会被替换。对上面的例子来说，第一个测试案例传递进来的是一个字符串”好”，这是一个全匹配查找替换，处理的非常正确，第二个测试案例传递进来的是一个””符号，””符号，””符号在正则表达式中表示的是字符串的结束位置，也就是执行完replaceAll后在字符串结尾的地方加上了空字符串，其结果还是””是””是””，所以测试失败也就再所难免了。问题清楚了，解决方案也就出来了：使用replace方法替换即可，它是replaceAll的方法的简化版，可传递两个String参数，与我们的编码意图是吻合的。</p><p>　　大家如果注意看JDK文档，会发现replace(CharSequence target,CharSequence replacement)方法是1.5版本以后才开始提供的， 在此之前如果要对一个字符串进行全体换，只能使用replaceAll方法，不过由于replaceAll方法的第二个参数使用了正则表达式，而且参数类型只要是CharSequence就可以(String的父类)，所以很容易使使用者误解，稍有不慎就会导致严重的替换错误。</p><p><strong><font color="red">注意：replaceAll传递的第一个参数是正则表达式</font></strong></p><h3><span id="建议54正确使用string-stringbuffer-stringbuilder">建议54：正确使用String、StringBuffer、StringBuilder</span></h3><p>​    CharSequence接口有三个实现类与字符串有关，String、StringBuffer、StringBuilder，虽然它们都与字符串有关，但其处理机制是不同的。</p><p>　　String类是不可变的量，也就是创建后就不能再修改了，比如创建了一个”abc”这样的字符串对象，那么它在内存中永远都会是”abc”这样具有固定表面值的一个对象，不能被修改，即使想通过String提供的方法来尝试修改，也是要么创建一个新的字符串对象，要么返回自己，比如：</p><pre class=" language-java"><code class="language-java">String  str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>String str1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    其中str是一个字符串对象，其值是”abc”,通过substring方法又重新生成了一个字符串str1，它的值是”bc”,也就是说str引用的对象一但产生就永远不会变。为什么上面还说有可能不创建对象而返回自己呢？那是因为采用substring(0)就不会创建对象。JVM从字符串池中返回str的引用，也就是自身的引用。</p><p>　　StringBuffer是一个可变字符串，它与String一样，在内存中保存的都是一个有序的字符序列(char 类型的数组)，不同点是StringBuffer对象的值是可改变的，例如：</p><pre class=" language-java"><code class="language-java">StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​        有区别，字符串变量s初始化时是 “a” 对象的引用，经过加号计算后，s变量就修改为了 “ab” 的引用，但是初始化的 “a” 对象还没有改变，只是变量s指向了新的引用地址，再看看StringBuffer的对象，它的引用地址虽不变，但值在改变。</p><p>　　StringBuffer和StringBuilder基本相同，都是可变字符序列，不同点是：StringBuffer是线程安全的，StringBuilder是线程不安全的，翻翻两者的源代码，就会发现在StringBuffer的方法前都有关键字syschronized,这也是StringBuffer在性能上远远低于StringBuffer的原因。</p><p>　　在性能方面，由于String类的操作都是产生String的对象，而StringBuilder和StringBuffer只是一个字符数组的再扩容而已，所以String类的操作要远慢于StringBuffer 和 StringBuilder。</p><p>　　弄清楚了三者之间的原理，我们就可以在不同的场景下使用不同的字符序列了：</p><ol><li>使用String类的场景：在字符串不经常变化的场景中可以使用String类，例如常量的声明、少量的变量运算等；</li><li>使用StringBuffer的场景：在频繁进行字符串的运算(如拼接、替换、删除等)，并且运行在多线程的环境中，则可以考虑使用StringBuffer，例如XML解析、HTTP参数解析和封装等；</li><li>使用StringBuilder的场景：在频繁进行字符串的运算(如拼接、替换、删除等)，并且运行在单线程的环境中，则可以考虑使用StringBuilder，如SQL语句的拼接，JSON封装等。</li></ol><p><strong><font color="red">注意：在适当的场景选用字符串类型</font></strong> </p><h3><span id="建议55注意字符串的位置">建议55：注意字符串的位置</span></h3><p>看下面一段程序：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client55</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"apples"</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> <span class="token string">"apples"</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    想想两个字符串输出的结果的苹果数量是否一致，如果一致，会是几呢？</p><p>　　答案是不一致，str1的值是”3apples” ,str2的值是“apples12”，这中间悬殊很大，只是把“apples” 调换了一下位置，为何会发生如此大的变化呢？</p><p>　　这都源于java对于加号的处理机制：在使用加号进行计算的表达式中，只要遇到String字符串，则所有的数据都会转换为String类型进行拼接，如果是原始数据，则直接拼接，如是是对象，则调用toString方法的返回值然后拼接，如：</p><p>　　str = str + new ArrayList();</p><p>　　上面就是调用ArrayList对象的toString方法返回值进行拼接的。再回到前面的问题上，对与str1 字符串，Java的执行顺序是从左到右，先执行1+2，也就是算术加法运算，结果等于3，然后再与字符串进行拼接，结果就是 “3 apples”,其它形式类似于如下计算：</p><p>　　String str1 = (1 + 2 ) + “apples” ;</p><p>　　而对于str2字符串，由于第一个参与运算的是String类型，加1后的结果是“apples 1” ，这仍然是一个字符串，然后再与2相加，结果还是一个字符串，也就是“apples12”。这说明如果第一个参数是String，则后续的所有计算都会转变为String类型，谁让字符串是老大呢！</p><p><strong><font color="red">注意： 在“+” 表达式中，String字符串具有最高优先级。</font></strong></p><h3><span id="建议56自由选择字符串拼接方法">建议56：自由选择字符串拼接方法</span></h3><p>​    对一个字符串拼接有三种方法：加号、concat方法及StringBuilder（或StringBuffer ,由于StringBuffer的方法与StringBuilder相同，不在赘述）的append方法，其中加号是最常用的，其它两种方式偶尔会出现在一些开源项目中，那这三者之间有什么区别吗？我们看看下面的例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client56</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加号拼接</span>        String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str <span class="token operator">+=</span> <span class="token string">"c"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加号拼接耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end1 <span class="token operator">-</span> start1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// concat拼接</span>        str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start2 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end2 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"concat拼接耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end2 <span class="token operator">-</span> start2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// StringBuilder拼接</span>        str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        StringBuilder buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start3 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end3 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuilder拼接耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end3 <span class="token operator">-</span> start3<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// StringBuffer拼接</span>        str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start4 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end4 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuffer拼接耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end4 <span class="token operator">-</span> start4<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　上面是4种不同方式的字符串拼接方式，循环10万次后检查其执行时间，执行结果如下：</p><p>　　<img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160918102703382-1169380682.png" alt="img"></p><p>​    从上面的执行结果来看，在字符串拼接方式中,StringBuilder的append方法最快，StringBuffer的append方法次之（因为StringBuffer的append方法是线程安全的，同步方法自然慢一点），其次是concat方法，加号最慢，这是为何呢？</p><p>　　(1)、”+” 方法拼接字符串：虽然编辑器对字符串的加号做了优化，它会使用StringBuilder的append方法进行追加，按道理来说，其执行时间也应该是1ms，不过最终是通过toString方法转换为String字符串的，例子中的”+” 拼接的代码如下代码相同　　</p><pre class=" language-java"><code class="language-java">str<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　    注意看，它与纯粹使用StringBuilder的append方法是不同的：一是每次循环都会创建一个StringBuilder对象，二是每次执行完毕都要调用toString方法将其转换为字符串——它的执行时间就耗费在这里了！</p><p>　　(2)、concat方法拼接字符串：我们从源码上看一下concat方法的实现，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">concat</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> otherLen <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果追加字符长度为0，则返回字符串本身</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>otherLen <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> len <span class="token operator">+</span> otherLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//产生一个新的字符串</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    其整体看上去就是一个数组拷贝，虽然在内存中处理都是原子性操作，速度非常快，不过，注意看最后的return语句，每次concat操作都会创建一个String对象，这就是concat速度慢下来的真正原因，它创建了10万个String对象呀。</p><p>　　(3)、append方法拼接字符串：StringBuilder的append方法直接由父类AbstractStringBuilder实现，其代码如下：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> StringBuilder <span class="token function">append</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> AbstractStringBuilder <span class="token function">append</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果是null值，则把null作为字符串处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> null<span class="token punctuation">)</span> str <span class="token operator">=</span> <span class="token string">"null"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>count <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字符串复制到目标数组</span>    str<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> value<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    count <span class="token operator">+=</span> len<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    看到没，整个append方法都在做字符数组处理，加长，然后拷贝数组，这些都是基本的数据处理，没有创建任何对象，所以速度也就最快了！注意：例子中是在随后通过StringBuilder的toString方法返回了一个字符串，也就是说在10万次循环结束后才生成了一个String对象。StringBuffer的处理和此类似，只是方法是同步的而已。</p><p>　　四者的实现方法不同，性能也就不同，但并不表示我们一定要使用StringBuilder，这是因为”+”非常符合我们的编码习惯，适合阅读，两个字符串拼接，就用加号连一下，这很正常，也很友好，在大多数情况下我们都可以使用加号操作，只有在系统性能临界(如在性能 “ 增长一分则太长” 的情况下)的时候才可以考虑使用concat或append方法。而且，很多时候系统80% 的性能是消耗在20%的代码上的，我们的精力应该更多的投入到算法和结构上。</p><p><strong><font color="red">注意：适当的场景使用适当的字符串拼接方式。</font></strong>　</p><h3><span id="建议57推荐在复杂字符串操作中使用正则表达式">建议57：推荐在复杂字符串操作中使用正则表达式</span></h3><p>​    字符串的操作，诸如追加、合并、替换、倒叙、分割等，都是在编码过程中经常用到的，而且Java也提供了append、replace、reverse、spit等方法来完成这些操作，它们使用起来确实方便，但是更多时候，需要使用正则表达式来完成复杂的处理，我们来看一个例子：统计一篇文章中英文单词的数量，很简单吧，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client57</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String str <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用split方法分割后统计</span>            <span class="token keyword">int</span> wordsCount <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"单词数："</span> <span class="token operator">+</span> wordsCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用spit方法根据空格来分割单词，然后计算分割后的数组长度，这种方法可靠吗？我们看看输出结果：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160918111828912-1837316031.png" alt="img"></p><p>​    注意看输出，除了第一个输入”Today is Monday”正确外，其它的都是错误的！第二条输入中的单词”Monday”前有2个连续的空格，第三条输入中”No”单词前后都没有空格，最后一个输入则没有把连写符号” ‘ “考虑进去，这样统计出来的单词数量肯定是错误一堆，那怎么做才合理呢？</p><p>　　如果考虑使用一个循环来处理这样的”异常”情况，会使程序的稳定性变差，而且要考虑太多太多的因素，这让程序的复杂性也大大提高了。那如何处理呢？可以考虑使用正则表达式，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client57</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String str <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//正则表达式对象</span>            Pattern p <span class="token operator">=</span>  Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\b\\w+\\b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//生成匹配器</span>            Matcher matcher <span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> wordsCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                wordsCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"单词数："</span> <span class="token operator">+</span> wordsCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　准不准确，我们看看相同的输入，输出结果如下：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160918123203832-194778012.png" alt="img"></p><p>​    每项的输出都是准确的，而且程序也不复杂，先生成一个正则表达式对象，然后使用匹配器进行匹配，之后通过一个while循环统计匹配的数量。需要说明的是，在Java的正则表达式中”\b” 表示的是一个单词的边界，它是一个位置界定符，一边为字符或数字，另外一边为非字符或数字，例如”A”这样一个输入就有两个边界，即单词”A”的左右位置，这也就说明了为什么要加上”\w”（它表示的是字符或数字）。</p><p>　　正则表达式在字符串的查找，替换，剪切，复制，删除等方面有着非凡的作用，特别是面对大量的文本字符需要处理（如需要读取大量的LOG日志）时，使用正则表达式可以大幅地提高开发效率和系统性能，但是正则表达式是一个恶魔，它会使程序难以读懂，想想看，写一个包含^、$、\A、\s、\Q、+、？、()、{}、[]等符号的正则表达式，然后再告诉你这是一个” 这样，这样……”字符串查找，你是不是要崩溃了？这个代码确实不好阅读，你就要在正则上多下点功夫了。</p><p><strong><font color="red">注意：正则表达式是恶魔，威力巨大，但难以控制。</font></strong></p><h3><span id="建议58强烈建议使用utf编码">建议58：强烈建议使用UTF编码</span></h3><p>​    Java的乱码问题由来已久，有经验的开发人员肯定遇到过乱码，有时从Web接收的乱码，有时从数据库中读取的乱码，有时是在外部接口中接收的乱码文件，这些都让我们困惑不已，甚至是痛苦不堪，看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client58</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnsupportedEncodingException <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token string">"汉字"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 读取字节</span>        <span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重新生成一个新的字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Java文件是通过IDE工具默认创建的，编码格式是GBK，大家想想看上面的输出结果会是什么？可能是乱码吧？两个编码格式不同。我们暂时不说结果，先解释一下Java中的编码规则。Java程序涉及的编码包括两部分：</p><p>　　(1)、<strong>Java文件编码</strong>：如果我们使用记事本创建一个.java后缀的文件，则文件的编码格式就是操作系统默认的格式。如果是使用IDE工具创建的，如Eclipse，则依赖于IDE的设置，Eclipse默认是操作系统编码（Windows一般为GBK）；</p><p>　　(2)、<strong>Class文件编码</strong>：通过javac命令生成的后缀名为.class的文件是UTF-8编码的UNICODE文件，这在任何操作系统上都是一样的，只要是.class文件就会使UNICODE格式。需要说明的是，UTF是UNICODE的存储和传输格式，它是为了解决UNICODE的高位占用冗余空间而产生的，使用UTF编码就意味着字符集使用的是UNICODE.</p><p>　　再回到我们的例子上，getBytes方法会根据指定的字符集取出字节数组(这里按照UNICODE格式来提取)，然后程序又通过new String(byte [] bytes)重新生成一个字符串，来看看String的这个构造函数：通过操作系统默认的字符集解码指定的byte数组，构造一个新的String，结果已经很清楚了，如果操作系统是UTF-8的话，输出就是正确的，如果不是，则会是乱码。由于这里使用的是默认编码GBK，那么输出的结果也就是乱码了。我们再详细分解一下运行步骤：</p><p>　　步骤1：<strong>创建Client58.java文件</strong>：该文件的默认编码格式GBK（如果是Eclipse，则可以在属性中查看到）。</p><p>　　步骤2：<strong>编写代码</strong>(如上)；</p><p>　　步骤3：<strong>保存，使用javac编译</strong>，注意我们没有使用”javac -encoding GBK Client58.java” 显示声明Java的编码方式，javac会自动按照操作系统的编码(GBK)读取Client58.java文件，然后将其编译成.class文件。</p><p>　　步骤4：<strong>生成.class文件</strong>。编译结束，生成.class文件，并保存到硬盘上，此时 .class文件使用的UTF-8格式编码的UNICODE字符集，可以通过javap 命令阅读class文件，其中” 汉字”变量也已经由GBK转变成UNICODE格式了。</p><p>　　步骤5：<strong>运行main方法，提取”汉字”的字节数组</strong>。”汉字” 原本是按照UTF-8格式保存的，要再提取出来当然没有任何问题了。</p><p>　　步骤6：<strong>重组字符串</strong>，读取操作系统默认的编码GBK，然后重新编码变量b的所有字节。问题就在这里产生了：因为UNICODE的存储格式是两个字节表示一个字符(注意：这里是指UCS-2标准)，虽然GBK也是两个字节表示一个字符，但两者之间没有映射关系，只要做转换只能读取映射表，不能实现自动转换—-于是JVM就按照默认的编码方式(GBK)读取了UNICODE的两个字节。</p><p>　　步骤7：<strong>输出乱码，程序运行结束</strong>，问题清楚了，解决方案也随之产生，方案有两个。</p><p>　　步骤8：修改代码，明确指定编码即可，代码如下：</p><p>　　　　　　System.out.println(new String(b,”UTF-8”));</p><p>　　步骤9：修改操作系统的编码方式，各个操作系统的修改方式不同，不再赘述。</p><p>　　我们可以把字符串读取字节的过程看做是数据传输的需要(比如网络、存储)，而重组字符串则是业务逻辑的需求，这样就可以是乱码重现：通过JDBC读取的字节数组是GBK的，而业务逻辑编码时采用的是UTF-8，于是乱码就产生了。对于此类问题，最好的解决办法就是使用统一的编码格式，要么都用GBK，要么都用UTF-8，各个组件、接口、逻辑层、都用UTF-8，拒绝独树一帜的情况。</p><p>　　　问题清楚了，我么看看以下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client58</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnsupportedEncodingException <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token string">"汉字"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 读取字节</span>        <span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重新生成一个新的字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    仅仅修改了读取字节的编码方式(修改成了GB2312)，结果会怎样呢？又或者将其修改成GB18030，结果又是怎样的呢？结果都是”汉字”，不是乱码。这是因为GB2312是中文字符集的V1.0版本，GBK是V2.0版本，GB18030是V3.0版本，版本是向下兼容的，只是它们包含的汉字数量不同而已，注意UNICODE可不在这个序列之内。</p><p><strong><font color="red">注意：一个系统使用统一的编码。</font></strong></p><h3><span id="建议59对字符串持有一种宽容的心态">建议59：对字符串持有一种宽容的心态</span></h3><p>在Java 中一涉及中文处理就会冒出很多问题来，其中排序也是一个让人头疼的课题，我们看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client59</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"张三(Z)"</span><span class="token punctuation">,</span> <span class="token string">"李四(L)"</span><span class="token punctuation">,</span> <span class="token string">"王五(W)"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    上面的代码定义了一个数组，然后进行升序排序，我们期望的结果是按照拼音升序排列，即为李四、王五、张三，但是结果却不是这样的：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160918133303090-1239977501.png" alt="img"></p><p>　这是按照什么排的序呀，非常混乱!我们知道Arrays工具类的默认排序是通过数组元素的compareTo方法进行比较的，那我们来看String类的compareTo的主要实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>String anotherString<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len1 <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> len2 <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> lim <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> lim<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> c1 <span class="token operator">=</span> v1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c2 <span class="token operator">=</span> v2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">!=</span> c2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c1 <span class="token operator">-</span> c2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> len1 <span class="token operator">-</span> len2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    上面的代码先取得字符串的字符数组，然后一个一个地比较大小，注意这里是字符比较(减号操作符)，也就是UNICODE码值比较，查一下UNICODE代码表，”张” 的码值是5F20，”李”是674E,这样一看，”张” 排在 “李” 前面也就很正确了—但这明显与我们的意图冲突了。这一点在JDK的文档中也有说明：对于非英文的String排序可能会出现不准确的情况，那该如何解决这个问题呢？Java推荐使用collator类进行排序，那好，我们把代码修改一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client59</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"张三(Z)"</span><span class="token punctuation">,</span> <span class="token string">"李四(L)"</span><span class="token punctuation">,</span> <span class="token string">"王五(W)"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义一个中文排序器</span>        Comparator c <span class="token operator">=</span> Collator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">;</span>            Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><p>　　　　<strong>1、李四(L)</strong><br>　　　　<strong>2、王五(W)</strong><br>　　　　<strong>3、张三(Z)</strong></p><p>​    这确实是我们期望的结果，应该不会错了吧！但是且慢，中国的汉字博大精深，Java是否都能精确的排序呢？最主要的一点是汉字中有象形文字，音形分离，是不是每个汉字都能按照拼音的顺序排好呢？我们写一个复杂的汉字来看看：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client59</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"犇(B)"</span><span class="token punctuation">,</span> <span class="token string">"鑫(X)"</span><span class="token punctuation">,</span> <span class="token string">"淼(M)"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义一个中文排序器</span>        Comparator c <span class="token operator">=</span> Collator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果如下：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160918134915642-243256239.png" alt="img"></p><p>​    输出结果又乱了，不要责怪Java，它们已尽量为我们考虑了，只是因为我们的汉字文化太博大精深了，要做好这个排序确实有点为难它，更深层次的原因是Java使用的是UNICODE编码，而中文UNICODE字符集来源于GB18030的,GB18030又是从GB2312发展起来，GB2312是一个包含了7000多个字符的字符集，它是按照拼音排序，并且是连续的，之后的GBK、GB18030都是在其基础上扩充而来的，所以要让它们完整的排序也就难上加难了。</p><p>　　如果排序对象是经常使用的汉字，使用Collator类排序完全可以满足我们的要求，毕竟GB2312已经包含了大部分的汉字，如果需要严格排序，则要使用一些开源项目来自己实现了，比如pinyin4j可以把汉字转换为拼音，然后我们自己来实现排序算法，不过此时你会发现要考虑的诸如算法、同音字、多音字等众多问题。</p><p><strong><font color="red">注意：如果排序不是一个关键算法，使用Collator类即可。</font></strong></p><h2><span id="第5章-数组和集合">第5章 数组和集合</span></h2><p>噢，他明白了，河水既没有牛伯伯说的那么浅，也没有小松鼠说的那么深，只有自己亲自试过才知道。——寓言故事《小马过河》</p><p>​    数据集处理是每种语言必备的功能，Java更甚之，数据集可以允许重复，也可以不允许重复，可以允许null存在，也可以不允许null存在，可以自动排序，也可以不自动排序，可以是阻塞式的，也可以是非阻塞式的，可以是栈，也可以是队列……本章将围绕我们使用最多的三个数据集合（数组、ArrayList和HashMap）来阐述在开发过程中要注意的事项，并由此延伸至Set、Queue、Stack等集合。</p><h3><span id="建议60性能考虑数组是首选">建议60：性能考虑，数组是首选</span></h3><p>​    数组在实际的系统开发中用的越来越少了，我们通常只有在阅读一些开源项目时才会看到它们的身影，在Java中它确实没有List、Set、Map这些集合类用起来方便，但是在基本类型处理方面，数组还是占优势的，而且集合类的底层也都是通过数组实现的，比如对一数据集求和这样的计算：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对数组求和</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> datas<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> datas<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> datas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    对一个int类型 的数组求和，取出所有数组元素并相加，此算法中如果是基本类型则使用数组效率是最高的，使用集合则效率次之。再看使用List求和：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 对列表求和计算</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> datas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> datas<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> datas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>​    注意看sum += datas.get(i);这行代码，这里其实已经做了一个拆箱动作，Integer对象通过intValue方法自动转换成了一个int基本类型，对于性能濒于临界的系统来说该方案是比较危险的，特别是大数量的时候，首先，在初始化List数组时要进行装箱操作，把一个int类型包装成一个Integer对象，虽然有整型池在，但不在整型池范围内的都会产生一个新的Integer对象，而且众所周知，基本类型是在栈内存中操作的，而对象是堆内存中操作的，栈内存的特点是：速度快，容量小；堆内存的特点是：速度慢，容量大（从性能上讲，基本类型的处理占优势）。其次，在进行求和运算时(或者其它遍历计算)时要做拆箱动作，因此无谓的性能消耗也就产生了。在实际测试中发现：对基本类型进行求和运算时，数组的效率是集合的10倍。</p><p><strong><font color="red">注意：性能要求较高的场景中使用数组代替集合。</font></strong></p><h3><span id="建议61若有必要使用变长数组">建议61：若有必要，使用变长数组</span></h3><p>​    Java中的数组是定长的，一旦经过初始化声明就不可改变长度，这在实际使用中非常不方便，比如要对班级学生的信息进行统计，因为我们不知道一个班级会有多少学生(随时都可能会有学生入学、退学或转学)，所以需要一个足够大的数组来容纳所有的学生，但问题是多大才算足够大？20年前一台台式机64MB的内存已经很牛了，现在要是没有8GB的内存(现在这个都太小了)你都不好意思跟别人交流计算机的配置，所以呀，这个足够大是相对于当时的场景而言的，随着环境的变化，”足够大”也可能会转变成”足够小”，然后就会出现超出数组最大容量的情况，那该如何解决呢？事实上，可以通过对数组扩容”婉转” 地解决该问题，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">expandCapacity</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> datas<span class="token punctuation">,</span> <span class="token keyword">int</span> newLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不能是负值</span>    newLen <span class="token operator">=</span> newLen <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> newLen<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生成一个新数组,并拷贝原值</span>    <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>datas<span class="token punctuation">,</span> newLen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    上述代码采用的是Arrays数组工具类的copyOf方法，产生了一个newLen长度的新数组，并把原有的值拷贝了进去，之后就可以对超长的元素进行赋值了(依据类型的不同分别赋值0、false或null)，使用方法如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client61</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一个班级最多容纳60个学生</span>        Stu <span class="token punctuation">[</span><span class="token punctuation">]</span> stuNums<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stu</span><span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//stuNums初始化......</span>        <span class="token comment" spellcheck="true">//偶尔一个班级可以容纳80人，数组加长</span>        stuNums<span class="token operator">=</span><span class="token function">expandCapacity</span><span class="token punctuation">(</span>stuNums<span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 重新初始化超过限额的20人...... */</span>            <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">expandCapacity</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> datas<span class="token punctuation">,</span> <span class="token keyword">int</span> newLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 不能是负值</span>        newLen <span class="token operator">=</span> newLen <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> newLen<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成一个新数组,并拷贝原值</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>datas<span class="token punctuation">,</span> newLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Stu</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p>​    通过这样的处理方式，曲折的解决了数组的变长问题，其实，集合的长度自动维护功能的原理与此类似。在实际开发中，如果确实需要变长的数据集，数组也是在考虑范围之内的，不能因固定长度而将其否定之。</p><h3><span id="建议62警惕数组的浅拷贝">建议62：警惕数组的浅拷贝</span></h3><p>​    有这样一个例子，第一个箱子里有赤橙黄绿青蓝紫7色气球，现在希望在第二个箱子中也放入7个气球，其中最后一个气球改为蓝色，也就是赤橙黄绿青蓝蓝7个气球，那我们很容易就会想到第二个箱子中的气球可以通过拷贝第一个箱子中的气球来实现，毕竟有6个气球是一样的嘛，来看实现代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>ToStringBuilder<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client62</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 气球数量</span>        <span class="token keyword">int</span> ballonNum <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第一个箱子</span>        Balloon<span class="token punctuation">[</span><span class="token punctuation">]</span> box1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Balloon</span><span class="token punctuation">[</span>ballonNum<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化第一个箱子中的气球</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ballonNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            box1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Balloon</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 第二个箱子的气球是拷贝第一个箱子里的</span>        Balloon<span class="token punctuation">[</span><span class="token punctuation">]</span> box2 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span> box1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 修改最后一个气球颜色</span>        box2<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Blue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印出第一个箱子中的气球颜色</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Balloon b <span class="token operator">:</span> box1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 气球颜色</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>    Red<span class="token punctuation">,</span> Orange<span class="token punctuation">,</span> Yellow<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Indigo<span class="token punctuation">,</span> Blue<span class="token punctuation">,</span> Violet<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 气球</span><span class="token keyword">class</span> <span class="token class-name">Balloon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 编号</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 颜色</span>    <span class="token keyword">private</span> Color color<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Balloon</span><span class="token punctuation">(</span>Color _color<span class="token punctuation">,</span> <span class="token keyword">int</span> _id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        color <span class="token operator">=</span> _color<span class="token punctuation">;</span>        id <span class="token operator">=</span> _id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Color <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>Color color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//apache-common-lang包下的ToStringBuilder重写toString方法</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBuilder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"编号"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"颜色"</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    第二个箱子里最后一个气球的颜色毫无疑问是被修改为蓝色了，不过我们是通过拷贝第一个箱子里的气球然后再修改的方式来实现的，那会对第一个箱子的气球颜色有影响吗？我们看看输出结果：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160918231713713-622853231.png" alt="img"></p><p>​        最后一个气球颜色竟然也被修改了，我们只是希望修改第二个箱子的气球啊，这是为何？这是典型的浅拷贝(Shallow  Clone)问题，以前第一章序列化时讲过，但是这里与之有一点不同：数组中的元素没有实现Serializable接口。</p><p>　　确实如此，通过copyOf方法产生的数组是一个浅拷贝，这与序列化的浅拷贝完全相同：基本类型是直接拷贝值，其它都是拷贝引用地址。需要说明的是，数组的clone方法也是与此相同的，同样是浅拷贝，而且集合的clone方法也都是浅拷贝，这就需要大家在拷贝时多留心了。</p><p>　　问题找到了，解决办法也很简单，遍历box1的每个元素，重新生成一个气球(Balloon)对象，并放置到box2数组中，代码比较简单，不再赘述。</p><p>　　该方法用的最多的地方是在使用集合(如List),进行业务处理时，比如发觉需要拷贝集合中的元素，可集合没有提供拷贝方法，如果自己写会很麻烦，所以干脆使用List.toArray方法转换成数组，然后通过Arrays.copyOf拷贝，再转换回集合，简单便捷！但是，非常遗憾的是，这里我们又撞到浅拷贝的枪口上了，虽然很多时候浅拷贝可以解决业务问题，但更多时候会留下隐患，我们需要提防又提防。</p><h3><span id="建议63在明确的场景下为集合指定初始容量">建议63：在明确的场景下，为集合指定初始容量</span></h3><p>​        我们经常使用ArrayList、Vector、HashMap等集合，一般都是直接用new跟上类名声明出一个集合来，然后使用add、remove等方法进行操作，而且因为它是自动管理长度的，所以不用我们特别费心超长的问题，这确实是一个非常好的优点，但也有我们必须要注意的事项。</p><p>　　下面以ArrayList为例深入了解一下Java是如何实现长度的动态管理的，先从add方法的阅读开始，代码（JDK7）如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//扩展长度</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>    <span class="token comment" spellcheck="true">//追加元素</span>    elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　我们知道ArrayList是一个大小可变的数组，但它在底层使用的是数组存储(也就是elementData变量)，而且数组长度是定长的，要实现动态长度必然要进行长度的扩展，ensureCapacityInternal方法提供了此功能，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//修改计数器</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// overflow-conscious code</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// overflow-conscious code</span>    <span class="token comment" spellcheck="true">//上次(原始)定义的数组长度</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新长度为原始长度+原始长度右移一位 ==>原始长度的1.5倍</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// minCapacity is usually close to size, so this is a win:</span>    <span class="token comment" spellcheck="true">//数组拷贝，生成新数组</span>    elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span>        Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>    MAX_ARRAY_SIZE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    大概分析一下这些源码，这个源码还是JDK7之前的版本上做了优化处理的。先说一下第一个方法ensureCapacityIntenal， 方法名的英文大致意思是“确保内部容量”，这里要说明，size表示的是现有的元素个数，并非ArrayList的容量，容量应该是数组 elementData的长度。参数minCapacity是需要检查的最小容量，即方法的功能就是确保elementData的长度不小于 minCapacity，如果不够，则调用grow增加容量。容量的增长也算结构性变动，所以modCount需要加1。</p><p>　　grow方法：先对容量扩大1.5倍，这里oldCapacity &gt;&gt; 1是二进制操作右移，相当于除以2，如果不知道这个面壁去吧。接再来把新的临时容量（还没正式改变容量，应该叫预期容量）和实际需要的最小容量比较，如果还不满 足，则把临时容量改成需要的最小容量值。在判断容量是否超过MAX_ARRAY_SIZE的值，MAX_ARRAY_SIZE值为 Integer.MAX_VALUE - 8，比int的最大值小8，不知道设计初衷是什么，可能方便判断吧。如果已经超过，调用hugeCapacity方法检查容量的int值是不是已经溢出。一般很 少用到int最大值的情况，那么多数据也不会用ArrayList来做容器了，估计没机会见到hugeCapacity运行一次了。最后确定了新的容量，就使用Arrays.copyOf方法来生成新的数组，copyOf也已经完成了将就的数据拷贝到新数组的工作。</p><p>　　回归正题，大家注意看数组长度的计算方法，并不是增加一个元素，elementData的长度就加1，而是在达到elementData长度的临界点时，才将elementData扩容1.5倍，这样实现避免了多次copyOf方法的性能开销，否则每增加一个元素都要扩容一次，那性能会更差。不知道大家有没有这样一个疑问，为啥要扩容1.5倍，而不是2.5,倍、3.5倍呢？其实我也这么想过，原因是一次扩容太大，占用的内存就越大，浪费的内存也就越多(1.5倍扩容，最多浪费33%的数组空间，而2.5倍则最多消耗60%的内存)，而一次扩容太小，则需要多次对数组重新分配内存，性能消耗严重，经过测试验证，扩容1.5倍既满足了性能要求，也减少了内存消耗。</p><p>　　现在我们知道了ArrayList的扩容原则，那还有一个问题：elementData的默认长度是多少呢？答案是10，如果我们使用默认方式声明ArrayList，如new ArrayList(),则elementData的初始长度是10，我们看看ArrayList的三个构造函数。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//无参构造</span><span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//构造一个具有指定初始容量的空列表。</span><span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                           initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//构造一个包含指定 collection 的元素的列表，这些元素是按照该 collection 的迭代器返回它们的顺序排列的</span><span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　ArrayList()：默认构造函数，提供初始容量为10的空列表。</p><p>   ArrayList(int initialCapacity)：构造一个具有指定初始容量的空列表。</p><p>   ArrayList(Collection&lt;? extends E&gt; c)：构造一个包含指定 collection 的元素的列表，这些元素是按照该 collection 的迭代器返回它们的顺序排列的。</p><p> 　从这里我们可以看出，如果不设置初始容量，系统会按照1.5倍的规则扩容，每次扩容都是一次数组的拷贝，如果数据量大，这样的拷贝会非常消耗资源，而且效率非常低下。所以，我们如果知道一个ArrayList的可能长度，然后对ArrayList设置一个初始容量则可以显著提高系统性能。</p><p>　　其它的集合如Vector和ArrayList类似，只是扩容的倍数不同而已，Vector扩容2倍，大家有兴趣的话可以看看Vector，HashMap的JDK源码。</p><h3><span id="建议64多种最值算法适时选择">建议64：多种最值算法，适时选择</span></h3><p>对一批数据进行排序，然后找出其中的最大值或最小值，这是基本的数据结构知识。在Java中我们可以通过编写算法的方式，也可以通过数组先排序再取值的方式来实现，下面以求最大值为例，解释一下多种算法：</p><p>　　(1)、自行实现，快速查找最大值　　</p><p>　　先看看用快速查找法取最大值的算法，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        max <span class="token operator">=</span> max <span class="token operator">></span> i <span class="token operator">?</span> max <span class="token operator">:</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        这是我们经常使用的最大值算法，也是速度最快的算法。它不要求排序，只要遍历一遍数组即可找出最大值。</p><p>　　(2)、先排序，后取值</p><p>　　对于求最大值，也可以采用先排序后取值的方式，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    从效率上讲，当然是自己写快速查找法更快一些了，只用遍历一遍就可以计算出最大值，但在实际测试中发现，如果数组量少于10000，两个基本上没有区别，但在同一个毫秒级别里，此时就可以不用自己写算法了，直接使用数组先排序后取值的方式。</p><p>　　如果数组元素超过10000，就需要依据实际情况来考虑：自己实现，可以提高性能；先排序后取值，简单，通俗易懂。排除性能上的差异，两者都可以选择，甚至后者更方便一些，也更容易想到。</p><p>　　现在问题来了，在代码中为什么先使用data.clone拷贝再排序呢？那是因为数组也是一个对象，不拷贝就改变了原有的数组元素的顺序吗？除非数组元素的顺序无关紧要。那如果要查找仅次于最大值的元素(也就是老二)，该如何处理呢？要注意，数组的元素时可以重复的，最大值可能是多个，所以单单一个排序然后取倒数第二个元素时解决不了问题的。</p><p>　　此时，就需要一个特殊的排序算法了，先要剔除重复数据，然后再排序，当然，自己写算法也可以实现，但是集合类已经提供了非常好的方法，要是再使用自己写算法就显得有点重复造轮子了。数组不能剔除重复数据，但Set集合却是可以的，而且Set的子类TreeSet还能自动排序，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSecond</span><span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//转换为列表</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> dataList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转换为TreeSet，剔除重复元素并升序排列</span>    TreeSet<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//取得比最大值小的最大值，也就是老二了</span>    <span class="token keyword">return</span> ts<span class="token punctuation">.</span><span class="token function">lower</span><span class="token punctuation">(</span>ts<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　    剔除重复元素并升序排列，这都是由TreeSet类实现的，然后可再使用lower方法寻找小于最大值的值，大家看，上面的程序非常简单吧?那如果是我们自己编写代码会怎么样呢？那至少要遍历数组两遍才能计算出老二的值，代码复杂度将大大提升。因此在实际应用中求最值，包括最大值、最小值、倒数第二小值等，使用集合是最简单的方式，当然从性能方面来考虑，数组才是最好的选择。</p><p><strong><font color="red">注意：最值计算时使用集合最简单，使用数组性能最优。</font></strong></p><h3><span id="建议65避开基本类型数组转换列表陷阱">建议65：避开基本类型数组转换列表陷阱</span></h3><p>​        我们在开发中经常会使用Arrays和Collections这两个工具类和列表之间转换，非常方便，但也有时候会出现一些奇怪的问题，来看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client65</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> data <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        List list<span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中的元素数量是："</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        也许你会说，这很简单，list变量的元素数量当然是5了。但是运行后打印出来的列表数量为1。</p><p>　　事实上data确实是一个有5个元素的int类型数组，只是通过asList转换成列表后就只有一个元素了，这是为什么呢？其他4个元素到什么地方去了呢？</p><p>　　我们仔细看一下Arrays.asList的方法说明：输入一个变长参数，返回一个固定长度的列表。注意这里是一个变长参数，看源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">asList</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        asList方法输入的是一个泛型变长参数，我们知道基本类型是不能泛型化的，也就是说8个基本类型不能作为泛型参数，要想作为泛型参数就必须使用其所对应的包装类型，那前面的例子传递了一个int类型的数组，为何程序没有报编译错误呢？</p><p>　　在Java中，数组是一个对象，它是可以泛型化的，也就是说我们的例子是把一个int类型的数组作为了T的类型，所以在转换后在List中就只有一个类型为int数组的元素了，我们打印出来看看，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client65</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> data <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        List list<span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"元素类型是："</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前后是否相等："</span><span class="token operator">+</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        输出的结果是： <strong>元素类型是：class [I  前后是否相等：true</strong></p><p>　　很明显，放在列表中的元素时一个int数组，可能有人要问了，为什么”元素类型:”后的class是”[I”？我们并没有指明是数组(Array)类型呀！这是因为JVM不可能输出Array类型，因为Array是属于java.lang.reflect包的，它是通过反射访问数组元素的工具类。在Java中任何一个一维数组的类型都是 “ [I “ ,究其原因就是Java并没有定义数组这一个类，它是在编译器编译的时候生成的，是一个特殊的类，在JDK的帮助中也没有任何数组类的信息。</p><p>　　弄清楚了问题，修改也很easy，直接使用包装类即可，部分代码如下：　</p><pre class=" language-java"><code class="language-java">Integer data <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>　把int替换为Integer即可让输出元素数量为5.需要说明的是，不仅仅是int类型的数组有这个问题，其它7个基本类型的数组也存在相似的问题，这就需要大家注意了，在把基本类型数组转换为列表时，要特别小心asList方法的陷阱，避免出现程序逻辑混乱的情况。</p><p>　　<strong><font color="red">注意：原始类型数组不能作为asList的输入参数，否则会引起程序逻辑混乱。</font></strong></p><h3><span id="建议66aslist方法产生的list的对象不可更改">建议66：asList方法产生的List的对象不可更改</span></h3><p>​        上一个建议指出了asList方法在转换基本类型数组时存在的问题，接着我们看一下asList方法返回的列表有何特殊的地方，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client66</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 五天工作制</span>        Week days<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> Week<span class="token punctuation">.</span>Mon<span class="token punctuation">,</span> Week<span class="token punctuation">.</span>Tue<span class="token punctuation">,</span> Week<span class="token punctuation">.</span>Wed<span class="token punctuation">,</span> Week<span class="token punctuation">.</span>Thu<span class="token punctuation">,</span> Week<span class="token punctuation">.</span>Fri <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换为列表</span>        List<span class="token operator">&lt;</span>Week<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 增加周六为工作日</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Week<span class="token punctuation">.</span>Sat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* do something */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">enum</span> Week <span class="token punctuation">{</span>    Sun<span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span></code></pre><p>　    很简单的程序呀，默认声明的工作日(workDays)是从周一到周五，偶尔周六也会算作工作日加入到工作日列表中，不过，这段程序执行时会不会有什么问题呢？编译没有任何问题，但是一运行，却出现了如下结果：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160920103326168-62484581.png" alt="img"></p><p>UnsupportedOperationException,不支持的操作，居然不支持list的add方法，这是什么原因呢？我们看看asList方法的源代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">asList</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        直接new了一个ArrayList对象返回，难道ArrayList不支持add方法，不可能呀！可能，问题就出现在这个ArrayList类上，此ArrayList<strong>非java.util.ArrayList</strong>，而是Arrays工具类的一个<strong>内部类</strong>，其构造函数如下所示：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>2764017481108945198L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span>    <span class="token function">ArrayList</span><span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token operator">==</span>null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> array<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*其它方法略*/</span><span class="token punctuation">}</span></code></pre><p>​        这个ArrayList是一个静态私有内部类，除了Arrays能访问外，其它类都不能访问，仔细看这个类，它没有提供add方法，那肯定是父类AbstractList提供了，来看代码：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    　父类确实提供了，但没有提供具体的实现，所以每个子类都需要自己覆写add方法，而Arrays的内部类ArrayList没有覆写，因此add一个元素就报错了。</p><p>　　我们深入地看看这个ArrayList静态内部类，它仅仅实现了5个方法：</p><ol><li>size：元素数量</li><li>get：获得制定元素</li><li>set：重置某一元素值</li><li>contains：是否包含某元素</li><li>toArray：转化为数组，实现了数组的浅拷贝</li></ol><p>　　把这几个方法的源代码展示一下：　</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//元素数量</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//转化为数组，实现了数组的浅拷贝</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> size<span class="token punctuation">,</span>                             <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">)</span> a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">></span> size<span class="token punctuation">)</span>        a<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获得指定元素</span><span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//重置某一元素</span><span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    E oldValue <span class="token operator">=</span> a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//是否包含元素</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        对于我们经常使用list.add和list.remove方法它都没有实现，也就是说asList返回的是一个长度不可变的列表，数组是多长，转换成的列表也就是多长，<strong>换句话说此处的列表只是数组的一个外壳，不再保持列表的动态变长的特性</strong>，这才是我们关注的重点。有些开发人员喜欢这样定义个初始化列表：　</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> names<span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​        一句话完成了列表的定义和初始化，看似很便捷，却隐藏着重大隐患—列表长度无法修改。想想看，如果这样一个List传递到一个允许添加的add操作的方法中，那将会产生何种结果，如果有这种习惯的javaer，请慎之戒之，除非非常自信该List只用于只读操作。</p><h3><span id="建议67不同的列表选择不同的遍历算法">建议67：不同的列表选择不同的遍历算法</span></h3><p>​        我们思考这样一个案例：统计一个省的各科高考平均值，比如数学平均分是多少，语文平均分是多少等，这是每年招生办都会公布的数据，我们来想想看该算法应如何实现。当然使用数据库中的一个SQL语句就可能求出平均值，不过这不再我们的考虑之列，这里还是使用纯Java的算法来解决之，看代码：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client67</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 学生数量 80万</span>        <span class="token keyword">int</span> stuNum <span class="token operator">=</span> <span class="token number">80</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// List集合，记录所有学生的分数</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>stuNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写入分数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stuNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            scores<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 记录开始计算 时间</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均分是："</span> <span class="token operator">+</span> <span class="token function">average</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">average</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> scores<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历求和</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> scores<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum <span class="token operator">/</span> scores<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    把80万名学生的成绩放到一个ArrayList数组中，然后通过foreach方法遍历求和，再计算平均值，程序很简单，输出结果：</p><p>　<strong>平均分是：74</strong><br>    <strong>执行时间：11ms</strong></p><p>　　仅仅计算一个算术平均值就花了11ms，不要说什么其它诸如加权平均值，补充平均值等算法，那花的时间肯定更长。我们仔细分析一下average方法，加号操作是最基本的，没有什么可以优化的，剩下的就是一个遍历了，问题是List的遍历可以优化吗？</p><p>　　我们尝试一下，List的遍历还有另外一种方式，即通过下标方式来访问，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">average</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> scores<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历求和</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> scores<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> scores<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum <span class="token operator">/</span> scores<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        不再使用foreach遍历，而是采用下标方式遍历，我们看看输出结果：</p><p>　　 <strong>平均分是：74</strong><br>        <strong>执行时间：8ms</strong><br>　　执行时间已经下降，如果数据量更大，会更明显。那为什么我们使用下标方式遍历数组可以提高的性能呢？</p><p>　　这是因为ArrayList数组实现了RandomAccess接口(随机存取接口)，这样标志着ArrayList是一个可以随机存取的列表。在Java中，RandomAccess和Cloneable、Serializable一样，都是标志性接口，不需要任何实现，只是用来表明其实现类具有某种特质的，实现了Cloneable表明可以被拷贝，实现了Serializable接口表明被序列化了，实现了RandomAccess接口则表明这个类可以随机存取，对我们的ArrayList来说也就标志着其数据元素之间没有关联，即两个位置相邻的元素之间没有相互依赖和索引关系，可以随机访问和存取。我们知道，Java的foreach语法时iterator（迭代器）的变形用法，也就是说上面的foreach与下面的代码等价：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> i <span class="token operator">=</span> scores<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        那我们再想想什么是迭代器，迭代器是23中设计模式中的一种，”提供一种方法访问一个容器对象中的各个元素，同时又无须暴露该对象的内部细节”，也就是说对于ArrayList，需要先创建一个迭代器容器，然后屏蔽内部遍历细节，对外提供hasNext、next等方法。问题是ArrayList实现RandomAccess接口，表明元素之间本来没有关系，可是，为了使用迭代器就需要强制建立一种相互”知晓”的关系，比如上一个元素可以判断是否有下一个元素，以及下一个元素时什么等关系，这也就是foreach遍历耗时的原因。</p><p>　　Java的ArrayList类加上了RandomAccess接口，就是在告诉我们，“ArrayList是随机存取的，采用下标方式遍历列表速度回更快”，接着又有一个问题，为什么不把RandomAccess接口加到所有List的实现类上呢？</p><p>　　那是因为有些List的实现类不是随机存取的，而是有序存取的，比如LinkedList类，LinkedList类也是一个列表，但它实现了双向链表，每个数据节点都有三个数据项：前节点的引用(Previous Node)、本节点元素(Node Element)、后继结点的引用(Next Node)，这是数据结构的基本知识，不多讲了，也就是说在LinkedList中的两个元素本来就是有关联的，我知道你的存在，你也知道我的存在。那大家想想看，元素之间已经有关联了，使用foreach也就是迭代器方式是不是效率更高呢？我们修改一下例子，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 学生数量 80万</span>    <span class="token keyword">int</span> stuNum <span class="token operator">=</span> <span class="token number">80</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// List集合，记录所有学生的分数</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写入分数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stuNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        scores<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 记录开始计算 时间</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均分是："</span> <span class="token operator">+</span> <span class="token function">average</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">average</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> scores<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历求和</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> scores<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum <span class="token operator">/</span> scores<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        输出结果为： <strong>平均分是：74</strong> <strong>执行时间：12ms 。执行效率还好。但是比ArrayList就慢了，但如果LinkedList采用下标方式遍历：效率会如何呢？我告诉你会很慢。直接分析一下源码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>由node方法查找指定下标的节点，然后返回其包含的元素，看node方法：</p><pre class=" language-java"><code class="language-java">Node<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// assert isElementIndex(index);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        看懂了吗？程序会先判断输入的下标与中间值(size右移一位，也就是除以2了)的关系，小于中间值则从头开始正向搜索，大于中间值则从尾节点反向搜索，想想看，每一次的get方法都是一个遍历，”性能”两字从何说去呢？　　</p><p>　　明白了随机存取列表和有序存取列表的区别，我们的average方法就必须重构了，以便实现不同的列表采用不同的遍历方式，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">average</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> scores<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scores <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 可以随机存取，则使用下标遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> scores<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> scores<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 有序存取，使用foreach方式</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> scores<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum <span class="token operator">/</span> scores<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    如此一来，列表的遍历就可以”以不变应万变”了，无论是随机存取列表还是有序列表，它都可以提供快速的遍历。</p><p><strong><font color="red">注意：列表遍历不是那么简单的，适时选择最优的遍历方式，不要固化为一种。</font></strong></p><h3><span id="建议68频繁插入和删除时使用linkedlist">建议68：频繁插入和删除时使用LinkedList</span></h3><p>​        上一个建议介绍了列表的遍历方式，也就是“读” 操作，本建议将介绍列表的”写”操作：即插入、删除、修改动作。</p><p>　　(1)、插入元素：列表中我们使用最多的是ArrayList，下面来看看它的插入(add方法)算法，源代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//检查下标是否越界</span>    <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//若需要扩容，则增大底层数组的长度</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>    <span class="token comment" spellcheck="true">//给index下标之后的元素(包括当前元素)的下标加1，空出index位置</span>    System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                     size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//赋值index位置元素</span>    elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//列表长度加1</span>    size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        注意看arrayCopy方法，只要插入一个元素，其后的元素就会向后移动一位，虽然arrayCopy是一个本地方法，效率非常高，但频繁的插入，每次后面的元素都要拷贝一遍，效率就更低了，特别是在头位置插入元素时，现在的问题是，开发中确实会遇到要插入的元素的情况，哪有什么更好的方法解决此效率问题吗？</p><p>　　有，使用LinkedList即可。我么知道LinkedList是一个双向列表，它的插入只是修改了相邻元素的next和previous引用，其插入算法(add方法)如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">linkBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">linkBefore</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> succ<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// assert succ != null;</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> succ<span class="token punctuation">)</span><span class="token punctuation">;</span>    succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> null<span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        这个方法，第一步检查是否越界，下来判断插入元素的位置与列表的长度比较，如果相等，调用linkLast，否则调用linkBefore方法。但这两个方法的共同点都是双向链表插入算法，把自己插入到链表，然后再把前节点的next和后节点的previous指向自己。想想看，这样插入一个元素的过程中，没有任何元素会有拷贝过程，只是引用地址变了，那效率自然就高了。</p><p>​    　(2)、删除元素：插入了解清楚了，我们再来看看删除动作。ArrayList提供了删除指定位置上的元素，删除指定元素，删除一个下标范围内的元素集等删除动作。三者的实现原理基本相似，都是找索引位置，然后删除。我们以最常用的删除指定下标的方法（remove方法）为例来看看删除动作的性能到底如何，源码如下：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//下标校验</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改计数器加1</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录要删除的元素</span>    E oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//有多少个元素向前移动</span>    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//index后的元素向前移动一位</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                         numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//列表长度减1</span>    elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Let gc do its work</span>    <span class="token comment" spellcheck="true">//返回删除的值</span>    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        注意看，index位置后的元素都向前移动了一位，最后一个位置空出来了，这又是一个数组拷贝，和插入一样，如果数据量大，删除动作必然会暴露出性能和效率方面的问题。ArrayList其它的两个删除方法与此类似，不再赘述。</p><p>　　我么再来看LinkedList的删除动作。LinkedList提供了非常多的删除操作，比如删除指定位置元素，删除头元素等，与之相关的poll方法也会执行删除动作，下面来看最基本的删除指定位置元素的方法remove，源代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">E <span class="token function">unlink</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// assert x != null;</span>    <span class="token keyword">final</span> E element <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        first <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        last <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    x<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>    size<span class="token operator">--</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    E item<span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span>    <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        这也是双向链表标准删除算法，没有任何耗时的操作，全部都是引用指针的变更，效率自然高了。</p><p>​        (3)、修改元素：写操作还有一个动作，修改元素值，在这一点上LinkedList输给了ArrayList，这是因为LinkedList是按顺序存储的，因此定位元素必然是一个遍历过程，效率大打折扣，我们来看Set方法的代码：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定位节点</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    E oldVal <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//节点元素替换</span>    x<span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        看似很简洁，但是这里使用了node方法定位元素，上一个建议中我们已经说明了LinkedList这种顺序存取列表的元素定位方式会折半遍历，这是一个极耗时的操作，而ArrayList的修改动作则是数组元素的直接替换，简单高效。</p><p>　　在修改动作上，LinkedList比ArrayList慢很多，特别是要进行大量的修改时，两者完全不在一个数量级上。</p><p>　　上面通过分析源码完成了LinkedList与ArrayList之间的PK，其中<strong>LinkedList胜两局：删除和插入效率高</strong>；<strong>ArrayList胜一局：修改元素效率高</strong>。总体来说，在写方面LinkedList占优势，而且在实际使用中，修改是一个比较少的动作。因此有大量写的操作(更多的是插入和删除)，推荐使用LinkedList。不过何为少量？何为大量呢？</p><p>　　这就依赖于咱们在开发中系统了，具体情况具体分析了。</p><h3><span id="建议69列表list相等只关心元素数据">建议69：列表(List)相等只关心元素数据</span></h3><p>我们来看一个比较列表相等的例子，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client69</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Vector<span class="token operator">&lt;</span>String<span class="token operator">></span> strs2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strs2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>strs2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        两个类都不同，一个是ArrayList，一个是Vector，那结果肯定不相等了。真是这样吗？但其实结果为true，也就是两者相等。</p><p>　　我们分析一下，两者为何相等，两者都是列表（List），都实现了List接口，也都继承了AbstractList抽象类，其equals方法是在AbstractList中定义的，我们来看源代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//是否是列表，注意这里：只要实现List接口即可</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过迭代器访问List的所有元素</span>    ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> e1 <span class="token operator">=</span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListIterator e2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历两个List的元素</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> e2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        E o1 <span class="token operator">=</span> e1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o2 <span class="token operator">=</span> e2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//只要存在着不相等就退出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o1<span class="token operator">==</span>null <span class="token operator">?</span> o2<span class="token operator">==</span>null <span class="token operator">:</span> o1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//长度是否也相等</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> e2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        看到没，这里只要实现了List接口就成，它不关心List的具体实现类，只要所有元素相等，并且长度也相等就表明两个List是相等的，与具体的容量类型无关。也就是说，上面的例子虽然一个是Arraylist,一个是Vector，只要里面的元素相等，那结果也就相等。</p><p>　　Java如此处理也确实是在为开发者考虑，列表只是一个容器，只要是同一种类型的容器(如List)，不用关心，容器的细节差别，只要确定所有的元素数据相等，那这两个列表就是相等的，如此一来，我们在开发中就不用太关注容器的细节了，可以把注意力更多地放在数据元素上，而且即使中途重构容器类型，也不会对相等的判断产生太大的影响。</p><p>　　其它的集合类型，如Set、Map等于此相同，也是只关心集合元素，不用考虑集合类型。</p><p><strong><font color="red">注意：判断集合是否相等时只须关注元素是否相等即可。</font></strong></p><h3><span id="建议70子列表只是原列表的一个视图">建议70：子列表只是原列表的一个视图</span></h3><p>​        List接口提供了subList方法，其作用是返回一个列表的子列表，这与String类subSting有点类似，但它们的功能是否相同呢？我们来看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client70</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义一个包含两个字符串的列表</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构造一个包含c列表的字符串列表</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// subList生成与c相同的列表</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> c2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// c2增加一个元素</span>        c2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c==c1? "</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c==c2? "</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        c1是通过ArrayList的构造函数创建的，c2是通过列表的subList方法创建的，然后c2又增加了一个元素”C”，现在的问题是输出的结果是什么呢？列表c与c1、c2之间是什么关系呢？先不回答这个问题，我们先来回想一下String类的subString方法，看看它是如何工作的，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String str <span class="token operator">=</span> <span class="token string">"AB"</span><span class="token punctuation">;</span>    String str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    String str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"C"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str==str1? "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str==str2? "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        很明显，str和str1是相等的(虽然不是同一个对象，但用equals方法判断是相等的)，但它们与str2不相等，这毋庸置疑，因为str2在对象池中重新生成了一个新的对象，其表面值是ABC，那当然与str和str1不相等了。</p><p>　　说完了subString的小插曲，现在回到List是否相等的判断上来。subList与subString的输出结果是一样的吗？让事实说话，运行结果如下：<strong>c= =c1? false   c= =c2? true</strong></p><p>　　很遗憾，与String类正好相反，同样是一个sub类型的操作，为什么会相反呢？c2是通过subList方法从c列表中生成的一个子列表，然后c2又增加了一个元素，可为什么增加了一个元素还会相等呢？我们从subList的源码来分析一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span> <span class="token operator">?</span>            <span class="token keyword">new</span> <span class="token class-name">RandomAccessSubList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">)</span> <span class="token operator">:</span>            <span class="token keyword">new</span> <span class="token class-name">SubList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        subList的方法是由AbstractList实现的，它会根据是不是可以随机存取来提供不同的SubList实现方式，不过，随机存取的使用频率比较高，而且RandomAccessSubList也是subList的子类，所以所有的操作都是由Sublist类实现的(除了自身的SubList方法外)，那么，我们就直接看看SubList类的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SubList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//原始列表</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AbstractList<span class="token operator">&lt;</span>E<span class="token operator">></span> l<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//偏移量</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> offset<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造函数，注意list参数就是我们的原始列表</span>    <span class="token function">SubList</span><span class="token punctuation">(</span>AbstractList<span class="token operator">&lt;</span>E<span class="token operator">></span> list<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*下标校验代码  略*/</span>        <span class="token comment" spellcheck="true">//传递原始列表</span>        l <span class="token operator">=</span> list<span class="token punctuation">;</span>        offset <span class="token operator">=</span> fromIndex<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//子列表的长度</span>        size <span class="token operator">=</span> toIndex <span class="token operator">-</span> fromIndex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">=</span> l<span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获得制定位置的元素</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*下标校验 略*/</span>        <span class="token comment" spellcheck="true">//从原始字符串中获得制定位置的元素</span>        <span class="token keyword">return</span> l<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">+</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//增加或插入</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*下标校验 略*/</span>        <span class="token comment" spellcheck="true">//直接增加到原始字符串上</span>        l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token operator">+</span>offset<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*处理长度和修改计数器*/</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/*其它方法 略*/</span><span class="token punctuation">}</span></code></pre><p>​        通过阅读这段代码，我们就非常清楚subList方法的实现原理了：<strong>它返回的SubList类也是AbstractList的子类，其所有的get、set、add、remove等都是在原始列表上的操作，它自身并没有生成一个新的数组或是链表，也就是子列表只是原列表的一个视图(View)而已。所有的修改动作都映射到了原列表上。</strong></p><p>　　我们例子中的c2增加了一个元素C，不过增加的元素C到了c列表上，两个变量的元素仍然保持一致，相等也就是自然的了。</p><p>　　解释完相等的问题，再回过头来看看变量c与c1不行等的原因，很简单，因为通过ArrayList构造函数创建的List对象实际上是新列表，它是通过数组的copyOf动作生成的，所生成的列表c1与原列表c之间没有任何关系(虽然是浅拷贝，但元素类型是String，也就是说元素是深拷贝的)，然后c又增加了元素，因为c1与c之间已经没有一毛线关系了。</p><p><strong><font color="red">注意：subList产生的列表只是一个视图，所有的修改动作直接作用于原列表。</font></strong></p><h3><span id="建议71推荐使用sublist处理局部列表">建议71：推荐使用subList处理局部列表</span></h3><p>​        我们来看这样一个简单的需求：一个列表有100个元素，现在要删除索引位置为20~30的元素。这很简单，一个遍历很快就可以完成，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client71</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化一个固定长度，不可变列表</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> initData <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">nCopies</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换为可变列表</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>initData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历，删除符合条件的元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>或者将for循环改为：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        相信首先出现在大家脑海中的实现算法就是此算法了，遍历一遍，符合条件的删除，简单而使用，不过，有没有其它方式呢？有没有“one-lining”一行代码就解决问题的方式呢？</p><p>　　有，直接使用ArrayList的removeRange方法不就可以了吗？不过好像不可能呀，虽然JDK上由此方法，但是它有protected关键字修饰着，不能直接使用，那怎么办？看看如下代码：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化一个固定长度，不可变列表</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> initData <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">nCopies</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 转换为可变列表</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>initData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除指定范围内的元素</span>    list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        上一个建议讲了subList方法的具体实现方式，所有的操作都是在原始列表上进行的，那我们就用subList先取出一个子列表，然后清空。因为subList返回的list是原始列表的一个视图，删除这个视图中 的所有元素，最终都会反映到原始字符串上，那么一行代码解决问题了。</p><p>　　顺便贴一下上面方法调用的源码：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">removeRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">removeRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> it <span class="token operator">=</span> <span class="token function">listIterator</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">=</span>toIndex<span class="token operator">-</span>fromIndex<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="建议72生成子列表后不要再操作原列表">建议72：生成子列表后不要再操作原列表</span></h3><p>​         前面说了，subList生成的子列表是原列表的一个视图，那在subList执行完后，如果修改了原列表的内容会怎样呢？视图是否会改变呢？如果是数据库视图，表数据变更了，视图当然会变了，至于subList生成的视图是否会改变，还是从源码上来看吧，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client72</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> subList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//原字符串增加一个元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原列表长度："</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子列表长度："</span><span class="token operator">+</span>subList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        程序中有一个原始列表，生成了一个子列表，然后在原始列表中增加一个元素，最后打印出原始列表和子列表的长度，大家想一下，这段程序什么地方会出现错误呢？list.add(“D”)会报错吗？不会，subList并没有锁定原列表，原列表当然可以继续修改。难道有size方法？正确，确实是size方法出错了，输出结果如下：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160920211722324-1741297553.png" alt="img"></p><p>​        什么，居然是subList的size方法出现了异常，而且还是并发修改异常？这没道理呀，这里根本就没有多线程操作，何来并发修改呢？这个问题很容易回答，那是因为subList取出的列表是原列表的一个视图，原数据集(代码中的lsit变量)修改了，但是subList取出的子列表不会重新生成一个新列表(这点与数据库视图是不相同的)，后面在对子列表继续操作时，就会检测到修改计数器与预期的不相同，于是就抛出了并发修改异常。出现这个问题的最终原因还是在子列表提供的size方法的检查上，还记得上面几个例子中经常提到的修改计数器？原因就在这里，我们来看看size的源代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        其中的checkForComodification()方法就是用于检测是否并发修改的，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断当前修改计数器是否与子列表生成时一致</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>modCount <span class="token operator">!=</span> l<span class="token punctuation">.</span>modCount<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        modCount 是从什么地方来的呢？它是在subList子列表的构造函数中赋值的，其值等于生成子列表时的修改次数吗。因此在生成子列表后再修改原始列表，l.modCount的值就必然比modeCount大1，不再保持相等了，于是就抛出了ConcurrentModificationException异常。</p><p>　　subList的其它方法也会检测修改计数器，例如set、get、add等方法，若生成子列表后，再修改原列表，这些方法也会抛出ConcurrentModificationException异常。</p><p>　　对于子列表的操作，因为视图是动态生成的，生成子列表后再操作原列表，必然会导致”视图 “的不稳定，最有效的方法就是通过Collections.unmodifiableList方法设置列表为只读状态，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> subList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置列表为只读状态</span>    list<span class="token operator">=</span>Collections<span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对list进行只读操作</span>    <span class="token comment" spellcheck="true">//......</span>    <span class="token comment" spellcheck="true">//对subList进行读写操作</span>    <span class="token comment" spellcheck="true">//......</span><span class="token punctuation">}</span></code></pre><p>​        这在团队编码中特别有用，比如我生成了一个list，需要调用其他同事写的共享方法，但是一些元素是不能修改的，想想看，此时subList方法和unmodifiableList方法配合使用是不是就可以解决我们的问题了呢？防御式编程就是教我们如此做的。</p><p>　　这里还有一个问题，数据库的一张表可以有多个视图，我们的List也可以有多张视图，也就是可以有多个子列表，但问题是只要生成的子列表多于一个，任何一个子列表都不能修改了，否则就会抛出ConcurrentModificationException异常。</p><p><strong><font color="red">注意：subList生成子列表后，保持原列表的只读状态。</font></strong></p><h3><span id="建议73使用comparator进行排序">建议73：使用Comparator进行排序</span></h3><p>​        在项目开发中，我们经常要对一组数据进行排序，或者升序或者降序，在Java中排序有多种方式，最土的方式就是自己写排序算法，比如冒泡排序、快速排序、二叉树排序等，但一般不需要自己写，JDK已经为我们提供了很多的排序算法，我们采用”拿来主义” 就成了。在Java中，要想给数据排序，有两种实现方式，一种是实现Comparable接口，一种是实现Comparator接口，这两者有什么区别呢？我们来看一个例子，就比如给公司职员按照工号排序吧，先定义一个职员类代码，如下所示：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>CompareToBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>ToStringBuilder<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 工号--按照进入公司的先后顺序编码的</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 职位</span>    <span class="token keyword">private</span> Position position<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token keyword">int</span> _id<span class="token punctuation">,</span> String _name<span class="token punctuation">,</span> Position _position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        id <span class="token operator">=</span> _id<span class="token punctuation">;</span>        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>        position <span class="token operator">=</span> _position<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//getter和setter方法略</span>    <span class="token comment" spellcheck="true">// 按照Id排序，也就是按照资历的深浅排序</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Employee o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompareToBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> o<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toComparison</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ToStringBuilder<span class="token punctuation">.</span><span class="token function">reflectionToString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//枚举类型(三个级别Boss(老板)、经理(Manager)、普通员工(Staff))</span><span class="token keyword">enum</span> Position <span class="token punctuation">{</span>    Boss<span class="token punctuation">,</span> Manager<span class="token punctuation">,</span> Staff<span class="token punctuation">}</span></code></pre><p>​        这是一个简单的JavaBean，描述的是一个员工的基本信息，其中id是员工编号，按照进入公司的先后顺序编码，position是岗位描述，表示是经理还是普通职员，这是一个枚举类型。</p><p>　　注意Employee类中的compareTo方法，它是Comparable接口要求必须实现的方法，这里使用apache的工具类来实现，表明是按照Id的自然序列排序的(也就是升序)，现在我们看看如何排序：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Employee<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 两个职员</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span> <span class="token string">"马六"</span><span class="token punctuation">,</span> Position<span class="token punctuation">.</span>Staff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token string">"赵七"</span><span class="token punctuation">,</span> Position<span class="token punctuation">.</span>Staff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 两个经理</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> Position<span class="token punctuation">.</span>Manager<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">,</span> Position<span class="token punctuation">.</span>Manager<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 一个老板</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> Position<span class="token punctuation">.</span>Boss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 按照Id排序，也就是按照资历排序</span>    Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Employee e <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在收集数据的时候本来应该从老板到员工，为了结果更清晰，故将其打乱，从员工到老板，排序结果如下：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160921124450481-181677613.png" alt="img"></p><p>​        是按照ID升序排列的，结果正确，但是，有时候我们希望按照职位来排序，那怎么做呢？此时，重构Employee类已经不合适了，Employee已经是一个稳定类，为了排序功能修改它不是一个好办法，哪有什么好的解决办法吗？</p><p>　　有办法，看Collections.sort方法，它有一个重载方法Collections.sort(List<t> list, Comparator&lt;? super T&gt; c),可以接收一个Comparator实现类，这下就好办了，代码如下：　　</t></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">PositionComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Employee o1<span class="token punctuation">,</span> Employee o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 按照职位降序排列</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    创建了一个职位排序法，依据职位的高低进行降序排列，然后只要Collections.sort（list）修改为Collections.sort(list,new PositionComparator() )即可实现按照职位排序的要求。</p><p>　　现在问题又来了：按职位临时倒叙排列呢？注意只是临时的，是否需要重写一个排序器呢？完全不用，有两个解决办法：</p><ul><li>直接使用Collections.reverse（List &lt;?&gt; list）方法实现倒序排列；</li><li>通过Collections.sort(list , Collections.reverseOrder(new PositionComparator()))也可以实现倒序排列。</li></ul><p>　　第二个问题：先按照职位排序，职位相同再按照工号排序，这如何处理呢？这可是我们经常遇到的实际问题。很好处理，在compareTo或者compare方法中判断职位是否相等，相等的话再根据工号排序，使用apache工具类来简化处理，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Employee o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompareToBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> o<span class="token punctuation">.</span>position<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> o<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toComparison</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        在JDK中，对Collections.sort方法的解释是按照自然顺序进行升序排列，这种说法其实不太准确的，sort方法的排序方式并不是一成不变的升序，也可能是倒序，这依赖于compareTo的返回值，我们知道如果compareTo返回负数，表明当前值比对比值小，零表示相等，正数表明当前值比对比值大，比如我们修改一下Employee的compareTo方法，如下所示：　</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Employee o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompareToBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>id<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toComparison</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        两个参数调换了一下位置，也就是compareTo的返回值与之前正好相反，再使用Collections.sort进行排序，顺序也就相反了，这样也实现了倒序。</p><p>　　第三个问题：在Java中，为什么要有两个排序接口呢？</p><p>　　其实也很好回答，实现了Comparable接口的类表明自身是可以比较的，有了比较才能进行排序，而Comparator接口是一个工具类接口，它的名字(比较器)也已经表明了它的作用：用作比较，它与原有类的逻辑没有关系，只是实现两个类的比较逻辑，从这方面来说，一个类可以有很多的比较器，只要有业务需求就可以产生比较器，有比较器就可以产生N多种排序，而Comparable接口的排序只能说是实现类的默认排序算法，一个类稳定、成熟后其compareTo方法基本不会变，也就是说一个类只能有一个固定的、由compareTo方法提供的默认排序算法。</p><p><strong><font color="red">注意：Comparable接口可以作为实现类的默认排序算法，Comparator接口则是一个类的扩展排序工具。</font></strong></p><h3><span id="建议74不推荐使用binarysearch对列表进行检索">建议74：不推荐使用binarySearch对列表进行检索</span></h3><pre><code> 　对一个列表进行检索时，我们使用最多的是indexOf方法，它简单、好用，而且也不会出错，虽然它只能检索到第一个符合条件的值，但是我们可以生成子列表后再检索，这样也即可以查找出所有符合条件的值了。</code></pre><p>　　Collections工具类也提供了一个检索方法，binarySearch，这个是干什么的？该方法也是对一个列表进行检索的，可查找出指定值的索引，但是在使用这个方法时就有一些注意事项，我们看如下代码：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client74</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> cities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"天津"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//indexOf取得索引值</span>        <span class="token keyword">int</span> index1<span class="token operator">=</span> cities<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//binarySearch找到索引值</span>        <span class="token keyword">int</span> index2<span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>cities<span class="token punctuation">,</span> <span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"索引值(indexOf)："</span><span class="token operator">+</span>index1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"索引值(binarySearch)："</span><span class="token operator">+</span>index2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　先不考虑运行结果，直接看JDK上对binarySearch的描述：使用二分搜索法搜索指定列表，以获得指定对象。其实现的功能与indexOf是相同的，只是使用的是二分法搜索列表，所以估计两种方法返回的结果是一样的，看结果：</p><p>　    <strong>索引值(indexOf)：1</strong><br>       <strong>索引值(binarySearch)：2</strong></p><p>　　结果不一样，虽然我们说有两个”广州” 这样的元素，但是返回的结果都应该是1才对呀，为何binarySearch返回的结果是2呢？问题就出在二分法搜索上，二分法搜索就是“折半折半再折半” 的搜索方法，简单，而且效率高。看看JDK是如何实现的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BINARYSEARCH_THRESHOLD   <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span>    <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">>></span> list<span class="token punctuation">,</span> T key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span> <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>BINARYSEARCH_THRESHOLD<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//随机存取列表或者元素数量少于5000的顺序存取列表</span>        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">indexedBinarySearch</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">//元素数量大于5000的顺序存取列表</span>        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">iteratorBinarySearch</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ArrayList实现了RandomAccess接口，是一个顺序存取列表，使用了indexedBinarySearch方法，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">int</span> <span class="token function">indexedBinarySearch</span><span class="token punctuation">(</span>    List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">>></span> list<span class="token punctuation">,</span> T key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 默认商界</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认下界</span>    <span class="token keyword">int</span> high <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//中间索引，无符号右移一位</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//中间值</span>        Comparable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> midVal <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//比较中间值</span>        <span class="token keyword">int</span> cmp <span class="token operator">=</span> midVal<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重置上界和下界</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token comment" spellcheck="true">//找到元素</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// key found</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//没有找到，返回负值</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// key not found</span><span class="token punctuation">}</span></code></pre><p>　    这也没啥说的，就是二分法搜索的Java版实现。注意看第10和14行代码，首先是获得中间的索引值，我们的例子中也就是2，那索引值是2的元素值是多少呢？正好是“广州” ，于是就返回索引值2，正确，没问题，我们再看看indexOf的实现，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//null元素查找</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//非null元素查找</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//两个元素是否相等，注意这里是equals方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        indexOf方法就是一个遍历，找到第一个元素值相等则返回，没什么玄机，回到我们的程序来看，for循环的第二遍即是我们要查找的 “ 广州 “ ，于是就返回索引值1了，也正确，没有任何问题。</p><p>　　两者的算法都没有问题，难道是我们用错了。这的确是我们使用的错误，**<font color="red">因为二分法查询的一个首要前提是：数据集以实现升序排列，否则二分法查找的值是不准确的。不排序怎么确定是在小区(比中间值小的区域) 中查找还是在大区(比中间值大的区域)中查找呢？二分法查找必须要先排序，这是二分法查找的首要条件。</font>**</p><p>​        使用binarySearch首先要考虑排序问题，这是我们经常忘记的，而且在测试期间还不好发现问题，等到投入生产环境后才发现查找到的数据不准确，又是一个bug产生了，从这点看，indexOf要比binarySearch简单的多.</p><p>　<strong><font color="red">使用binarySearch的二分法查找比indexOf的遍历算法性能上高很多，特别是在大数据集且目标值又接近尾部时，binarySearch方法与indexOf方法相比，性能上会提升几十倍，因此从性能的角度考虑时可以选择binarySearch。</font></strong></p><h3><span id="建议75集合中的元素必须做到compareto和equals同步">建议75：集合中的元素必须做到compareTo和equals同步</span></h3><p>​        实现了Comparable接口的元素就可以排序，compareTo方法是Comparable接口要求必须实现的，它与equals方法有关系吗?有关系，在compareTo的返回为0时，它表示的是 进行比较的两个元素时相等的。equals是不是也应该对此作出相应的动作呢？我们看如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">City</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>City<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">City</span><span class="token punctuation">(</span>String _code<span class="token punctuation">,</span> String _name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        code <span class="token operator">=</span> _code<span class="token punctuation">;</span>        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//code、name的setter和getter方法略</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>City o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//按照城市名称排序</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompareToBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toComparison</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        City city <span class="token operator">=</span> <span class="token punctuation">(</span>City<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据code判断是否相等</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EqualsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> city<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEquals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    　我们把多个城市对象放在一个list中，然后使用不同的方法查找同一个城市，看看返回值有神么异常？代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>City<span class="token operator">></span> cities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>City<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token string">"021"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token string">"021"</span><span class="token punctuation">,</span> <span class="token string">"沪"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 排序</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>cities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查找对象</span>        City city <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token string">"021"</span><span class="token punctuation">,</span> <span class="token string">"沪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// indexOf方法取得索引值</span>        <span class="token keyword">int</span> index1 <span class="token operator">=</span> cities<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// binarySearch查找索引值</span>        <span class="token keyword">int</span> index2 <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>cities<span class="token punctuation">,</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 索引值(indexOf) :"</span> <span class="token operator">+</span> index1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 索引值(binarySearch) :"</span> <span class="token operator">+</span> index2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>​        输出的index1和index2应该一致吧，都是从一个列表中查找相同的元素，只是使用的算法不同嘛。但是很遗憾，结果不一致：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160922095602387-1177688839.png" alt="img"></p><p>​        indexOf返回的是第一个元素，而binarySearch返回的是第二个元素(索引值为1)，这是怎么回事呢？</p><p>　　这是因为indexOf是通过equals方法判断的，equals方法等于true就认为找到符合条件的元素了，而binarySearch查找的依据是compareTo方法的返回值，返回0即认为找到符合条件的元素了。</p><p>　　仔细审查一下代码，我们覆写了compareTo和equals方法，但是两者并不一致。使用indexOf方法查找时 ，遍历每个元素，然后比较equals方法的返回值，因为equals方法是根据code判断的，因此当第一次循环时 ，equals就返回true，indexOf方法结束，查找到指定值。而使用binarySearch二分法查找时，依据的是每个元素的compareTo方法返回值，而compareTo方法又是依赖属性的，name相等就返回0，binarySearch就认为找到元素了。</p><p>　　问题明白了，修改很easy，将equals方法修改成判断name是否相等即可，虽然可以解决问题，但这是一个很无奈的办法，而且还要依赖我们的系统是否支持此类修改，因为逻辑已经发生了很大的变化，从这个例子，我们可以理解两点：</p><ul><li><p>indexOf依赖equals方法查找，binarySearch则依赖compareTo方法查找；</p></li><li><p>equals是判断元素是否相等，compareTo是判断元素在排序中的位置是否相同。</p><p>　既然一个决定排序位置，一个是决定相等，那我们就应该保证当排序相同时，其equals也相同，否则就会产生逻辑混乱。</p></li></ul><p><strong><font color="red">注意：实现了compareTo方法就应该覆写equals方法，确保两者同步。</font></strong></p><h3><span id="建议76集合运算时使用最优雅方式">建议76：集合运算时使用最优雅方式</span></h3><p>​        在初中代数中，我们经常会求两个集合的并集、交集、差集等，在Java中也存在着此类运算，那如何实现呢？一提到此类集合操作，大部分的实现者都会说：对两个集合进行遍历，即可求出结果。是的。遍历可以实现并集、交集、差集等运算，但这不是最优雅的处理方式，下面来看看如何进行更优雅、快速、方便的集合操作：</p><p>　　(1)、并集：也叫作合集，把两个集合加起来即可，这非常简单，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 并集</span>        list1<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>(2)、交集：计算两个集合的共有元素，也就是你有我也有的元素集合，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//交集</span>list1<span class="token punctuation">.</span><span class="token function">retainAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    　其中的变量list1和list2是两个列表，仅此一行，list1中就只包含了list1、list2中共有的元素了，注意retailAll方法会删除list1中没有出现在list2中的元素。</p><p>​        (3)、差集：由所有属于A但不属于B的元素组成的集合，叫做A与B的差集，也就是我有你没有的元素，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//差集</span>list1<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​        也很简单，从list1中删除出现在list2中的元素，即可得出list1和list2的差集部分。</p><p>　　(4)、无重复的并集：并集是集合A加集合B，那如果集合A和集合B有交集，就需要确保并集的结果中只有一份交集，此为无重复的并集，此操作也比较简单，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//删除在list1中出现的元素</span>list2<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把剩余的list2元素加到list1中</span>list1<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​        可能有人会说，求出两个集合的并集，然后转成hashSet剔除重复元素不就解决了吗？错了，这样解决是不行的，比如集合A有10个元素(其中有两个元素值是相同的)，集合B有8个元素，它们的交集有两个元素，我们可以计算出它们的并集是18个元素，而无重复的并集有16个元素，但是如果用hashSet算法，算出来则只有15个元素，因为你把集合A中原本就重复的元素也剔除了。</p><p>　　之所以介绍并集、交集、差集，那是因为在实际开发中，很少有使用JDK提供的方法实现集合这些操作，基本上都是采用了标准的嵌套for循环：要并集就是加法，要交集就是contains判断是否存在，要差集就使用了!contains（不包含），有时候还要为这类操作提供了一个单独的方法看似很规范，其实应经脱离了优雅的味道。</p><p>　　集合的这些操作在持久层中使用的非常频繁，从数据库中取出的就是多个数据集合，之后我们就可以使用集合的各种方法构建我们需要的数据，需要两个集合的and结果，那是交集，需要两个集合的or结果，那是并集，需要两个集合的not结果，那是差集。</p><h3><span id="建议77使用shuffle打乱列表">建议77：使用shuffle打乱列表</span></h3><p>​        在网站上，我们经常会看到关键字云(word cloud)和标签云(tag cloud)，用于表达这个关键字或标签是经常被查阅的，而且还可以看到这些标签的动态运动，每次刷新都会有不一样的关键字或标签，让浏览者觉得这个网站的访问量很大，短短的几分钟就有这么多的搜索量。不过，在Java中该如何实现呢？代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tagCloudNum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> tagClouds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>tagCloudNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化标签云，一般是从数据库读入，省略</span>    Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tagCloudNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取得随机位置</span>        <span class="token keyword">int</span> randomPosition <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>tagCloudNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前元素与随机元素交换</span>        String temp <span class="token operator">=</span> tagClouds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        tagClouds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> tagClouds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>randomPosition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tagClouds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>randomPosition<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　    现从数据库中读取标签，然后使用随机数打乱，每次产生不同的顺序，嗯，确实能让浏览者感觉到我们的标签云顺序在变化—浏览者多嘛！但是，对于乱序处理我们可以有更好的实现方式，先来修改第一版：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tagCloudNum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> tagClouds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>tagCloudNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化标签云，一般是从数据库读入，省略</span>    Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tagCloudNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取得随机位置</span>        <span class="token keyword">int</span> randomPosition <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>tagCloudNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前元素与随机元素交换</span>        Collections<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>tagClouds<span class="token punctuation">,</span> i<span class="token punctuation">,</span> randomPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　    上面使用了Collections的swap方法，该方法会交换两个位置的元素值，不用我们自己写交换代码了。难道乱序到此就优化完了吗？没有，我们可以继续重构，第二版如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tagCloudNum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> tagClouds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>tagCloudNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化标签云，一般是从数据库读入，省略</span>    <span class="token comment" spellcheck="true">//打乱顺序</span>    Collections<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>tagClouds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        这才是我们想要的结果，就这一行，即可打乱一个列表的顺序，我们不用费尽心思的遍历、替换元素了。我们一般很少用到shuffle这个方法，那它在什么地方用呢？</p><ul><li>可用在程序的 “伪装” 上：比如我们例子中的标签云，或者是游侠中的打怪、修行、群殴时宝物的分配策略。</li><li>可用在抽奖程序中：比如年会的抽奖程序，先使用shuffle把员工顺序打乱，每个员工的中奖几率相等，然后就可以抽出第一名、第二名。</li><li>可以用在安全传输方面：比如发送端发送一组数据，先随机打乱顺序，然后加密发送，接收端解密，然后进行排序，即可实现即使是相同的数据源，也会产生不同密文的效果，加强了数据的安全性。</li></ul><h3><span id="建议78减少hashmap中元素的数量">建议78：减少HashMap中元素的数量</span></h3><p>​    本建议是说HahMap中存放数据过多的话会出现内存溢出，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> Runtime rt <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// JVM中止前记录信息</span>    rt<span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> heapMaxSize <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">20</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" 最大可用内存："</span> <span class="token operator">+</span> heapMaxSize <span class="token operator">+</span> <span class="token string">" M\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> total <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">20</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" 堆内存大小："</span> <span class="token operator">+</span> total <span class="token operator">+</span> <span class="token string">"M\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> free <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">20</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" 空闲内存："</span> <span class="token operator">+</span> free <span class="token operator">+</span> <span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token operator">*</span><span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"value"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//            list.add("list"+i);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    　这个例子，我经过多次运算，发现在40万的数据并不会内存溢出，如果要复现此问题，需要修改Eclipse的内存配置，才会复现。但现在的机器的内存逐渐的增大，硬件配置的提高，应该可以容纳更多的数据。本人机器是windows64，内存8G配置，Eclipse的配置为  -Xms286M  -Xmx1024M，在单独运行此程序时，数据量加到千万级别才会复现出此问题。但在生产环境中，如果放的是复杂对象，可能同样配置的机器存放的数据量会小一些。</p><p>　　但如果换成list存放，则同样的配置存放的数据比HashMap要多一些，本人就针对此现象进行分析一下几点：</p><p>　　1.HashMap和ArrayList的长度都是动态增加的，不过两者的扩容机制不同，先说HashMap,它在底层是以数组的方式保存元素的，其中每一个键值对就是一个元素，也就是说HashMap把键值对封装成了一个Entry对象，然后再把Entry对象放到了数组中。也就是说HashMap比ArrayList多了一次封装，多出了一倍的对象。其中HashMap的扩容机制代码如下**(resize(2 *** **table.length)**这就是扩容核心代码)：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            hash <span class="token operator">=</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            bucketIndex <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">createEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> bucketIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>​     在插入键值对时会做长度校验，如果大于或者等于阈值，则数组长度会增大一倍。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> oldTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">==</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> oldAltHashing <span class="token operator">=</span> useAltHashing<span class="token punctuation">;</span>        useAltHashing <span class="token operator">|=</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>VM<span class="token punctuation">.</span><span class="token function">isBooted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span>newCapacity <span class="token operator">>=</span> Holder<span class="token punctuation">.</span>ALTERNATIVE_HASHING_THRESHOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> rehash <span class="token operator">=</span> oldAltHashing <span class="token operator">^</span> useAltHashing<span class="token punctuation">;</span>        <span class="token function">transfer</span><span class="token punctuation">(</span>newTable<span class="token punctuation">,</span> rehash<span class="token punctuation">)</span><span class="token punctuation">;</span>        table <span class="token operator">=</span> newTable<span class="token punctuation">;</span>        threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>而阈值就是代码中红色标注的部分，新容量*加权因子和MAXIMUM_CAPACITY + 1两个值的最小值。MAXIMUM_CAPACITY的值如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span></code></pre><p>而加权因子的值为0.75，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span></code></pre><p>　　所以hashMap的size大于数组的0.75倍时，就开始扩容，经过计算得知(怎么计算的，以文中例子来说，查找2的N次幂大于40万的最小值即为数组的最大长度，再乘以0.75，也就是最后一次扩容点，计算的结果是N=19)，在Map的size为393216时，符合了扩容条件，于是393216个元素开始搬家，要扩容则需要申请一个长度为1048576(当前长度的两倍，2的20次方)的数组，如果此时内存不足以支撑此运算，就会爆出内存溢出。这个就是这个问题的根本原因。</p><p>　2、我们思考一下ArrayList的扩容策略，它是在小于数组长度的时候才会扩容1.5倍，经过计算得知，ArrayLsit在超过80万后(一次加两个元素，40万的两倍)，最近的一次扩容是在size为1005305时同样的道理，如果此时内存不足以申请扩容1.5倍时的数组，也会出现内存溢出。</p><p>　综合来说，HashMap比ArrayList多了一层Entry的底层封装对象，多占用了内存，并且它的扩容策略是2倍长度的递增，同时还会根据阈值判断规则进行判断，因此相对于ArrayList来说，同样的数据，它就会优先内存溢出。</p><p>　也许大家会想到，可以在声明时指定HashMap的默认长度和加载因子来减少此问题的发生，可以缓解此问题，可以不再频繁的进行数组扩容，但仍避免不了内存溢出问题，因为键值对的封装对象Entry还是少不了的，内存依然增长比较快，所以尽量让HashMap中的元素少量并简单一点。也可以根据需求以及系统的配置来计算出，自己放入map中的数据会不会造成内存溢出呢？</p><h3><span id="建议79集合中的哈希码不要重复">建议79：集合中的哈希码不要重复</span></h3><p>​        在一个列表中查找某值是非常耗费资源的，随机存取的列表是遍历查找，顺序存储的列表是链表查找，或者是Collections的二分法查找，但这都不够快，毕竟都是遍历嘛，最快的还要数以Hash开头的集合(如HashMap、HashSet等类)查找，我们以HashMap为例，看看是如何查找key值的，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client79</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"value"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 记录开始时间，单位纳秒</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始查找</span>        list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"value"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 记录结束时间,单位纳秒</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"List的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ns"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Map的查找时间</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"value"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"key"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ns"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        两个不同的集合容器，一个是ArrayList，一个是HashMap，都是插入10000个元素，然后判断是否包含最后一个加入的元素。逻辑相同，但是执行时间差别却非常大，结果如下：</p><p>​    List的执行时间：478300ns<br>​    map的执行时间：14700ns</p><p>​        HahsMap比ArrayList快了两个数量级！两者的contains方法都是判断是否包含指定值，为何差距如此巨大呢？而且如果数据量增大，差距也会非线性增长。</p><p>　　我们先来看看ArrayList，它的contains方法是一个遍历对比，这很easy，不多说。我们看看HashMap的ContainsKey方法是如何实现的，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断getEntry是否为空</span>    <span class="token keyword">return</span> <span class="token function">getEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    getEntry方法会根据key值查找它的键值对（也就是Entry对象）,如果没有找到，则返回null。我们再看看该方法又是如何实现的，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">getEntry</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//计算key的哈希码</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定位Entry、indexOf方法是根据hash定位数组的位置的</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span><span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         e <span class="token operator">!=</span> null<span class="token punctuation">;</span>         e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//哈希码相同，并且键值也相等才符合条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        注意看上面代码中红色字体部分，通过indexFor方法定位Entry在数组table中的位置，这是HashMap实现的一个关键点，怎么能根据hashCode定位它在数组中的位置呢？</p><p>　　要解释此问题，还需要从HashMap的table数组是如何存储元素的说起，首先要说明三点：</p><ul><li>table数组的长度永远是2的N次幂。</li><li>table数组的元素是Entry类型</li><li>table数组中的元素位置是不连续的</li></ul><p>　　table数组为何如此设计呢？下面逐步来说明，先来看HashMap是如何插入元素的，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//null键处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">putForNullKey</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算hash码，并定位元素</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//哈希码相同，并且key相等，则覆盖</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">recordAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入新元素，或者替换哈希的旧元素并建立链表</span>    <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        注意看，HashMap每次增加元素时都会先计算其哈希码值，然后使用hash方法再次对hashCode进行抽取和统计，同时兼顾哈希码的高位和低位信息产生一个唯一值，也就是说hashCode不同，hash方法返回的值也不同，之后再通过indexFor方法与数组长度做一次与运算，即可计算出其在数组中的位置，简单的说，hash方法和indexFor方法就是把哈希码转变成数组的下标，源代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>useAltHashing<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Hashing<span class="token punctuation">.</span><span class="token function">stringHash32</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        h <span class="token operator">=</span> hashSeed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    h <span class="token operator">^=</span> k<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// This function ensures that hashCodes that differ only by</span>    <span class="token comment" spellcheck="true">// constant multiples at each bit position have a bounded</span>    <span class="token comment" spellcheck="true">// number of collisions (approximately 8 at default load factor).</span>    h <span class="token operator">^=</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> h <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Returns index for hash code h.     */</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> h <span class="token operator">&amp;</span> <span class="token punctuation">(</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        顺便说一下，null值也是可以作为key值的，它的位置永远是在Entry数组中的第一位。</p><p>　　现在有一个很重要的问题摆在前面了：哈希运算存在着哈希冲突问题，即对于一个固定的哈希算法f(k)，允许出现f(k1)=f(k2)，但k1≠k2的情况，也就是说两个不同的Entry，可能产生相同的哈希码，HashMap是如何处理这种冲突问题的呢？答案是通过链表，每个键值对都是一个Entry，其中每个Entry都有一个next变量，也就是说它会指向一个键值对—很明显，这应该是一个单向链表，该链表是由addEntity方法完成的，其代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        hash <span class="token operator">=</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        bucketIndex <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">createEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> bucketIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">createEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//取得当前位置元素</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//生成新的键值对，并进行替换，建立链表</span>    table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        这段程序涵盖了两个业务逻辑，如果新加入的元素的键值对的hashCode是唯一的，那直接插入到数组中，它Entry的next值则为null；如果新加入的键值对的hashCode与其它元素冲突，则替换掉数组中的当前值，并把新加入的Entry的next变量指向被替换的元素，于是一个链表就产生了，如下图所示：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160923150928231-1236782779.png" alt="img"></p><p>​        HashMap的存储主线还是数组，遇到哈希码冲突的时候则使用链表解决。了解了HashMap是如何存储的，查找也就一目了然了：使用hashCode定位元素，若有哈希冲突，则遍历对比，换句话说，如果没有哈希冲突的情况下，HashMap的查找则是依赖hashCode定位的，因为是直接定位，那效率当然就高了。</p><p>　　知道HashMap的查找原理，我们就应该很清楚：如果哈希码相同，它的查找效率就与ArrayList没什么两样了，遍历对比，性能会大打折扣。特别是哪些进度紧张的项目中，虽重写了hashCode方法但返回值却是固定的，此时如果把哪些对象插入到HashMap中，查找就相当耗时了。</p><p><strong><font color="red">注意：HashMap中的hashCode应避免冲突。</font></strong></p><h3><span id="建议80多线程使用vector或hashtable">建议80：多线程使用Vector或HashTable</span></h3><p>​        Vector是ArrayList的多线程版本，HashTable是HashMap的多线程版本，这些概念我们都很清楚，但我们经常会逃避使用Vector和HashTable,因为用的少，不熟嘛！只有在真正需要的时候才会想要使用它们，但问题是什么时候真正需要呢？我们来看一个例子，看看使用多线程安全的Vector是否可以解决问题，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client80</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 火车票列表</span>        <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> tickets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化票据池</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tickets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"火车票"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 退票</span>        Thread returnThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    tickets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"车票"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 售票</span>        Thread saleThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String ticket <span class="token operator">:</span> tickets<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    tickets<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动退票线程</span>        returnThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动售票线程</span>        saleThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        模拟火车站售票程序，先初始化一堆火车票，然后开始出售，同时也有退票产生，这段程序有木有问题呢？可能会有人看出了问题，ArrayList是线程不安全的，两个线程访问同一个ArrayList数组肯定会有问题。</p><p>　　没错，确定有问题，运行结果如下：</p><pre class=" language-java"><code class="language-java">Exception in thread <span class="token string">"Thread-1"</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ConcurrentModificationException    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList$Itr<span class="token punctuation">.</span><span class="token function">checkForComodification</span><span class="token punctuation">(</span>Unknown Source<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList$Itr<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>Unknown Source<span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>etol<span class="token punctuation">.</span>advice<span class="token punctuation">.</span>ad80<span class="token punctuation">.</span>Client80$<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Client80<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">)</span>Exception in thread <span class="token string">"Thread-0"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>OutOfMemoryError<span class="token operator">:</span> Java heap space    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>Unknown Source<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>Unknown Source<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span>Unknown Source<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">.</span><span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>Unknown Source<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">.</span><span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>Unknown Source<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Unknown Source<span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>etol<span class="token punctuation">.</span>advice<span class="token punctuation">.</span>ad80<span class="token punctuation">.</span>Client80$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Client80<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">)</span></code></pre><p>　    运气好的话，该异常马上就会抛出，也会会有人说这是一个典型错误，只须把ArrayList替换成Vector即可解决问题，真的是这样吗？我们把ArrayList替换成Vector后，结果依旧。仍然抛出相同的异常，Vector应经是线程安全的，为什么还会报这个错呢？</p><p>​    **<font color="red">这是因为它混淆了线程安全和同步修改异常，基本上所有的集合类都有一个快速失败(Fail-Fast)的校验机制，当一个集合在被多个线程修改并访问时，就可能出现ConcurrentModificationException异常，这是为了确保集合方法一致而设置的保护措施，它的实现原理就是我们经常提到的modCount修改计数器：如果在读列表时，modCount发生变化(也就是有其它线程修改)则会抛出ConcurrentModificationException异常，这与线程同步是两码事，线程同步是为了保护集合中的数据不被脏读、脏写而设置的</font>**，我们来看看线程安全到底用在什么地方，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 火车票列表</span>    <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> tickets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化票据池</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tickets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"火车票"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 10个窗口售票</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                       <span class="token operator">+</span> <span class="token string">"----"</span> <span class="token operator">+</span> tickets<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tickets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    还是火车站售票程序，有10个窗口在卖火车票，程序打印出窗口号(也就是线程号)和车票编号，我们很快就可以看到这样的输出：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160923155533871-512571463.png" alt="img"></p><p>​        注意看，上面有两个线程在卖同一张火车票，这才是线程不同步的问题，此时把ArrayList修改为Vector即可解决问题，因为Vector的每个方法前都加上了synchronized关键字，同时知会允许一个线程进入该方法，确保了程序的可靠性。</p><p>　　虽然在系统开发中我们一再说明，除非必要，否则不要使用synchronized，这是从性能的角度考虑的，但是一旦涉及到多线程(注意这里说的是真正的多线程，并不是并发修改的问题，比如一个线程增加，一个线程删除，这不属于多线程的范畴)，Vector会是最佳选择，当然自己在程序中加synchronized也是可行的方法。</p><p>　　HashMap的线程安全类HashTable与此相同，不再赘述。</p><h3><span id="建议81非稳定排序推荐使用list">建议81：非稳定排序推荐使用List</span></h3><p>​        我们知道Set和List的最大区别就是Set中的元素不可以重复(这个重复指的是equals方法的返回值相等)，其它方面则没有太大区别了，在Set的实现类中有一个比较常用的类需要了解一下：TreeSet，该类实现了默认排序为升序的Set集合，如果插入一个元素，默认会按照升序排列(当然是根据Comparable接口的compareTo的返回值确定排序位置了)，不过，这样的排序是不是在元素经常变化的场景中也适用呢?我们来看看例子：　　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client81</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SortedSet<span class="token operator">&lt;</span>Person<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 身高180CM</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 身高175CM</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Person p <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"身高："</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 身高</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> _height<span class="token punctuation">)</span> <span class="token punctuation">{</span>            height <span class="token operator">=</span> _height<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> height<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 按照身高排序</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Person o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> height <span class="token operator">-</span> o<span class="token punctuation">.</span>height<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　这是Set的简单用法，定义一个Set集合，之后放入两个元素，虽然175后放入，但是由于是按照升序排列的，所以输出结果应该是175在前，180在后。</p><p>　　这没有问题，随着时间的推移，身高175cm的人长高了10cm，而180cm却保持不变，那排序位置应该改变一下吧，代码如下：　</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SortedSet<span class="token operator">&lt;</span>Person<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 身高180CM</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 身高175CM</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Person p <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"身高："</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>找出身高最矮的人，也就是排在第一位的人，然后修改一下身高值，重新排序了？我们看下输出结果：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/712052-20160923171115496-1552785739.png" alt="img"></p><p>​        很可惜，竟然没有重现排序，偏离了我们的预期。这正是下面要说明的问题，SortedSet接口(TreeSet实现了此接口)只是定义了在给集合加入元素时将其进行排序，并不能保证元素修改后的排序结果，因此TreeSet适用于不变量的集合数据排序，比如String、Integer等类型，但不使用与可变量的排序，特别是不确定何时元素会发生变化的数据集合。</p><p>　　原因知道了，那如何解决此类重排序问题呢？有两种方式：</p><p>　　(1)、Set集合重排序：重新生成一个Set对象，也就是对原有的Set对象重新排序，代码如下：</p><pre class=" language-java"><code class="language-java">set<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set重排序</span>set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>就这一行红色代码即可重新排序，可能有人会问，使用TreeSet&lt;SortedSet<e> s&gt; 这个构造函数不是可以更好的解决问题吗？不行，该构造函数只是原Set的浅拷贝，如果里面有相同的元素，是不会重新排序的。</e></p><p>　　(2)、彻底重构掉TreeSet，使用List解决问题</p><p>　    我们之所以使用TreeSet是希望实现自动排序，即使修改也能自动排序，既然它无法实现，那就用List来代替，然后使用Collections.sort()方法对List排序，代码比较简单，不再赘述。</p><p>　　两种方式都可以解决我们的问题，如果需要保证集合中元素的唯一性，又要保证元素值修改后排序正确，那该如何处理呢？List不能保证集合中的元素唯一，它是可以重复的，而Set能保证元素唯一，不重复。如果采用List解决排序问题，就需要自行解决元素重复问题(若要剔除也很简单，转变为HashSet，剔除后再转回来)。若采用TreeSet，则需要解决元素修改后的排序问题，孰是孰非，就需要根据具体的开发场景来决定了。</p><p><strong><font color="red">注意：SortedSet中的元素被修改后可能会影响到其排序位置。</font></strong></p><h3><span id="建议82由点及面集合大家族总结">建议82：由点及面，集合大家族总结</span></h3><p>​        Java中的集合类实在是太丰富了，有常用的ArrayList、HashMap,也有不常用的Stack、Queue，有线程安全的Vector、HashTable，也有线程不安全的LinkedList、TreeMap，有阻塞式的ArrayBlockingQueue，也有非阻塞式的PriorityQueue等，整个集合大家族非常庞大，可以划分以下几类：</p><p>　　(1)、List：实现List接口的集合主要有：ArrayList、LinkedList、Vector、Stack，其中ArrayList是一个动态数组，LinkedList是一个双向链表，Vector是一个线程安全的动态数组，Stack是一个对象栈，遵循先进后出的原则。　　</p><p>　　(2)、Set：Set是不包含重复元素的集合，其主要实现类有：EnumSet、HashSet、TreeSet，其中EnumSet是枚举类型专用Set，所有元素都是枚举类型；HashSet是以哈希码决定其元素位置的Set，其原理与HashMap相似，它提供快速的插入和查找方法；TreeSet是一个自动排序的Set，它实现了SortedSet接口。</p><p>　　(3)、Map：Map是一个大家族，他可以分为排序Map和非排序Map，排序Map主要是TreeMap类，他根据key值进行自动排序；非排序Map主要包括：HashMap、HashTable、Properties、EnumMap等，其中Properties是HashTable的子类，它的主要用途是从Property文件中加载数据，并提供方便的操作，EnumMap则是要求其Key必须是某一个枚举类型。</p><p>　　　Map中还有一个WeakHashMap类需要说明，　　它是一个采用弱键方式实现的Map类，它的特点是：WeakHashMap对象的存在并不会阻止垃圾回收器对键值对的回收，也就是说使用WeakHashMap装载数据不用担心内存溢出的问题，GC会自动删除不用的键值对，这是好事。但也存在一个严重的问题：GC是静悄悄的回收的(何时回收，God，Knows！)我们的程序无法知晓该动作，存在着重大的隐患。</p><p>　　(4)、Queue：对列，它分为两类，一类是阻塞式队列，队列满了以后再插入元素会抛出异常，主要包括：ArrayBlockingQueue、PriorityQueue、LinkedBlockingQueue，其中ArrayBlockingQueue是一个以数组方式实现的有界阻塞队列；另一类是非阻塞队列，无边界的，只要内存允许，都可以持续追加元素，我们经常使用的是PriorityQuene类。</p><p>　　还有一种队列，是双端队列，支持在头、尾两端插入和移除元素，它的主要实现类是：ArrayDeque、LinkedBlockingDeque、LinkedList。</p><p>　　(5)、数组：数组与集合的最大区别就是数组能够容纳基本类型，而集合就不行，更重要的一点就是所有的集合底层存储的都是数组。</p><p>　　(6)、工具类：数组的工具类是java.util.Arrays和java.lang.reflect.Array，集合的工具类是java.util.Collections，有了这两个工具类，操作数组和集合就会易如反掌，得心应手。</p><p>　　(7)、扩展类：集合类当然可以自行扩展了，想写一个自己的List？没问题，但最好的办法还是”拿来主义”，可以使用Apache的common-collections扩展包，也可以使用Google的google-collections扩展包，这些足以应对我们的开发需要。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> java </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学学习笔记</title>
      <link href="/2021/12/12/mi-ma-xue-xue-xi-bi-ji/"/>
      <url>/2021/12/12/mi-ma-xue-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2><span id="01-密码学基本概念">01-密码学基本概念</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/clipboard.png" alt="img"></p><p>密码在我们的生活中有着重要的作用，那么密码究竟来自何方，为何会产生呢？</p><p>密码学是网络安全、信息安全、区块链等产品的基础，常见的非对称加密、对称加密、散列函数等，都属于密码学范畴。</p><p>密码学有数千年的历史，从最开始的替换法到如今的非对称加密算法，经历了古典密码学，近代密码学和现代密码学三个阶段。</p><p>密码学不仅仅是数学家们的智慧，更是如今网络空间安全的重要基础。</p><h2><span id="02-古代密码学-替换法">02-古代密码学-替换法</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/clipboard-16393023232071.png" alt="img"></p><p>在古代的战争中，多见使用隐藏信息的方式保护重要的通信资料。比如先把需要保护的信息用化学药水写到纸上，药水干后，纸上看不出任何的信息，需要使用另外的化学药水涂抹后才可以阅读纸上的信息。</p><p><a href="https://www.iqiyi.com/v_19rt6ab1hg.html">https://www.iqiyi.com/v_19rt6ab1hg.html</a> 1分05秒</p><p>这些方法都是在保护重要的信息不被他人获取，但藏信息的方式比较容易被他人识破，例如增加哨兵的排查力度，就会发现其中的猫腻，因而随后发展出了较难破解的古典密码学。</p><p>① 替换法</p><p>替换法很好理解，就是用固定的信息将原文替换成无法直接阅读的密文信息。例如将 b 替换成 w ，e 替换成p ，这样bee 单词就变换成了wpp，不知道替换规则的人就无法阅读出原文的含义。</p><p>替换法有单表替换和多表替换两种形式。单表替换即只有一张原文密文对照表单，发送者和接收者用这张表单来加密解密。在上述例子中，表单即为：a b c d e - s w t r p 。</p><p>多表替换即有多张原文密文对照表单，不同字母可以用不同表单的内容替换。</p><p>例如约定好表单为：表单 1：abcde-swtrp 、表单2：abcde-chfhk 、表单 3：abcde-jftou。</p><p>规定第一个字母用第三张表单，第二个字母用第一张表单，第三个字母用第二张表单，这时 bee单词就变成了</p><p>(312)fpk ，破解难度更高，其中 312 又叫做密钥，密钥可以事先约定好，也可以在传输过程中标记出来。</p><h2><span id="03-古代密码学-移位法">03-古代密码学-移位法</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/clipboard-16393023315222.png" alt="img"></p><p>移位法</p><p>移位法就是将原文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后得出密文，典型的移位法应用有 “ 恺撒密码 ”。</p><p>例如约定好向后移动2位（abcde - cdefg），这样 bee 单词就变换成了dgg 。</p><p>同理替换法，移位法也可以采用多表移位的方式，典型的多表案例是“维尼吉亚密码”（又译维热纳尔密码），属于多表密码的一种形式。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc.jpg" alt="img"></p><h2><span id="04-古代密码学-频率分析法破解">04-古代密码学-频率分析法破解</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/clipboard-16393023974153.png" alt="img"></p><p>古典密码破解方式</p><p>古典密码虽然很简单，但是在密码史上是使用的最久的加密方式，直到“概率论”的数学方法被发现，古典密码就被破解了。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=.jpg" alt="img"></p><p>英文单词中字母出现的频率是不同的，e以12.702%的百分比占比最高，z 只占到0.074%，感兴趣的可以去百科查字母频率详细统计数据。如果密文数量足够大，仅仅采用频度分析法就可以破解单表的替换法或移位法。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==.jpg" alt="img"></p><p>多表的替换法或移位法虽然难度高一些，但如果数据量足够大的话，也是可以破解的。以维尼吉亚密码算法为例，破解方法就是先找出密文中完全相同的字母串，猜测密钥长度，得到密钥长度后再把同组的密文放在一起，使用频率分析法破解。</p><h2><span id="05-现代加密方式">05-现代加密方式</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/clipboard-16393024809814.png" alt="img"></p><p>古典密码的安全性受到了威胁，外加使用便利性较低，到了工业化时代，近现代密码被广泛应用。</p><p><strong>恩尼格玛机</strong></p><p>恩尼格玛机是二战时期纳粹德国使用的加密机器，后被英国破译，参与破译的人员有被称为计算机科学之父、人工智能之父的图灵。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-16393024999605.jpg" alt="img"></p><p>恩尼格玛机</p><p>恩尼格玛机使用的加密方式本质上还是移位和替代，只不过因为密码表种类极多，破解难度高，同时加密解密机器化，使用便捷，因而在二战时期得以使用。</p><h2><span id="06-现代密码学的核心">06-现代密码学的核心</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/clipboard-16393025320936.png" alt="img"></p><p>现代密码学</p><p>① 散列函数</p><p>散列函数，也见杂凑函数、摘要函数或哈希函数，可将任意长度的消息经过运算，变成固定长度数值，常见的有MD5、SHA-1、SHA256，多应用在文件校验，数字签名中。</p><p>MD5 可以将任意长度的原文生成一个128位（16字节）的哈希值</p><p>SHA-1可以将任意长度的原文生成一个160位（20字节）的哈希值</p><p>② 对称密码</p><p>对称密码应用了相同的加密密钥和解密密钥。对称密码分为：序列密码(流密码)，分组密码(块密码)两种。流密码是对信息流中的每一个元素（一个字母或一个比特）作为基本的处理单元进行加密，块密码是先对信息流分块，再对每一块分别加密。</p><p>例如原文为1234567890，流加密即先对1进行加密，再对2进行加密，再对3进行加密……最后拼接成密文；块加密先分成不同的块，如1234成块，5678成块，90XX(XX为补位数字)成块，再分别对不同块进行加密，最后拼接成密文。前文提到的古典密码学加密方法，都属于流加密。</p><p>③ 非对称密码</p><p>对称密码的密钥安全极其重要，加密者和解密者需要提前协商密钥，并各自确保密钥的安全性，一但密钥泄露，即使算法是安全的也无法保障原文信息的私密性。</p><p>在实际的使用中，远程的提前协商密钥不容易实现，即使协商好，在远程传输过程中也容易被他人获取，因此非对称密钥此时就凸显出了优势。</p><p>非对称密码有两支密钥，公钥（publickey）和私钥（privatekey），加密和解密运算使用的密钥不同。用公钥对原文进行加密后，需要由私钥进行解密；用私钥对原文进行加密后（此时一般称为签名），需要由公钥进行解密（此时一般称为验签）。公钥可以公开的，大家使用公钥对信息进行加密，再发送给私钥的持有者，私钥持有者使用私钥对信息进行解密，获得信息原文。因为私钥只有单一人持有，因此不用担心被他人解密获取信息原文。</p><h2><span id="07-如何设置密码保证安全">07-如何设置密码保证安全</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/clipboard-16393025749027.png" alt="img"></p><p>如何设置密码才安全</p><ul><li>密码不要太常见，不要使用类似于123456式的常用密码。</li><li>各应用软件密码建议不同，避免出现一个应用数据库被脱库，全部应用密码崩塌，</li><li>可在设置密码时增加注册时间、注册地点、应用特性等方法。例如tianjin123456，表示在天津注册的该应用。</li></ul><h2><span id="08~09-ascii编码-字符串对应ascii编码">08~09-ascii编码、字符串对应ascii编码</span></h2><p>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。它是现今最通用的单字节编码系统，并等同于国际标准ISO/IEC 646。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/z.jpg" alt="img"></p><p>示例代码</p><p>创建maven项目 encrypt-decrypt</p><p>添加pom文件 </p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>创建类 com.atguigu.ascii.AsciiDemo</p><p>字符转换成ascii码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>ascii<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * AsciiDemo * * @Author: 尚硅谷 * @CreateTime: 2020-03-17 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsciiDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印ascii码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行程序</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-16393027668198.jpg" alt="img"></p><p>字符串转换成ascii码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>ascii<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * AsciiDemo * * @Author: 尚硅谷 * @CreateTime: 2020-03-17 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsciiDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        char a = 'A';</span><span class="token comment" spellcheck="true">//        int b = a;</span><span class="token comment" spellcheck="true">//        System.out.println(b);</span>        String a <span class="token operator">=</span> <span class="token string">"AaZ"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取ascii码，需要把字符串转成字符</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> asciiCode <span class="token operator">=</span> c<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>asciiCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行程序</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-16393027781169.jpg" alt="img"></p><h2><span id="10~12-凯撒加密-凯撒加密原理-凯撒解密">10~12-凯撒加密、凯撒加密原理、凯撒解密</span></h2><p>1.3.1 中国古代加密【拆字法】</p><p>看一个小故事 ， 看看古人如何加密和解密：</p><p>公元683年，唐中宗即位。随后，武则天废唐中宗，立第四子李旦为皇帝，但朝政大事均由她自己专断。　　</p><p>　　裴炎、徐敬业和骆宾王等人对此非常不满。徐敬业聚兵十万，在江苏扬州起兵。裴炎做内应，欲以拆字手段为其传递秘密信息。后因有人告密，裴炎被捕，未发出的密信落到武则天手中。这封密信上只有“青鹅”二字，群臣对此大惑不解。　　</p><p>　　武则天破解了“青鹅”的秘密：“青”字拆开来就是“十二月”，而“鹅”字拆开来就是“我自与”。密信的意思是让徐敬业、骆宾王等率兵于十二月进发，裴炎在内部接应。“青鹅”破译后，裴炎被杀。接着，武则天派兵击败了徐敬业和骆宾王。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163930286567110.jpg" alt="img"></p><p>1.3.2 外国加密</p><p>在密码学中，恺撒密码是一种最简单且最广为人知的加密技术。</p><p>凯撒密码最早由古罗马军事统帅盖乌斯·尤利乌斯·凯撒在军队中用来传递加密信息，故称凯撒密码。这是一种位移加密方式，只对26个字母进行位移替换加密，规则简单，容易破解。下面是位移1次的对比：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930287218711.jpg" alt="img"></p><p>将明文字母表向后移动1位，A变成了B，B变成了C……，Z变成了A。同理，若将明文字母表向后移动3位：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163930287822912.jpg" alt="img"></p><p>则A变成了D，B变成了E……，Z变成了C。</p><p>字母表最多可以移动25位。凯撒密码的明文字母表向后或向前移动都是可以的，通常表述为向后移动，如果要向前移动1位，则等同于向后移动25位，位移选择为25即可。</p><p>它是一种替换加密的技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。</p><p>例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。</p><p>这个加密方法是以恺撒的名字命名的，当年恺撒曾用此方法与其将军们进行联系。</p><p>恺撒密码通常被作为其他更复杂的加密方法中的一个步骤。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/z-163930288732813.jpg" alt="img"></p><p>简单来说就是当秘钥为n，其中一个待加密字符ch，加密之后的字符为ch+n，当ch+n超过’z’时，回到’a’计数。</p><p>1.3.3 凯撒位移加密</p><p>创建类 KaiserDemo，把 hello world 往右边移动3位</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kaiser<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * KaiserDemo * * @Author: 尚硅谷 * @CreateTime: 2020-03-17 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KaiserDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String input <span class="token operator">=</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 往右边移动3位</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用来拼接</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字符串转换成字节数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> asciiCode <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 移动3位</span>            asciiCode <span class="token operator">=</span> asciiCode <span class="token operator">+</span> key<span class="token punctuation">;</span>            <span class="token keyword">char</span> newChar <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> asciiCode<span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newChar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930453486614.jpg" alt="img"></p><p>1.3.4 凯撒加密和解密</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kaiser<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * KaiserDemo * * @Author: 尚硅谷 * @CreateTime: 2020-03-16 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KaiserDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String orignal <span class="token operator">=</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 往右边偏移三位</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 选中我即将抽取的代码，按快捷键Ctrl + Alt + M </span>        String encryptKaiser <span class="token operator">=</span>  <span class="token function">encryptKaiser</span><span class="token punctuation">(</span>orignal<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密："</span> <span class="token operator">+</span> encryptKaiser<span class="token punctuation">)</span><span class="token punctuation">;</span>        String decryptKaiser <span class="token operator">=</span>  <span class="token function">decryptKaiser</span><span class="token punctuation">(</span>encryptKaiser<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密："</span> <span class="token operator">+</span> decryptKaiser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用凯撒加密方式解密数据     *     * @param encryptedData :密文     * @param key           :密钥     * @return : 源数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">decryptKaiser</span><span class="token punctuation">(</span>String encryptedData<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将字符串转为字符数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> encryptedData<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> aChar <span class="token operator">:</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取字符的ASCII编码</span>            <span class="token keyword">int</span> asciiCode <span class="token operator">=</span> aChar<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 偏移数据</span>            asciiCode <span class="token operator">-=</span> key<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将偏移后的数据转为字符</span>            <span class="token keyword">char</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> asciiCode<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 拼接数据</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用凯撒加密方式加密数据     *     * @param orignal :原文     * @param key     :密钥     * @return :加密后的数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">encryptKaiser</span><span class="token punctuation">(</span>String orignal<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将字符串转为字符数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> orignal<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> aChar <span class="token operator">:</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取字符的ascii编码</span>            <span class="token keyword">int</span> asciiCode <span class="token operator">=</span> aChar<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 偏移数据</span>            asciiCode <span class="token operator">+=</span> key<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将偏移后的数据转为字符</span>            <span class="token keyword">char</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> asciiCode<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 拼接数据</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="13-频度分析法破解恺撒加密">13-频度分析法破解恺撒加密</span></h2><p>密码棒</p><p>公元前5世纪的时候，斯巴达人利用一根木棒，缠绕上皮革或者羊皮纸，在上面横向写下信息，解下这条皮带。展开来看，这长串字母没有任何意义。</p><p>比如这样：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930463346215.jpg" alt="img"></p><p>信差可以将这条皮带当成腰带，系在腰上。</p><p>比如这样：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163930463919516.jpg" alt="img"></p><p>然后收件人将这条皮带缠绕在相同的木棒上，就能恢复信息了。</p><p>前404年，一位遍体鳞伤的信差来到斯巴达将领利桑德面前，这趟波斯之旅只有他和四位同伴幸存，利桑德接下腰带，缠绕到他的密码棒上，得知波斯的发那巴祖斯准备侵袭他，多亏密码棒利桑德才能够预先防范，击退敌军。</p><p>频率分析解密法</p><p>密码棒是不是太简单了些？</p><p>加密者选择将组成信息的字母替代成别的字母，比如说将a写成1，这样就不能被解密者直接拿到信息了。</p><p>这难不倒解密者，以英文字母为例，为了确定每个英文字母的出现频率，分析一篇或者数篇普通的英文文章，英文字母出现频率最高的是e，接下来是t，然后是a……，然后检查要破解的密文，也将每个字母出现的频率整理出来，假设密文中出现频率最高的字母是j，那么就可能是e的替身，如果密码文中出现频率次高的但是P，那么可能是t的替身，以此类推便就能解开加密信息的内容。这就是频率分析法。</p><ul><li>将明文字母的出现频率与密文字母的频率相比较的过程</li><li>通过分析每个符号出现的频率而轻易地破译代换式密码</li><li>在每种语言中，冗长的文章中的字母表现出一种可对之进行分辨的频率。</li><li>e是英语中最常用的字母，其出现频率为八分之一</li></ul><p>拷贝资料里面的 Util.java 和 FrequencyAnalysis.java 到项目的 com.atguigu.kaiser包下面 , article.txt 拷贝到项目文件夹的根目录</p><p>运行 FrequencyAnalysis.java 用来统计每个字符出现的次数</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930464522017.jpg" alt="img"></p><p>运行 FrequencyAnalysis.java 里面 main 函数里面的 encryptFile 方法 对程序进行加密</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//测试1，统计字符个数</span>        <span class="token comment" spellcheck="true">//printCharCount("article.txt");</span>                <span class="token comment" spellcheck="true">//加密文件</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token function">encryptFile</span><span class="token punctuation">(</span><span class="token string">"article.txt"</span><span class="token punctuation">,</span> <span class="token string">"article_en.txt"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//读取加密后的文件</span>       <span class="token comment" spellcheck="true">// String artile = Util.file2String("article_en.txt");</span>        <span class="token comment" spellcheck="true">//解密（会生成多个备选文件）</span>       <span class="token comment" spellcheck="true">// decryptCaesarCode(artile, "article_de.txt");</span>    <span class="token punctuation">}</span></code></pre><p>在根目录会生成一个 article_en.txt 文件，然后我们统计这个文件当中每个字符出现的次数 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//测试1，统计字符个数</span>        <span class="token function">printCharCount</span><span class="token punctuation">(</span><span class="token string">"article_en.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//加密文件</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//encryptFile("article.txt", "article_en.txt", key);</span>                <span class="token comment" spellcheck="true">//读取加密后的文件</span>       <span class="token comment" spellcheck="true">// String artile = Util.file2String("article_en.txt");</span>        <span class="token comment" spellcheck="true">//解密（会生成多个备选文件）</span>       <span class="token comment" spellcheck="true">// decryptCaesarCode(artile, "article_de.txt");</span>    <span class="token punctuation">}</span></code></pre><p>运行程序</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930465469618.jpg" alt="img"></p><p>我们来看看 频度分析法如何工作的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//测试1，统计字符个数</span>        <span class="token comment" spellcheck="true">//printCharCount("article_en.txt");</span>                <span class="token comment" spellcheck="true">//加密文件</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//encryptFile("article.txt", "article_en.txt", key);</span>                <span class="token comment" spellcheck="true">//读取加密后的文件</span>       String artile <span class="token operator">=</span> Util<span class="token punctuation">.</span><span class="token function">file2String</span><span class="token punctuation">(</span><span class="token string">"article_en.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解密（会生成多个备选文件）</span>       <span class="token function">decryptCaesarCode</span><span class="token punctuation">(</span>artile<span class="token punctuation">,</span> <span class="token string">"article_de.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>运行程序</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163930477274919.jpg" alt="img"></p><p>运行结果 # 出现次数最多， 我们知道在英文当中 e 出现的频率是最高的，我们假设现在 # 号，就是 e ，变形而来的 ，我们可以对照 ascii 编码表 ，我们的凯撒加密当中位移是加了一个 key ，所以我们 猜测 两个值直接相差 -66 ，我们现在就以 -66 进行解密 生成一个文件，我们查看第一个文件发现，根本读不懂，所以解密失败，我们在猜测 h 是 e ，h 和 e 之间相差3 ，所以我们在去看第二个解密文件，发现我们可以读懂，解密成功</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930477965020.jpg" alt="img"></p><h2><span id="14-byte和bit的关系">14-byte和bit的关系</span></h2><p>Byte : 字节. 数据存储的基本单位，比如移动硬盘1T ， 单位是byte</p><p>bit : 比特, 又叫位. 一个位要么是0要么是1. 数据传输的单位 , 比如家里的宽带100MB，下载速度并没有达到100MB，一般都是12-13MB，那么是因为需要使用 100 / 8</p><p>关系: 1Byte = 8bit</p><p>1.5.1 获取字符串byte</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bytebit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * ByteBit * * @Author: 尚硅谷 * @CreateTime: 2020-03-17 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteBit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c<span class="token operator">=</span>b<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 打印发现byte实际上就是ascii码</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行程序</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930502545521.jpg" alt="img"></p><p>1.5.2 byte对应bit</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bytebit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * ByteBit * * @Author: 尚硅谷 * @CreateTime: 2020-03-17 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteBit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c<span class="token operator">=</span>b<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 打印发现byte实际上就是ascii码</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 我们在来看看每个byte对应的bit，byte获取对应的bit</span>            String s <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行程序</p><p>打印出来应该是8个bit，但前面是0，没有打印 ，从打印结果可以看出来，一个英文字符 ，占一个字节</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930503227222.jpg" alt="img"></p><h2><span id="15-中文和英文对应的字节">15-中文和英文对应的字节</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/clipboard-163930519623223.png" alt="img"></p><p>中文对应的字节</p><p>运行程序：我们发现一个中文是有 3 个字节组成</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930519912224.jpg" alt="img"></p><p>我们修改 编码格式 , 编码格式改成 GBK ，我们在运行发现变成了 2 个字节</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token string">"尚"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在中文情况下，不同的编码格式，对应不同的字节</span>       <span class="token comment" spellcheck="true">//GBK :编码格式占2个字节</span>       <span class="token comment" spellcheck="true">// UTF-8：编码格式占3个字节</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// byte[] bytes = a.getBytes("UTF-8");</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String s <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>运行程序</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930520281025.jpg" alt="img"></p><p>1.5.4 英文对应的字节</p><p>我们在看看英文，在不同的编码格式占用多少字节</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bytebit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * ByteBit * * @Author: 尚硅谷 * @CreateTime: 2020-04-12 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteBit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在中文情况下，不同的编码格式，对应不同的字节</span><span class="token comment" spellcheck="true">//        byte[] bytes = a.getBytes("GBK");</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String s <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行程序</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163930520536926.jpg" alt="img"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 中文在GBK编码下, 占据2个字节</span><span class="token comment" spellcheck="true">// 中文在UTF-8编码下, 占据3个字节</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * ByteBitDemo * * @Author: 尚硅谷 * @CreateTime: 2020-03-16 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteBitDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token string">"尚"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String s <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2><span id="16-对称加密的原理">16-对称加密的原理</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/clipboard-163930539896127-163930600920328.png" alt="img"></p><p>常见加密方式</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930601577529.jpg" alt="img"></p><p>1.6.1 对称加密</p><ul><li><p>采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单密钥加密。</p></li><li><p>示例</p></li><li><ul><li>我们现在有一个原文3要发送给B</li><li>设置密钥为108, 3 * 108 = 324, 将324作为密文发送给B</li><li>B拿到密文324后, 使用324/108 = 3 得到原文</li></ul></li><li><p>常见加密算法</p></li><li><ul><li>DES : Data Encryption Standard，即数据加密标准，是一种使用密钥加密的块算法，1977年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），并授权在非密级政府通信中使用，随后该算法在国际上广泛流传开来。</li><li>AES : Advanced Encryption Standard, 高级加密标准 .在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。</li></ul></li><li><p>特点</p></li><li><ul><li>加密速度快, 可以加密大文件</li><li>密文可逆, 一旦密钥文件泄漏, 就会导致数据暴露</li><li>加密后编码表找不到对应字符, 出现乱码</li><li>一般结合Base64使用</li></ul></li></ul><h2><span id="17~18-des加密-des解密">17~18-des加密、des解密</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/clipboard-163930626612030.png" alt="img"></p><p>示例代码 des加密算法</p><p>Cipher ：文档 <a href="https://docs.oracle.com/javase/8/docs/api/javax/crypto/Cipher.html#getInstance-java.lang.String-">https://docs.oracle.com/javase/8/docs/api/javax/crypto/Cipher.html#getInstance-java.lang.String-</a></p><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token operator">-</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>desaes<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>SecretKeySpec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * DesAesDemo * * @Author: 尚硅谷 * @CreateTime: 2020-03-17 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DesAesDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 原文</span>        String input <span class="token operator">=</span> <span class="token string">"硅谷"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// des加密必须是8位</span>        String key <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"DES"</span><span class="token punctuation">;</span>        String transformation <span class="token operator">=</span> <span class="token string">"DES"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Cipher：密码，获取加密对象</span>        <span class="token comment" spellcheck="true">// transformation:参数表示使用什么类型加密</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>transformation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指定秘钥规则</span>        <span class="token comment" spellcheck="true">// 第一个参数表示：密钥，key的字节数组</span>        <span class="token comment" spellcheck="true">// 第二个参数表示：算法</span>        SecretKeySpec sks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对加密进行初始化</span>        <span class="token comment" spellcheck="true">// 第一个参数：表示模式，有加密模式和解密模式</span>        <span class="token comment" spellcheck="true">// 第二个参数：表示秘钥规则</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>sks<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 进行加密</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印字节，因为ascii码有负数，解析不出来，所以乱码</span><span class="token comment" spellcheck="true">//        for (byte b : bytes) {</span><span class="token comment" spellcheck="true">//            System.out.println(b);</span><span class="token comment" spellcheck="true">//        }</span>        <span class="token comment" spellcheck="true">// 打印密文</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930627968431.jpg" alt="img"></p><p>修改 密钥 key = “12345678” ，再次运行 ，出现乱码是因为对应的字节出现负数，但负数，没有出现在 ascii 码表里面，所以出现乱码，需要配合base64进行转码</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930628685832.jpg" alt="img"></p><p>使用 base64 进行编码</p><p>base64 导包的时候，需要注意 ，别导错了，需要导入 apache 包</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163930629792733.jpg" alt="img"></p><p>运行程序</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930630435634.jpg" alt="img"></p><p>1.6.4 DES解密</p><p>使用 ctrl + alt + m 快捷键抽取代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>desaes<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>IvParameterSpec<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>SecretKeySpec<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DesDemo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// DES加密算法,key的大小必须是8个字节</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String input <span class="token operator">=</span><span class="token string">"硅谷"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// DES加密算法，key的大小必须是8个字节</span>        String key <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">;</span>        String transformation <span class="token operator">=</span> <span class="token string">"DES"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9PQXVUIhaaQ=</span>        <span class="token comment" spellcheck="true">// 指定获取密钥的算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"DES"</span><span class="token punctuation">;</span>        String encryptDES <span class="token operator">=</span> <span class="token function">encryptDES</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> key<span class="token punctuation">,</span> transformation<span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密:"</span> <span class="token operator">+</span> encryptDES<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token function">decryptDES</span><span class="token punctuation">(</span>encryptDES<span class="token punctuation">,</span> key<span class="token punctuation">,</span> transformation<span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用DES加密数据     *     * @param input          : 原文     * @param key            : 密钥(DES,密钥的长度必须是8个字节)     * @param transformation : 获取Cipher对象的算法     * @param algorithm      : 获取密钥的算法     * @return : 密文      * @throws Exception      */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">encryptDES</span><span class="token punctuation">(</span>String input<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> String transformation<span class="token punctuation">,</span> String algorithm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取加密对象</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>transformation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建加密规则</span>        <span class="token comment" spellcheck="true">// 第一个参数key的字节</span>        <span class="token comment" spellcheck="true">// 第二个参数表示加密算法</span>        SecretKeySpec sks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ENCRYPT_MODE：加密模式</span>        <span class="token comment" spellcheck="true">// DECRYPT_MODE: 解密模式</span>        <span class="token comment" spellcheck="true">// 初始化加密模式和算法</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>sks<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加密</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出加密后的数据</span>        String encode <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> encode<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用DES解密     *     * @param input          : 密文     * @param key            : 密钥     * @param transformation : 获取Cipher对象的算法     * @param algorithm      : 获取密钥的算法     * @throws Exception     * @return: 原文     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">decryptDES</span><span class="token punctuation">(</span>String input<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> String transformation<span class="token punctuation">,</span> String algorithm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1,获取Cipher对象</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>transformation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指定密钥规则</span>        SecretKeySpec sks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span> sks<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 解密，上面使用的base64编码，下面直接用密文</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  因为是明文，所以直接返回</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行程序：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930631069935.jpg" alt="img"></p><h2><span id="19~20-base64核心原理-核心规则">19~20-base64核心原理、核心规则</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/clipboard-163930638487236.png" alt="img"></p><p>Base64 算法简介 Base64是网络上最常见的用于传输8Bit字节码的可读性编码算法之一 可读性编码算法不是为了保护数据的安全性，而是为了可读性 可读性编码不改变信息内容，只改变信息内容的表现形式 所谓Base64，即是说在编码过程中使用了64种字符：<strong>大写<strong><strong>A</strong></strong>到Z、小写<strong><strong>a</strong></strong>到z、数字<strong><strong>0</strong></strong>到<strong><strong>9</strong></strong>、“+”和“/”</strong> Base58是Bitcoin(比特币)中使用的一种编码方式，主要用于产生Bitcoin的钱包地址 相比Base64，<strong>Base58不使用数字</strong>**”0”<strong><strong>，字母大写</strong></strong>“O”<strong><strong>，字母大写</strong></strong>“I”<strong><strong>，和字母小写</strong></strong>“i”<strong><strong>，以及</strong></strong>“+”<strong><strong>和</strong></strong>“/“**<strong>符号</strong></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/clipboard-163930639045337.png" alt="img"></p><p>Base64 算法原理</p><p>base64 是 3个字节为一组，一个字节 8位，一共 就是24位 ，然后，把3个字节转成4组，每组6位，</p><p>3 * 8 = 4 * 6 = 24 ，每组6位，缺少的2位，会在高位进行补0 ，这样做的好处在于 ，base取的是后面6位，去掉高2位 ，那么base64的取值就可以控制在0-63位了，所以就叫base64，111 111 = 32 + 16 + 8 + 4 + 2 + 1 =</p><p>base64 构成原则</p><p>① 小写 a - z = 26个字母</p><p>② 大写 A - Z = 26个字母</p><p>③ 数字 0 - 9 = 10 个数字</p><p>④ + / = 2个符号</p><p>大家可能发现一个问题，咱们的base64有个 = 号，但是在映射表里面没有发现 = 号 ， 这个地方需要注意，等号非常特殊，因为base64是三个字节一组 ，如果当我们的位数不够的时候，会使用等号来补齐</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930639754138.jpg" alt="img"></p><h2><span id="21-base64补等号规则说明">21-base64补等号规则说明</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/clipboard-163930653337939.png" alt="img"></p><p>base64补等号测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBase64</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  1：MQ== 表示一个字节，不够三个字节，所以需要后面通过 == 号补齐</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(Base64.encode("12".getBytes()));</span><span class="token comment" spellcheck="true">//        System.out.println(Base64.encode("123".getBytes()));</span><span class="token comment" spellcheck="true">//        // 硅谷:中文占6个字节，6 * 8 = 48 ，刚刚好被整除，所以没有等号</span><span class="token comment" spellcheck="true">//        System.out.println(Base64.encode("硅谷".getBytes()));</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930654321940.jpg" alt="img"></p><h2><span id="22-tostring和newstring的原理">22-toString和newString的原理</span></h2><p>toString()与new String ()用法区别</p><p>举例子 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xerces<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>dv<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBase64</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str<span class="token operator">=</span><span class="token string">"TU0jV0xBTiNVYys5bEdiUjZlNU45aHJ0bTdDQStBPT0jNjQ2NDY1Njk4IzM5OTkwMDAwMzAwMA=="</span><span class="token punctuation">;</span>        String rlt1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String rlt2<span class="token operator">=</span>Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rlt1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rlt2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果是：</p><p> MM#WLAN#Uc+9lGbR6e5N9hrtm7CA+A==#646465698#399900003000</p><p> [B@1540e19d</p><p>哪一个是正确的？为什么？</p><p>这里应该用new String()的方法，因为Base64加解密是一种转换编码格式的原理</p><p><strong>toString()与new String ()用法区别</strong></p><p>str.toString是调用了这个object对象的类的toString方法。一般是返回这么一个String：[class name]@[hashCode]</p><p>new String(str)是根据parameter是一个字节数组，使用java虚拟机默认的编码格式，将这个字节数组decode为对应的字符。若虚拟机默认的编码格式是ISO-8859-1，按照ascii编码表即可得到字节对应的字符。</p><p><strong>什么时候用什么方法呢？</strong></p><p>new String（）一般使用字符转码的时候,byte[]数组的时候</p><p>toString（）对象打印的时候使用</p><h2><span id="23-aes加密和解密">23-AES加密和解密</span></h2><p>AES 加密解密和 DES 加密解密代码一样，只需要修改加密算法就行，拷贝 ESC 代码 <strong>package</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>desaes<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>SecretKeySpec<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AesDemo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// DES加密算法,key的大小必须是8个字节</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String input <span class="token operator">=</span><span class="token string">"硅谷"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// AES加密算法，比较高级，所以key的大小必须是16个字节</span>        String key <span class="token operator">=</span> <span class="token string">"1234567812345678"</span><span class="token punctuation">;</span>        String transformation <span class="token operator">=</span> <span class="token string">"AES"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9PQXVUIhaaQ=</span>        <span class="token comment" spellcheck="true">// 指定获取密钥的算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"AES"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先测试加密，然后在测试解密</span>        String encryptDES <span class="token operator">=</span> <span class="token function">encryptDES</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> key<span class="token punctuation">,</span> transformation<span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密:"</span> <span class="token operator">+</span> encryptDES<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token function">dncryptDES</span><span class="token punctuation">(</span>encryptDES<span class="token punctuation">,</span> key<span class="token punctuation">,</span> transformation<span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用DES加密数据     *     * @param input          : 原文     * @param key            : 密钥(DES,密钥的长度必须是8个字节)     * @param transformation : 获取Cipher对象的算法     * @param algorithm      : 获取密钥的算法     * @return : 密文     * @throws Exception     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">encryptDES</span><span class="token punctuation">(</span>String input<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> String transformation<span class="token punctuation">,</span> String algorithm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取加密对象</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>transformation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建加密规则</span>        <span class="token comment" spellcheck="true">// 第一个参数key的字节</span>        <span class="token comment" spellcheck="true">// 第二个参数表示加密算法</span>        SecretKeySpec sks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ENCRYPT_MODE：加密模式</span>        <span class="token comment" spellcheck="true">// DECRYPT_MODE: 解密模式</span>        <span class="token comment" spellcheck="true">// 初始化加密模式和算法</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>sks<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加密</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出加密后的数据</span>        String encode <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> encode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用DES解密     *     * @param input          : 密文     * @param key            : 密钥     * @param transformation : 获取Cipher对象的算法     * @param algorithm      : 获取密钥的算法     * @throws Exception     * @return: 原文     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">dncryptDES</span><span class="token punctuation">(</span>String input<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> String transformation<span class="token punctuation">,</span> String algorithm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1,获取Cipher对象</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>transformation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指定密钥规则</span>        SecretKeySpec sks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span> sks<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 解密</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行程序：AES 加密的密钥key ， <strong>需要传入16个字节</strong></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163930682725241.jpg" alt="img"></p><p>在运行程序</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930683322742.jpg" alt="img"></p><h2><span id="24-加密模式和填充模式">24-加密模式和填充模式</span></h2><p><strong>加密模式</strong></p><p>加密模式：<a href="https://docs.oracle.com/javase/8/docs/api/javax/crypto/Cipher.html">https://docs.oracle.com/javase/8/docs/api/javax/crypto/Cipher.html</a></p><p><a href="#ecb">ECB</a></p><p>ECB : Electronic codebook, 电子密码本. 需要加密的消息按照块密码的块大小被分为数个块，并对每个块进行独立加密</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930698372843.jpg" alt="img"></p><ul><li>优点 : 可以并行处理数据</li><li>缺点 : 同样的原文生成同样的密文, 不能很好的保护数据</li><li>同时加密，原文是一样的，加密出来的密文也是一样的</li></ul><p><a href="#cbc">CBC</a></p><p>CBC : Cipher-block chaining, 密码块链接. 每个明文块先与前一个密文块进行异或后，再进行加密。在这种方法中，每个密文块都依赖于它前面的所有明文块</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930699571644.jpg" alt="img"></p><ul><li>优点 : 同样的原文生成的密文不一样</li><li>缺点 : 串行处理数据.</li></ul><p> <strong>填充模式</strong></p><ul><li>当需要按块处理的数据, 数据长度不符合块处理需求时, 按照一定的方法填充满块长的规则</li></ul><p><a href="#nopadding">NoPadding</a></p><ul><li>不填充.</li><li>在DES加密算法下, 要求原文长度必须是8byte的整数倍</li><li>在AES加密算法下, 要求原文长度必须是16byte的整数倍</li></ul><p><a href="#pkcs5padding">PKCS5Padding</a></p><p>数据块的大小为8位, 不够就补足</p><p><a href="#tips">Tips</a></p><ul><li>默认情况下, 加密模式和填充模式为 : ECB/PKCS5Padding</li><li>如果使用CBC模式, 在初始化Cipher对象时, 需要增加参数, 初始化向量IV : IvParameterSpec iv = new IvParameterSpec(key.getBytes());</li></ul><p>加密模式和填充模式</p><p>AES/CBC/NoPadding (128) </p><p>AES/CBC/PKCS5Padding (128) </p><p>AES/ECB/NoPadding (128) </p><p>AES/ECB/PKCS5Padding (128)</p><p> DES/CBC/NoPadding (56) </p><p>DES/CBC/PKCS5Padding (56) </p><p>DES/ECB/NoPadding (56) </p><p>DES/ECB/PKCS5Padding (56) </p><p>DESede/CBC/NoPadding (168) </p><p>DESede/CBC/PKCS5Padding (168) </p><p>DESede/ECB/NoPadding (168)</p><p> DESede/ECB/PKCS5Padding (168) </p><p>RSA/ECB/PKCS1Padding (1024, 2048) </p><p>RSA/ECB/OAEPWithSHA-1AndMGF1Padding (1024, 2048) </p><p>RSA/ECB/OAEPWithSHA-256AndMGF1Padding (1024, 2048)</p><p>加密模式和填充模式例子</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>desaes<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>IvParameterSpec<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>SecretKeySpec<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DesDemo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// DES加密算法,key的大小必须是8个字节</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String input <span class="token operator">=</span><span class="token string">"硅谷"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// DES加密算法，key的大小必须是8个字节</span>        String key <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指定获取Cipher的算法,如果没有指定加密模式和填充模式,ECB/PKCS5Padding就是默认值</span>        <span class="token comment" spellcheck="true">//     String transformation = "DES"; // 9PQXVUIhaaQ=</span>        <span class="token comment" spellcheck="true">//String transformation = "DES/ECB/PKCS5Padding"; // 9PQXVUIhaaQ=</span>        <span class="token comment" spellcheck="true">// CBC模式,必须指定初始向量,初始向量中密钥的长度必须是8个字节</span>        <span class="token comment" spellcheck="true">//String transformation = "DES/CBC/PKCS5Padding"; // 9PQXVUIhaaQ=</span>        <span class="token comment" spellcheck="true">// NoPadding模式,原文的长度必须是8个字节的整倍数 ，所以必须把 硅谷改成硅谷12</span>        String transformation <span class="token operator">=</span> <span class="token string">"DES/CBC/NoPadding"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9PQXVUIhaaQ=</span>        <span class="token comment" spellcheck="true">// 指定获取密钥的算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"DES"</span><span class="token punctuation">;</span>        String encryptDES <span class="token operator">=</span> <span class="token function">encryptDES</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> key<span class="token punctuation">,</span> transformation<span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密:"</span> <span class="token operator">+</span> encryptDES<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        String s = dncryptDES(encryptDES, key, transformation, algorithm);</span><span class="token comment" spellcheck="true">//        System.out.println("解密:" + s);</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用DES加密数据     *     * @param input          : 原文     * @param key            : 密钥(DES,密钥的长度必须是8个字节)     * @param transformation : 获取Cipher对象的算法     * @param algorithm      : 获取密钥的算法     * @return : 密文     * @throws Exception     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">encryptDES</span><span class="token punctuation">(</span>String input<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> String transformation<span class="token punctuation">,</span> String algorithm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取加密对象</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>transformation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建加密规则</span>        <span class="token comment" spellcheck="true">// 第一个参数key的字节</span>        <span class="token comment" spellcheck="true">// 第二个参数表示加密算法</span>        SecretKeySpec sks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ENCRYPT_MODE：加密模式</span>        <span class="token comment" spellcheck="true">// DECRYPT_MODE: 解密模式</span>         <span class="token comment" spellcheck="true">// 初始向量，参数表示跟谁进行异或，初始向量的长度必须是8位</span><span class="token comment" spellcheck="true">//        IvParameterSpec iv = new IvParameterSpec(key.getBytes());</span>         <span class="token comment" spellcheck="true">// 初始化加密模式和算法</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>sks<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加密</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出加密后的数据</span>        String encode <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> encode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用DES解密     *     * @param input          : 密文     * @param key            : 密钥     * @param transformation : 获取Cipher对象的算法     * @param algorithm      : 获取密钥的算法     * @throws Exception     * @return: 原文     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">dncryptDES</span><span class="token punctuation">(</span>String input<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> String transformation<span class="token punctuation">,</span> String algorithm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1,获取Cipher对象</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>transformation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指定密钥规则</span>        SecretKeySpec sks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        IvParameterSpec iv = new IvParameterSpec(key.getBytes());</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span> sks<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 解密</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行程序：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930700479145.jpg" alt="img"></p><p>修改成 CBC 加密 模式</p><p> String transformation = “DES/CBC/PKCS5Padding”;</p><p>运行 ，报错，需要添加一个参数</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930701111246.jpg" alt="img"></p><p>修改加密代码：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930702063847.jpg" alt="img"></p><p>运行程序</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163930702893548.jpg" alt="img"></p><p>修改填充模式</p><p>String transformation = “DES/CBC/NoPadding”;</p><p>运行报错 NoPadding 这种填充模式 原文必须是8个字节的整倍数</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930703397549.jpg" alt="img"></p><p>修改运行</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930704224450.jpg" alt="img"></p><p>在测试 AES 的时候需要注意，key需要16个字节，加密向量也需要16个字节 ，其他方式跟 DES 一样</p><h2><span id="25~29-消息摘要算法-数字摘要算法">25~29-消息摘要算法、数字摘要算法</span></h2><p><strong>消息摘要</strong></p><ul><li>消息摘要（Message Digest）又称为数字摘要(Digital Digest)</li><li>它是一个唯一对应一个消息或文本的固定长度的值，它由一个单向Hash加密函数对消息进行作用而产生</li><li>使用数字摘要生成的值是不可以篡改的，为了保证文件或者值的安全</li></ul><p>1.9.1 特点</p><p>无论输入的消息有多长，计算出来的消息摘要的长度总是固定的。例如应用MD5算法摘要的消息有128个比特位，用SHA-1算法摘要的消息最终有160比特位的输出</p><p>只要输入的消息不同，对其进行摘要以后产生的摘要消息也必不相同；但相同的输入必会产生相同的输出</p><p>消息摘要是单向、不可逆的</p><p>常见算法 : - MD5 - SHA1 - SHA256 - SHA512</p><p><a href="http://tool.oschina.net/encrypt?type=2">在线获取消息摘要</a></p><p>百度搜索 tomcat ，进入官网下载 ，会经常发现有 sha1，sha512 , 这些都是数字摘要</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930738018551.jpg" alt="img"></p><p>数字摘要</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930739211052.jpg" alt="img"></p><p>1.9.2 获取字符串消息摘要</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>digest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sound<span class="token punctuation">.</span>midi<span class="token punctuation">.</span>Soundbank<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>MessageDigest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * DigestDemo1 * * @Author: 尚硅谷 * @CreateTime: 2020-03-17 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigestDemo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 原文</span>        String input <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"MD5"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取数字摘要对象</span>        MessageDigest messageDigest <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取消息数字摘要的字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digest <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163930740228153.jpg" alt="img"></p><p>1.9.3 base64 编码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>digest<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sound<span class="token punctuation">.</span>midi<span class="token punctuation">.</span>Soundbank<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>MessageDigest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * DigestDemo1 * * @Author: 尚硅谷 * @CreateTime: 2020-03-17 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigestDemo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 原文</span>        String input <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"MD5"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取数字摘要对象</span>        MessageDigest messageDigest <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 消息数字摘要</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digest <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(new String(digest));</span>        <span class="token comment" spellcheck="true">// base64编码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930740880054.jpg" alt="img"></p><p>使用在线 md5 加密 ，发现我们生成的值和代码生成的值不一样，那是因为消息摘要不是使用base64进行编码的，所以我们需要把值转成16进制</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930741469455.jpg" alt="img"></p><p>数字摘要转换成 16 进制</p><p>1 2 // 4124bc0a9335c27f086f24ba207a4912     md5 在线校验 // QSS8CpM1wn8IbyS6IHpJEg==             消息摘要使用的是16进制</p><p>代码转成16进制</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>digest<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sound<span class="token punctuation">.</span>midi<span class="token punctuation">.</span>Soundbank<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>MessageDigest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * DigestDemo1 * * @Author: 尚硅谷 * @CreateTime: 2020-03-17 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigestDemo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 4124bc0a9335c27f086f24ba207a4912     md5 在线校验</span>        <span class="token comment" spellcheck="true">// QSS8CpM1wn8IbyS6IHpJEg==             消息摘要使用的是16进制</span>        <span class="token comment" spellcheck="true">// 原文</span>        String input <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"MD5"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取数字摘要对象</span>        MessageDigest messageDigest <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 消息数字摘要</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digest <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(new String(digest));</span>        <span class="token comment" spellcheck="true">// base64编码</span><span class="token comment" spellcheck="true">//        System.out.println(Base64.encode(digest));</span>        <span class="token comment" spellcheck="true">// 创建对象用来拼接</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> digest<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 转成 16进制</span>            String s <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println(s);</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果生成的字符只有一个，前面补0</span>                s <span class="token operator">=</span> <span class="token string">"0"</span><span class="token operator">+</span>s<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930742196856.jpg" alt="img"></p><p>1.9.4 其他数字摘要算法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>digest<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sound<span class="token punctuation">.</span>midi<span class="token punctuation">.</span>Soundbank<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>MessageDigest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>NoSuchAlgorithmException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * DigestDemo1 * * @Author: 尚硅谷 * @CreateTime: 2020-03-17 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigestDemo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 4124bc0a9335c27f086f24ba207a4912     md5 在线校验</span>        <span class="token comment" spellcheck="true">// QSS8CpM1wn8IbyS6IHpJEg==             消息摘要使用的是16进制</span>        <span class="token comment" spellcheck="true">// 原文</span>        String input <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"MD5"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取数字摘要对象</span>        String md5 <span class="token operator">=</span> <span class="token function">getDigest</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>md5<span class="token punctuation">)</span><span class="token punctuation">;</span>        String sha1 <span class="token operator">=</span> <span class="token function">getDigest</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">"SHA-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sha1<span class="token punctuation">)</span><span class="token punctuation">;</span>        String sha256 <span class="token operator">=</span> <span class="token function">getDigest</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">"SHA-256"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sha256<span class="token punctuation">)</span><span class="token punctuation">;</span>        String sha512 <span class="token operator">=</span> <span class="token function">getDigest</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">"SHA-512"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sha512<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digest<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        System.out.println(new String(digest));</span>        <span class="token comment" spellcheck="true">// base64编码</span><span class="token comment" spellcheck="true">//        System.out.println(Base64.encode(digest));</span>        <span class="token comment" spellcheck="true">// 创建对象用来拼接</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> digest<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 转成 16进制</span>            String s <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果生成的字符只有一个，前面补0</span>                s <span class="token operator">=</span> <span class="token string">"0"</span><span class="token operator">+</span>s<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"16进制数据的长度："</span> <span class="token operator">+</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getDigest</span><span class="token punctuation">(</span>String input<span class="token punctuation">,</span> String algorithm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        MessageDigest messageDigest <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 消息数字摘要</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digest <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密文的字节长度:"</span> <span class="token operator">+</span> digest<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">toHex</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163930742951857.jpg" alt="img"></p><p>1.9.5 获取文件消息摘要</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>digest<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>scenario<span class="token punctuation">.</span>effect<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>sw<span class="token punctuation">.</span>sse<span class="token punctuation">.</span>SSEBlend_SRC_OUTPeer<span class="token punctuation">;</span><span class="token keyword">import</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>BASE64Decoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>MessageDigest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * DigestDemo * * @Author: 尚硅谷 * @CreateTime: 2020-03-16 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigestDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        String input <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">;</span>        String algorithm <span class="token operator">=</span> <span class="token string">"MD5"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// sha1 可以实现秒传功能</span>        String sha1 <span class="token operator">=</span> <span class="token function">getDigestFile</span><span class="token punctuation">(</span><span class="token string">"apache-tomcat-9.0.10-windows-x64.zip"</span><span class="token punctuation">,</span> <span class="token string">"SHA-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sha1<span class="token punctuation">)</span><span class="token punctuation">;</span>        String sha512 <span class="token operator">=</span> <span class="token function">getDigestFile</span><span class="token punctuation">(</span><span class="token string">"apache-tomcat-9.0.10-windows-x64.zip"</span><span class="token punctuation">,</span> <span class="token string">"SHA-512"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sha512<span class="token punctuation">)</span><span class="token punctuation">;</span>        String md5 <span class="token operator">=</span> <span class="token function">getDigest</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>md5<span class="token punctuation">)</span><span class="token punctuation">;</span>        String md51 <span class="token operator">=</span> <span class="token function">getDigest</span><span class="token punctuation">(</span><span class="token string">"aa "</span><span class="token punctuation">,</span> <span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>md51<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getDigestFile</span><span class="token punctuation">(</span>String filePath<span class="token punctuation">,</span> String algorithm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>len <span class="token operator">=</span>  fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取消息摘要对象</span>        MessageDigest messageDigest <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取消息摘要</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digest <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密文的字节长度："</span><span class="token operator">+</span>digest<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">toHex</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getDigest</span><span class="token punctuation">(</span>String input<span class="token punctuation">,</span> String algorithm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        MessageDigest messageDigest <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digest <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密文的字节长度："</span><span class="token operator">+</span>digest<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">toHex</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//        System.out.println(new String(digest));</span>        <span class="token comment" spellcheck="true">// 消息摘要进行表示的时候，是用16进制进行表示</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> digest<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 转成16进制</span>            String s <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 保持数据的完整性，前面不够的用0补齐</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">+</span>s<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"16进制数据的长度:"</span><span class="token operator">+</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行程序 ，获取 sha-1 和 sha-512 的值</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163930743532558.jpg" alt="img"></p><p>查看 tomcat 官网上面 sha-1 和 sha-512 的值</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930743956059.jpg" alt="img"></p><p>使用 sha-1 算法，可以实现秒传功能，不管咱们如何修改文件的名字，最后得到的值是一样的</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930744483060.jpg" alt="img"></p><p>运行程序 ，获取 sha-1 和 sha-512 的值</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163930745049961.jpg" alt="img"></p><p>如果原文修改了，那么sha-1值 就会不一样</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930745523462.jpg" alt="img"></p><p>运行结果：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930746138663.jpg" alt="img"></p><p>总结</p><ul><li>MD5算法 : 摘要结果16个字节, 转16进制后32个字节</li><li>SHA1算法 : 摘要结果20个字节, 转16进制后40个字节</li><li>SHA256算法 : 摘要结果32个字节, 转16进制后64个字节</li><li>SHA512算法 : 摘要结果64个字节, 转16进制后128个字节</li></ul><h2><span id="30-非对称加密算法">30-非对称加密算法</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930984920966.jpg" alt="img"></p><p>简介：</p><p>① 非对称加密算法又称现代加密算法。</p><p>② 非对称加密是计算机通信安全的基石，保证了加密数据不会被破解。</p><p>③ 与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥(publickey) 和私有密(privatekey)</p><p>④ 公开密钥和私有密钥是一对</p><p>⑤ 如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密。</p><p>⑥ 如果用私有密钥对数据进行加密，只有用对应的公开密钥才能解密。</p><p>⑦ 因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。</p><ul><li><p>示例</p></li><li><ul><li>首先生成密钥对, 公钥为(5,14), 私钥为(11,14)</li><li>现在A希望将原文2发送给B</li><li>A使用公钥加密数据. 2的5次方mod 14 = 4 , 将密文4发送给B</li><li>B使用私钥解密数据. 4的11次方mod14 = 2, 得到原文2</li></ul></li><li><p>特点</p></li><li><ul><li>加密和解密使用不同的密钥</li><li>如果使用私钥加密, 只能使用公钥解密</li><li>如果使用公钥加密, 只能使用私钥解密</li><li>处理数据的速度较慢, 因为安全级别高</li></ul></li><li><p>常见算法</p></li><li><ul><li>RSA</li><li>ECC</li></ul></li></ul><h2><span id="31-公钥和私钥生成">31-公钥和私钥生成</span></h2><p>生成公钥和私钥</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>rsa<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>SecretKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>PKCS8EncodedKeySpec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * RSAdemo * * @Author: 尚硅谷 * @CreateTime: 2020-04-12 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSAdemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 加密算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"RSA"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  创建密钥对生成器对象</span>        KeyPairGenerator keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成密钥对</span>        KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成私钥</span>        PrivateKey privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成公钥</span>        PublicKey publicKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取私钥字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKeyEncoded <span class="token operator">=</span> privateKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取公钥字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKeyEncoded <span class="token operator">=</span> publicKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对公私钥进行base64编码</span>        String privateKeyString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>privateKeyEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        String publicKeyString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>publicKeyEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印私钥</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>privateKeyString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印公钥</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>publicKeyString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行程序：先打印的是私钥 ， 后面打印的是公钥</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930986225067.jpg" alt="img"></p><h2><span id="32-私钥加密">32-私钥加密</span></h2><p>私钥加密</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>rsa<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>SecretKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>PKCS8EncodedKeySpec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * RSAdemo * * @Author: 尚硅谷 * @CreateTime: 2020-04-12 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSAdemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String input <span class="token operator">=</span> <span class="token string">"硅谷"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加密算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"RSA"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  创建密钥对生成器对象</span>        KeyPairGenerator keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成密钥对</span>        KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成私钥</span>        PrivateKey privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成公钥</span>        PublicKey publicKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取私钥字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKeyEncoded <span class="token operator">=</span> privateKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取公钥字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKeyEncoded <span class="token operator">=</span> publicKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对公私钥进行base64编码</span>        String privateKeyString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>privateKeyEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        String publicKeyString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>publicKeyEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建加密对象</span>        <span class="token comment" spellcheck="true">// 参数表示加密算法</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化加密</span>        <span class="token comment" spellcheck="true">// 第一个参数:加密的模式</span>        <span class="token comment" spellcheck="true">// 第二个参数：使用私钥进行加密</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 私钥加密</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行程序</p><p><img src="/2021/12/12/mi-ma-xue-xue-xi-bi-ji/YNote\candy19870710@126.com\293e477d0d1f46a7b90f1e0a1fc36f16\suvork5cyii=.jpg" alt="img"></p><h2><span id="33-公钥加密和私钥解密">33-公钥加密和私钥解密</span></h2><p><strong>私钥加密私钥解密</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>rsa<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>SecretKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>PKCS8EncodedKeySpec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * RSAdemo * * @Author: 尚硅谷 * @CreateTime: 2020-04-12 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSAdemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String input <span class="token operator">=</span> <span class="token string">"硅谷"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加密算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"RSA"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  创建密钥对生成器对象</span>        KeyPairGenerator keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成密钥对</span>        KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成私钥</span>        PrivateKey privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成公钥</span>        PublicKey publicKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取私钥字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKeyEncoded <span class="token operator">=</span> privateKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取公钥字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKeyEncoded <span class="token operator">=</span> publicKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对公私钥进行base64编码</span>        String privateKeyString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>privateKeyEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        String publicKeyString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>publicKeyEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建加密对象</span>        <span class="token comment" spellcheck="true">// 参数表示加密算法</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化加密</span>        <span class="token comment" spellcheck="true">// 第一个参数:加密的模式</span>        <span class="token comment" spellcheck="true">// 第二个参数：使用私钥进行加密</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 私钥加密</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 私钥进行解密</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对密文进行解密，不需要使用base64，因为原文不会乱码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行程序 ，因为私钥加密，只能公钥解密</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163930982783164.jpg" alt="img"></p><p><strong>私钥加密公钥解密*<em>*</em>*<em>*</em>**</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>rsa<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>SecretKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>PKCS8EncodedKeySpec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * RSAdemo * * @Author: 尚硅谷 * @CreateTime: 2020-04-12 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSAdemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String input <span class="token operator">=</span> <span class="token string">"硅谷"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加密算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"RSA"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  创建密钥对生成器对象</span>        KeyPairGenerator keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成密钥对</span>        KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成私钥</span>        PrivateKey privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成公钥</span>        PublicKey publicKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取私钥字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKeyEncoded <span class="token operator">=</span> privateKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取公钥字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKeyEncoded <span class="token operator">=</span> publicKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对公私钥进行base64编码</span>        String privateKeyString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>privateKeyEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        String publicKeyString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>publicKeyEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建加密对象</span>        <span class="token comment" spellcheck="true">// 参数表示加密算法</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化加密</span>        <span class="token comment" spellcheck="true">// 第一个参数:加密的模式</span>        <span class="token comment" spellcheck="true">// 第二个参数：使用私钥进行加密</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 私钥加密</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 私钥进行解密</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对密文进行解密，不需要使用base64，因为原文不会乱码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行程序</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163930983760665.jpg" alt="img"></p><h2><span id="34~35-保存公钥和私钥">34~35-保存公钥和私钥</span></h2><p>保存公钥和私钥</p><p>前面代码每次都会生成 加密和解密 ，咱们需要把加密和解密的方法全部到本地的根目录下面。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>rsa<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>SecretKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>PKCS8EncodedKeySpec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * RSAdemo * * @Author: 尚硅谷 * @CreateTime: 2020-04-12 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSAdemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String input <span class="token operator">=</span> <span class="token string">"硅谷"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加密算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"RSA"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成密钥对并保存在本地文件中</span>        <span class="token function">generateKeyToFile</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">,</span> <span class="token string">"a.pub"</span><span class="token punctuation">,</span> <span class="token string">"a.pri"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//加密</span><span class="token comment" spellcheck="true">//        String s = encryptRSA(algorithm, privateKey, input);</span>        <span class="token comment" spellcheck="true">// 解密</span><span class="token comment" spellcheck="true">//        String s1 = decryptRSA(algorithm, publicKey, s);</span><span class="token comment" spellcheck="true">//        System.out.println(s1);</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成密钥对并保存在本地文件中     *     * @param algorithm : 算法     * @param pubPath   : 公钥保存路径     * @param priPath   : 私钥保存路径     * @throws Exception     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">generateKeyToFile</span><span class="token punctuation">(</span>String algorithm<span class="token punctuation">,</span> String pubPath<span class="token punctuation">,</span> String priPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取密钥对生成器</span>        KeyPairGenerator keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取密钥对</span>        KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取公钥</span>        PublicKey publicKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取私钥</span>        PrivateKey privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取byte数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKeyEncoded <span class="token operator">=</span> publicKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKeyEncoded <span class="token operator">=</span> privateKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 进行Base64编码</span>        String publicKeyString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>publicKeyEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        String privateKeyString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>privateKeyEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保存文件</span>        FileUtils<span class="token punctuation">.</span><span class="token function">writeStringToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pubPath<span class="token punctuation">)</span><span class="token punctuation">,</span> publicKeyString<span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileUtils<span class="token punctuation">.</span><span class="token function">writeStringToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>priPath<span class="token punctuation">)</span><span class="token punctuation">,</span> privateKeyString<span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解密数据     *     * @param algorithm      : 算法     * @param encrypted      : 密文     * @param key            : 密钥     * @return : 原文     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">decryptRSA</span><span class="token punctuation">(</span>String algorithm<span class="token punctuation">,</span>Key key<span class="token punctuation">,</span>String encrypted<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 创建加密对象</span>        <span class="token comment" spellcheck="true">// 参数表示加密算法</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 私钥进行解密</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 由于密文进行了Base64编码, 在这里需要进行解码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decode <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对密文进行解密，不需要使用base64，因为原文不会乱码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用密钥加密数据     *     * @param algorithm      : 算法     * @param input          : 原文     * @param key            : 密钥     * @return : 密文     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">encryptRSA</span><span class="token punctuation">(</span>String algorithm<span class="token punctuation">,</span>Key key<span class="token punctuation">,</span>String input<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建加密对象</span>        <span class="token comment" spellcheck="true">// 参数表示加密算法</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化加密</span>        <span class="token comment" spellcheck="true">// 第一个参数:加密的模式</span>        <span class="token comment" spellcheck="true">// 第二个参数：使用私钥进行加密</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 私钥加密</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对密文进行Base64编码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行在项目根目录生成私钥</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163930990852368.jpg" alt="img"></p><p>运行在项目根目录生成公钥</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163930991432369.jpg" alt="img"></p><h2><span id="36~37-读取私钥-获取私钥key对象">36~37-读取私钥、获取私钥key对象</span></h2><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//读取私钥</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>rsa<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>SecretKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>PKCS8EncodedKeySpec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * RSAdemo * * @Author: 尚硅谷 * @CreateTime: 2020-04-12 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSAdemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String input <span class="token operator">=</span> <span class="token string">"硅谷"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加密算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"RSA"</span><span class="token punctuation">;</span>        PrivateKey privateKey <span class="token operator">=</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token string">"a.pri"</span><span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PrivateKey <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>String priPath<span class="token punctuation">,</span>String algorithm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将文件内容转为字符串</span>        String privateKeyString <span class="token operator">=</span> FileUtils<span class="token punctuation">.</span><span class="token function">readFileToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>priPath<span class="token punctuation">)</span><span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取密钥工厂</span>        KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构建密钥规范 进行Base64解码</span>        PKCS8EncodedKeySpec spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>privateKeyString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成私钥</span>        <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成密钥对并保存在本地文件中     *     * @param algorithm : 算法     * @param pubPath   : 公钥保存路径     * @param priPath   : 私钥保存路径     * @throws Exception     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">generateKeyToFile</span><span class="token punctuation">(</span>String algorithm<span class="token punctuation">,</span> String pubPath<span class="token punctuation">,</span> String priPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取密钥对生成器</span>        KeyPairGenerator keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取密钥对</span>        KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取公钥</span>        PublicKey publicKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取私钥</span>        PrivateKey privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取byte数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKeyEncoded <span class="token operator">=</span> publicKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKeyEncoded <span class="token operator">=</span> privateKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 进行Base64编码</span>        String publicKeyString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>publicKeyEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        String privateKeyString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>privateKeyEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保存文件</span>        FileUtils<span class="token punctuation">.</span><span class="token function">writeStringToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pubPath<span class="token punctuation">)</span><span class="token punctuation">,</span> publicKeyString<span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileUtils<span class="token punctuation">.</span><span class="token function">writeStringToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>priPath<span class="token punctuation">)</span><span class="token punctuation">,</span> privateKeyString<span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解密数据     *     * @param algorithm      : 算法     * @param encrypted      : 密文     * @param key            : 密钥     * @return : 原文     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">decryptRSA</span><span class="token punctuation">(</span>String algorithm<span class="token punctuation">,</span>Key key<span class="token punctuation">,</span>String encrypted<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 创建加密对象</span>        <span class="token comment" spellcheck="true">// 参数表示加密算法</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 私钥进行解密</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 由于密文进行了Base64编码, 在这里需要进行解码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decode <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对密文进行解密，不需要使用base64，因为原文不会乱码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用密钥加密数据     *     * @param algorithm      : 算法     * @param input          : 原文     * @param key            : 密钥     * @return : 密文     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">encryptRSA</span><span class="token punctuation">(</span>String algorithm<span class="token punctuation">,</span>Key key<span class="token punctuation">,</span>String input<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建加密对象</span>        <span class="token comment" spellcheck="true">// 参数表示加密算法</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化加密</span>        <span class="token comment" spellcheck="true">// 第一个参数:加密的模式</span>        <span class="token comment" spellcheck="true">// 第二个参数：使用私钥进行加密</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 私钥加密</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对密文进行Base64编码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2><span id="38-获取公钥对象">38-获取公钥对象</span></h2><p>1.10.8 读取公钥</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>rsa<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Cipher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>SecretKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>PKCS8EncodedKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>X509EncodedKeySpec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * RSAdemo * * @Author: 尚硅谷 * @CreateTime: 2020-04-12 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSAdemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String input <span class="token operator">=</span> <span class="token string">"硅谷"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加密算法</span>        String algorithm <span class="token operator">=</span> <span class="token string">"RSA"</span><span class="token punctuation">;</span>        PrivateKey privateKey <span class="token operator">=</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token string">"a.pri"</span><span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        PublicKey publicKey <span class="token operator">=</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token string">"a.pub"</span><span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token function">encryptRSA</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s1 <span class="token operator">=</span> <span class="token function">decryptRSA</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PublicKey <span class="token function">getPublicKey</span><span class="token punctuation">(</span>String pulickPath<span class="token punctuation">,</span>String algorithm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将文件内容转为字符串</span>        String publicKeyString <span class="token operator">=</span> FileUtils<span class="token punctuation">.</span><span class="token function">readFileToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pulickPath<span class="token punctuation">)</span><span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取密钥工厂</span>        KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构建密钥规范 进行Base64解码</span>        X509EncodedKeySpec spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>publicKeyString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成公钥</span>        <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PrivateKey <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>String priPath<span class="token punctuation">,</span>String algorithm<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将文件内容转为字符串</span>        String privateKeyString <span class="token operator">=</span> FileUtils<span class="token punctuation">.</span><span class="token function">readFileToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>priPath<span class="token punctuation">)</span><span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取密钥工厂</span>        KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构建密钥规范 进行Base64解码</span>        PKCS8EncodedKeySpec spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>privateKeyString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成私钥</span>        <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成密钥对并保存在本地文件中     *     * @param algorithm : 算法     * @param pubPath   : 公钥保存路径     * @param priPath   : 私钥保存路径     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">generateKeyToFile</span><span class="token punctuation">(</span>String algorithm<span class="token punctuation">,</span> String pubPath<span class="token punctuation">,</span> String priPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取密钥对生成器</span>        KeyPairGenerator keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取密钥对</span>        KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取公钥</span>        PublicKey publicKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取私钥</span>        PrivateKey privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取byte数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKeyEncoded <span class="token operator">=</span> publicKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKeyEncoded <span class="token operator">=</span> privateKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 进行Base64编码</span>        String publicKeyString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>publicKeyEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        String privateKeyString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>privateKeyEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保存文件</span>        FileUtils<span class="token punctuation">.</span><span class="token function">writeStringToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pubPath<span class="token punctuation">)</span><span class="token punctuation">,</span> publicKeyString<span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileUtils<span class="token punctuation">.</span><span class="token function">writeStringToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>priPath<span class="token punctuation">)</span><span class="token punctuation">,</span> privateKeyString<span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解密数据     *     * @param algorithm      : 算法     * @param encrypted      : 密文     * @param key            : 密钥     * @return : 原文     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">decryptRSA</span><span class="token punctuation">(</span>String algorithm<span class="token punctuation">,</span>Key key<span class="token punctuation">,</span>String encrypted<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 创建加密对象</span>        <span class="token comment" spellcheck="true">// 参数表示加密算法</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 私钥进行解密</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 由于密文进行了Base64编码, 在这里需要进行解码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decode <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对密文进行解密，不需要使用base64，因为原文不会乱码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用密钥加密数据     *     * @param algorithm      : 算法     * @param input          : 原文     * @param key            : 密钥     * @return : 密文     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">encryptRSA</span><span class="token punctuation">(</span>String algorithm<span class="token punctuation">,</span>Key key<span class="token punctuation">,</span>String input<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建加密对象</span>        <span class="token comment" spellcheck="true">// 参数表示加密算法</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化加密</span>        <span class="token comment" spellcheck="true">// 第一个参数:加密的模式</span>        <span class="token comment" spellcheck="true">// 第二个参数：使用私钥进行加密</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 私钥加密</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对密文进行Base64编码</span>        <span class="token keyword">return</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行程序</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163931018451670.jpg" alt="img"></p><h2><span id="39~40-什么是数字签名-数字签名原理">39~40-什么是数字签名、数字签名原理</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/clipboard-163931025328571.png" alt="img"></p><p>数字签名（又称<a href="https://baike.baidu.com/item/%E5%85%AC%E9%92%A5">公钥</a>数字签名）是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。它是一种类似写在纸上的普通的物理签名，但是使用了<a href="https://baike.baidu.com/item/%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86/6245950">公钥加密</a>领域的技术来实现的，用于鉴别数字信息的方法。一套数字签名通常定义两种互补的运算，一个用于签名，另一个用于验证。数字签名是非对称<a href="https://baike.baidu.com/item/%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF">密钥加密技术</a>与<a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E6%91%98%E8%A6%81/4069118">数字摘要</a>技术的应用。</p><p>简单认识</p><p>相信我们都写过信，在写信的时候落款处总是要留下自己的名字，用来表示写信的人是谁。我们签的这个字就是生活中的签名：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163931025875272.jpg" alt="img"></p><p>而数字签名呢？其实也是同样的道理，他的含义是：在网络中传输数据时候，给数据添加一个数字签名，表示是谁发的数据，而且还能证明数据没有被篡改。</p><p>OK，数字签名的主要作用就是保证了数据的有效性（验证是谁发的）和完整性（证明信息没有被篡改）。下面我们就来好好地看一下他的底层实现原理是什么样子的。</p><p>基本原理</p><p>为了理解得清楚，我们通过案例一步一步来讲解。话说张三有俩好哥们A、B。由于工作原因，张三和AB写邮件的时候为了安全都需要加密。于是张三想到了数字签名：</p><p>整个思路是这个样子的：</p><p>第一步：加密采用非对称加密，张三有三把钥匙，两把公钥，送给朋友。一把私钥留给自己。</p><p>第二步：A或者B写邮件给张三：A先用公钥对邮件加密，然后张三收到邮件之后使用私钥解密。</p><p>第三步：张三写邮件给A或者B：</p><p>（1）张三写完邮件，先用hash函数生成邮件的摘要，附着在文章上面，这就完成了数字签名，然后张三再使用私钥加密。就可以把邮件发出去了。</p><p>（2）A或者是B收到邮件之后，先把数字签名取下来，然后使用自己的公钥解密即可。这时候取下来的数字签名中的摘要若和张三的一致，那就认为是张三发来的，再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。</p><p>上面的流程我们使用一张图来演示一下：</p><p>首先把公钥送给朋友A和B：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163931026453973.jpg" alt="img"></p><p>还有就是最后一个比较麻烦的，张三给A或者B发邮件：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163931027014374.jpg" alt="img"></p><h2><span id="41~43-数字证书-ca认证中心">41~43-数字证书、CA认证中心</span></h2><p>数字证书</p><p>上面提到我们对签名进行验证时，需要用到公钥。如果公钥是伪造的，那我们无法验证数字签名了，也就根本不可能从数字签名确定对方的合法性了。这时候证书就闪亮登场了。我们可能都有考各种证书的经历，比如说普通话证书，四六级证书等等，但是归根结底，到任何场合我们都能拿出我们的证书来证明自己确实已经考过了普通话，考过了四六级。这里的证书也是同样的道理。</p><p>如果不理解证书的作用，我们可以举一个例子，比如说我们的毕业证书，任何公司都会承认。为什么会承认？因为那是国家发得，大家都信任国家。也就是说只要是国家的认证机构，我们都信任它是合法的。</p><p>那么这个证书是如何生成的呢？我们再来看一张图：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163931031037275.jpg" alt="img"></p><p>此时即使张三的朋友A把公钥弄错了，张三也可以通过这个证书验证。</p><p>网页加密</p><p>我们看一个应用“数字证书”的实例：https协议。这个协议主要用于网页加密</p><p>首先，客户端向服务器发出加密请求。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163931031850576.jpg" alt="img"></p><p>服务器用自己的私钥加密网页以后，连同本身的数字证书，一起发送给客户端。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163931032337977.jpg" alt="img"></p><p>客户端（浏览器）的“证书管理器”，有“受信任的根证书颁发机构”列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163931033043378.jpg" alt="img"></p><p>如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/aelftksuqmcc-163931033656679.jpg" alt="img"></p><p>如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/suvork5cyii=-163931034188680.jpg" alt="img"></p><p>如果数字证书是可靠的，客户端就可以使用证书中的服务器公钥，对信息进行加密，然后与服务器交换加密信息。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/ru5erkjggg==-163931034725081.jpg" alt="img"></p><h2><span id="44-校验签名">44-校验签名</span></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SignatureDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>        PublicKey publicKey <span class="token operator">=</span> RsaDemo<span class="token punctuation">.</span><span class="token function">loadPublicKeyFromFile</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">,</span> <span class="token string">"a.pub"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrivateKey privateKey <span class="token operator">=</span> RsaDemo<span class="token punctuation">.</span><span class="token function">loadPrivateKeyFromFile</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">,</span> <span class="token string">"a.pri"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String signaturedData <span class="token operator">=</span> <span class="token function">getSignature</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"sha256withrsa"</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token function">verifySignature</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"sha256withrsa"</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> signaturedData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成签名     *     * @param input      : 原文     * @param algorithm  : 算法     * @param privateKey : 私钥     * @return : 签名     * @throws Exception     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getSignature</span><span class="token punctuation">(</span>String input<span class="token punctuation">,</span> String algorithm<span class="token punctuation">,</span> PrivateKey privateKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取签名对象</span>        Signature signature <span class="token operator">=</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化签名</span>        signature<span class="token punctuation">.</span><span class="token function">initSign</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 传入原文</span>        signature<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始签名</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sign <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对签名数据进行Base64编码</span>        <span class="token keyword">return</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 校验签名     *     * @param input          : 原文     * @param algorithm      : 算法     * @param publicKey      : 公钥     * @param signaturedData : 签名     * @return : 数据是否被篡改     * @throws Exception     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">verifySignature</span><span class="token punctuation">(</span>String input<span class="token punctuation">,</span> String algorithm<span class="token punctuation">,</span> PublicKey publicKey<span class="token punctuation">,</span> String signaturedData<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取签名对象</span>        Signature signature <span class="token operator">=</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化签名</span>        signature<span class="token punctuation">.</span><span class="token function">initVerify</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 传入原文</span>        signature<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 校验数据</span>        <span class="token keyword">return</span> signature<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>signaturedData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Log4j2任意代码执行漏洞修复</title>
      <link href="/2021/12/12/apache-log4j-ren-yi-dai-ma-zhi-xing-lou-dong-xiu-fu/"/>
      <url>/2021/12/12/apache-log4j-ren-yi-dai-ma-zhi-xing-lou-dong-xiu-fu/</url>
      
        <content type="html"><![CDATA[<h2><span id="springboot的apache-log4j2任意代码执行漏洞修复">springboot的Apache Log4j2任意代码执行漏洞修复</span></h2><p>源码地址</p><p><a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2">https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2</a></p><p>编译好的jar下载地址</p><p><a href="https://downloads.apache.org/logging/log4j/2.15.0/">https://downloads.apache.org/logging/log4j/2.15.0/</a></p><p>替换maven仓库的地址 参考如下：</p><p>\repository\org\apache\logging\log4j\log4j-api\2.15.0</p><h3><span id="spring-boot-starter-log4j2修复方式"><strong>spring-boot-starter-log4j2修复方式</strong></span></h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>替换为：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.15.0-rc2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.15.0-rc2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>最后检查一下版本是否已经更换</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/DU2P5L%5DMY~%5BRD_%7D_7RRA082.png" alt="img"></p><h2><span id="漏洞详情">漏洞详情</span></h2><p>2021年11月24日，阿里云安全团队向Apache官方报告了Apache Log4j2远程代码执行漏洞。2021年12月10日，阿里云安全团队发现 Apache Log4j 2.15.0-rc1 版本存在漏洞绕过，请及时更新至 Apache Log4j 2.15.0-rc2 版本。</p><h3><span id="漏洞描述">漏洞描述</span></h3><p>Apache Log4j2是一款优秀的Java日志框架。2021年11月24日，阿里云安全团队向Apache官方报告了Apache Log4j2远程代码执行漏洞。由于Apache Log4j2某些功能存在递归解析功能，攻击者可直接构造恶意请求，触发远程代码执行漏洞。漏洞利用无需特殊配置，经阿里云安全团队验证，Apache Struts2、Apache Solr、Apache Druid、Apache Flink等均受影响。2021年12月10日，阿里云安全团队发现 Apache Log4j 2.15.0-rc1 版本存在漏洞绕过，请及时更新至 Apache Log4j 2.15.0-rc2 版本。阿里云应急响应中心提醒 Apache Log4j2 用户尽快采取安全措施阻止漏洞攻击。</p><h3><span id="漏洞评级">漏洞评级</span></h3><p>Apache Log4j 远程代码执行漏洞 严重</p><h3><span id="影响版本">影响版本</span></h3><p>经验证 2.15.0-rc1 版本存在绕过，实际受影响范围如下：</p><p>Apache Log4j 2.x &lt; 2.15.0-rc2</p><h3><span id="安全建议">安全建议</span></h3><p>1、排查应用是否引入了Apache log4j-core Jar包，若存在依赖引入，且在受影响版本范围内，则可能存在漏洞影响。请尽快升级Apache Log4j2所有相关应用到最新的 log4j-2.15.0-rc2 版本，地址 <a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2">https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2</a></p><p>2、升级已知受影响的应用及组件，如 spring-boot-starter-log4j2/Apache Struts2/Apache Solr/Apache Druid/Apache Flink</p><p>3、可升级jdk版本至6u211 / 7u201 / 8u191 / 11.0.1以上，可以在一定程度上限制JNDI等漏洞利用方式。</p><h3><span id="log4j2-发新版本2160-完全删除message-lookups的支持加固漏洞防御">Log4j2 发新版本2.16.0 完全删除Message Lookups的支持，加固漏洞防御</span></h3><p>2.16.0 更新内容<br>默认禁用JNDI的访问，用户需要通过配置log4j2.enableJndi参数开启<br>默认允许协议限制为：java、ldap、ldaps，并将ldap协议限制为仅可访问Java原始对象<br>Message Lookups被完全移除，加固漏洞的防御<br>java项目 fhadmin.cn<br>更多细节，可以通过官网查看：logging.apache.org/log4j/2.x/</p><h3><span id="spring-boot用户如何升级">Spring Boot用户如何升级</span></h3><p>可以通过下图了解具体如何修改：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_work/59a77bd3894f7d78c54fd7b40a45ffa4.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梓妤周岁照</title>
      <link href="/2021/12/11/zi-yu-zhou-sui-zhao/"/>
      <url>/2021/12/11/zi-yu-zhou-sui-zhao/</url>
      
        <content type="html"><![CDATA[<p>不知不觉梓妤已经一岁了，已经会走了，不过还是那么爱哭。需要不断喂好吃的才勉强拍完。</p><p>孩子是长大了，不过也不是很好沟通。大人说的话，她还不能完全理解。简简单单的交流还是可以，不过总体来讲还算顺利，毕竟2个小时就拍完了，很多周岁的小朋友都不是一次可以拍完的。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211213744523.png" alt="image-20211211213744523"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211213836932.png" alt="image-20211211213836932"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211214025819.png" alt="image-20211211214025819"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211214103716.png" alt="image-20211211214103716"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211214255157.png" alt="image-20211211214255157"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211214347554.png" alt="image-20211211214347554"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211214427115.png" alt="image-20211211214427115"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211214515754.png" alt="image-20211211214515754"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211214548141.png" alt="image-20211211214548141"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211214624668.png" alt="image-20211211214624668"></p>]]></content>
      
      
      <categories>
          
          <category> 宝贝 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贯日 </tag>
            
            <tag> 周岁照 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梓妤百天照</title>
      <link href="/2021/12/11/zi-yu-bai-tian-zhao/"/>
      <url>/2021/12/11/zi-yu-bai-tian-zhao/</url>
      
        <content type="html"><![CDATA[<p>整理了几篇之前学习的笔记，该给我姑娘整理一下。</p><p>梓妤刚开始还是很配合的，后来可能是困了，也可能是饿了，开始不配合。拍照的老师下午有外景，没有一直拍到最后。换了另外一个摄影老师，勉强拍完。连拍照带选片，姑娘和我们在影楼呆了一天，也算比较乖了。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211211115085.png" alt="image-20211211211115085"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211211406997.png" alt="image-20211211211406997"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211211504973.png" alt="image-20211211211504973"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211211739420.png" alt="image-20211211211739420"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211211550756.png" alt="image-20211211211550756"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211211628693.png" alt="image-20211211211628693"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211211828982.png" alt="image-20211211211828982"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211211922211.png" alt="image-20211211211922211"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211212006757.png" alt="image-20211211212006757"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_baby/image-20211211212104106.png" alt="image-20211211212104106"></p>]]></content>
      
      
      <categories>
          
          <category> 宝贝 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贯日 </tag>
            
            <tag> 百天照 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seata学习笔记</title>
      <link href="/2021/12/09/a-li-fen-bu-shi-shi-wu-kuang-jia-seata/"/>
      <url>/2021/12/09/a-li-fen-bu-shi-shi-wu-kuang-jia-seata/</url>
      
        <content type="html"><![CDATA[<p>阿里分布式事务框架Seata</p><h2><span id="1-阿里分布式事务框架-seata-简介"><strong>1</strong> <strong>阿里分布式事务框架</strong> <strong>Seata</strong> <strong>简介</strong></span></h2><p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将</p><p>为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p><p>中文官方站点：<a href="https://seata.io/zh-cn/">https://seata.io/zh-cn/</a></p><p>seata github开源地址：<a href="https://github.com/seata">https://github.com/seata</a></p><h2><span id="2-分布式事务简介"><strong>2</strong> <strong>分布式事务简介</strong></span></h2><h3><span id="21-本地事务"><strong>2.1</strong> <strong>本地事务</strong></span></h3><p>在计算机系统中，更多的是通过关系型数据库来控制事务，这是利用数据库本身的事务特性来实现的，因此叫数据库事务，由于应用主要靠关系数据库来控制事务，而数据库通常和应用在同一个服务器，所以基于关系型数据库的事务又被称为本地事务。</p><p>数据库事务的四大特性：ACID</p><p><strong>A</strong> <strong>（</strong> <strong>Atomic</strong> <strong>）</strong>：原子性，构成事务的所有操作，要么都执行完成，要么全部不执行，不可能出现部分成功部分失败的情况。</p><p><strong>C</strong> <strong>（</strong> <strong>Consistency</strong> <strong>）</strong>：一致性，在事务执行前后，数据库的一致性约束没有被破坏。比如：张三向李四转100 元，转账前和转账后的数据是正确状态这叫一致性，如果出现张三转出 100 元，李四账户没有增加100 元这就出现了数 据错误，就没有达到一致性。</p><p><strong>I</strong> <strong>（</strong> <strong>Isolation</strong> <strong>）</strong>：隔离性，数据库中的事务一般都是并发的，隔离性是指并发的两个事务的执行互不干扰，一个事务不能看到其他事务的运行过程的中间状态。通过配置事务隔离级别可以比避免脏读、重复读问题。</p><p><strong>D</strong> <strong>（</strong> <strong>Durability</strong> <strong>）</strong>：持久性，事务完成之后，该事务对数据的更改会持久到数据库，且不会被回滚。数据库事务在实现时会将一次事务的所有操作全部纳入到一个不可分割的执行单元，该执行单元的所有操作要么都成功，要么都失败，只要其中任一操作执行失败，都将导致整个事务的回滚。</p><h3><span id="22-分布式事务"><strong>2.2</strong> <strong>分布式事务</strong></span></h3><p>随着互联网的快速发展，软件系统由原来的单体应用转变为分布式应用分布式系统会把一个应用系统拆分为可独立部署的多个服务，因此需要服务与服务之间远程协作才能完成事务操作，这种分布式系统环境下由不同的服务之间通过网络远程协作完成事务称之为<strong>分布式事务</strong>，例如用户注册送积分事务、创建订单减库存事务，银行转账事务等都是分布式事务。</p><h2><span id="3-springcloud-alibaba-分布式基础案例搭建"><strong>3 SpringCloud Alibaba</strong> <strong>分布式基础案例搭建</strong></span></h2><p>我们模拟一个简单下单业务，客户端调用rest对外服务，rest服务再调用订单服务实现创建订单和账户服</p><p>务实现账户扣钱操作，最终来完整下单业务；</p><h3><span id="31-案例架构设计"><strong>3.1</strong> <strong>案例架构设计</strong></span></h3><p>所有服务都注册到nacos中，方便feign远程调用；订单服务，账户服务各自有独立数据库；架构设计如</p><p>下图：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209213748972.png" alt="image-20211209213748972"></p><p>整体项目结构如下图：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209213935577.png" alt="image-20211209213935577"></p><p>seatatest 是父项目，主要是做一些依赖管理，依赖版本管理，管理所有子module项目；</p><p>seata-common 子项目，主要是引入其他子项目需要的公共依赖，以及公共实体，工具类，配置类的统一封装；</p><p>seata-order 子项目，主要提供订单服务，生成订单；</p><p>seata-account 子项目，主要提供账户服务，根据订单扣钱操作；</p><p>seata-web 子项目，主要处理客户端下单请求，feign远程调用order，和account服务接口，最终完成下单处理；</p><h3><span id="32-数据库设计"><strong>3.2</strong> <strong>数据库设计</strong></span></h3><p>我们新建两个数据库，分别是 db_order （订单数据库）， db_account （账户数据库），db_order 数据库里面新建表 t_order 订单表：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_order<span class="token punctuation">`</span> <span class="token punctuation">(</span>     <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>     <span class="token punctuation">`</span>orderNo<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token punctuation">`</span>userId<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token punctuation">`</span>count<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token punctuation">`</span>amount<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token punctuation">`</span>remark<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">21</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 </code></pre><p>db_account 数据库里面新建表 t_account 用户账户表：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_account<span class="token punctuation">`</span> <span class="token punctuation">(</span>     <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>     <span class="token punctuation">`</span>userId<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token punctuation">`</span>balance<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token punctuation">`</span>remark<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 </code></pre><p>插入数据：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>t_account<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>userId<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>balance<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>remark<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2000'</span><span class="token punctuation">,</span><span class="token string">'jack的账户'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>t_account<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>userId<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>balance<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>remark<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'1000'</span><span class="token punctuation">,</span><span class="token string">'marry的账户'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3><span id="33-seatatest父项目搭建"><strong>3.3 seatatest****父项目搭建</strong></span></h3><p>seatatest是父项目，主要是做一些依赖管理，依赖版本管理，管理所有子module项目；注意，它的 packaging 类型是 pom</p><p>pom.xml： </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0                              http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.java1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seatatest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>seata-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>seata-order<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>seata-account<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>seata-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Hoxton.SR8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springboot.version</span><span class="token punctuation">></span></span>2.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springboot.version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springcloudalibaba.version</span><span class="token punctuation">></span></span>2.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springcloudalibaba.version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fastjson.version</span><span class="token punctuation">></span></span>1.2.35<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fastjson.version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-lang3.version</span><span class="token punctuation">></span></span>3.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-lang3.version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>seata-common.version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>seata-common.version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.version</span><span class="token punctuation">></span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${springcloudalibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!-- 连接池 --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${fastjson.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${commons-lang3.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.java1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${seata-common.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span> </code></pre><h3><span id="34-seata-common-子项目搭建"><strong>3.4 seata-common</strong> <strong>子项目搭建</strong></span></h3><p>seata-common 子项目，主要是引入其他子项目需要的公共依赖，以及公共实体，工具类，配置类的统一封装；</p><p>项目结构：</p><p>pom.xml： </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0                              http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seatatest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.java1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-                 discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- spring boot redis 缓存引入 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- lettuce pool 缓存连接池 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>订单实体 Order ： </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>entity<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**订单表实体 * @author java1234_小锋 * @site www.java1234.com * @company 南通小锋网络科技有限公司 * @create 2021-07-13 10:26 */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 编号 </span>    <span class="token keyword">private</span> String orderNo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 订单号 </span>    <span class="token keyword">private</span> Integer userId<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用户编号private Integer count; // 购买数量 </span>    <span class="token keyword">private</span> Integer amount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 购买金额 </span>    <span class="token keyword">private</span> String remark<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 备注 </span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> id<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> orderNo<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderNo</span><span class="token punctuation">(</span>String orderNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>orderNo <span class="token operator">=</span> orderNo<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> userId<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserId</span><span class="token punctuation">(</span>Integer userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> count<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCount</span><span class="token punctuation">(</span>Integer count<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> amount<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAmount</span><span class="token punctuation">(</span>Integer amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">=</span> amount<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> remark<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRemark</span><span class="token punctuation">(</span>String remark<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>remark <span class="token operator">=</span> remark<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>账户实体 Account ：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>entity<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** 用户账户表 * @author java1234_小锋 * @site www.java1234.com * @company 南通小锋网络科技有限公司 * @create 2021-07-13 10:36 */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 编号 </span>    <span class="token keyword">private</span> Integer userId<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用户编号 </span>    <span class="token keyword">private</span> Integer balance<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 账户余额 </span>    <span class="token keyword">private</span> String remark<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 备注 </span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> id<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> userId<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserId</span><span class="token punctuation">(</span>Integer userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> balance<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span>Integer balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> remark<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRemark</span><span class="token punctuation">(</span>String remark<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>remark <span class="token operator">=</span> remark<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3><span id="35-seata-order-子项目搭建"><strong>3.5 seata-order</strong> <strong>子项目搭建</strong></span></h3><p>seata-order 子项目，主要提供订单服务，生成订单；</p><p>项目结构：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209215142094.png" alt="image-20211209215142094"></p><p>pom.xml ：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0                              http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seatatest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.java1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-order<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.java1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>application.yml ：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>     <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081 </span>    <span class="token key atrule">servlet</span><span class="token punctuation">:</span>         <span class="token key atrule">context-path</span><span class="token punctuation">:</span> / <span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">datasource</span><span class="token punctuation">:</span>         <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource         <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver         <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db_order<span class="token punctuation">?</span>serverTimezone=Asia/Shanghai         <span class="token key atrule">username</span><span class="token punctuation">:</span> root         <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456 </span>    <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">nacos</span><span class="token punctuation">:</span>             <span class="token key atrule">discovery</span><span class="token punctuation">:</span>                 <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848 </span>    <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>order <span class="token key atrule">mybatis</span><span class="token punctuation">:</span>     <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml</code></pre><p>启动类 OrderApplication ： </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MapperScan<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>EnableDiscoveryClient<span class="token punctuation">;</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.java1234.mapper"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OrderApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>OrderMapper.xml ：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span> <span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.java1234.mapper.OrderMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createOrder<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.java1234.entity.Order<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>         insert into t_order values(null,#{orderNo},#{userId},#{count},#{amount},#         {remark})     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span> </code></pre><p>OrderMapper 接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Order<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** @author java1234_小锋 * @site www.java1234.com * @company 南通小锋网络科技有限公司 * @create 2021-07-13 10:43 */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderMapper</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**    * 创建订单     * @param order     */</span>     <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><p>OrderService 接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>service<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Order<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** 订单service接口 * @author java1234_小锋 * @site www.java1234.com * @company 南通小锋网络科技有限公司 * @create 2021-07-14 11:00 */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/*** 创建订单 * @param order */</span>     <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><p>OrderServiceImpl 实现类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Order<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>OrderMapper<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>service<span class="token punctuation">.</span>OrderService<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** @author java1234_小锋 * @site www.java1234.com * @company 南通小锋网络科技有限公司 * @create 2021-07-14 11:02 */</span> <span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"orderService"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>     <span class="token keyword">private</span> OrderMapper orderMapper<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>         orderMapper<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>OrderController ： </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>controller<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Order<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>service<span class="token punctuation">.</span>OrderService<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestBody<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** @author java1234_小锋 * @site www.java1234.com * @company 南通小锋网络科技有限公司* @create 2021-07-14 11:13 */</span> <span class="token annotation punctuation">@RestController</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/seata"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>     <span class="token keyword">private</span> OrderService orderService<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*** 创建订单 * @param order * @return */</span>     <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/createOrder"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Order order<span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order:"</span><span class="token operator">+</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>         order<span class="token punctuation">.</span><span class="token function">setOrderNo</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 生成订单ID </span>        orderService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3><span id="36-seata-account-子项目搭建"><strong>3.6 seata-account</strong> <strong>子项目搭建</strong></span></h3><p>seata-account 子项目，主要提供账户服务，根据订单扣钱操作；</p><p>项目结构：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209220358208.png" alt="image-20211209220358208"></p><p>pom.xml ：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0                              http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seatatest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.java1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-account<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.java1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span> </code></pre><p>application.yml ： </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>     <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082 </span>    <span class="token key atrule">servlet</span><span class="token punctuation">:</span>         <span class="token key atrule">context-path</span><span class="token punctuation">:</span> / <span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">datasource</span><span class="token punctuation">:</span>         <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource         <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver         <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db_account<span class="token punctuation">?</span>serverTimezone=Asia/Shanghai         <span class="token key atrule">username</span><span class="token punctuation">:</span> root         <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456 </span>    <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">nacos</span><span class="token punctuation">:</span>         <span class="token key atrule">discovery</span><span class="token punctuation">:</span>             <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848 </span>    <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>account <span class="token key atrule">mybatis</span><span class="token punctuation">:</span>     <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml</code></pre><p>AccountApplication 启动类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MapperScan<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>EnableDiscoveryClient<span class="token punctuation">;</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.java1234.mapper"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>AccountApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>AccountMapper.xml ： </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span> <span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.java1234.mapper.AccountMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>decrease<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Map<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>         UPDATE t_account SET balance=balance-#{amount} WHERE userId=#{userId}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span> </code></pre><p>AccountMapper 接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** 账户Mapper接口 * @author java1234_小锋 * @site www.java1234.com * @company 南通小锋网络科技有限公司 * @create 2021-07-13 10:43 */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountMapper</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/*** 账户扣钱 */</span>     <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>AccountService 接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>service<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** 账户service接口 * @author java1234_小锋 * @site www.java1234.com * @company 南通小锋网络科技有限公司 * @create 2021-07-15 12:58 */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/*** 账户扣钱 */</span>     <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><p>AccountServiceImpl 接口实现类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>AccountMapper<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>service<span class="token punctuation">.</span>AccountService<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** 账户Service实现类 * @author java1234_小锋 * @site www.java1234.com * @company 南通小锋网络科技有限公司 * @create 2021-07-15 13:00 */</span> <span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>     <span class="token keyword">private</span> AccountMapper accountMapper<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span> <span class="token punctuation">{</span>         accountMapper<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>AccountController ： </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>controller<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>service<span class="token punctuation">.</span>AccountService<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestParam<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** 账户Controller * @author java1234_小锋 * @site www.java1234.com * @company 南通小锋网络科技有限公司 * @create 2021-07-15 13:06 */</span> <span class="token annotation punctuation">@RestController</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>     <span class="token keyword">private</span> AccountService accountService<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*** 给指定用户账户扣钱 * @param amount * @param userId * @return */</span>     <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/decrease"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"amount"</span><span class="token punctuation">)</span>Integer amount<span class="token punctuation">,</span>                             <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span>Integer userId<span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"amount:"</span><span class="token operator">+</span>amount<span class="token operator">+</span><span class="token string">",userId:"</span><span class="token operator">+</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>         Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"amount"</span><span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>         map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>         accountService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3><span id="37-seata-web-子项目搭建"><strong>3.7 seata-web</strong> <strong>子项目搭建</strong></span></h3><p>seata-web 子项目，主要处理客户端下单请求，feign远程调用order，和account服务接口，最终完成下单处理；</p><p>项目结构：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209222310092.png" alt="image-20211209222310092"></p><p>pom.xml ：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0                              http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seatatest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.java1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.java1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span> </code></pre><p>application.yml ： </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>     <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80 </span>    <span class="token key atrule">servlet</span><span class="token punctuation">:</span>         <span class="token key atrule">context-path</span><span class="token punctuation">:</span> / <span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">nacos</span><span class="token punctuation">:</span>             <span class="token key atrule">discovery</span><span class="token punctuation">:</span>                 <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848 </span>    <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>web </code></pre><p>WebApplication ： </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>DataSourceAutoConfiguration<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>EnableDiscoveryClient<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>EnableFeignClients<span class="token punctuation">;</span> <span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude<span class="token operator">=</span> <span class="token punctuation">{</span>DataSourceAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.java1234.feign"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>WebApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>OrderFeignService ：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>feign<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Order<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClient<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestBody<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**\* 订单接口feign远程调用 \* @author java1234_小锋 \* @site www.java1234.com \* @company 南通小锋网络科技有限公司 \* @create 2021-07-16 10:55 */</span> <span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"seata-order"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderFeignService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**\* 创建订单 \* @param order \* @return */</span>     <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/seata/createOrder"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Order order<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><p>AccountFeignService ：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>feign<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClient<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestParam<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**\* 账号接口feign远程调用 \* @author java1234_小锋 \* @site www.java1234.com \* @company 南通小锋网络科技有限公司 \* @create 2021-07-16 10:55 */</span> <span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"seata-account"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountFeignService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**\* 账号扣钱 \* @param amount \* @param userId \* @return */</span>     <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/account/decrease"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"amount"</span><span class="token punctuation">)</span>Integer amount<span class="token punctuation">,</span>                             <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span>Integer userId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><p>WebController ： </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Order<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>AccountFeignService<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>OrderFeignService<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**\* web-rest接口 \* @author java1234_小锋 \* @site www.java1234.com \* @company 南通小锋网络科技有限公司 \* @create 2021-07-15 16:32 */</span> <span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>     <span class="token keyword">private</span> OrderFeignService orderFeignService<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Autowired</span>     <span class="token keyword">private</span> AccountFeignService accountFeignService<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**\* 下单 1，创建订单 2，账户扣钱 \* @param order \* @return */</span>     <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/shopping"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shopping</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">{</span>         orderFeignService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建订单 </span>        accountFeignService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 账户扣钱 </span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3><span id="38-postman-测试"><strong>3.8 postman</strong> <strong>测试</strong></span></h3><p>首先启动Nacos服务注册中心：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209223017535.png" alt="image-20211209223017535"></p><p>项目启动：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209223111528.png" alt="image-20211209223111528"></p><p>Nacos控制台：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209223140529.png" alt="image-20211209223140529"></p><p>服务注册成功！</p><p>测试接口：<a href="http://localhost/shopping">http://localhost/shopping</a></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209223219103.png" alt="image-20211209223219103"></p><p>接口测试OK：</p><p>订单表生成订单：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209223242622.png" alt="image-20211209223242622"></p><p>账户表id=1的jack账户成功扣减180元；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209223307587.png" alt="image-20211209223307587"></p><p><strong>4</strong> <strong>分布式事务问题模拟</strong></p><p>当多个服务调用过程中，其中一个或者多个服务执行失败，出现异常情况的时候，导致数据不一致性，这样就出现了分布式事务问题；</p><p>我们来模拟下这个问题，我们运行过程中，让账户扣钱操作执行失败；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209223435150.png" alt="image-20211209223435150"></p><p>我们修改 seata-account 里面 AccountController 类的 decrease 方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**\* 给指定用户账户扣钱 \* @param amount \* @param userId \* @return */</span> <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/decrease"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"amount"</span><span class="token punctuation">)</span>Integer amount<span class="token punctuation">,</span>                         <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span>Integer userId<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"amount:"</span><span class="token operator">+</span>amount<span class="token operator">+</span><span class="token string">",userId:"</span><span class="token operator">+</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>userId<span class="token operator">==</span>null <span class="token operator">||</span> userId<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"模拟异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"amount"</span><span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>     accountService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>当userId=1的时候，模拟抛出异常，下面的就不执行；</p><p>数据库数据先恢复原来的，postman再测试：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209224001023.png" alt="image-20211209224001023"></p><p>出现 500异常；</p><p>这时候我们去查看数据库发现，t_order表有数据，订单已经生成了；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209224037551.png" alt="image-20211209224037551"></p><p>再看t_account表，数据没变化：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209224118557.png" alt="image-20211209224118557"></p><p>这样的话，就导致了业务上的数据不一致性问题，也就是分布式事务问题，我们需要解决这个问题；</p><h2><span id="4-分布式事务问题模拟">4 分布式事务问题模拟</span></h2><p>当多个服务调用过程中，其中一个或者多个服务执行失败，出现异常情况的时候，导致数据不一致性，这样就出现了分布式事务问题；<br>我们来模拟下这个问题，我们运行过程中，让账户扣钱操作执行失败；  </p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211152123191.png" alt="image-20211211152123191"></p><p>我们修改 seata-account 里面 AccountController 类的 decrease 方法：  </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 给指定用户账户扣钱* @param amount* @param userId* @return*/</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/decrease"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"amount"</span><span class="token punctuation">)</span>Integer amount<span class="token punctuation">,</span>                        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span>Integer userId<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"amount:"</span><span class="token operator">+</span>amount<span class="token operator">+</span><span class="token string">",userId:"</span><span class="token operator">+</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>userId<span class="token operator">==</span>null <span class="token operator">||</span> userId<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"模拟异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"amount"</span><span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    accountService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  </code></pre><p>当userId=1的时候，模拟抛出异常，下面的就不执行；<br>数据库数据先恢复原来的，postman再测试：  </p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211152348519.png" alt="image-20211211152348519"></p><p>出现 500异常；<br>这时候我们去查看数据库发现，t_order表有数据，订单已经生成了；  </p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211152418225.png" alt="image-20211211152418225"></p><p>再看t_account表，数据没变化：  </p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211152529074.png" alt="image-20211211152529074"></p><p> 这样的话，就导致了业务上的数据不一致性问题，也就是分布式事务问题，我们需要解决这个问题；  </p><h2><span id="5-分布式事务常见解决方案">5 分布式事务常见解决方案</span></h2><h3><span id="51-cap理论">5.1 CAP理论</span></h3><p>CAP理论：一个分布式系统不可能同时满足一致性，可用性和分区容错性这个三个基本需求，最多只能同时满足其中两项</p><ul><li>一致性(C)：数据在多个副本之间是否能够保持一致的特性。</li><li>可用性(A)：是指系统提供的服务必须一致处于可用状态，对于每一个用户的请求总是在有限的时间内返回结果，超过时间就认为系统是不可用的</li><li>分区容错性(P)：分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务，除非整个网络环境都发生故障。  </li></ul><h3><span id="52-cap定理的应用">5.2 CAP定理的应用</span></h3><p>放弃P(CA)：如果希望能够避免系统出现分区容错性问题，一种较为简单的做法就是将所有的数据(或者是与事物先相关的数据)都放在一个分布式节点上，这样虽然无法保证100%系统不会出错，但至少不会碰到由于网络分区带来的负面影响</p><p>放弃A(CP):其做法是一旦系统遇到网络分区或其他故障时，那受到影响的服务需要等待一定的时间，应用等待期间系统无法对外提供正常的服务，即不可用</p><p>放弃C(AP):这里说的放弃一致性，并不是完全不需要数据一致性，是指放弃数据的强一致性，保留数据的最终一致性。  </p><h3><span id="53-base理论">5.3 BASE理论</span></h3><p>BASE是基本可用，软状态，最终一致性。是对CAP中一致性和可用性权限的结果，是基于CAP定理演化而来的，核心思想是即使无法做到强一致性，但每个应用都可以根据自身的业务特定，采用适当的方式来使系统达到最终一致性  </p><h3><span id="54-2pc提交">5.4 2PC提交</span></h3><p>二阶段提交协议是将事务的提交过程分成提交事务请求和执行事务提交两个阶段进行处理。<br>阶段一：提交事务请求</p><ol><li>事务询问：协调者向所有的参与者发送事务内容，询问是否可以执行事务提交操作，并开始等待各参与者的响应</li><li>执行事务：各参与者节点执行事务操作，并将Undo和Redo信息记入事务日志中</li><li>如果参与者成功执事务操作，就反馈给协调者Yes响应，表示事物可以执行，如果没有成功执行事务，就反馈给协调者No响应，表示事务不可以执行</li><li>二阶段提交一些的阶段一夜被称为投票阶段，即各参与者投票票表明是否可以继续执行接下去的事<br>务提交操作</li></ol><p>阶段二：执行事务提交</p><ol><li>假如协调者从所有的参与者或得反馈都是Yes响应，那么就会执行事务提交。</li><li>发送提交请求：协调者向所有参与者节点发出Commit请求</li><li>事务提交：参与者接受到Commit请求后，会正式执行事务提交操作，并在完成提交之后放弃整个<br>事务执行期间占用的事务资源</li><li>反馈事务提交结果:参与者在完成事物提交之后，向协调者发送ACK消息</li><li>完成事务：协调者接收到所有参与者反馈的ACK消息后，完成事务  </li></ol><p>中断事务</p><ul><li>假如任何一个参与者向协调者反馈了No响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就中断事务。</li><li>发送回滚请求：协调者向所有参与者节点发出Rollback请求</li><li>事务回滚：参与者接收到Rollback请求后，会利用其在阶段一种记录的Undo信息执行事物回滚操作，并在完成回滚之后释放事务执行期间占用的资源。</li><li>反馈事务回滚结果：参与则在完成事务回滚之后，向协调者发送ACK消息</li><li>中断事务：协调者接收到所有参与者反馈的ACk消息后，完成事务中断  </li></ul><p>优缺点</p><ul><li>原理简单，实现方便</li><li>缺点是同步阻塞，单点问题，脑裂，保守  </li></ul><h3><span id="55-3pc提交">5.5 3PC提交</span></h3><ul><li>三阶段提，也叫三阶段提交协议，是二阶段提交（2PC）的改进版本。</li><li>与两阶段提交不同的是，三阶段提交有两个改动点。引入超时机制。同时在协调者和参与者中都引入超时机制。在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的。</li><li>三阶段提交就有CanCommit、PreCommit、DoCommit三个阶段  </li></ul><h3><span id="56-tcc分布式事务">5.6 TCC分布式事务</span></h3><ul><li>TCC是服务化的两阶段编程模型，其Try、Confirm、Cancel，3个方法均由业务编码实现</li><li>TCC要求每个分支事务实现三个操作：预处理Try,确认Confirm,撤销Cancel。</li><li>Try操作做业务检查及资源预留,</li><li>Confirm做业务确认操作</li><li>Cancel实现一个与Try相反的操作即回滚操作。</li><li>TM首先发起所有的分支事务Try操作，任何一个分支事务的Try操作执行失败，TM将会发起所有分支事务的Cancel操作，若Try操作全部成功，TM将会发起所有分支事务的Confirm操作,其中Confirm/Cancel操作若执行失败,TM会进行重试。  </li></ul><p>TCC的三个阶段</p><ul><li>Try阶段是做业务检查(一致性)及资源预留(隔离),此阶段仅是一个初步操作，它和后续的Confirmy一起才能构成一个完整的业务逻辑</li><li>Confirm阶段是做确认提交，Try阶段所有分支事务执行成功后开始执行Confirm，通常情况下，采用TCC则认为Confirm阶段是不会出错的,即：只要Try成功，Confirm一定成功，若Confirm阶段真的出错，需要引入重试机制或人工处理</li><li>Cancel阶段是在业务执行错误需要回滚到状态下执行分支事务的取消，预留资源的释放，通常情况下，采用TCC则认为Cancel阶段也一定是真功的,若Cance阶段真的出错，需要引入重试机制或人工处理</li><li>TM事务管理器：TM事务管理器可以实现为独立的服务，也可以让全局事务发起方充当TM的角色,TM独立出来是为了公用组件，是为了考虑系统结构和软件的复用</li><li>TM在发起全局事务时生成全局事务记录，全局事务ID贯穿整个分布式事务调用链条，用来记录事务上下文，追踪和记录状态，用于Confirm和cacel失败需要进行重试,因此需要实现幂等  </li></ul><p>TCC的三种异常处理情况</p><p>幂等处理</p><ul><li>因为网络抖动等原因，分布式事务框架可能会重复调用同一个分布式事务中的一个分支事务的二阶段接口。所以分支事务的二阶段接口Confirm/Cancel需要能够保证幂等性。如果二阶段接口不能保证幂等性，则会产生严重的问题，造成资源的重复使用或者重复释放，进而导致业务故障。</li><li>对于幂等类型的问题，通常的手段是引入幂等字段进行防重放攻击。对于分布式事务框架中的幂等问题，同样可以祭出这一利器。</li><li>幂等记录的插入时机是参与者的Try方法，此时的分支事务状态会被初始化为INIT。然后当二阶段的Confirm/Cancel执行时会将其状态置为CONFIRMED/ROLLBACKED。</li><li>当TC重复调用二阶段接口时，参与者会先获取事务状态控制表的对应记录查看其事务状态。如果状态已经为CONFIRMED/ROLLBACKED，那么表示参与者已经处理完其分内之事，不需要再次执行，可以直接返回幂等成功的结果给TC，帮助其推进分布式事务。  </li></ul><p>空回滚</p><ul><li>当没有调用参与方Try方法的情况下，就调用了二阶段的Cancel方法，Cancel方法需要有办法识别出此时Try有没有执行。如果Try还没执行，表示这个Cancel操作是无效的，即本次Cancel属于空回滚；如果Try已经执行，那么执行的是正常的回滚逻辑。</li><li>要应对空回滚的问题，就需要让参与者在二阶段的Cancel方法中有办法识别到一阶段的Try是否已经执行。很显然，可以继续利用事务状态控制表来实现这个功能。</li><li>当Try方法被成功执行后，会插入一条记录，标识该分支事务处于INIT状态。所以后续当二阶段的Cancel方法被调用时，可以通过查询控制表的对应记录进行判断。如果记录存在且状态为INIT，就表示一阶段已成功执行，可以正常执行回滚操作，释放预留的资源；如果记录不存在则表示一阶段未执行，本次为空回滚，不释放任何资源。  </li></ul><p>资源悬挂</p><ul><li>问题：TC回滚事务调用二阶段完成空回滚后，一阶段执行成功</li><li>解决：事务状态控制记录作为控制手段，二阶段发现无记录时插入记录，一阶段执行时检查记录是否存在  </li></ul><p>TCC和2PC比较</p><ul><li>2PC通常都是在跨库的DB层面，而TCC则在应用层面处理，需要通过业务逻辑实现，这种分布式事务的实现方式优势在于，可以让应用自己定义数据操作的粒度，使得降低锁冲突，提高吞吐量成为可能</li><li>而不足之处则在于对应用的侵入性非常强，业务逻辑的每个分支都需要实现Try，confirm,cancel三<br>个操作。此外，其实现难度也比较大，需要按照网络状态，系统故障的不同失败原因实现不同的回<br>滚策略  </li></ul><h3><span id="57-消息队列实现可靠消息最终一致性">5.7 消息队列实现可靠消息最终一致性</span></h3><ul><li>可靠消息最终一致性就是保证消息从生产方经过消息中间件传递到消费方的一致性</li><li>RocketMQ主要解决了两个功能：本地事务与消息发送的原子性问题。事务参与方接收消息的可靠性</li><li>可靠消息最终一致性事务适合执行周期长且实时性要求不高的场景，引入消息机制后，同步的事务操作变为基于消息执行的异步操作，避免分布式事务中的同步阻塞操作的影响，并实现了两个服务的解耦  </li></ul><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211164336343.png" alt="image-20211211164336343"></p><h3><span id="58-最大努力通知">5.8 最大努力通知</span></h3><p><strong>最大努力通知与可靠消息一致性有什么不同</strong></p><ul><li>可靠消息一致性，发起通知方需要保证将消息发出去，并且将消息发送到接收通知方，消息的可靠性由发起通知方保证</li><li>最大努力通知，发起通知方尽最大的努力将业务处理结果通知为接收通知方，但是消息可能接收不到，此时需要接收通知方主动调用发起通知方的接口查询业务，通知可靠性关键在于接收通知方</li></ul><p><strong>两者的应用场景</strong></p><ul><li>可靠消息一致性关注的是交易过程的事务一致，以异步的方式完成交易</li><li>最大努力通知关注的是交易后的通知事务，即将交易结果可靠的通知出去</li></ul><p><strong>基于MQ的ack机制实现最大努力通知</strong></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211164757834.png" alt="image-20211211164757834"></p><ul><li>利用MQ的ack机制由MQ向接收通知方发送消息通知，发起方将普通消息发送到MQ</li><li>接收通知监听MQ，接收消息，业务处理完成回应ACK</li><li>接收通知方如果没有回应ACK则MQ会重复通知，按照时间间隔的方式，逐步拉大通知间隔</li><li>此方案适用于内部微服务之间的通知，不适应与通知外部平台</li></ul><p>方案二：增加一个通知服务区进行通知，提供外部第三方时适用</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211164907402.png" alt="image-20211211164907402"></p><h3><span id="59-分布式事务方案对比分析">5.9 分布式事务方案对比分析</span></h3><ul><li>2PC 最大的一个诟病是一个阻塞协议。RM在执行分支事务后需要等待TM的决定，此时服务会阻塞锁定资源。由于其阻塞机制和最差时间复杂度高，因此，这种设计不能适应随着事务涉及的服务数量增加而扩展的需要，很难用于并发较高以及子事务生命周期较长的分布式服务中</li><li>如果拿TCC事务的处理流程与2PC两阶段提交做比较，2PC通常都是在跨库的DB层面，而TCC则在应用层面处理，需要通过业务逻辑来实现。这种分布式事务的优势在于，可以让应用自定义数据操作的粒度，使得降低锁冲突，提高吞吐量成为可能。而不足之处在于对应用的侵入性非常强，业务逻辑的每个分支都需要实现三个操作。此外，其实现难度也比较大，需要按照网络状态，系统故障等不同失败原因实现不同的策略。</li><li>可靠消息最终一致性事务适合执行周期长且实时性要求不高的场景。引入消息机制后，同步的事务操作变为基于消息执行的异步操作，避免了分布式事务中的同步阻塞操作的影响，并实现了两个服务的解耦，典型的场景：注册送积分，登陆送优惠券等</li><li>最大努力通知是分布式事务中要求最低的一种，适用于一些最终一致性时间敏感度低的业务，允许发起通知方业务处理失败，在接收通知方收到通知后积极进行失败处理，无论发起通知方如何处理结果都不会影响到接收通知方的后续处理，发起通知方需提供查询执行情况接口，用于接收通知方校对结果，典型的应用场景：银行通知，支付结果通知等。</li></ul><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211165047219.png" alt="image-20211211165047219"></p><h2><span id="6-seata原理详解">6 seata原理详解</span></h2><p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p><h3><span id="61-seata术语">6.1 Seata术语</span></h3><p><strong>TC (Transaction Coordinator) - 事务协调者</strong><br>维护全局和分支事务的状态，驱动全局事务提交或回滚。<br><strong>TM (Transaction Manager) - 事务管理器</strong><br>定义全局事务的范围：开始全局事务、提交或回滚全局事务。<br><strong>RM (Resource Manager) - 资源管理器</strong><br>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211165222231.png" alt="image-20211211165222231"></p><p><strong>Seata管理分布式事务的典型生命周期</strong></p><ul><li>TM要求TC开始新的全局事务。 TC生成表示全局事务的XID。</li><li>XID通过微服务的调用链传播。</li><li>RM将本地事务注册为XID到TC的相应全局事务的分支。</li><li>TM要求TC提交或回滚XID的相应全局事务。</li><li>TC在XID的相应全局事务下驱动所有分支事务，以完成分支提交或回滚。</li></ul><p><strong>分布式事务是由一批分支事务组成的全局事务，通常分支事务就是本地事务。</strong></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211165323190.png" alt="image-20211211165323190"></p><h3><span id="62-at-模式">6.2 AT 模式</span></h3><p>前提</p><ul><li>基于支持本地 ACID 事务的关系型数据库。</li><li>Java 应用，通过 JDBC 访问数据库。</li></ul><p>整体机制</p><p>两阶段提交协议的演变：</p><ul><li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li><li>二阶段：<ul><li>提交异步化，非常快速地完成。</li><li>回滚通过一阶段的回滚日志进行反向补偿。</li></ul></li></ul><p>写隔离</p><ul><li>一阶段本地事务提交前，需要确保先拿到 <strong>全局锁</strong> 。</li><li>拿不到 <strong>全局锁</strong> ，不能提交本地事务。</li><li>拿 <strong>全局锁</strong> 的尝试被限制在一定范围内，超出范围将放弃，并回滚本地事务，释放本地锁。</li></ul><p>以一个示例来说明：<br>两个全局事务 tx1 和 tx2，分别对 a 表的 m 字段进行更新操作，m 的初始值 1000。<br>tx1 先开始，开启本地事务，拿到本地锁，更新操作 m = 1000 - 100 = 900。本地事务提交前，先拿到该记录的 全局锁 ，本地提交释放本地锁。 tx2 后开始，开启本地事务，拿到本地锁，更新操作 m = 900-100 = 800。本地事务提交前，尝试拿该记录的 全局锁 ，tx1 全局提交前，该记录的全局锁被 tx1 持有，tx2 需要重试等待 全局锁 </p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211165743142.png" alt="image-20211211165743142"></p><p>tx1 二阶段全局提交，释放 <strong>全局锁</strong> 。tx2 拿到 <strong>全局锁</strong> 提交本地事务。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211165835492.png" alt="image-20211211165835492"></p><p>如果 tx1 的二阶段全局回滚，则 tx1 需要重新获取该数据的本地锁，进行反向补偿的更新操作，实现分支的回滚。<br>此时，如果 tx2 仍在等待该数据的 全局锁，同时持有本地锁，则 tx1 的分支回滚会失败。分支的回滚会一直重试，直到 tx2 的 全局锁 等锁超时，放弃 全局锁 并回滚本地事务释放本地锁，tx1 的分支回滚最终成功。<br>因为整个过程 全局锁 在 tx1 结束前一直是被 tx1 持有的，所以不会发生 脏写 的问题。</p><p><strong>读隔离</strong></p><p>在数据库本地事务隔离级别 读已提交（Read Committed） 或以上的基础上，Seata（AT 模式）的默认全局隔离级别是 读未提交（Read Uncommitted） 。<br>如果应用在特定场景下，必需要求全局的 读已提交 ，目前 Seata 的方式是通过 SELECT FOR UPDATE语句的代理。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211165947913.png" alt="image-20211211165947913"></p><p>SELECT FOR UPDATE 语句的执行会申请 <strong>全局锁</strong> ，如果 <strong>全局锁</strong> 被其他事务持有，则释放本地锁（回滚SELECT FOR UPDATE 语句的本地执行）并重试。这个过程中，查询是被 block 住的，直到 <strong>全局锁</strong> 拿到，即读取的相关数据是 <strong>已提交</strong> 的，才返回。<br>出于总体性能上的考虑，Seata 目前的方案并没有对所有 SELECT 语句都进行代理，仅针对 FOR UPDATE 的 SELECT 语句。</p><p><strong>工作机制</strong></p><p>以一个示例来说明整个 AT 分支的工作过程。<br>业务表： product</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211170140632.png" alt="image-20211211170140632"></p><p>AT 分支事务的业务逻辑：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> product <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'GTS'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'TXC'</span><span class="token punctuation">;</span></code></pre><p>一阶段</p><p>过程：</p><ol><li>解析 SQL：得到 SQL 的类型（UPDATE），表（product），条件（where name = ‘TXC’）等相关的信息。</li><li>查询前镜像：根据解析得到的条件信息，生成查询语句，定位数据。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> since <span class="token keyword">from</span> product <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'TXC'</span><span class="token punctuation">;</span></code></pre><p>得到前镜像：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211170313844.png" alt="image-20211211170313844"></p><ol><li>执行业务 SQL：更新这条记录的 name 为 ‘GTS’。</li><li>查询后镜像：根据前镜像的结果，通过 主键 定位数据。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> since <span class="token keyword">from</span> product <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>得到后镜像：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211170412181.png" alt="image-20211211170412181"></p><p>插入回滚日志：把前后镜像数据以及业务 SQL 相关的信息组成一条回滚日志记录，插入到UNDO_LOG 表中。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"branchId"</span><span class="token operator">:</span> <span class="token number">641789253</span><span class="token punctuation">,</span>    <span class="token property">"undoItems"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        <span class="token property">"afterImage"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"rows"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"GTS"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"since"</span><span class="token punctuation">,</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"2014"</span>                <span class="token punctuation">}</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"tableName"</span><span class="token operator">:</span> <span class="token string">"product"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"beforeImage"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"rows"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"TXC"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"since"</span><span class="token punctuation">,</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"2014"</span>                <span class="token punctuation">}</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"tableName"</span><span class="token operator">:</span> <span class="token string">"product"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sqlType"</span><span class="token operator">:</span> <span class="token string">"UPDATE"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"xid"</span><span class="token operator">:</span> <span class="token string">"xid:xxx"</span><span class="token punctuation">}</span></code></pre><ol><li>提交前，向 TC 注册分支：申请 product 表中，主键值等于 1 的记录的 全局锁 。</li><li>本地事务提交：业务数据的更新和前面步骤中生成的 UNDO LOG 一并提交。</li><li>将本地事务提交的结果上报给 TC。</li></ol><p><strong>二阶段-回滚</strong></p><ol><li><p>收到 TC 的分支回滚请求，开启一个本地事务，执行如下操作。</p></li><li><p>通过 XID 和 Branch ID 查找到相应的 UNDO LOG 记录。</p></li><li><p>数据校验：拿 UNDO LOG 中的后镜与当前数据进行比较，如果有不同，说明数据被当前全局事务之外的动作做了修改。这种情况，需要根据配置策略来做处理，详细的说明在另外的文档中介绍。</p></li><li><p>根据 UNDO LOG 中的前镜像和业务 SQL 的相关信息生成并执行回滚的语句：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> product <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'TXC'</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>提交本地事务。并把本地事务的执行结果（即分支事务回滚的结果）上报给 TC。</p></li></ol><p><strong>二阶段-提交</strong></p><ol><li>收到 TC 的分支提交请求，把请求放入一个异步任务的队列中，马上返回提交成功的结果给 TC。</li><li>异步任务阶段的分支提交请求将异步和批量地删除相应 UNDO LOG 记录。</li></ol><p><strong>附录</strong><br><strong>回滚日志表</strong><br>UNDO_LOG Table：不同数据库在类型上会略有差别。<br>以 MySQL 为例：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211170749499.png" alt="image-20211211170749499"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 注意此处0.7.0+ 增加字段 context</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>undo_log<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>context<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>rollback_info<span class="token punctuation">`</span> <span class="token keyword">longblob</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>log_status<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>log_created<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>log_modified<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>ux_undo_log<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><h3><span id="63-tcc-模式">6.3 TCC 模式</span></h3><p>回顾总览中的描述：一个分布式的全局事务，整体是 两阶段提交 的模型。全局事务是由若干分支事务组<br>成的，分支事务要满足 两阶段提交 的模型要求，即需要每个分支事务都具备自己的：</p><ul><li>一阶段 prepare 行为</li><li>二阶段 commit 或 rollback 行为</li></ul><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211171005541.png" alt="image-20211211171005541"></p><p>根据两阶段行为模式的不同，我们将分支事务划分为 <strong>Automatic (Branch) Transaction Mode</strong> 和<br><strong>Manual (Branch) Transaction Mode.</strong></p><p>AT 模式（参考链接 TBD）基于 支持本地 ACID 事务 的 关系型数据库：</p><ul><li>一阶段 prepare 行为：在本地事务中，一并提交业务数据更新和相应回滚日志记录。</li><li>二阶段 commit 行为：马上成功结束，自动 异步批量清理回滚日志。</li><li>二阶段 rollback 行为：通过回滚日志，自动 生成补偿操作，完成数据回滚。</li></ul><p>相应的，TCC 模式，不依赖于底层数据资源的事务支持：</p><ul><li>一阶段 prepare 行为：调用 自定义 的 prepare 逻辑。</li><li>二阶段 commit 行为：调用 自定义 的 commit 逻辑。</li><li>二阶段 rollback 行为：调用 自定义 的 rollback 逻辑。</li></ul><p>所谓 TCC 模式，是指支持把 自定义 的分支事务纳入到全局事务的管理中。</p><h3><span id="64-saga-模式">6.4 Saga 模式</span></h3><p>Saga模式是SEATA提供的长事务解决方案，在Saga模式中，业务流程中每个参与者都提交本地事务，当出现某一个参与者失败则补偿前面已经成功的参与者，一阶段正向服务和二阶段补偿服务都由业务开发实现。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211171227503.png" alt="image-20211211171227503"></p><p>理论基础：Hector &amp; Kenneth 发表论⽂ Sagas （1987）</p><p>适用场景：</p><ul><li>业务流程长、业务流程多</li><li>参与者包含其它公司或遗留系统服务，无法提供 TCC 模式要求的三个接口</li></ul><p>优势：</p><ul><li>一阶段提交本地事务，无锁，高性能</li><li>事件驱动架构，参与者可异步执行，高吞吐</li><li>补偿服务易于实现</li></ul><p>缺点：</p><ul><li>不保证隔离性（应对方案见用户文档）</li></ul><h2><span id="7-应用seata-at模式方案解决分布式事务问题">7 应用seata AT模式方案解决分布式事务问题</span></h2><p>seata主推的是AT模式强一致性解决方案，所以我们采用这个方案来解决前面案例的分布式问题。</p><h3><span id="71-下载和运行seata-server">7.1 下载和运行seata server</span></h3><p>seata server地址：<a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a><br>最新版本 v1.4.2<br>我们用windows演示，下载seata-server-1.4.2.zip</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211173923075.png" alt="image-20211211173923075"></p><p><strong>seata-server配置文件：</strong><br>seata server所有的配置都在conf文件夹内，该文件夹内有两个文件我们必须要详细介绍下。seata server默认使用file（文件方式）进行存储事务日志、事务运行信息，我们可以通过-m db脚本参数的形式来指定，目前仅支持file、db这两种方式。</p><p><strong>file.conf</strong><br>该文件用于配置存储方式、透传事务信息的NIO等信息，默认对应registry.conf文件内的file方式配置。</p><p><strong>registry.conf</strong><br>seata server核心配置文件，可以通过该文件配置服务注册方式、配置读取方式。<br>注册方式目前支持file 、nacos 、eureka、redis、zk、consul、etcd3、sofa等方式，默认为file，对应<br>读取file.conf内的注册方式信息。<br>读取配置信息的方式支持file、nacos 、apollo、zk、consul、etcd3等方式，默认为file，对应读取<br>file.conf文件内的配置。</p><p>file.conf 我们加一个service 配置：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">service</span> <span class="token attr-value">{</span><span class="token comment" spellcheck="true">    ##vgroup->rgroup 服务分组 集群分组默认为"default"</span><span class="token attr-name">    vgroupMapping.my_test_tx_group</span> <span class="token punctuation">=</span> <span class="token attr-value">"default"</span><span class="token comment" spellcheck="true">    ##only support single node</span><span class="token attr-name">    default.grouplist</span> <span class="token punctuation">=</span> <span class="token attr-value">"127.0.0.1:8091"</span><span class="token comment" spellcheck="true">    ##degrade current not support 服务降级达到多次错误不走seata</span><span class="token attr-name">    enableDegrade</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true">    ##disable</span><span class="token attr-name">    disable</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true">    ##unit ms,s,m,h,d represents milliseconds, seconds, minutes, hours, days,</span><span class="token attr-name">    default</span> <span class="token attr-value">permanent</span><span class="token attr-name">    max.commit.retry.timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">"-1"</span><span class="token attr-name">    max.rollback.retry.timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">"-1"</span>}</code></pre><p>这里事务分组概念，我们最后单独讲，主要是为了集群故障的时候，能快速切换，实现高可用；<br>配置分组映射，集群分组再配置grouplist，暴露server地址，提供给seata-client调用；<br>最后我们运行bin目录下的seata-server.bat启动seata-server：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211174155372.png" alt="image-20211211174155372"></p><p>启动OK，监听端口8091</p><h3><span id="72-每个数据库都建一个undo_log回滚日志表">7.2 每个数据库都建一个undo_log回滚日志表</span></h3><p>根据seata AT模式规范，我们新建undo_log表，db_account和db_order都要建；</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>undo_log<span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>context<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>rollback_info<span class="token punctuation">`</span> <span class="token keyword">longblob</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>log_status<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>log_created<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>log_modified<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>ext<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>ux_undo_log<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8</code></pre><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211174319249.png" alt="image-20211211174319249"></p><h3><span id="73-项目里添加seata-client-maven依赖">7.3 项目里添加seata-client maven依赖</span></h3><p>我们只需要在seata-common公共模块项目里添加seata依赖，其他子模块都有了，方便；</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3><span id="74-项目里配置seata分布式事务">7.4 项目里配置seata分布式事务</span></h3><p>首先是每个项目都要配置seata支持，请求seata-server，根据配置；<br>再通过@GlobalTransactional注解，开启全局分布式事务；</p><p>seata-order子项目 application.yml配置改下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>    <span class="token key atrule">servlet</span><span class="token punctuation">:</span>        <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /<span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db_order<span class="token punctuation">?</span>serverTimezone=Asia/Shanghai        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">cloud</span><span class="token punctuation">:</span>        <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">discovery</span><span class="token punctuation">:</span>                <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">alibaba</span><span class="token punctuation">:</span>            <span class="token key atrule">seata</span><span class="token punctuation">:</span>                <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> my_test_tx_group    <span class="token key atrule">application</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>order<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>    <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml<span class="token key atrule">seata</span><span class="token punctuation">:</span>    <span class="token key atrule">service</span><span class="token punctuation">:</span>        <span class="token key atrule">vgroup-mapping</span><span class="token punctuation">:</span>            <span class="token key atrule">my_test_tx_group</span><span class="token punctuation">:</span> default        <span class="token key atrule">grouplist</span><span class="token punctuation">:</span>            <span class="token key atrule">default</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8091</span>        <span class="token key atrule">enable-degrade</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token key atrule">disable-global-transaction</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><p>主要多了服务分组和集群分组的配置：</p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211174808756.png" alt="image-20211211174808756" style="zoom:150%;"><p>同理，seata-account下的application.yml配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span>    <span class="token key atrule">servlet</span><span class="token punctuation">:</span>        <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /<span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db_account<span class="token punctuation">?</span>serverTimezone=Asia/Shanghai        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">cloud</span><span class="token punctuation">:</span>        <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">discovery</span><span class="token punctuation">:</span>                <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">alibaba</span><span class="token punctuation">:</span>            <span class="token key atrule">seata</span><span class="token punctuation">:</span>                <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> my_test_tx_group    <span class="token key atrule">application</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>account<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>    <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml<span class="token key atrule">seata</span><span class="token punctuation">:</span>    <span class="token key atrule">service</span><span class="token punctuation">:</span>        <span class="token key atrule">vgroup-mapping</span><span class="token punctuation">:</span>            <span class="token key atrule">my_test_tx_group</span><span class="token punctuation">:</span> default        <span class="token key atrule">grouplist</span><span class="token punctuation">:</span>            <span class="token key atrule">default</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8091</span>        <span class="token key atrule">enable-degrade</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token key atrule">disable-global-transaction</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><p>seata-web下的application.yml配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /<span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">cloud</span><span class="token punctuation">:</span>        <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">discovery</span><span class="token punctuation">:</span>                <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">alibaba</span><span class="token punctuation">:</span>            <span class="token key atrule">seata</span><span class="token punctuation">:</span>                <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> my_test_tx_group    <span class="token key atrule">application</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>web<span class="token key atrule">seata</span><span class="token punctuation">:</span>    <span class="token key atrule">service</span><span class="token punctuation">:</span>        <span class="token key atrule">vgroup-mapping</span><span class="token punctuation">:</span>            <span class="token key atrule">my_test_tx_group</span><span class="token punctuation">:</span> default        <span class="token key atrule">grouplist</span><span class="token punctuation">:</span>            <span class="token key atrule">java1234-seata-server</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8091</span>        <span class="token key atrule">enable-degrade</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token key atrule">disable-global-transaction</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><p>seata-web项目-&gt;WebController-&gt;shopping方法，添加@GlobalTransactional注解</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211175400034.png" alt="image-20211211175400034"></p><h3><span id="75-分布式案例测试">7.5 分布式案例测试</span></h3><p>三个子项目一起运行；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211175459069.png" alt="image-20211211175459069"></p><p>两个RM在seata-server注册成功；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211175531060.png" alt="image-20211211175531060"></p><p>seata-web项目的RM，TM注册成功；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211175601564.png" alt="image-20211211175601564"></p><p>seata-order项目的TM注册成功；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211175633662.png" alt="image-20211211175633662"></p><p>seata-account项目的TM注册成功；</p><p>我们用postman 发送 <a href="http://localhost/shopping">http://localhost/shopping</a> post请求</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211175709012.png" alt="image-20211211175709012"></p><p>执行发现，订单表，和日志表都没有数据，说明测试OK；</p><h3><span id="76-setata二阶段提交过程剖析">7.6 setata二阶段提交过程剖析</span></h3><p>因为是执行是一瞬间的，很多小伙伴根本无法感受到内部的二阶段提交过程。</p><ul><li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li><li>二阶段：<ul><li>提交异步化，非常快速地完成。</li><li>回滚通过一阶段的回滚日志进行反向补偿。</li></ul></li></ul><p>所以我们在再seata-account项目里搞个断点，来看下回滚的一个流程；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211175851089.png" alt="image-20211211175851089"></p><p>seata-account项目debug启动；<br>再次postman测试，我们立刻查看db_order数据库表信息（比较难捕获，因为提交事务超时就立刻回滚，看不到信息）<br>订单服务执行完的时候，db_order有数据</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211175931475.png" alt="image-20211211175931475"></p><p>undo_log也有数据</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211175955690.png" alt="image-20211211175955690"></p><p>说明一阶段业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。<br>然后下面，如果提交事务超时或者有接口调用异常，则分支事务立刻根据回滚日志，立刻进行反向补偿，最后回滚日志会被清空；<br>如果接口调用一切正常，日志清空，全局事务提交，完成本次事务操作；</p><h2><span id="8-seata事务日志mysql持久化配置">8 seata事务日志mysql持久化配置</span></h2><p>seata默认事务支持是file文件存储，不怎么好，不方便查看和管理；所以我们一般是db存储；<br>修改conf下的file.conf配置文件</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211191217789.png" alt="image-20211211191217789"></p><p>把mode改成”db”，<br>然后下方mysql配置改成你们对应的配置即可，数据库要自己先建立，比如我这边定义是db_seata<br>还有三个表，global_table，branch_table，lock_table分别是全局事务会话表，分支事务会话表，锁数<br>据表；<br>建表语句获取：<a href="https://gitee.com/dhb414/seata/blob/master/script/server/db/mysql.sql##">https://gitee.com/dhb414/seata/blob/master/script/server/db/mysql.sql##</a></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- -------------------------------- The script used when storeMode is 'db' ------</span><span class="token comment" spellcheck="true">--------------------------</span><span class="token comment" spellcheck="true">-- the table to store GlobalSession data</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>global_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_service_group<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>timeout<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>begin_time<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_gmt_modified_status<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_transaction_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- the table to store BranchSession data</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>branch_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_group_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>branch_type<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">TINYINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>client_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_xid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- the table to store lock data</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>lock_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>row_key<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>table_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>pk<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>row_key<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_branch_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211191400017.png" alt="image-20211211191400017"></p><p>因为都是临时数据，最终提交事务会被清理，我们要看数据的话，还是需要服务代码里打断点，debug<br>进行捕获；<br>下面这个是锋哥捕获到的一个数据；<br><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211191434036.png" alt="image-20211211191434036"></p><h2><span id="9-nacos注册中心和配置中心支持">9 nacos注册中心和配置中心支持</span></h2><p>Seata支持注册服务到Nacos，以及支持Seata所有配置放到Nacos配置中心，在Nacos中统一维护；具体步骤如下：</p><h3><span id="91-项目里添加nacos-client依赖">9.1 项目里添加nacos-client依赖</span></h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3><span id="92-集成nacos注册中心支持">9.2 集成Nacos注册中心支持</span></h3><p>项目里 application.yml 添加注册信息配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">seata</span><span class="token punctuation">:</span>    <span class="token key atrule">registry</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">application</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>server            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>            <span class="token key atrule">group</span> <span class="token punctuation">:</span> <span class="token string">"SEATA_GROUP"</span>            <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token string">""</span>            <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"nacos"</span>            <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"nacos"</span></code></pre><p>seata-server端配置注册中心<br>在 registry.conf 中加入对应配置中心</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">registry</span> <span class="token attr-value">{</span><span class="token attr-name">    type</span> <span class="token punctuation">=</span> <span class="token attr-value">"nacos"</span><span class="token attr-name">    nacos</span> <span class="token attr-value">{</span><span class="token attr-name">        application</span> <span class="token punctuation">=</span> <span class="token attr-value">"seata-server"</span><span class="token attr-name">        serverAddr</span> <span class="token punctuation">=</span> <span class="token attr-value">"127.0.0.1:8848"</span><span class="token attr-name">        group</span> <span class="token punctuation">=</span> <span class="token attr-value">"SEATA_GROUP"</span><span class="token attr-name">        namespace</span> <span class="token punctuation">=</span> <span class="token attr-value">""</span><span class="token attr-name">        cluster</span> <span class="token punctuation">=</span> <span class="token attr-value">"default"</span><span class="token attr-name">        username</span> <span class="token punctuation">=</span> <span class="token attr-value">""</span><span class="token attr-name">        password</span> <span class="token punctuation">=</span> <span class="token attr-value">""</span>    }}</code></pre><h3><span id="93-集成nacos配置中心支持">9.3 集成Nacos配置中心支持</span></h3><p>在 application.yml 中加入对应的配置中心</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">seata</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>            <span class="token key atrule">group</span> <span class="token punctuation">:</span> <span class="token string">"SEATA_GROUP"</span>            <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token string">""</span>            <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"nacos"</span>            <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"nacos"</span></code></pre><p>在 registry.conf 中加入对应配置中心</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">config</span> <span class="token attr-value">{</span><span class="token attr-name">    type</span> <span class="token punctuation">=</span> <span class="token attr-value">"nacos"</span><span class="token attr-name">    nacos</span> <span class="token attr-value">{</span><span class="token attr-name">        serverAddr</span> <span class="token punctuation">=</span> <span class="token attr-value">"127.0.0.1:8848"</span><span class="token attr-name">        group</span> <span class="token punctuation">=</span> <span class="token attr-value">"SEATA_GROUP"</span><span class="token attr-name">        namespace</span> <span class="token punctuation">=</span> <span class="token attr-value">""</span><span class="token attr-name">        username</span> <span class="token punctuation">=</span> <span class="token attr-value">"nacos"</span><span class="token attr-name">        password</span> <span class="token punctuation">=</span> <span class="token attr-value">"nacos"</span>    }}</code></pre><p>因为我们Nacos没有开启认证功能，所有不需要用户名密码，最终配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">seata</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>            <span class="token key atrule">group</span><span class="token punctuation">:</span> SEATA_GROUP            <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token string">""</span>            <span class="token key atrule">registry</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">application</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>server            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>            <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">"SEATA_GROUP"</span>            <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token string">""</span></code></pre><p>作为Nacos配置中心，我们需要把seata的一些配置上传到Nacos，配置比较多，官方给了我们一个<br>config.txt 我们修改后，上传到Nacos。<br>config.txt 下载地址：<a href="https://github.com/seata/seata/blob/develop/script/config-center/config.txt">https://github.com/seata/seata/blob/develop/script/config-center/config.txt</a></p><p>我们做一些修改：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211192453720.png" alt="image-20211211192453720"></p><p>修改好的文件，放seata目录下</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211192528572.png" alt="image-20211211192528572"></p><p>之后运行仓库中提供的nacos脚本,将信息提交到nacos控制台,如果有需要更改,可直接通过控制台更改<br>脚本地址：<a href="https://github.com/seata/seata/blob/develop/script/config-center/nacos/nacos-config.sh">https://github.com/seata/seata/blob/develop/script/config-center/nacos/nacos-config.sh</a><br>我们把 nacos-config.sh 文件放到 conf 目录下</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211192552300.png" alt="image-20211211192552300"></p><p>右击鼠标，选 Git Bash Here</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211192628182.png" alt="image-20211211192628182"></p><p>我们执行命令</p><pre class=" language-shell"><code class="language-shell">sh nacos-config.sh -h localhost -p 8848 -g SEATA_GROUP</code></pre><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211192722665.png" alt="image-20211211192722665"></p><p>完整命令是：</p><pre class=" language-shell"><code class="language-shell">sh nacos-config.sh -h localhost -p 8848 -g SEATA_GROUP -t 0af6e97b-a684-4647-b696-7c6d42aecce7 -u nacos -w nacos</code></pre><p>注：命令解析：-h -p 指定nacos的端口地址；-g 指定配置的分组，注意，是配置的分组；-t 指定命名空间id； -u -w指定nacos的用户名和密码，同样，这里开启了nacos注册和配置认证的才需要指定。</p><p>等执行完：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211192832432.png" alt="image-20211211192832432"></p><p>我们会发现Nacos配置中心就有seata的配置了；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211211192900496.png" alt="image-20211211192900496"></p><p>这样，我们的seata配置就可以在nacos维护了，很方便；</p><h3><span id="94-测试">9.4 测试</span></h3><p>我们要重新启动seata-server，以及重启三个项目，用postman测试，测试OK；</p><h2><span id="10-seata事务分组介绍">10 seata事务分组介绍</span></h2><p><strong>事务分组是什么？</strong><br>事务分组是seata的资源逻辑，类似于服务实例。在file.conf中的my_test_tx_group就是一个事务分组。<br><strong>通过事务分组如何找到后端集群？</strong></p><ol><li><p>首先程序中配置了事务分组（GlobalTransactionScanner 构造方法的txServiceGroup参数）</p></li><li><p>程序会通过用户配置的配置中心去寻找service.vgroupMapping .[事务分组配置项]，取得配置项的值就是TC集群的名称</p></li><li><p>拿到集群名称程序通过一定的前后缀+集群名称去构造服务名，各配置中心的服务名实现不同</p></li><li><p>拿到服务名去相应的注册中心去拉取相应服务名的服务列表，获得后端真实的TC服务列表</p></li></ol><p><strong>为什么这么设计，不直接取服务名？</strong><br>这里多了一层获取事务分组到映射集群的配置。这样设计后，事务分组可以作为资源的逻辑隔离单位，出现某集群故障时可以快速failover，只切换对应分组，可以把故障缩减到服务级别，但前提也是你有足够server集群。</p><h2><span id="11-遇到问题以及解决">11 遇到问题以及解决</span></h2><p>学习Seata课程，锋哥遇到的最大的坑就是 no available service ‘default’ found, please make sure registry config correct报错问题；原因还是配置问题，各种可能都有，也有可能是版本问题；终极解决方案Debug进源码看，一定可以解决；</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Seata </tag>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel学习笔记</title>
      <link href="/2021/12/07/sentinel-fen-bu-shi-xi-tong-de-liu-liang-zu-jian/"/>
      <url>/2021/12/07/sentinel-fen-bu-shi-xi-tong-de-liu-liang-zu-jian/</url>
      
        <content type="html"><![CDATA[<p><strong>Sentinel分布式系统的流量组件</strong></p><h2><span id="1-sentine快速了解"><strong>1 Sentine快速了解</strong></span></h2><h3><span id="11-sentinel介绍"><strong>1.1 Sentinel介绍</strong></span></h3><p>Sentinel是阿里开源的项目，提供了流量控制、熔断降级、系统负载保护等多个维度来保障服务之间的稳定性。</p><p>官网：<a href="https://github.com/alibaba/Sentinel/wiki">https://github.com/alibaba/Sentinel/wiki</a></p><h3><span id="12-sentinel-的历史"><strong>1.2 Sentinel</strong> <strong>的历史</strong></span></h3><p>2012 年，Sentinel 诞生，主要功能为入口流量控制。</p><p>2013-2017 年，Sentinel 在阿里巴巴集团内部迅速发展，成为基础技术模块，覆盖了所有的核心场景。Sentinel 也因此积累了大量的流量归整场景以及生产实践。</p><p>2018 年，Sentinel 开源，并持续演进。</p><p>2019 年，Sentinel 朝着多语言扩展的方向不断探索，推出 C++ 原生版本，同时针对 Service Mesh场景也推出了 Envoy 集群流量控制支持，以解决 Service Mesh 架构下多语言限流的问题。</p><p>2020 年，推出 Sentinel Go 版本，继续朝着云原生方向演进。</p><h3><span id="13-sentinel-具有以下特征"><strong>1.3 Sentinel</strong> <strong>具有以下特征</strong></span></h3><p><strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</p><p><strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</p><p><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 SpringCloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入Sentinel。</p><p><strong>完善的</strong> <strong>SPI</strong> <strong>扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</p><h3><span id="14-sentinel-的主要特性"><strong>1.4 Sentinel</strong> <strong>的主要特性</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207202238154.png" alt="image-20211207202238154"></p><h3><span id="15-sentinel-的开源生态"><strong>1.5 Sentinel</strong> <strong>的开源生态</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207202331794.png" alt="image-20211207202331794"></p><h3><span id="16-sentinel分为两个部分"><strong>1.6 Sentinel分为两个部分</strong></span></h3><p>核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo /Spring Cloud 等框架也有较好的支持。</p><p>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</p><h3><span id="17-sentinel-基本概念"><strong>1.7 Sentinel</strong> <strong>基本概念</strong></span></h3><p><strong>资源</strong></p><p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。</p><p>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p><p><strong>规则</strong></p><p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p><h3><span id="18-sentinel-功能和设计理念"><strong>1.8 Sentinel</strong> <strong>功能和设计理念</strong></span></h3><p><strong>流量控制</strong></p><p><strong>什么是流量控制</strong></p><p>流量控制在网络传输中是一个常用的概念，它用于调整网络包的发送数据。然而，从系统稳定性角度考虑，在处理请求的速度上，也有非常多的讲究。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状，如下图所示：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207202556929.png" alt="image-20211207202556929"></p><p><strong>流量控制设计理念</strong></p><p>流量控制有以下几个角度:</p><ul><li>资源的调用关系，例如资源的调用链路，资源和资源之间的关系；</li><li>运行指标，例如 QPS、线程池、系统负载等；</li><li>控制的效果，例如直接限流、冷启动、排队等。</li></ul><p>Sentinel 的设计理念是让您自由选择控制的角度，并进行灵活组合，从而达到想要的效果。</p><p><strong>熔断降级</strong></p><p><strong>什么是熔断降级</strong></p><p>除了流量控制以外，及时对调用链路中的不稳定因素进行熔断也是 Sentinel 的使命之一。由于调用关系的复杂性，如果调用链路中的某个资源出现了不稳定，可能会导致请求发生堆积，进而导致级联错误。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207202718897.png" alt="image-20211207202718897"></p><p>Sentinel 和 Hystrix 的原则是一致的: 当检测到调用链路中某个资源出现不稳定的表现，例如请求响应时间长或异常比例升高的时候，则对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联故障。</p><p><strong>熔断降级设计理念</strong></p><p>在限制的手段上，Sentinel 和 Hystrix 采取了完全不一样的方法。</p><p>Hystrix 通过 线程池隔离 的方式，来对依赖（在 Sentinel 的概念中对应 资源）进行了隔离。这样做的好处是资源和资源之间做到了最彻底的隔离。缺点是除了增加了线程切换的成本（过多的线程池导致线程数目过多），还需要预先给各个资源做线程池大小的分配。</p><p>Sentinel 对这个问题采取了两种手段:</p><ul><li>通过并发线程数进行限制</li></ul><p>和资源池隔离的方法不同，Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。这样不但没有线程切换的损耗，也不需要您预先分配线程池的大小。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接收请求。</p><ul><li>通过响应时间对资源进行降级</li></ul><p>除了对并发线程数进行控制以外，Sentinel 还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</p><p><strong>系统自适应保护</strong></p><p>Sentinel 同时提供系统维度的自适应保护能力。防止雪崩，是系统防护中重要的一环。当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。</p><p>针对这个情况，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p><h3><span id="19-sentinel-是如何工作的"><strong>1.9 Sentinel</strong> <strong>是如何工作的</strong></span></h3><p>Sentinel 的主要工作机制如下：</p><p>对主流框架提供适配或者显示的 API，来定义需要保护的资源，并提供设施对资源进行实时统计和调用链路分析。</p><p>根据预设的规则，结合对资源的实时统计信息，对流量进行控制。同时，Sentinel 提供开放的接口，方便您定义及改变规则。</p><p>Sentinel 提供实时的监控系统，方便您快速了解目前系统的状态。</p><h2><span id="2-sentinel快速入门"><strong>2 Sentinel快速入门</strong></span></h2><h3><span id="21-sentinel-helloworld实现"><strong>2.1 Sentinel HelloWorld实现</strong></span></h3><p><strong>第一步：创建项目，引入依赖</strong></p><p>为了方便后期sentinel和springcloud以及springcloud alibaba其他组件整合开发讲解，我们这边规范好springboot，springcloud，springcloud alibaba的版本，选用稳定的组合版本；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207204555739.png" alt="image-20211207204555739"></p><p>具体查看：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E</a></p><p>先创建父pom项目 <strong>sentinel-test</strong></p><p>属性，依赖管理以及插件定义；</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Hoxton.SR8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springboot.version</span><span class="token punctuation">></span></span>2.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springboot.version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springcloudalibaba.version</span><span class="token punctuation">></span></span>2.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springcloudalibaba.version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${springcloudalibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>新建module项目 <strong>sentinel-helloworld</strong></p><p>引入web和sentinel依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>application.yml配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>     <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80 </span>    <span class="token key atrule">servlet</span><span class="token punctuation">:</span>         <span class="token key atrule">context-path</span><span class="token punctuation">:</span> <span class="token string">"/"</span></code></pre><p>新建启动类：<strong>SentinelHelloWorldApplication</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** @author java1234_小锋 * @site www.java1234.com* @company Java知识分享网 * @create 2021-05-04 15:18 */</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentinelHelloWorldApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SentinelHelloWorldApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><strong>第二步：定义规则和使用限流规则</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>controller<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>Entry<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>SphU<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span>RuleConstant<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span>flow<span class="token punctuation">.</span>FlowRule<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span>flow<span class="token punctuation">.</span>FlowRuleManager<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span> <span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** @author java1234_小锋 * @site www.java1234.com * @company Java知识分享网 * @create 2021-05-04 14:35 */</span> <span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentinelHelloWorld</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"helloWorld"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> String <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">try</span><span class="token punctuation">(</span>Entry entry<span class="token operator">=</span>SphU<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 使用限流规则 HelloWorld </span>            <span class="token keyword">return</span> <span class="token string">"Sentinel 大爷你好！"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token string">"系统繁忙，请稍后！"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 降级处理 </span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*** 定义限流规则 * PostConstruct 构造方法执行完后执行方法 定义和加载限流规则 */</span>     <span class="token annotation punctuation">@PostConstruct</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initFlowRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>FlowRule<span class="token operator">></span> rules<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义限流规则集合 </span>        FlowRule rule<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FlowRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义限流规则 </span>        rule<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义限流资源 </span>        rule<span class="token punctuation">.</span><span class="token function">setGrade</span><span class="token punctuation">(</span>RuleConstant<span class="token punctuation">.</span>FLOW_GRADE_QPS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义限流规则类型 </span>        rule<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义QPS阈值 每秒最多通过的请求个数 </span>        rules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加规则到集合 </span>        FlowRuleManager<span class="token punctuation">.</span><span class="token function">loadRules</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加载规则集合 </span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><strong>第三步：测试</strong></p><p>浏览器请求：<a href="http://localhost/helloWorld">http://localhost/helloWorld</a></p><p>正常请求：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207205242244.png" alt="image-20211207205242244"></p><p>当访问频率超过QPS阈值2，则sentinel降级返回异常信息；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207205309365.png" alt="image-20211207205309365"></p><p>测试通过；</p><h3><span id="22-sentinel-dashboard控制台搭建"><strong>2.2 Sentinel dashboard控制台搭建</strong></span></h3><p>Sentinel 控制台是流量控制、熔断降级规则统一配置和管理的入口，它为用户提供了机器自发现、簇点链路自发现、监控、规则配置等功能。在 Sentinel 控制台上，我们可以配置规则并实时查看流量控制效果。</p><p>下载地址</p><p><a href="https://github.com/alibaba/Sentinel/releases/">https://github.com/alibaba/Sentinel/releases/</a></p><p>最新版本1.8.1</p><p><a href="https://github.com/alibaba/Sentinel/releases/download/1.8.1/sentinel-dashboard-1.8.1.jar">https://github.com/alibaba/Sentinel/releases/download/1.8.1/sentinel-dashboard-1.8.1.jar</a></p><p><strong>注意</strong>：启动 Sentinel 控制台需要 JDK 版本为 1.8 及以上版本。</p><p>java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 - </p><p>Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</p><p>其中 -Dserver.port=8080 用于指定 Sentinel 控制台端口为 8080 。</p><p><a href="http://localhost:8080/">http://localhost:8080/</a> 访问 用户名和密码都是 sentinel</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207205717869.png" alt="image-20211207205717869"></p><h3><span id="23-客户端接入控制台"><strong>2.3</strong> <strong>客户端接入控制台</strong></span></h3><p>1，引入依赖JAR</p><p>客户端需要引入 Transport 模块来与 Sentinel 控制台进行通信。您可以通过 pom.xml 引入 JAR 包: </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-transport-simple-http<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2，IDEA配置JVM启动参数</p><p>选择 Edit Configurations 编辑启动配置：</p><p><img src="/2021/12/07/sentinel-fen-bu-shi-xi-tong-de-liu-liang-zu-jian/Typora文档\images\image-20211207205841606.png" alt="image-20211207205841606"></p><p>配置里面，找到环境变量，VM options配置</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207205918095.png" alt="image-20211207205918095"></p><p>加下两个配置：</p><p>-Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel- </p><p>helloWorld</p><p><strong>-Dcsp.sentinel.dashboard.server=localhost:8080</strong> <strong>：</strong> 指定控制台地址和端口</p><p><strong>-Dproject.name=sentinel-helloWorld****：</strong> 设置控制台上显示的项目名称</p><p>3，测试</p><p>重新启动项目，<a href="http://localhost/helloWorld">http://localhost/helloWorld</a> 多运行刷新几次；</p><p>然后我们查看Sentineil控制台中实时监控信息；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207210029686.png" alt="image-20211207210029686"></p><h3><span id="24-sentinel控制台设置限流规则"><strong>2.4 Sentinel控制台设置限流规则</strong></span></h3><p>之前我们通过硬编码方式，设置限流规则，这种方式缺点是不方便修改维护规则，不建议使用；我们以后用Sentinel控制台里设置规则的方式来操作；</p><p>点击 流控规则 菜单</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207210422560.png" alt="image-20211207210422560"></p><p>点击 新增流控规则 按钮</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207210452456.png" alt="image-20211207210452456"></p><p>填写流控规则，然后点击 新增 按钮</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207210525763.png" alt="image-20211207210525763"></p><p>（注意：流控规则的“资源名”要和代码里使用的规则名称一致）</p><p>我们可以很方便编辑，删除规则名称；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207210556856.png" alt="image-20211207210556856"></p><p>测试</p><p>先把硬编码的流控规则注释掉</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207210627816.png" alt="image-20211207210627816"></p><p>然后，<a href="http://localhost/helloWorld">http://localhost/helloWorld</a> 浏览器地址，多刷新几次，Sentinel实时监控就有数据了。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207210659878.png" alt="image-20211207210659878"></p><h2><span id="3-sentinel基本使用"><strong>3 Sentinel基本使用</strong></span></h2><h3><span id="31-定义资源"><strong>3.1</strong> <strong>定义资源</strong></span></h3><p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。</p><p>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p><p>Sentinel 可以简单的分为 Sentinel 核心库和 Dashboard。核心库不依赖 Dashboard，但是结合</p><p>Dashboard 可以取得最好的效果。</p><p>我们说的资源，可以是任何东西，服务，服务里的方法，甚至是一段代码。使用 Sentinel 来进行资源保护，主要分为几个步骤: </p><p>​    1. 定义资源</p><p>​    2. 定义规则</p><p>​    3. 检验规则是否生效</p><p>先把可能需要保护的资源定义好（埋点），之后再配置规则。也可以理解为，只要有了资源，我们就可以在任何时候灵活地定义各种流量控制规则。在编码的时候，只需要考虑这个代码是否需要保护，如果需要保护，就将之定义为一个资源。</p><p>对于主流的框架，我们提供适配，只需要按照适配中的说明配置，Sentinel 就会默认定义提供的服务，方法等为资源。</p><h4><span id="311-方式一主流框架的默认适配"><strong>3.1.1</strong> <strong>方式一：主流框架的默认适配</strong></span></h4><p>为了减少开发的复杂程度，我们对大部分的主流框架，例如 Web Servlet、Dubbo、Spring Cloud、</p><p>gRPC、Spring WebFlux、Reactor 等都做了适配。您只需要引入对应的依赖即可方便地整合 Sentinel。</p><p>可以参见: 主流框架的适配。</p><h4><span id="312-方式二抛出异常的方式定义资源"><strong>3.1.2</strong> <strong>方式二：抛出异常的方式定义资源</strong></span></h4><p>SphU 包含了 try-catch 风格的 API。用这种方式，当资源发生了限流之后会抛出 BlockException 。这</p><p>个时候可以捕捉异常，进行限流之后的逻辑处理。示例代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.5.0 版本开始可以利用 try-with-resources 特性（使用有限制） </span><span class="token comment" spellcheck="true">// 资源名可使用任意有业务语义的字符串，比如方法名、接口名或其它可唯一标识的字符串。 </span><span class="token keyword">try</span> <span class="token punctuation">(</span>Entry entry <span class="token operator">=</span> SphU<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"resourceName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 被保护的业务逻辑 </span><span class="token comment" spellcheck="true">// do something here... </span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 资源访问阻止，被限流或被降级 </span><span class="token comment" spellcheck="true">// 在此处进行相应的处理操作 </span><span class="token punctuation">}</span></code></pre><p><strong>特别地</strong>，若 entry 的时候传入了热点参数，那么 exit 的时候也一定要带上对应的参数（ exit(count, args) ），否则可能会有统计错误。这个时候不能使用 try-with-resources 的方式。另外通过Tracer.trace(ex) 来统计异常信息时，由于 try-with-resources 语法中 catch 调用顺序的问题，会导致无法正确统计异常数，因此统计异常信息时也不能在 try-with-resources 的 catch 块中调用Tracer.trace(ex) 。</p><p>手动 exit 示例：</p><pre class=" language-java"><code class="language-java">Entry entry <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 务必保证 finally 会被执行 </span><span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 资源名可使用任意有业务语义的字符串，注意数目不能太多（超过 1K），超出几千请作为参数传入而 </span>    不要直接作为资源名         <span class="token comment" spellcheck="true">// EntryType 代表流量类型（inbound/outbound），其中系统规则只对 IN 类型的埋点生效 </span>        entry <span class="token operator">=</span> SphU<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"自定义资源名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 被保护的业务逻辑 </span>    <span class="token comment" spellcheck="true">// do something... </span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 资源访问阻止，被限流或被降级 </span>    <span class="token comment" spellcheck="true">// 进行相应的处理操作 </span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 若需要配置降级规则，需要通过这种方式记录业务异常 </span>    Tracer<span class="token punctuation">.</span><span class="token function">traceEntry</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 务必保证 exit，务必保证每个 entry 与 exit 配对 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         entry<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>热点参数埋点示例：</p><pre class=" language-java"><code class="language-java">Entry entry <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 若需要配置例外项，则传入的参数只支持基本类型。 </span>    <span class="token comment" spellcheck="true">// EntryType 代表流量类型，其中系统规则只对 IN 类型的埋点生效 </span>    <span class="token comment" spellcheck="true">// count 大多数情况都填 1，代表统计为一次调用。 </span>    entry <span class="token operator">=</span> SphU<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">,</span> EntryType<span class="token punctuation">.</span>IN<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> paramA<span class="token punctuation">,</span> paramB<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Your logic here. </span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// Handle request rejection. </span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 注意：exit 的时候也一定要带上对应的参数，否则可能会有统计错误。 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        entry<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> paramA<span class="token punctuation">,</span> paramB<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>SphU.entry() 的参数描述：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207211147676.png" alt="image-20211207211147676"></p><p><strong>注意</strong>： SphU.entry(xxx) 需要与 entry.exit() 方法成对出现，匹配调用，否则会导致调用链记录异常，抛出 ErrorEntryFreeException 异常。常见的错误：</p><ul><li><p>自定义埋点只调用 SphU.entry() ，没有调用 entry.exit()</p></li><li><p>顺序错误，比如： entry1 -&gt; entry2 -&gt; exit1 -&gt; exit2 ，应该为 entry1 -&gt; entry2 -&gt; exit2 -&gt; exit1</p></li></ul><h4><span id="313-方式三返回布尔值方式定义资源"><strong>3.1.3</strong> <strong>方式三：返回布尔值方式定义资源</strong></span></h4><p>SphO 提供 if-else 风格的 API。用这种方式，当资源发生了限流之后会返回 false ，这个时候可以根据</p><p>返回值，进行限流之后的逻辑处理。示例代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 资源名可使用任意有业务语义的字符串 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>SphO<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"自定义资源名"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 务必保证finally会被执行 </span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">/** \* 被保护的业务逻辑 */</span>     <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         SphO<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 资源访问阻止，被限流或被降级 </span>    <span class="token comment" spellcheck="true">// 进行相应的处理操作 </span><span class="token punctuation">}</span> </code></pre><p><strong>注意</strong>： SphO.entry(xxx) 需要与 SphO.exit() 方法成对出现，匹配调用，位置正确，否则会导致调用链记录 </p><p>异常，抛出 ErrorEntryFreeException` 异常。</p><p>实例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 返回布尔值方式定义资源 * @return*/</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"helloWorld2"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">helloWorld2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 资源名可使用任意有业务语义的字符串 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>SphO<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"HelloWorld2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 务必保证finally会被执行 </span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*** 被保护的业务逻辑 */</span>             <span class="token keyword">return</span> <span class="token string">"Sentinel 大爷你好！boolean"</span><span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>             SphO<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 资源访问阻止，被限流或被降级 </span>        <span class="token comment" spellcheck="true">// 进行相应的处理操作 </span>        <span class="token keyword">return</span> <span class="token string">"系统繁忙，请稍后！"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 降级处理 </span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>sentinel控制台添加流控规则：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207211558709.png" alt="image-20211207211558709"></p><p>访问 <a href="http://localhost/helloWorld2">http://localhost/helloWorld2</a></p><p>正常访问显示：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207211629768.png" alt="image-20211207211629768"></p><p>如果频繁访问会出现：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207211655112.png" alt="image-20211207211655112"></p><p>触碰降级规则，返回降级信息；</p><h4><span id="314-方式四注解方式定义资源"><strong>3.1.4</strong> <strong>方式四：注解方式定义资源</strong></span></h4><p>Sentinel 支持通过 @SentinelResource 注解定义资源并配置 blockHandler 和 fallback 函数来进行限流之后的处理。</p><p><strong>第一步：引入</strong> @SentinelResource <strong>注解依赖支持</strong></p><p>Sentinel 提供了 @SentinelResource 注解用于定义资源，并提供了 AspectJ 的扩展用于自动定义资源、处理 BlockException 等。使用 Sentinel Annotation AspectJ Extension 的时候需要引入以下依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-annotation-aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>第二步：创建</strong>AspectJ <strong>配置类</strong></p><p><strong>Spring Cloud Alibaba</strong></p><p>若您是通过 Spring Cloud Alibaba 接入的 Sentinel，则无需额外进行配置即可使用@SentinelResource 注解。</p><p><strong>Spring AOP</strong></p><p>若您的应用使用了 Spring AOP（无论是 Spring Boot 还是传统 Spring 应用），您需要通过配置的方式将 SentinelResourceAspect 注册为一个 Spring Bean： </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentinelAspectConfiguration</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> SentinelResourceAspect <span class="token function">sentinelResourceAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SentinelResourceAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><strong>第三步：新建</strong> <strong>Controller</strong> <strong>测试方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 注解方式定义资源 * @SentinelResource value 资源名称 * @SentinelResource blockHandler 调用被限流/降级/系统保护的时候调用的方法 * @return */</span> <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"helloWorld3"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span>                   <span class="token string">"blockHandlerForHelloWorld3"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"helloWorld3"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">helloWorld3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> "Sentinel 大爷你好！by 注解方式         <span class="token annotation punctuation">@SentinelResource</span>"<span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 原方法调用被限流/降级/系统保护的时候调用 * @param ex * @return */</span> <span class="token keyword">public</span> String <span class="token function">blockHandlerForHelloWorld3</span><span class="token punctuation">(</span>BlockException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>     ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token string">"系统繁忙，请稍后！"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><strong>第四步：</strong> <strong>Sentinel</strong> <strong>控制台新增流控规则</strong></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207212128238.png" alt="image-20211207212128238"></p><p><strong>第五步：测试</strong></p><p>浏览器请求：<a href="http://localhost/helloWorld3">http://localhost/helloWorld3</a></p><p>正常访问：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207212211830.png" alt="image-20211207212211830"></p><p>频繁访问：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207212243772.png" alt="image-20211207212243772"></p><p>控制台异常打印：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207212319943.png" alt="image-20211207212319943"></p><h4><span id="315-方式五异步调用支持"><strong>3.1.5</strong> <strong>方式五：异步调用支持</strong></span></h4><p>Sentinel 支持异步调用链路的统计。在异步调用中，需要通过 SphU.asyncEntry(xxx) 方法定义资</p><p>源，并通常需要在异步的回调函数中调用 exit 方法。</p><p><strong>第一步：启动类加注解</strong> @EnableAsync <strong>，让项目支持异步调用支持</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span> <span class="token annotation punctuation">@EnableAsync</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentinelHelloWorldApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SentinelHelloWorldApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><strong>第二步：创建</strong> <strong>AsyncService</strong> <strong>异步调用类以及方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>service<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Async<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** @author java1234_小锋 * @site www.java1234.com * @company Java知识分享网 * @create 2021-05-27 13:18 */</span> <span class="token annotation punctuation">@Service</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncService</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Async</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomethingAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"async start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"async end..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><strong>第三步：创建</strong> <strong>Controller</strong> <strong>方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"helloWorld4"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">helloWorld4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     AsyncEntry asyncEntry <span class="token operator">=</span>null<span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>        asyncEntry <span class="token operator">=</span> SphU<span class="token punctuation">.</span><span class="token function">asyncEntry</span><span class="token punctuation">(</span><span class="token string">"helloWorld4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         asyncService<span class="token punctuation">.</span><span class="token function">doSomethingAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统繁忙，请稍后！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>asyncEntry<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>             asyncEntry<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><strong>第四步：</strong> <strong>Sentinel</strong> <strong>控制台新增流控规则</strong></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207212725449.png" alt="image-20211207212725449"></p><p><strong>第五步：测试</strong></p><p>浏览器请求：<a href="http://localhost/helloWorld4">http://localhost/helloWorld4</a></p><p>正常访问控制台输出：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207212802281.png" alt="image-20211207212802281"></p><p>频繁访问控制台输出：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207212842030.png" alt="image-20211207212842030"></p><h3><span id="32-规则的种类"><strong>3.2</strong> <strong>规则的种类</strong></span></h3><p>Sentinel 的所有规则都可以在内存态中动态地查询及修改，修改之后立即生效。同时 Sentinel 也提供相关 API，供您来定制自己的规则策略。</p><p>Sentinel 支持以下几种规则：</p><ul><li><strong>流量控制规则</strong></li><li><strong>熔断降级规则</strong></li><li><strong>系统保护规则</strong></li><li><strong>来源访问控制规则</strong></li><li><strong>热点参数规则</strong></li></ul><h4><span id="321-流量控制规则"><strong>3.2.1</strong> <strong>流量控制规则</strong></span></h4><p><strong>流量控制</strong>（flow control），其原理是监控应用流量的 QPS 或并发线程数等指标，当达到指定的阈值时</p><p>对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。</p><p><strong>重要属性：</strong></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207213804272.png" alt="image-20211207213804272"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207214005179.png" alt="image-20211207214005179"></p><p><strong>限流类型分为</strong> <strong>:</strong></p><ul><li><strong>QPS</strong> 每秒请求数限制</li><li><strong>线程数</strong> 资源使用线程数限制</li></ul><p><strong>流控模式</strong></p><ul><li><p><strong>直接</strong> 资源直接限流，这个就是简单的限流。</p></li><li><p><strong>关联</strong> 关联模式需要填写关联资源的路径，意为如果关联资源的流量超额之后，限流自己（自己为资源名填写的路径）。</p></li><li><p><strong>链路</strong> 如果是链路模式需要填写入口资源，限制入口资源对自己的调用。</p></li></ul><p><strong>流控效果</strong></p><p><strong>快速失败</strong> (Ruleconstant.CONTROL_BEHAVIOR_DEFAULT）方式是默认的流量控制方式，当QPS超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出F1owException。这种方式适用于对系统处理能力确切已知的情况下，比如通过压测确定了系统的准确水位时。</p><p><strong>Warm Up</strong> (RuleConstant.CONTROL_BEHAVIOR_WARM_UP）方式，即预热/冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。</p><p><strong>排队等待</strong> (RuleConstant.cONTROL_BEHAV工OR_RATE_LIMITER）方式会严格控制请求通过的间隔时间,也即是让请求以均匀的速度通过，对应的是漏桶算法。</p><p>同一个资源可以同时有多个限流规则，检查规则时会依次检查。</p><h4><span id="322-熔断降级规则"><strong>3.2.2</strong> <strong>熔断降级规则</strong></span></h4><p><strong>概述</strong></p><p>除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，或者第三方 API 等。例如，支付的时候，可能需要远程调用银联提供的 API；查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211208223657470.png" alt="image-20211208223657470"></p><p>现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的<strong>弱依赖服务调用</strong>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p><p><strong>注意</strong>：本文档针对 Sentinel 1.8.0 及以上版本。1.8.0 版本对熔断降级特性进行了全新的改进升</p><p>级，请使用最新版本以更好地利用熔断降级的能力。</p><p><strong>熔断策略</strong></p><p>Sentinel 提供以下几种熔断策略：</p><ul><li><p>慢调用比例 ( SLOW_REQUEST_RATIO )：选择以慢调用比例作为阈值，需要设置允许的慢调用RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（ statIntervalMs ）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT则会再次被熔断。</p></li><li><p>异常比例 ( ERROR_RATIO )：当单位统计时长（ statIntervalMs ）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 [0.0, 1.0] ，代表 0% - 100%。</p></li><li><p>异常数 ( ERROR_COUNT )：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p></li></ul><p>注意异常降级<strong>仅针对业务异常</strong>，对 Sentinel 限流降级本身的异常（ BlockException ）不生效。为了统</p><p>计异常比例或异常数，需要通过 Tracer.trace(ex) 记录业务异常。示例：</p><pre class=" language-java"><code class="language-java">Entry entry <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>     entry <span class="token operator">=</span> SphU<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> EntryType<span class="token punctuation">.</span>IN<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Write your biz code here. </span>    <span class="token comment" spellcheck="true">// &lt;&lt;BIZ CODE>> </span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>BlockException<span class="token punctuation">.</span><span class="token function">isBlockException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Tracer<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         entry<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>开源整合模块，如 Sentinel Dubbo Adapter, Sentinel Web Servlet Filter 或 @SentinelResource 注解</p><p>会自动统计业务异常，无需手动调用。</p><p><strong>熔断降级规则说明</strong></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211208223959825.png" alt="image-20211208223959825"></p><p>熔断降级规则（DegradeRule）包含下面几个重要的属性：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211208224036450.png" alt="image-20211208224036450"></p><p>同一个资源可以同时有多个降级规则。</p><p>理解上面规则的定义之后，我们可以通过调用 DegradeRuleManager.loadRules() 方法来用硬编码的</p><p>方式定义流量控制规则。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initDegradeRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     List<span class="token operator">&lt;</span>DegradeRule<span class="token operator">></span> rules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     DegradeRule rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DegradeRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     rule<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span>KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// set threshold RT, 10 ms </span>    rule<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     rule<span class="token punctuation">.</span><span class="token function">setGrade</span><span class="token punctuation">(</span>RuleConstant<span class="token punctuation">.</span>DEGRADE_GRADE_RT<span class="token punctuation">)</span><span class="token punctuation">;</span>     rule<span class="token punctuation">.</span><span class="token function">setTimeWindow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     rules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>     DegradeRuleManager<span class="token punctuation">.</span><span class="token function">loadRules</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><strong>熔断器事件监听</strong></p><p>Sentinel 支持注册自定义的事件监听器监听熔断器状态变换事件（state change event）。示例：</p><pre class=" language-java"><code class="language-java">EventObserverRegistry<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addStateChangeObserver</span><span class="token punctuation">(</span><span class="token string">"logging"</span><span class="token punctuation">,</span>                                                        <span class="token punctuation">(</span>prevState<span class="token punctuation">,</span> newState<span class="token punctuation">,</span> rule<span class="token punctuation">,</span> snapshotValue<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newState <span class="token operator">==</span> tate<span class="token punctuation">.</span>OPEN<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 变换至 OPEN state 时会携带触发时的值 </span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s -> OPEN at %d, snapshotValue=%.2f"</span><span class="token punctuation">,</span>prevState<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  TimeUtil<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> snapshotValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s -> %s at %d"</span><span class="token punctuation">,</span> prevState<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newState<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>TimeUtil<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                                                            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4><span id="323-系统保护规则"><strong>3.2.3</strong> <strong>系统保护规则</strong></span></h4><p>Sentinel 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>系统规则包含下面几个重要的属性：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209195546505.png" alt="image-20211209195546505"></p><p>理解上面规则的定义之后，我们可以通过调用 SystemRuleManager.loadRules() 方法来用硬编码的方式定义流量控制规则。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initSystemRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     List<span class="token operator">&lt;</span>SystemRule<span class="token operator">></span> rules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     SystemRule rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     rule<span class="token punctuation">.</span><span class="token function">setHighestSystemLoad</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     rules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>     SystemRuleManager<span class="token punctuation">.</span><span class="token function">loadRules</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>控制台对应操作：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209195658226.png" alt="image-20211209195658226"></p><p>在开始之前，我们先了解一下系统保护的目的：</p><ul><li>保证系统不被拖垮</li><li>在系统稳定的前提下，保持系统的吞吐量</li></ul><p>长期以来，系统保护的思路是根据硬指标，即系统的负载 (load1) 来做系统过载保护。当系统负载高于</p><p>某个阈值，就禁止或者减少流量的进入；当 load 开始好转，则恢复流量的进入。<strong>这个思路给我们带来了</strong></p><p><strong>不可避免的两个问题</strong>：</p><ul><li>load 是一个“结果”，如果根据 load 的情况来调节流量的通过率，那么就始终有<strong>延迟性</strong>。也就意味</li></ul><p>着通过率的任何调整，都会过一段时间才能看到效果。当前通过率是使 load 恶化的一个动作，那</p><p>么也至少要过 1 秒之后才能观测到；同理，如果当前通过率调整是让 load 好转的一个动作，也需</p><p>要 1 秒之后才能继续调整，这样就浪费了系统的处理能力。所以我们看到的曲线，总是会有抖动。</p><ul><li><strong>恢复慢</strong>。想象一下这样的一个场景（真实），出现了这样一个问题，下游应用不可靠，导致应用</li></ul><p>RT 很高，从而 load 到了一个很高的点。过了一段时间之后下游应用恢复了，应用 RT 也相应减</p><p>少。这个时候，其实应该大幅度增大流量的通过率；但是由于这个时候 load 仍然很高，通过率的</p><p>恢复仍然不高。</p><p>TCP BBR 的思想给了我们一个很大的启发。我们应该根据系统能够处理的请求，和允许进来的请求，来</p><p>做平衡，而不是根据一个间接的指标（系统 load）来做限流。最终我们追求的目标是 <strong>在系统不被拖垮的</strong></p><p><strong>情况下，提高系统的吞吐率，而不是</strong> <strong>load</strong> <strong>一定要到低于某个阈值</strong>。如果我们还是按照固有的思维，超</p><p>过特定的 load 就禁止流量进入，系统 load 恢复就放开流量，这样做的结果是无论我们怎么调参数，调</p><p>比例，都是按照果来调节因，都无法取得良好的效果。</p><p>Sentinel 在系统自适应保护的做法是，用 load1 作为启动自适应保护的因子，而允许通过的流量由处理</p><p>请求的能力，即请求的响应时间以及当前系统正在处理的请求速率来决定。</p><h4><span id="324-访问控制规则"><strong>3.2.4</strong> <strong>访问控制规则</strong></span></h4><p>很多时候，我们需要根据调用来源来判断该次请求是否允许放行，这时候可以使用 Sentinel 的来源访问</p><p>控制（黑白名单控制）的功能。来源访问控制根据资源的请求来源（ origin ）限制资源是否通过，若</p><p>配置白名单则只有请求来源位于白名单内时才可通过；若配置黑名单则请求来源位于黑名单时不通过，</p><p>其余的请求通过。</p><p>调用方信息通过 ContextUtil.enter(resourceName, origin) 方法中的 origin 参数传入。</p><p><strong>规则配置</strong></p><p>来源访问控制规则（ AuthorityRule ）非常简单，主要有以下配置项：</p><ul><li>resource ：资源名，即限流规则的作用对象。</li><li>limitApp ：对应的黑名单/白名单，不同 origin 用 , 分隔，如 appA,appB 。 </li><li>strategy ：限制模式， AUTHORITY_WHITE 为白名单模式， AUTHORITY_BLACK 为黑名单模式，</li></ul><p>默认为白名单模式。</p><p><strong>示例</strong></p><p>比如我们希望控制对资源 test 的访问设置白名单，只有来源为 appA 和 appB 的请求才可通过，则可</p><p>以配置如下白名单规则：</p><pre class=" language-java"><code class="language-java">AuthorityRule rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthorityRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> rule<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> rule<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>RuleConstant<span class="token punctuation">.</span>AUTHORITY_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> rule<span class="token punctuation">.</span><span class="token function">setLimitApp</span><span class="token punctuation">(</span><span class="token string">"appA,appB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> AuthorityRuleManager<span class="token punctuation">.</span><span class="token function">loadRules</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>详细示例请参考 AuthorityDemo</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** Copyright 1999-2018 Alibaba Group Holding Ltd. ** Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at ** http://www.apache.org/licenses/LICENSE-2.0 ** Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */</span> <span class="token keyword">package</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>authority<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>Entry<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>SphU<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextUtil<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span>BlockException<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span>RuleConstant<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span>authority<span class="token punctuation">.</span>AuthorityRule<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span>authority<span class="token punctuation">.</span>AuthorityRuleManager<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** Authority rule is designed for limiting by request origins. In blacklist mode, * requests will be blocked when blacklist contains current origin, otherwise will pass. * In whitelist mode, only requests from whitelist origin can pass. ** @author Eric Zhao */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorityDemo</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String RESOURCE_NAME <span class="token operator">=</span> <span class="token string">"testABC"</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========Testing for black list========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">initBlackRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">testFor</span><span class="token punctuation">(</span>RESOURCE_NAME<span class="token punctuation">,</span> <span class="token string">"appA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">testFor</span><span class="token punctuation">(</span>RESOURCE_NAME<span class="token punctuation">,</span> <span class="token string">"appB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">testFor</span><span class="token punctuation">(</span>RESOURCE_NAME<span class="token punctuation">,</span> <span class="token string">"appC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">testFor</span><span class="token punctuation">(</span>RESOURCE_NAME<span class="token punctuation">,</span> <span class="token string">"appE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========Testing for white list========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">initWhiteRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">testFor</span><span class="token punctuation">(</span>RESOURCE_NAME<span class="token punctuation">,</span> <span class="token string">"appA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">testFor</span><span class="token punctuation">(</span>RESOURCE_NAME<span class="token punctuation">,</span> <span class="token string">"appB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">testFor</span><span class="token punctuation">(</span>RESOURCE_NAME<span class="token punctuation">,</span> <span class="token string">"appC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">testFor</span><span class="token punctuation">(</span>RESOURCE_NAME<span class="token punctuation">,</span> <span class="token string">"appE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testFor</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*@NonNull*/</span> String resource<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/*@NonNull*/</span>                                 String origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>         ContextUtil<span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>         Entry entry <span class="token operator">=</span> null<span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            entry <span class="token operator">=</span> SphU<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>"Passed <span class="token keyword">for</span> resource <span class="token operator">%</span>s<span class="token punctuation">,</span> origin is                                              <span class="token operator">%</span>s"<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                  System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>"Blocked <span class="token keyword">for</span> resource <span class="token operator">%</span>s<span class="token punctuation">,</span> origin is                                                                                   <span class="token operator">%</span>s"<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                   <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                                                                                       <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                                                           entry<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                       <span class="token punctuation">}</span>                                                                                      ContextUtil<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                   <span class="token punctuation">}</span>                                                                                   <span class="token punctuation">}</span>                                                                                  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initWhiteRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                                                       AuthorityRule rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthorityRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                       rule<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span>RESOURCE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                       rule<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>RuleConstant<span class="token punctuation">.</span>AUTHORITY_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                       rule<span class="token punctuation">.</span><span class="token function">setLimitApp</span><span class="token punctuation">(</span><span class="token string">"appA,appE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                       AuthorityRuleManager<span class="token punctuation">.</span><span class="token function">loadRules</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                   <span class="token punctuation">}</span>                                                                                  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initBlackRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                                                       AuthorityRule rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthorityRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                       rule<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span>RESOURCE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                       rule<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>RuleConstant<span class="token punctuation">.</span>AUTHORITY_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                       rule<span class="token punctuation">.</span><span class="token function">setLimitApp</span><span class="token punctuation">(</span><span class="token string">"appA,appB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                       AuthorityRuleManager<span class="token punctuation">.</span><span class="token function">loadRules</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                   <span class="token punctuation">}</span>                                                                                   <span class="token punctuation">}</span></code></pre><p>控制台配置方式：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209200436006.png" alt="image-20211209200436006"></p><p><strong>3.2.5</strong> <strong>热点规则</strong></p><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数</p><p>据，并对其访问进行限制。比如：</p><p>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</p><p>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</p><p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调</p><p>用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p><p>Sentinel 利用 LRU 策略统计最近最常访问的热点参数，结合令牌桶算法来进行参数级别的流控。热点参</p><p>数限流支持集群模式。</p><p><strong>基本使用</strong></p><p>要使用热点参数限流功能，需要引入以下依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-parameter-flow-control<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>x.y.z<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>然后为对应的资源配置热点参数限流规则，并在 entry 的时候传入相应的参数，即可使热点参数限流生效。</p><p>注：若自行扩展并注册了自己实现的 SlotChainBuilder ，并希望使用热点参数限流功能，则可以在 chain 里面合适的地方插入 ParamFlowSlot 。</p><p>那么如何传入对应的参数以便 Sentinel 统计呢？我们可以通过 SphU 类里面几个 entry 重载方法来传入：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209203444064.png" alt="image-20211209203444064"></p><p>其中最后的一串 args 就是要传入的参数，有多个就按照次序依次传入。比如要传入两个参数 paramA 和 paramB ，则可以：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// paramA in index 0, paramB in index 1. </span><span class="token comment" spellcheck="true">// 若需要配置例外项或者使用集群维度流控，则传入的参数只支持基本类型。 </span>SphU<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">,</span> EntryType<span class="token punctuation">.</span>IN<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> paramA<span class="token punctuation">,</span> paramB<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>注意</strong>：若 entry 的时候传入了热点参数，那么 exit 的时候也一定要带上对应的参数（ exit(count, args) ），否则可能会有统计错误。正确的示例：</p><pre class=" language-java"><code class="language-java">Entry entry <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>    entry <span class="token operator">=</span> SphU<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">,</span> EntryType<span class="token punctuation">.</span>IN<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> paramA<span class="token punctuation">,</span> paramB<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Your logic here. </span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// Handle request rejection. </span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         entry<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> paramA<span class="token punctuation">,</span> paramB<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>对于 @SentinelResource 注解方式定义的资源，若注解作用的方法上有参数，Sentinel 会将它们作为参数传入 SphU.entry(res, args) 。比如以下的方法里面 uid 和 type 会分别作为第一个和第二个参数传入 Sentinel API，从而可以用于热点规则判断：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span><span class="token string">"myMethod"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> Result <span class="token function">doSomething</span><span class="token punctuation">(</span>String uid<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// some logic here... </span><span class="token punctuation">}</span></code></pre><p><strong>热点参数规则</strong></p><p>热点参数规则（ ParamFlowRule ）类似于流量控制规则（ FlowRule ）：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209203753355.png" alt="image-20211209203753355"></p><p>我们可以通过 ParamFlowRuleManager 的 loadRules 方法更新热点参数规则，下面是一个示例：</p><pre class=" language-java"><code class="language-java">ParamFlowRule rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParamFlowRule</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">setParamIdx</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 针对 int 类型的参数 PARAM_B，单独设置限流 QPS 阈值为 10，而不是全局的阈值 5. </span>ParamFlowItem item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParamFlowItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>PARAM_B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">setClassType</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> rule<span class="token punctuation">.</span><span class="token function">setParamFlowItemList</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ParamFlowRuleManager<span class="token punctuation">.</span><span class="token function">loadRules</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>控制台配置方式：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209205052433.png" alt="image-20211209205052433"></p><h2><span id="4-spring-cloud-整合-sentinel"><strong>4 Spring Cloud</strong> <strong>整合</strong> <strong>Sentinel</strong></span></h2><p>Spring Cloud Alibaba默认为Sentinel整合了Servlet、RestTemplate、 FeignClient和Spring WebFlux。它不仅补全了Hystrix在Servlet和RestTemplate这一块的空白，而且还完全兼容了Hystrix在FeignClient中限流降级的用法,并支持灵活配置和调整流控规则。</p><p><strong>第一步：新建</strong> <strong>sentinel-springcloud</strong> <strong>子模块项目，</strong> <strong>pom.xml</strong> <strong>添加</strong> spring**-<strong>cloud</strong>-<strong>starter</strong>-<strong>alibaba</strong>-**sentinel <strong>依赖</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> </code></pre><p><strong>第二步：新建</strong> <strong>SentinelHelloWorldControllerc</strong> <strong>测试类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>controller<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>SentinelResource<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span>BlockException<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** @author java1234_小锋 * @site www.java1234.com * @company Java知识分享网 * @create 2021-05-04 14:35 */</span><span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentinelHelloWorldController</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**    * 注解方式定义资源     * @SentinelResource value 资源名称     * @SentinelResource blockHandler 调用被限流/降级/系统保护的时候调用的方法     * @return     */</span>     <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"helloWorld_springcloud"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span>                       <span class="token string">"blockHandlerForHelloWorld3"</span><span class="token punctuation">)</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"helloWorld3"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> String <span class="token function">helloWorld3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> "Sentinel 大爷你好！by 注解方式             <span class="token annotation punctuation">@SentinelResource</span>"<span class="token operator">+</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 原方法调用被限流/降级/系统保护的时候调用     * @param ex     * @return     */</span>     <span class="token keyword">public</span> String <span class="token function">blockHandlerForHelloWorld3</span><span class="token punctuation">(</span>BlockException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"系统繁忙，请稍后！"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><strong>第三步：</strong> application.yml <strong>配置本地项目接入</strong> <strong>Dashboard</strong> <strong>控制台</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> sentinel_springcloud <span class="token comment" spellcheck="true">## 设置应用名称 </span>    <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>             <span class="token key atrule">transport</span><span class="token punctuation">:</span>                 <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080 </span><span class="token comment" spellcheck="true">## 设置Sentinel连接控制台的主机地址和端口</span></code></pre><p><strong>第四步：</strong> <strong>Sentinel Dashboard</strong> <strong>增加流控规则</strong></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209205817194.png" alt="image-20211209205817194"></p><p><strong>第五步：测试</strong></p><p>浏览器地址栏输入：<a href="http://localhost/helloWorld3">http://localhost/helloWorld3</a></p><p>正常显示：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209210201577.png" alt="image-20211209210201577"></p><p>如果频繁访问，则被流控</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209210226456.png" alt="image-20211209210226456"></p><h2><span id="5-sentinel-整合-nacos-实现配置持久化"><strong>5 sentinel</strong> <strong>整合</strong> <strong>nacos</strong> <strong>实现配置持久化</strong></span></h2><p>细心的伙伴将会发现，当sentinel重新启动时，sentinel dashboard中原来的数据将会全部消失，这样</p><p>就需要重新定义限流规则，无疑是不可取的。sentinel默认是把配置放内存里的。</p><p>我们可以将sentinel中定义的限流规则保存到Nacos配置中心里面，实现持久化。</p><p>nacos视频教程地址：<a href="http://www.java1234.vip/course/151">http://www.java1234.vip/course/151</a></p><p>具体实现步骤：</p><h3><span id="1-添加-sentinel-的-nacos-支持"><strong>1</strong> <strong>添加</strong> <strong>sentinel</strong> <strong>的</strong> <strong>nacos</strong> <strong>支持</strong></span></h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> </code></pre><h3><span id="2-在-nacos-中定义策略"><strong>2</strong> <strong>在</strong> <strong>nacos</strong> <strong>中定义策略</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209210617155.png" alt="image-20211209210617155"></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>     <span class="token punctuation">{</span>         <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"helloWorld_springcloud"</span><span class="token punctuation">,</span>         <span class="token property">"limitApp"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>         <span class="token property">"grade"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>         <span class="token property">"count"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>         <span class="token property">"strategy"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>         <span class="token property">"controlBehavior"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>         <span class="token property">"clusterMode"</span><span class="token operator">:</span> <span class="token boolean">false</span>     <span class="token punctuation">}</span> <span class="token punctuation">]</span></code></pre><p>Data Id :和配置中的data_id相对应</p><p>Group:配置文件中的group-id</p><p>配置内容：</p><p>resource：接口名，即限流规则的作用对象</p><p>limitApp：流控针对的调用来源，若为 default 则不区分调用来源</p><p>grade：限流阈值类型（QPS 或并发线程数）；0代表根据并发数量来限流，1代表根据QPS来进行流量</p><p>控制</p><p>count：限流阈值</p><p>strategy：调用关系限流策略（ </p><p>直接、链路、关联 ）</p><p>controlBehavior：流量控制效果（直接拒绝、Warm Up、匀速排队）</p><p>clusterMode：是否为集群模式</p><h3><span id="3-项目配置-sentinel-下面的-datasource-中配置-nacos"><strong>3</strong> <strong>项目配置</strong> <strong>sentinel</strong> <strong>下面的</strong> <strong>dataSource</strong> <strong>中配置</strong> <strong>nacos</strong></span></h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> sentinel_springcloud <span class="token comment" spellcheck="true">## 设置应用名称 </span>    <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>             <span class="token key atrule">transport</span><span class="token punctuation">:</span>                 <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080 </span><span class="token comment" spellcheck="true">## 设置Sentinel连接控制台的主机地址和端口 </span>            <span class="token key atrule">datasource</span><span class="token punctuation">:</span>                 <span class="token key atrule">ds</span><span class="token punctuation">:</span>                    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>                         <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true">## nacos连接地址 </span>                        <span class="token key atrule">group-id</span><span class="token punctuation">:</span> DEFAULT_GROUP <span class="token comment" spellcheck="true">## nacos连接的分组 </span>                        <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> flow <span class="token comment" spellcheck="true">## 流控规则 rule-type 配置表示该数据源中的规则属于哪种类型 </span>                        的规则(flow，degrade，authority，system<span class="token punctuation">,</span> param<span class="token punctuation">-</span>flow<span class="token punctuation">,</span> gw<span class="token punctuation">-</span>flow<span class="token punctuation">,</span> gw<span class="token punctuation">-</span>api<span class="token punctuation">-</span>group)                         <span class="token key atrule">data-id</span><span class="token punctuation">:</span> java1234<span class="token punctuation">-</span>sentinel <span class="token comment" spellcheck="true">## 读取配置文件的 data-id </span>                        <span class="token key atrule">data-type</span><span class="token punctuation">:</span> json <span class="token comment" spellcheck="true">## 读取培训文件类型为json</span></code></pre><p><strong>4</strong> <strong>测试</strong></p><p>我们启动项目，发现sentinel控制台读取到了nacos里的配置，频繁刷新也能流控；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211209211155472.png" alt="image-20211209211155472"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Sentinel </tag>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gateway学习笔记</title>
      <link href="/2021/12/07/wei-fu-wu-wang-guan-gateway/"/>
      <url>/2021/12/07/wei-fu-wu-wang-guan-gateway/</url>
      
        <content type="html"><![CDATA[<p><strong>微服务网关Gateway</strong></p><h2><span id="1gateway简介"><strong>1.Gateway简介</strong></span></h2><h3><span id="11-api网关介绍"><strong>1.1 API网关介绍</strong></span></h3><p>网关的角色是作为一个 API 架构，用来保护、增强和控制对于 API 服务的访问。</p><p>API 网关是一个处于应用程序或服务（提供 REST API 接口服务）之前的系统，用来管理授权、访问控制和流量限制等，这样 REST API 接口服务就被 API 网关保护起来，对所有的调用者透明。因此，隐藏在API 网关后面的业务系统就可以专注于创建和管理服务，而不用去处理这些策略性的基础设施。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207184503468.png" alt="image-20211207184503468"></p><h3><span id="12-api网关作用"><strong>1.2 API网关作用</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207184832889.png" alt="image-20211207184832889"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207184905615.png" alt="image-20211207184905615"></p><h3><span id="13-api网关开源实现"><strong>1.3 API网关开源实现</strong></span></h3><p>用于实现API网关的技术有很多，大致分为这么几类：</p><p>通用反向代理：Nginx、Haproxy、……</p><p>网络编程框架：Netty、Servlet、……</p><p>API网关框架：Spring Cloud Gateway、Zuul、Zuul2、……</p><h3><span id="14-gateway网关介绍"><strong>1.4 Gateway网关介绍</strong></span></h3><p><a href="https://spring.io/projects/spring-cloud-gateway">https://spring.io/projects/spring-cloud-gateway</a></p><p>Spring Cloud Gateway是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。</p><p>Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</p><p>spring Cloud Gateway 可以看做是一个 Zuul 1.x 的升级版和代替品，比 Zuul 2 更早的使用 Netty 实现异步 IO，从而实现了一个简单、比 Zuul 1.x 更高效的、与 Spring Cloud 紧密配合的 API 网关。</p><p>Spring Cloud Gateway 里明确的区分了 Router 和 Filter，并且一个很大的特点是内置了非常多的开箱即用功能，并且都可以通过 SpringBoot 配置或者手工编码链式调用来使用。</p><p>比如内置了 10 种 Router，使得我们可以直接配置一下就可以随心所欲的根据 Header、或者 Path、或者 Host、或者 Query 来做路由。比如区分了一般的 Filter 和全局 Filter，内置了 20 种 Filter 和 9 种全局 Filter，也都可以直接用。当然自定义 Filter 也非常方便。</p><p><strong>gateway特性：</strong></p><ul><li>基于SpringFramework5，ProjectReactor和SpringBoot2.0进行构建</li><li>能够匹配任何任何请求属性</li><li>可以对路由指定Predicates和Filters集成断路器</li><li>集成Spring Cloud服务发现</li><li>易于编写的Predicates和Filters</li><li>支持请求限流</li><li>支持路径重写</li></ul><p>官网文档：</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.7.RELEASE/reference/html/">https://docs.spring.io/spring-cloud-gateway/docs/2.2.7.RELEASE/reference/html/</a></p><h2><span id="2gateway工作原理"><strong>2.Gateway工作原理</strong></span></h2><p>下图从总体上概述了Spring Cloud Gateway的工作方式：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207185219169.png" alt="image-20211207185219169"></p><p>客户端向Spring Cloud Gateway发出请求。如果网关处理程序映射确定请求与路由匹配，则将其发送到网关Web处理程序。该处理程序通过特定于请求的过滤器链来运行请求。筛选器由虚线分隔的原因是，筛选器可以在发送代理请求之前和之后都运行逻辑。所有“前置”过滤器逻辑均被执行。然后发出代理请求。发出代理请求后，将运行“后”过滤器逻辑。</p><p><strong>三个概念：</strong></p><p>路由：路由是构建网关的基本模块，它由ID，目标URI，一系列的断言Predicates和过滤器Filters组成，如果断言为true，则匹配该路由。</p><p>断言：参考Java8的java.util.function.Predicate，开发人员可以匹配HTTP请求中的所有内容，例如请求头或请求参数，如果请求与断言相匹配则进行路由。</p><p>过滤：Spring框架中GatewayFilter的实例，使用过滤器，可以载请求被路由前或者后对请求进行修改。</p><h2><span id="3gateway-helloworld快速入门"><strong>3.Gateway HelloWorld快速入门</strong></span></h2><p>我们搞两个服务，分别是product产品服务项目，以及order订单服务项目，我们搞个小案例，搞一个网关，统一对path请求地址进行管理；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207185340253.png" alt="image-20211207185340253"></p><p>gateway依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> </code></pre><p>application.yml配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80 </span>    <span class="token key atrule">servlet</span><span class="token punctuation">:</span>         <span class="token key atrule">context-path</span><span class="token punctuation">:</span> / <span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>server     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">## 路由规则定义 </span>                <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> product<span class="token punctuation">-</span>service <span class="token comment" spellcheck="true">## 路由ID </span>                <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/ <span class="token comment" spellcheck="true">## 路由地址 </span>                <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">## 断言规则 </span>                <span class="token punctuation">-</span> Path=/product/**                                 <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> order<span class="token punctuation">-</span>service <span class="token comment" spellcheck="true">## 路由ID </span>                <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8081/ <span class="token comment" spellcheck="true">## 路由地址 </span>                <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">## 断言规则 </span>                <span class="token punctuation">-</span> Path=/order/**</code></pre><h2><span id="4gateway路由规则"><strong>4.Gateway路由规则</strong></span></h2><h3><span id="41-路由断言工厂"><strong>4.1</strong> <strong>路由断言工厂</strong></span></h3><p> Spring Cloud Gateway将路由作为Spring WebFlux HandlerMapping 基础架构的一部分进行匹配。Spring Cloud Gateway包括许多内置的路由断言工厂。所有这些断言都与HTTP请求的不同属性匹配。您可以将多个路由断言工厂与逻辑 and 语句结合使用。</p><p> 路由断言工厂RoutePredicateFactory包含的主要实现类如图所示，包含Datetime、Cookie、Header、Host、Method、Path、Query、RemoteAddr、Weight等类型的路由断言。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207185908571.png" alt="image-20211207185908571"></p><h3><span id="42-日期时间路由匹配规则"><strong>4.2</strong> <strong>日期时间路由匹配规则</strong></span></h3><p>匹配指定日期时间之后的请求 After</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>server     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> after_route                 <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/                 <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> After=2021<span class="token punctuation">-</span>04<span class="token punctuation">-</span>20T06<span class="token punctuation">:</span>06<span class="token punctuation">:</span>06+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span> </code></pre><p>匹配指定日期时间之前的请求 Before</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>server     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> before_route                 <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/                 <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> Before=2021<span class="token punctuation">-</span>04<span class="token punctuation">-</span>20T06<span class="token punctuation">:</span>06<span class="token punctuation">:</span>06+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span> </code></pre><p>匹配指定日期时间之间的请求 Between</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>server     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> betwwen_route                 <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/                 <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> Between=2021<span class="token punctuation">-</span>01<span class="token punctuation">-</span>20T06<span class="token punctuation">:</span>06<span class="token punctuation">:</span>06+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span><span class="token punctuation">,</span>2021<span class="token punctuation">-</span>04<span class="token punctuation">-</span>                 20T06<span class="token punctuation">:</span>06<span class="token punctuation">:</span>06+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span></code></pre><h3><span id="43-cookie路由匹配规则"><strong>4.3 Cookie路由匹配规则</strong></span></h3><p>所述Cookie路由断言工厂采用两个参数，该cookiename和regexp（其是Java正则表达式）。该断言匹配具有给定名称且其值与正则表达式匹配的cookie。以下示例配置cookie路由断言工厂：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>server     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> cookie_route                 <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/                 <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> Cookie=token<span class="token punctuation">,</span> \d+ </code></pre><h3><span id="44-header路由匹配规则"><strong>4.4 Header路由匹配规则</strong></span></h3><p>所述 Header ；路由断言工厂采用两个参数，报头 name 和一个 regexp （其是Java正则表达式）。该断言与具有给定名称的头信息匹配，该标头的值与正则表达式匹配。以下示例配置Header路由断言：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>server     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> header_route                 <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/                 <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> Header=X<span class="token punctuation">-</span>Request<span class="token punctuation">-</span>Id<span class="token punctuation">,</span> \d+ </code></pre><h3><span id="45-host路由匹配规则"><strong>4.5 Host路由匹配规则</strong></span></h3><p>该 Host 路由断言工厂需要一个参数：主机名的列表 patterns 。该模式是带有.分隔符的Ant样式的模式。断言与 Host 匹配模式的标头匹配。以下示例配置主机路由断言：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>server     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> host_route                 <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/                 <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                        <span class="token punctuation">-</span> Host=**.somehost.org<span class="token punctuation">,</span>**.anotherhost.org</code></pre><h3><span id="46-method路由匹配规则"><strong>4.6 Method路由匹配规则</strong></span></h3><p>所述 Method 路由断言厂需要 methods 的参数，它是一个或多个参数：HTTP方法来匹配。以下示例配置方法路由断言：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>server     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> method_route                 <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/                 <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> Method=GET<span class="token punctuation">,</span>POST </code></pre><h3><span id="47-path路由匹配规则"><strong>4.7 Path路由匹配规则</strong></span></h3><p>该 Path 路由断言厂有两个参数：春天的列表 PathMatcher patterns 和一个可选的标志叫matchOptionalTrailingSeparator 。以下示例配置路径路由断言：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>server     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> path_route                 <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/                 <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> Path=/product/<span class="token punctuation">{</span>segment<span class="token punctuation">}</span> </code></pre><h3><span id="48-query路由匹配规则"><strong>4.8 Query路由匹配规则</strong></span></h3><p>所述 Query 路由断言工厂采用两个参数：所要求的 param 和可选的 regexp （其是Java正则表达式）。</p><p>以下示例配置查询路由断言：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>server     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> query_route                 <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/                 <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> Query=green</code></pre><p>如果请求包含 green 查询参数，则前面的路由匹配。</p><h3><span id="49-remoteaddr路由匹配规则"><strong>4.9 RemoteAddr路由匹配规则</strong></span></h3><p>所述 RemoteAddr 路由断言工厂需要的列表（分钟尺寸1） sources ，其是CIDR的表示法（IPv4或IPv6）的字符串，如 192.168.0.1/16 （其中 192.168.0.1 是一个IP地址和 16 一个子网掩码）。下面的示例配置RemoteAddr路由断言：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>     <span class="token key atrule">gateway</span><span class="token punctuation">:</span>         <span class="token key atrule">routes</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> remoteaddr_route             <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org             <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> RemoteAddr=192.168.1.1/24 </code></pre><p>如果请求的远程地址为上面配置，则此路由匹配192.168.1.10。</p><h3><span id="410-weight路由匹配规则"><strong>4.10 Weight****路由匹配规则</strong></span></h3><p>该 Weight 路由断言工厂有两个参数： group 和 weight （一个int）。权重是按组计算的。以下示例配置权重路由断言：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> weight_high             <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//weighthigh.org             <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> Weight=group1<span class="token punctuation">,</span> <span class="token number">8 </span>            <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> weight_low             <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//weightlow.org             <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> Weight=group1<span class="token punctuation">,</span> <span class="token number">2</span></code></pre><p>这条路线会将大约80％的流量转发到weighthigh.org，将大约20％的流量转发到weightlow.org。</p><h2><span id="5gateway过滤器"><strong>5.Gateway过滤器</strong></span></h2><p>Gateway分为Pre类型的过滤器和Post类型的过滤器。</p><ul><li>Pre类型的过滤器在请求转发到后端微服务之前执行，在Pre类型过滤器链中可以做鉴权、限流等操作。</li><li>Post类型的过滤器在请求执行完成之后、将结果返回给客户端之前执行。</li></ul><p>在Spring Cloud Gateway中内置了很多Filter，Filter有两种实现，分别是GatewayFilter和GlobalFilter。GlobalFilter全局过滤器会应用到所有的路由上，而GatewayFilter只会应用到单个路由或者一个分组的路由上。</p><h3><span id="51-gateway过滤器工厂介绍"><strong>5.1 Gateway过滤器工厂介绍</strong></span></h3><p>过滤器 有 20 多个 实现 类， 包括 头部 过滤器、 路径 类 过滤器、 Hystrix 过滤器 和 变更 请求 URL 的过滤器， </p><p>还有 参数 和 状态 码 等 其他 类型 的 过滤器。</p><p>内置的过滤器工厂有22个实现类，包括 头部过滤器、路径过滤器、Hystrix 过滤器 、请求URL 变更过滤器，还有参数和状态码等其他类型的过滤器。根据过滤器工厂的用途来划分，可以分为以下几种：</p><p>Header、Parameter、Path、Body、Status、Session、Redirect、Retry、RateLimiter和Hystrix</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207193337412.png" alt="image-20211207193337412"></p><h3><span id="52-addrequestparameter-gatewayfilter-factory"><strong>5.2 AddRequestParameter GatewayFilter Factory</strong></span></h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>server     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> add_request_parameter_route                 <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/                 <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> Path=/product/**                 <span class="token key atrule">filters</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> AddRequestParameter=info<span class="token punctuation">,</span> hehe</code></pre><p>添加请求参数（属于前置过滤网关）</p><h3><span id="53-rewritepath-gatewayfilter-factory"><strong>5.3 RewritePath GatewayFilter Factory</strong></span></h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>server     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> add_request_parameter_route                 <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/                 <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> Path=/product/**<span class="token punctuation">,</span> /api<span class="token punctuation">-</span>gateway/**                 <span class="token key atrule">filters</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> AddRequestParameter=info<span class="token punctuation">,</span> hehe                     <span class="token punctuation">-</span> RewritePath=/api<span class="token punctuation">-</span>gateway(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">></span>/<span class="token punctuation">?</span>.*)<span class="token punctuation">,</span> $\<span class="token punctuation">{</span>segment<span class="token punctuation">}</span> </code></pre><p>将/api-gateway/product/请求重写成/product/请求（属于前置过滤网关）</p><h3><span id="54-setstatus-gatewayfilter-factory"><strong>5.4 SetStatus GatewayFilter Factory</strong></span></h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>server     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> add_request_parameter_route                 <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/                 <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> Path=/product/**<span class="token punctuation">,</span> /api<span class="token punctuation">-</span>gateway/**                 <span class="token key atrule">filters</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> AddRequestParameter=info<span class="token punctuation">,</span> hehe                     <span class="token punctuation">-</span> RewritePath=/api<span class="token punctuation">-</span>gateway(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">></span>/<span class="token punctuation">?</span>.*)<span class="token punctuation">,</span> $\<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>                     <span class="token punctuation">-</span> SetStatus=456 </code></pre><p>无论哪种情况，响应的HTTP状态都设置为456（属于后置过滤网关）</p><h3><span id="55-addresponseheader-gatewayfilter-factory"><strong>5.5 AddResponseHeader GatewayFilter Factory</strong></span></h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>     <span class="token key atrule">application</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>server     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>         <span class="token key atrule">gateway</span><span class="token punctuation">:</span>             <span class="token key atrule">routes</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> add_request_parameter_route                 <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/                 <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> Path=/product/**<span class="token punctuation">,</span> /api<span class="token punctuation">-</span>gateway/**                 <span class="token key atrule">filters</span><span class="token punctuation">:</span>                     <span class="token punctuation">-</span> AddRequestParameter=info<span class="token punctuation">,</span> hehe                     <span class="token punctuation">-</span> RewritePath=/api<span class="token punctuation">-</span>gateway(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">></span>/<span class="token punctuation">?</span>.*)<span class="token punctuation">,</span> $\<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>                     <span class="token punctuation">-</span> SetStatus=456                    <span class="token punctuation">-</span> AddResponseHeader=X<span class="token punctuation">-</span>Response<span class="token punctuation">-</span>Author<span class="token punctuation">,</span> java1234</code></pre><p>返回信息，添加header头信息（属于后置过滤网关）</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207194220636.png" alt="image-20211207194220636"></p><h3><span id="56-gateway全局过滤器globalfilter"><strong>5.6 gateway全局过滤器GlobalFilter</strong></span></h3><p>全局过滤器不需要在配置文件中配置，作用在所有的路由上。我们可以用它来实现很多统一化处理的业务需求，比如负载均衡，统一过滤，路径转发，监控，日志等等。</p><p>全局过滤器加上网关过滤器组成过滤器链，该过滤器链的执行顺序是根据@Order注解指定的数字大小，从小到大进行排序，数字越小，优先级越高。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207194243941.png" alt="image-20211207194243941"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/image/image-20211207194313528.png" alt="image-20211207194313528"></p><h3><span id="57-自定义过滤器"><strong>5.7</strong> <strong>自定义过滤器</strong></span></h3><p>Spring Cloud Gateway提供了过滤器的扩展功能，开发者可以根据实际业务需求来自定义</p><p>GatewayFilter网关过滤器或者GlobalFilter全局过滤器。</p><h4><span id="571-自定义gatewayfilter"><strong>5.7.1</strong> <strong>自定义GatewayFilter</strong></span></h4><p>实现 GatewayFilter , Ordered 接口，以及配置类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>filter<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>GatewayFilter<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>GatewayFilterChain<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Ordered<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span>ServerWebExchange<span class="token punctuation">;</span> <span class="token keyword">import</span> reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span>Mono<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** 自定义网关过滤器 * @author java1234_小锋 * @site www.java1234.com * @company Java知识分享网 * @create 2021-04-08 16:25 */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomerGatewayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GatewayFilter</span><span class="token punctuation">,</span>Ordered <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain                              chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自定义网关过滤器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>config<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>MyCustomerGatewayFilter<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>RouteLocator<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>RouteLocatorBuilder<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** @author java1234_小锋 * @site www.java1234.com * @company Java知识分享网 * @create 2021-04-09 10:15 */</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomerGatewayFilterConfig</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> RouteLocator <span class="token function">routeLocator</span><span class="token punctuation">(</span>RouteLocatorBuilder builder<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token operator">></span>r                                       <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/product/**"</span><span class="token punctuation">)</span>                                       <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/"</span><span class="token punctuation">)</span>                                       <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCustomerGatewayFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                       <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"myCustomerGateway"</span><span class="token punctuation">)</span>                                      <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h4><span id="572-自定义globalfilter"><strong>5.7.2</strong> <strong>自定义GlobalFilter</strong></span></h4><p>实现 GlobalFilter , Ordered 接口，加上@Component注解即可；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>filter<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>GatewayFilterChain<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>GlobalFilter<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Ordered<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span>ServerWebExchange<span class="token punctuation">;</span> <span class="token keyword">import</span> reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span>Mono<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** @author java1234_小锋 * @site www.java1234.com * @company Java知识分享网 * @create 2021-04-09 12:29 */</span> <span class="token annotation punctuation">@Component</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomerGlobalFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span> <span class="token punctuation">,</span>Ordered <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain                              chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自定义全局过滤器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h2><span id="6gateway网关限流"><strong>6.Gateway网关限流</strong></span></h2><p>gateway默认给我们提供了限流实现，也就是网关拦截器RequestRateLimiter。</p><h3><span id="61-令牌桶限流算法"><strong>6.1</strong> <strong>令牌桶限流算法</strong></span></h3><p>RequestRateLimiter底层实现是令牌桶算法；</p><p>令牌桶内存储令牌，令牌桶需要设置令牌容量，也就是系统最大的并发大；</p><p>以一定的速率生成令牌（具体速率根据系统性能设置），放到令牌桶，如果桶慢了，则丢弃；</p><p>客户端来一个请求，则先去令牌桶获取令牌，拿到令牌，则处理请求，否则 丢弃或者返回失败；</p><p>令牌桶算法的优点：</p><p>通过恒定的速率生成令牌桶，能够让请求处理更均匀，不会出现短时间大量的请求处理；</p><p>比较友好的控制高并发；</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Gateway </tag>
            
            <tag> 网关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrum敏捷开发流程</title>
      <link href="/2021/12/06/scrum-min-jie-kai-fa-liu-cheng/"/>
      <url>/2021/12/06/scrum-min-jie-kai-fa-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h1><span id="scrum敏捷开发流程">Scrum敏捷开发流程</span></h1><p>Scrum敏捷开发流程主要包扩三个角色、四个会议和三个物件。</p><h2><span id="三个角色"><strong>三个角色</strong></span></h2><p><strong>Scrum团队中包括三个角色，他们分别是产品负责人、开发团队和项目的直接管理者（Scrum Master）。</strong></p><p>Scrum 团队是自组织、跨职能的完整团队。自组织团队决定如何最好地完成他们的工作,而不是由团队外的其他人来指挥他 们。</p><p>跨职能的团队拥有完成工作所需要的全部技能,不需要依赖团队外部的人。Scrum 团队模式的目的是最大限度地优化适应性、创造性和生产力。</p><p>Scrum 团队通过迭代和增量交付产品功能的方法最大化反馈的机会。增量交付潜在可交付的产品增量保证了 每个迭代都有潜在可发布的版本。</p><h3><span id="scrum角色之产品负责人">Scrum角色之：产品负责人</span></h3><p>产品负责人负责最大化产品以及开发团队工作的价值。实现这一点的方式会随着组 织、Scrum 团队以及单个团队成员的不同而不同。</p><p>产品负责人是管理产品待办事项列表的唯一责任人。产品待办事项列表的管理包括:</p><p>● 清晰地表达产品代办事项列表条目</p><p>● 对产品代办事项列表中的条目进行排序,最好地实现目标和使命</p><p>● 确保开发团队所执行工作的价值</p><p>● 确保产品代办事项列表对所有人可见、透明、清晰,并且显示 Scrum 团队的下一步工作</p><p>● 确保开发团队对产品代办事项列表中的条目达到一定程度的理解</p><p>产品负责人可以亲自完成上述工作,也可以让开发团队来完成。然而,产品负责人是 负责任者。</p><p>产品负责人是一个人,而不是一个委员会。产品负责人可能会在产品代办事项列表中 体现一个委员会的需求,但要想改变某条目的优先级必须先说服产品负责人。</p><p>为保证产品负责人的工作取得成功,组织中的所有人员都必须尊重他的决定。产品负 责人所作的决定在产品待办事项列表的内容和排序中要清晰可见。任何人都不得要求开发 团队按照另一套需求开展工作,开发团队也不允许听从任何其他人的指令。</p><h3><span id="scrum角色之开发团队">Scrum角色之：开发团队</span></h3><p>开发团队包含了专业人员,负责在每个 Sprint 的结尾交付潜在可发布的“完成”产 品增量。只有开发团队的成员才能创造增量。</p><p>开发团队由组织构建并授权,来组织和管理他们的工作。所产生的协同工作能最大化 开发团队的整体效率和效力。开发团队有以下几个特点:</p><p>他们是自组织的,没有人(即使是 Scrum Master 都不可以)告诉开发团队如何把产品 代办事项列表变成潜在可发布的功能。</p><p>开发团队是跨职能的,团队作为一个整体拥有创造产品增量所需要的全部技能。</p><p>Scrum 不认可开发团队成员的头衔,无论承担哪种工作他们都是开发者。此规则无一例外。</p><p>开发团队中的每个成员可以有特长和专注领域,但是责任归属于整个开发团队</p><p>开发团队不包含如测试或业务分析等负责特定领域的子团队。</p><h3><span id="scrum角色之scrum-master">Scrum角色之：Scrum Master</span></h3><p>Scrum Master 负责确保 Scrum 被理解并实施。为了达到这个目的,Scrum Master要确保 Scrum 团队遵循 Scrum 的理论、实践和规则。Scrum Master是Scrum团队中的服务式领导。</p><p>Scrum Master 帮助 Scrum 团队外的人员了解他们如何与 Scrum 团队交互是有益的。 Scrum Master 通过改变这些交互来最大化 Scrum 团队所创造的价值。</p><p>Scrum Master 服务于产品负责人</p><p>Scrum Master 以各种方式服务于产品负责人,包括:</p><p>● 找到有效管理产品代办事项列表的技巧</p><p>● 清晰地和开发团队沟通愿景、目标和产品代表事项列表条目</p><p>● 教导开发团队创建清晰简明的产品代表事项列表条目</p><p>● 在经验主义环境中理解长期的产品规划</p><p>● 理解并实践敏捷</p><p>● 按需推动Scrum活动</p><p>Scrum Master 服务于开发团队</p><p>Scrum Master 以各种方式服务于开发团队,包括:</p><p>● 指导开发团队自组织和跨职能</p><p>● 教导并领导开发团队创造高价值的产品</p><p>● 移除开发团队进展过程中的障碍</p><p>● 按需推动Scrum活动</p><p>● 在 Scrum 还未完全被采纳和理解的组织环境下指导开发团队</p><p>Scrum Master 服务于组织</p><p>Scrum Master 以各种方式服务于组织,包括:</p><p>● 领导并指导组织采用 Scrum</p><p>● 在组织范围内计划 Scrum 的实施</p><p>● 帮助员工及干系人理解并实施 Scrum 和经验性产品开发</p><p>● 发起能提升Scrum 团队生产力的变革</p><p>● 与其他 Scrum Master 一起工作,帮助组织更有效的应用Scrum</p><h2><span id="四个会议"><strong>四个会议</strong></span></h2><p><strong>四个会议指的是Sprint计划会议、每日例会、Sprint评审会议和Sprint回顾会议。</strong></p><h3><span id="sprint计划会议sprint-planning">Sprint计划会议（Sprint Planning）</span></h3><p>在Scrum中，Sprint计划会议有两部分：</p><p>\1. 决定需要完成哪些工作？</p><p>\2. 决定这些工作如何完成？</p><p>第一部分：需要完成哪些工作？</p><p>参会人员：团队、项目负责人（Scrum Master）、产品负责人（Product Owner）</p><p>第一部分的会议，产品负责人向开发团队介绍排好序的产品待办事项，由整个Scrum团队共同理解这些工作。</p><p>Sprint中需要完成的产品待办事项数目完全由开发团队决定。做多少工作只能由开发团队决定，产品负责人或任何其它人都不能给开发团队强加更多的工作量。</p><p>第二部分：如何完成工作？</p><p>参会人员：Team 、Scrum Master</p><p>第二部分的会议，开发团队需要根据当前的“完成的定义”一起决定如何实现下一个产品增量。他们进行足够的设计和计划，从而有信心可以在Sprint中完成所有工作。</p><p>决定如何完成工作是开发团队的职责，决定做什么则是产品负责人的职责。</p><p>Sprint计划会议最终需要Scrum团队对Sprint需要完成工作的数量和复杂度达成共识，最终产生的待办事项列表就是“Sprint待办事项列表（Sprint Backlog）”。</p><p>Sprint待办事项列表是一个需要在当前Sprint完成的且梳理过的产品待办事项，并包括了一个团队完成这些工作的计划。</p><h3><span id="每日站会daily-scrum">每日站会（Daily Scrum）</span></h3><p>开发团队是自组织的，通过每日站会来确认他们仍然可以实现Sprint的目标。</p><p>每一个开发团队成员需要提供以下三点信息：</p><p>● 从昨天的站立会到现在，我完成了什么；</p><p>●从现在到明天的站立会，我计划完成什么；</p><p>● 有什么阻碍了我的进展。</p><p>每日Scrum通常不超过15分钟。</p><p>每日Scrum中可能有简要的问题澄清和回答，但是不应该有任何话题的讨论。</p><p>每日Scrum既不是向管理层汇报，也不是向产品负责人或者ScrumMaster汇报。它是一个开发团队内部的沟通会议，来保证他们对现状有一致的了解。</p><p>只有Scrum团队的成员，包括ScrumMaster和产品负责人，可以在会议中发言。其他感兴趣的人可以来旁听。</p><h3><span id="sprint评审会议sprint-review">Sprint评审会议（Sprint Review）</span></h3><p>Sprint结束时，Scrum团队和相关人员一起评审Sprint的产出。所有Scrum会议都是限定时长的，Sprint评审会议的推荐时长是Sprint中的每一周对应一个小时（比如，一个Sprint包含2个星期，则Sprint评审会议时长为2个小时）。</p><p>每个人都可以在Sprint评审会议上发表意见。产品负责人会对未来做出最终的决定，并适当地调整产品待办事项列表（Product Backlog）。</p><p>Sprint评审会议向每个人展示了当前产品增量的概况。通常都会在Sprint评审会议中调整产品待办事项列表。</p><h3><span id="sprint回顾会议sprint-retrospective">Sprint回顾会议（Sprint Retrospective）</span></h3><p>在每个Sprint结束后，Scrum团队会聚在一起开Sprint回顾会议，目的是回顾一下团队在流程、人际关系以及工具方面做得如何。团队识别出哪些做得好，哪些做得不好，并找出潜在的改进事项，为将来的改进制定计划。所有的Scrum会议都是限定时长的，Sprint回顾会议的推荐时长是Sprint中的每一周对应一个小时（译者注：比如，一个Sprint包含2个星期，则Sprint回顾会议时长为2个小时）。</p><p>Scrum团队总是在Scrum的框架内，改进他们自己的流程。</p><h2><span id="scrum的三个物件"><strong>SCRUM的三个物件</strong></span></h2><p><strong>三个物件指的是产品待办事项列表（Product Backlog）、Sprint Backlog和燃尽图</strong></p><h3><span id="product-backlog-产品待办事项列表">Product Backlog – 产品待办事项列表</span></h3><p>产品待办事项列表是一个排序的列表,包含所有产品需要的东西,也是产品需求变动的唯一来源。产品负责人负责产品待办事项列表的内容、可用性和优先级。</p><p>产品待办事项列表是一个持续完善的清单, 最初的版本只列出最初始的和众所周知的需求。 产品待办事项列表根据产品和开发环境的变化而演进。待办事项列表是动态的,它经常发生变化以识别使产品合理、有竞争力和有用所必需的东西。只要产品存在,产品待办事项列表就存在。</p><p>产品待办事项列表列出了所有的特性、功能、需求、改进方法和缺陷修复等对未来发布产品进行的改变。产品待办事项列表条目包含描述、次序和估算的特征。</p><p>产品待办事项列表通常以价值、风险、优先级和必须性排序。它是一个按照优先级由高到低排列的一个序列，每个条目有唯一的顺序。排在顶部的产品待办事项列表条目需要立即进行开发。排序越高,产品待办事项列表条目越紧急,就越需要仔细斟酌,并且对其价值的意见越一致。</p><p>排序越高的产品待办事项列表条目比排序低的更清晰、更具体。根据更清晰的内容和 更详尽的信息就能做出更准确的估算。优先级越低,细节信息越少。开发团队在接下来的 Sprint 中将要进行开发的产品待办事项列表条目是细粒度的,已经被分解过,因此,任何 一个条目在 Sprint 的时间盒内都可以被“完成”。开发团队在一个 Sprint 中可以“完 成”的产品待办事项列表条目被认为是“准备好的”或者“可执行的”,能在 Sprint 计 划会议中被选择。</p><p>随着产品的使用、价值的获取以及市场的反馈,产品待办事项列表变成了更大、更详 尽的列表。因为需求永远不会停止改变,所以产品待办事项列表是个不断更新的工件。业 务需求、市场形势和技术的变化都会引起产品待办事项列表的变化。</p><p>若干个 Scrum 团队常常会一起开发某个产品。但描述下一步产品开发工作的产品待办事项列表只能有一个。那么这就需要使用对产品待办事项列表条目进行分组的属性。</p><p>通过产品Backlog地梳理来增添细节、估算和排序。这是一个持续不断 的过程,产品负责人和开发团队协作讨论产品代表事项列表条目的细节。在产品待办事项列表梳理的时候,条目会被评审和修改。然而, 产品负责人可以随时更新产品代办事项列表条目或酌情决定。</p><p>梳理在 Sprint 中是一项兼职活动,在产品负责人和开发团队之间展开。通常,开发 团队有自行优化的领域知识。然而,何时如何完成优化是 Scrum 团队的决定。优化通常占用不超过开发团队 10%的时间。</p><p>开发团队负责所有的估算工作。产品负责人可以通过协助团队权衡取舍来影响他们的 决定。但是,最后的估算是由执行工作的人来决定的。</p><h3><span id="sprint-backlog">SPRINT BACKLOG</span></h3><p>Sprint 代办事项列表是一组为当前 Sprint 选出的产品代办事项列表条目,外加交付 产品增量和实现 Sprint 目标的计划。Sprint 代办事项列表是开发团队对于哪些功能要包 含在下个增量中,以及交付那些功能所需工作的预计。</p><p>Sprint 代办事项列表定义了开发团队把产品代办事项列表条目转换成“完成”的增量 所需要执行的工作。Sprint 代办事项列表使开发团队确定的、达到 Sprint 目标所需的工 作清晰可见。</p><p>Sprint 代办事项列表是一份足够具体的计划,使得进度上的改变能在每日例会中得到 理解。开发团队在整个 Sprint 中都会修改 Sprint 代办事项列表,Sprint 代办事项列表也 会在 Sprint 的进程中慢慢显现,比如开发团队按照计划工作并对完成 Sprint 目标所需的 工作有更多的了解。</p><p>当出现新工作时,开发团队需要将其追加到 Sprint 待办事项列表中去。随着任务进 行或者被完成,需要更新每项任务的估算剩余工作量。如果计划中某个部分失去开发的意 义,就可以将其除去。在 Sprint 内只有开发团队可以对 Sprint 待办事项列表进行修改。 Sprint 待办事项列表是高度可见的,是对团队计划在当前 Sprint 内完成工作的实时反 映,并且,该列表只属于开发团队。</p><p>Product Backlog 功能点被放到Sprint的固定周期中，Sprint Backlog 会因为如下原因发生变化:</p><p>❶随着时间的变化，开发团队对于需求有了更好的理解，有可能发现需要增加一些新的任务到Sprint Backlog中。</p><p>❷程序缺陷做为新的任务加进来，这个都做为承诺提交任务中未完成的工作。</p><p>Product Owner也许会和Scrum team一起工作，以帮助team更好的理解Sprint的目标，ScrumMaster和team也许会觉得小的调整不会影响sprint的进度，但会给客户带来更多商业价值。</p><h3><span id="燃尽图burn-down-chart">燃尽图（BURN-DOWN CHART)</span></h3><p>Sprint燃尽图（Sprint Burn-down Chart)</p><p>Sprint Burndown Chart 显示了Sprint中累积剩余的工作量，它是一个反映工作量完成状况的趋势图。 图中Y轴代表的是剩余工作量，X轴代表的是Sprint的工作日。</p><p>在Sprint开始的时候，Scrum Team会标示和估计在这个Sprint需要完成的详细的任务。所有这个Sprint中需要完成，但没有完成的任务的工作量是累积工作量，团队会根据进展情况每天更新累积工作量，如果在Sprint结束时，累积工作量降低到0，Sprint就成功结束。</p><p>由于在Sprint的刚开始的时候，增加的任务工作量可能大于完成的任务工作量，所以燃尽图有可能略微呈上升趋势。</p><p>发布燃尽图（Release Burn-down Chart）</p><p>在Scrum项目中，团队通过每个Sprint结束时更新的发布燃尽图来跟踪整个发布计划的进展。发布燃尽图记录了在一段时间内产品Backlog的总剩余估算工作量的变化趋势。X轴代表的项目周期，以Sprint为单位， Y轴代表的是剩余工作量，通常以用户故事点、理想人天或者team-days为单位。</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> Scrum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义Spring Boot Starter</title>
      <link href="/2021/12/06/zi-ding-yi-spring-boot-starter/"/>
      <url>/2021/12/06/zi-ding-yi-spring-boot-starter/</url>
      
        <content type="html"><![CDATA[<h1><span id="自定义spring-boot-starter">自定义Spring Boot Starter</span></h1><h2><span id="背景">背景</span></h2><p>众所周知Spring Boot由众多Starter组成，随着版本的推移Starter家族成员也与日俱增。在传统Maven项目中通常将一些层、组件拆分为模块来管理，以便相互依赖复用，在Spring Boot项目中我们则可以创建自定义Spring Boot Starter来达成该目的。</p><h2><span id="创建maven">创建maven</span></h2><p>好，开始，先创建一个Maven项目并引入依赖，pom.xml如下，供参考~</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>example-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                               <span class="token comment" spellcheck="true">&lt;!-- Import dependency management from Spring Boot --></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h2><span id="artifactid的命名">artifactId的命名</span></h2><p>这里说下artifactId的命名问题，Spring 官方 Starter通常命名为spring-boot-starter-{name}如 spring-boot-starter-web， <a href="https://link.jianshu.com/?t=http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-custom-starter-naming">Spring官方建议</a>非官方Starter命名应遵循{name}-spring-boot-starter的格式。</p><h2><span id="starter实现">Starter实现</span></h2><p>这里讲一下我们的Starter要实现的功能，很简单，提供一个Service，包含一个能够将字符串加上前后缀的方法String wrap(String word)。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleService</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String prefix<span class="token punctuation">;</span>        <span class="token keyword">private</span> String suffix<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token function">ExampleService</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">,</span> String suffix<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>prefix <span class="token operator">=</span> prefix<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>suffix <span class="token operator">=</span> suffix<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">wrap</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">return</span> prefix <span class="token operator">+</span> word <span class="token operator">+</span> suffix<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>前缀、后缀通过读取application.properties(yml)内的参数获得</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"example.service"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleServiceProperties</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> String prefix<span class="token punctuation">;</span>        <span class="token keyword">private</span> String suffix<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略 getter setter</span><span class="token punctuation">}</span></code></pre><p><strong>重点</strong>，编写AutoConfigure类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>ExampleService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>ExampleServiceProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleAutoConfigure</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> ExampleServiceProperties properties<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"example.service"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span>havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span>        ExampleService <span class="token function">exampleService</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">ExampleService</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>properties<span class="token punctuation">.</span><span class="token function">getSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>解释下用到的几个和Starter相关的注解：</p><ul><li>@ConditionalOnClass，当classpath下发现该类的情况下进行自动配置。</li><li>@ConditionalOnMissingBean，当Spring Context中不存在该Bean时。</li><li>@ConditionalOnProperty(prefix = “example.service”,value = “enabled”,havingValue = “true”)，当配置文件中example.service.enabled=true时。</li></ul><p>更多相关注解，建议阅读<a href="https://link.jianshu.com/?t=http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-bean-conditions">官方文档该部分</a>。</p><p>最后一步，在resources/META-INF/下创建spring.factories文件，内容供参考下面~</p><p>org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.autocinfigure.ExampleAutoConfigure</p><p>OK，完事，运行 mvn:install打包安装，一个Spring Boot Starter便开发完成了。如果你需要该Starter的源代码，<a href="https://link.jianshu.com/?t=https://github.com/lihengming/example-starter">点这里</a>。</p><h2><span id="验证starter">验证starter</span></h2><p>创建一个Spring Boot项目来 试试~</p><p>引入example-spring-boot-starter依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>example-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>创建application.properties，进行配置</p><p>example.service.enabled=true </p><p>example.service.prefix=#### </p><p>example.service.suffix=@@@@</p><p>创建一个简单的Spring Web Application，注入Starter提供的ExampleService看它能否正常工作~</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span> <span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>         <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> ExampleService exampleService<span class="token punctuation">;</span>         <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/input"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> String <span class="token function">input</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> exampleService<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动Application，访问/input接口试试看~</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/1603753-9f9810fe2efe933f.webp" alt="1603753-9f9810fe2efe933f"></p><h2><span id="总结">总结</span></h2><p>总结下Starter的工作原理</p><ol><li>Spring Boot在启动时扫描项目所依赖的JAR包，寻找包含spring.factories文件的JAR包</li><li>根据spring.factories配置加载AutoConfigure类</li><li>根据 @Conditional注解的条件，进行自动配置并将Bean注入Spring Context</li></ol><p>参考：</p><p><a href="https://www.jianshu.com/p/45538b44e04e">https://www.jianshu.com/p/45538b44e04e</a></p><p><a href="https://www.jianshu.com/p/bbf439c8a203">https://www.jianshu.com/p/bbf439c8a203</a></p><p><a href="https://www.cnblogs.com/hello-shf/p/10864977.html">https://www.cnblogs.com/hello-shf/p/10864977.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 组件 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos学习笔记</title>
      <link href="/2021/12/06/nacos-xue-xi-bi-ji/"/>
      <url>/2021/12/06/nacos-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2><span id="1-nacos简介">1-nacos简介</span></h2><p>Nacos一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p><strong>功能：</strong></p><p><strong>1，动态配置服务</strong></p><p>动态配置服务让您能够以中心化、外部化和动态化的方式管理所有环境的配置。动态配置消除了配置变更时重新部署应用和服务的需要。配置中心化管理让实现无状态服务更简单，也让按需弹性扩展服务更容易。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/suvork5cyii=.png" alt="img"></p><p><strong>2，服务发现及管理</strong></p><p>动态服务发现对以服务为中心的（例如微服务和云原生）应用架构方式非常关键。Nacos支持DNS-Based和RPC-Based（Dubbo、gRPC）模式的服务发现。Nacos也提供实时健康检查，以防止将请求发往不健康的主机或服务实例。借助Nacos，您可以更容易地为您的服务实现断路器。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/ru5erkjggg==.png" alt="img"></p><p><strong>3，动态DNS服务</strong></p><p>通过支持权重路由，动态DNS服务能让您轻松实现中间层负载均衡、更灵活的路由策略、流量控制以及简单数据中心内网的简单DNS解析服务。动态DNS服务还能让您更容易地实现以DNS协议为基础的服务发现，以消除耦合到厂商私有服务发现API上的风险。</p><p>Nacos中文官方站点：</p><p><a href="https://nacos.io/zh-cn/">https://nacos.io/zh-cn/</a></p><h2><span id="2-nacos-server安装">2-nacos server安装</span></h2><p>Nacos Server依赖于java环境运行，jdk用1.8以上；</p><p>安装：</p><p><a href="https://nacos.io/zh-cn/docs/quick-start.html">https://nacos.io/zh-cn/docs/quick-start.html</a></p><p> 默认启动是集群方式：</p><p>我们修改startup.cmd默认配置 set MODE=”cluster”：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/aelftksuqmcc.png" alt="img"></p><p>改成 standalone 单实例运行；</p><p>默认端口：8848</p><p>配置数据库：</p><p>### Count of DB:</p><p>db.num=1</p><p>### Connect URL of DB:</p><p>db.url.0=jdbc:mysql://127.0.0.1:3306/db_nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</p><p>db.user.0=root</p><p>db.password.0=123456</p><p>### Connection pool configuration: hikariCP</p><p>db.pool.config.connectionTimeout=30000</p><p>db.pool.config.validationTimeout=10000</p><p>db.pool.config.maximumPoolSize=20</p><p>db.pool.config.minimumIdle=2</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/suvork5cyii=1.png" alt="img"></p><p>执行sql脚本；</p><h2><span id="3-配置中心入门实例">3-配置中心入门实例</span></h2><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E</a></p><p>springcloudalibaba springcloud springboot版本</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/ru5erkjggg==1.png" alt="img"></p><p>我们选用 </p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/suvork5cyii=2.png" alt="img"></p><p>客户端配置</p><p>spring.application.name=nacos_config_test</p><p>spring.cloud.nacos.config.server-addr=127.0.0.1:8848</p><p>spring.cloud.nacos.config.group=DEFAULT_GROUP</p><p>spring.cloud.nacos.config.name=nacos_config.properties</p><p>启动类加：</p><p>@EnableDiscoveryClient</p><p>通过@Value 读取配置：</p><p>通过@RefreshScope刷新读取最新配置；</p><h2><span id="4-配置中心数据模型">4-配置中心数据模型</span></h2><p>Nacos 数据模型 Key 由三元组唯一确定, Namespace默认是空串，公共命名空间（public），分组默认是 DEFAULT_GROUP。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/aelftksuqmcc1.png" alt="img"></p><h2><span id="5-加载多配置集">5-加载多配置集</span></h2><p>有时候为了多模块项目的配置共享，我们需要进行配置拆分以及加载多配置集；</p><p>比如我们有10个业务模块项目；mysql，redis，reabbitmq等配置都是一样的，为了统一管理，我们在nacos配置中心需要单独的搞成一个通用配置，然后供主项目引入；</p><p>案例：</p><p>抽取公共配置：</p><p>mysql_common.properties</p><p>DEFAULT_GROUP</p><p>java1234.mysql.common=mysqlconfig</p><p>redis_common.properties</p><p>DEFAULT_GROUP</p><p>java1234.redis.common=redisconfig</p><p>业务模块项目CRM:</p><p>crm.properties</p><p>CRM_GROUP</p><p>java1234.crm.config=crm</p><p>业务模块项目OA</p><p>oa.properties</p><p>OA_GROUP</p><p>java1234.oa.config=oa</p><p> 配置：</p><p>spring.cloud.nacos.config.extension-configs[0].data-id=mysql_common.properties</p><p>spring.cloud.nacos.config.extension-configs[0].group=DEFAULT_GROUP</p><p>spring.cloud.nacos.config.extension-configs[0].refresh=true</p><p>spring.cloud.nacos.config.extension-configs[1].data-id=redis_common.properties</p><p>spring.cloud.nacos.config.extension-configs[1].group=DEFAULT_GROUP</p><p>spring.cloud.nacos.config.extension-configs[1].refresh=true</p><p>spring.cloud.nacos.config.extension-configs[2].data-id=crm.properties</p><p>spring.cloud.nacos.config.extension-configs[2].group=CRM_GROUP</p><p>spring.cloud.nacos.config.extension-configs[2].refresh=true</p><p>spring.cloud.nacos.config.extension-configs[3].data-id=oa.properties</p><p>spring.cloud.nacos.config.extension-configs[3].group=OA_GROUP</p><p>spring.cloud.nacos.config.extension-configs[3].refresh=true</p><h2><span id="6-配置中心其他功能">6-配置中心其他功能</span></h2><p>1，配置导出和导入；</p><p>2，配置克隆功能；</p><p>3，历史版本，可以进行版本回滚；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/suvork5cyii=3.png" alt="img"></p><p>4，监听查询，查看哪些客户端正在监听配置中心；</p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/suvork5cyii=4.png" alt="img" style="zoom:75%;"><h2><span id="7-服务注册于发现简介">7-服务注册于发现简介</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/ru5erkjggg==2.png" alt="img"></p><p>大的分布式微服务项目会根据业务，把项目拆分成多个业务模块项目，然后互相调用；</p><p>如何互相调用呢？</p><p>这里我们每个项目模块都需要去nacos服务注册中心注册下，登记下每个项目自身的地址和端口，然后其他的项目模块就可以通过Nacos找到需要调用的其他模块项目的地址了；</p><p>这样就可以实现服务的发现和调用；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/ru5erkjggg==3.png" alt="img"></p><h2><span id="8-服务注册发现">8-服务注册发现</span></h2><p>引入依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 服务注册/发现--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p> 配置服务发现：</p><p>spring:</p><p> application:</p><p>  name: nacos-order</p><p> cloud:</p><p>  nacos: </p><p>   discovery:</p><p>​    server-addr: 127.0.0.1:8848</p><p> 启动类加主机：</p><p>@EnableDiscoveryClient</p><p>能够让注册中心发现</p><h2><span id="9-openfeign服务调用实现">9-openfeign服务调用实现</span></h2><p>引入依赖： </p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- openfeign --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>定义Feign接口，生成动态代理对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"nacos-stock"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StockFeignService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/stock/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span>String info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>启动类：</p><p>@EnableFeignClients(basePackages = “com.java1234.feign”)</p><p>开启Feign客户端支持 </p><p>注意：通过feign调用的服务必须在同一namespace，否则无法找到服务</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/clipboard-163879683166511.png" alt="img"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/clipboard-163879686919321.png" alt="img"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/clipboard-163879689431432.png" alt="img"></p><h2><span id="10-服务领域模型">10-服务领域模型</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/aelftksuqmcc2.png" alt="img"></p><h2><span id="11-nocas高可用集群">11-nocas高可用集群</span></h2><p>为了防止一个nacos崩掉，我们可以搞个3个或者3个以上的nacos集群部署，实现高可用；</p><p> startup.bat Model改成cluster集群模式</p><p>nacos程序文件复制三分，端口分别搞成 8848，8849 ， 8850；</p><p>修改 application.properties 端口改下；</p><p>设置下IP</p><p>nacos.inetutils.ip-address=127.0.0.1</p><p>cluster.conf.example改成cluster.conf</p><p>以及配置上ip列表：</p><p>127.0.0.1:8848</p><p>127.0.0.1:8849</p><p>127.0.0.1:8850e</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 服务治理 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger3学习笔记</title>
      <link href="/2021/12/06/api-jie-kou-wen-dang-gui-fan-swagger3-xue-xi-bi-ji/"/>
      <url>/2021/12/06/api-jie-kou-wen-dang-gui-fan-swagger3-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>API接口文档规范Swagger3</p><h2><span id="1-swagger3-简介"><strong>1 Swagger3</strong> <strong>简介</strong></span></h2><p>Swagger（丝袜哥）是一个简单但功能强大的API表达工具。它具有地球上最大的API工具生态系统，数</p><p>以千计的开发人员，使用几乎所有的现代编程语言，都在支持和使用Swagger。使用Swagger生成API，</p><p>我们可以得到交互式文档，自动生成代码的SDK以及API的发现特性等。</p><p>前后端分离的项目，接口文档的存在十分重要。与手动编写接口文档不同，swagger是一个自动生成接</p><p>口文档的工具，在需求不断变更的环境下，手动编写文档的效率实在太低。与swagger2相比新版的</p><p>swagger3配置更少，使用更加方便。</p><p>官网 <a href="https://swagger.io/">https://swagger.io/</a></p><p>在线编辑器 <a href="http://editor.swagger.io/">http://editor.swagger.io/</a></p><p>Swagger作用：</p><p>将项目中所有的接口展现在页面上，这样后端程序员就不需要专门为前端使用者编写专门的接口文</p><p>档；</p><p>当接口更新之后，只需要修改代码中的 Swagger 描述就可以实时生成新的接口文档了，从而规避</p><p>了接口文档老旧不能使用的问题；</p><p>通过 Swagger 页面，我们可以直接进行接口调用，降低了项目开发阶段的调试成本。现在SWAGGER官网主要提供了几种开源工具，提供相应的功能。可以通过配置甚至是修改源码以达到</p><p>你想要的效果</p><p><strong>Swagger Codegen</strong>: 通过Codegen 可以将描述文件生成html格式和cwiki形式的接口文档，同时也能生</p><p>成多钟语言的服务端和客户端的代码。支持通过jar包，docker，node等方式在本地化执行生成。也可</p><p>以在后面的Swagger Editor中在线生成。</p><p><strong>Swagger UI</strong>:提供了一个可视化的UI页面展示描述文件。接口的调用方、测试、项目经理等都可以在该</p><p>页面中对相关接口进行查阅和做一些简单的接口请求。该项目支持在线导入描述文件和本地部署UI项</p><p>目。</p><p><strong>Swagger Editor</strong>: 类似于markendown编辑器的编辑Swagger描述文件的编辑器，该编辑支持实时预览</p><p>描述文件的更新效果。也提供了在线编辑器和本地部署编辑器两种方式。</p><p><strong>Swagger Inspector</strong>: 感觉和postman差不多，是一个可以对接口进行测试的在线版的postman。比在</p><p>Swagger UI里面做接口请求，会返回更多的信息，也会保存你请求的实际请求参数等数据。</p><p><strong>Swagger Hub</strong>：集成了上面所有项目的各个功能，你可以以项目和版本为单位，将你的描述文件上传到</p><p>Swagger Hub中。在Swagger Hub中可以完成上面项目的所有工作，需要注册账号，分免费版和收费</p><p>版。</p><h2><span id="2-swagger3-helloworld实现"><strong>2 Swagger3 HelloWorld实现</strong></span></h2><h3><span id="第一步我们新建一个springboot项目"><strong>第一步：我们新建一个SpringBoot项目；</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206200553827.png" alt="image-20211206200553827"></p><p>加一个Spring Web依赖加下Swagger依赖：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206200631096.png" alt="image-20211206200631096"></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这里用的是 springfox，<strong>Swagger</strong> <strong>可以看作是一个遵循了</strong> <strong>OpenAPI</strong> <strong>规范的一项技术，而</strong> <strong>springfox</strong> <strong>则</strong></p><p><strong>是这项技术的具体实现。</strong></p><p>类似 JDBC是一套技术规范，各大数据库都有JDBC的实现；</p><p>最终项目pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0                              https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.java1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-test2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>swagger-test2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h3><span id="第二步开启swagger"><strong>第二步：开启Swagger</strong></span></h3><p>在 Spring Boot 的启动类添加 @EnableOpenApi 注解，开启 Swagger支持；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span> <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>oas<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableOpenApi<span class="token punctuation">;</span> <span class="token annotation punctuation">@EnableOpenApi</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerTestApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SwaggerTestApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3><span id="第三步新建helloworldcontrollerjava控制器类"><strong>第三步：新建HelloWorldController.java控制器类</strong></span></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>controller<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** @author java1234_小锋 * @site www.java1234.com * @company 南通小锋网络科技有限公司 * @create 2021-09-22 15:46 */</span> <span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/helloWorld"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> String <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"helloWorld"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>启动项目，浏览器输入：<a href="http://localhost:8080/helloWorld">http://localhost:8080/helloWorld</a></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206200712279.png" alt="image-20211206200712279"></p><p>没问题；</p><h3><span id="第四步访问swagger-ui查看接口文档"><strong>第四步：访问swagger-ui，查看接口文档</strong></span></h3><p>浏览器访问：<a href="http://localhost:8080/swagger-ui/">http://localhost:8080/swagger-ui/</a></p><p>显示如下图：主要三大区域，分组定义信息区块，API文档上信息区块以及最重要的接口定义信息区块；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206200755727.png" alt="image-20211206200755727"></p><p>展开HelloWorldController接口定义：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206200817128.png" alt="image-20211206200817128"></p><p>这里我们能看到枚举了所有可能的请求类型，因为我们用了 @RequestMapping ，以及请求地</p><p>址 /helloWorld ，我们再点开任意一个请求，</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206200855594.png" alt="image-20211206200855594"></p><p>我们可以看到，接口没有参数，返回值是 String 类型；</p><p>这里描述了完整的接口定义信息；前端开发人员一目了然，假如接口定义变化，前端开发人员刷新下</p><p>swagger-ui就能及时看到，比起以往的人工编写接口文档方便很多；</p><h3><span id="第五步swagger注解描述接口"><strong>第五步：Swagger注解描述接口</strong></span></h3><p>在接口描述的时候，控制器类，以及方法，参数，返回值等，默认的话，是英文无备注信息，可能会让</p><p>前端开发人员看起来吃力，会增加沟通成本；</p><p>Swagger提供一套注解，我们给接口添加中文注释；</p><p>我们在类上添加 @API 注解，以及在方法上添加 @ApiOperation 注解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>controller<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Api<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiOperation<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** @author java1234_小锋 * @site www.java1234.com * @company 南通小锋网络科技有限公司 * @create 2021-09-22 15:46 */</span> <span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags<span class="token operator">=</span><span class="token string">"helloWorld类测试"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"测试方法"</span><span class="token punctuation">)</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/helloWorld"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> String <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"helloWorld"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206200956568.png" alt="image-20211206200956568"></p><p>重启项目，刷新swagger-ui，发现已经以后中文注释了；</p><h2><span id="3-swagger3-常用配置注解讲解"><strong>3 Swagger3</strong> <strong>常用配置注解讲解</strong></span></h2><h3><span id="31-swagger3常用配置如下"><strong>3.1 Swagger3****常用配置如下：</strong></span></h3><p>swagger提供了一些配置用来描述接口，下面是一些常用的注解，必须掌握；</p><p>@Api：用在请求的类上，表示对类的说明 </p><p>tags=”说明该类的作用，可以在UI界面上看到的注解” </p><p>value=”该参数没什么意义，在UI界面上也看到，所以不需要配置” </p><p>@ApiOperation：用在请求的方法上，说明方法的用途、作用 </p><p>value=”说明方法的用途、作用” </p><p>notes=”方法的备注说明” </p><p>@ApiImplicitParams：用在请求的方法上，表示一组参数说明 </p><p>@ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面 </p><p>name：参数名 </p><p>value：参数的汉字说明、解释 </p><p>required：参数是否必须传 </p><p>paramType：参数放在哪个地方 </p><p>· header –&gt; 请求参数的获取：@RequestHeader </p><p>· query –&gt; 请求参数的获取：@RequestParam </p><p>· path（用于restful接口）–&gt; 请求参数的获取：@PathVariable </p><p>· div（不常用） </p><p>· form（不常用） </p><p>dataType：参数类型，默认String，其它值dataType=”Integer” </p><p>defaultValue：参数的默认值 </p><p>@ApiResponses：用在请求的方法上，表示一组响应 </p><p>@ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息 </p><p>code：数字，例如400 </p><p>message：信息，例如”请求参数没填好” </p><p>response：抛出异常的类 </p><p>@ApiModel：用于响应类上，表示一个返回响应数据的信息 </p><p>（这种一般用在post创建的时候，使用@RequestBody这样的场景， </p><p>请求参数无法使用@ApiImplicitParam注解进行描述的时候）</p><h3><span id="32-实例一-apiimplicitparams-和-apiimplicitparam-参数描述"><strong>3.2</strong> <strong>实例一</strong> @ApiImplicitParams <strong>和</strong> @ApiImplicitParam <strong>参数描述</strong></span></h3><p>post方式，根据name和age两个参数查询数据，返回信息；</p><p>我们用 @ApiImplicitParams 和 @ApiImplicitParam ，描述请求参数</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 查询 * @param name * @param age * @return */</span> <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/search"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>paramType                       <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"年龄"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>paramType <span class="token operator">=</span>                       <span class="token string">"query"</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span> <span class="token string">"Integer"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"测试查询"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">search</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> name<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>age<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>swagger控制台显示：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206202207917.png" alt="image-20211206202207917"></p><h3><span id="33-实例二-apimodel-apimodelproperty-实体参数描述"><strong>3.3</strong> <strong>实例二</strong> @ApiModel <strong>,</strong> @ApiModelProperty <strong>实体参数描述</strong></span></h3><p>我们搞一个用户信息添加,使用 @ApiModel , @ApiModelProperty 注解来描述输入参数；</p><p>先搞一个用户信息实体User.java</p><p>@ApiModelProperty：用在属性上，描述响应类的属性 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>entity<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiModel<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiModelProperty<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** * 用户实体  * @author java1234_小锋  * @site www.java1234.com* @company 南通小锋网络科技有限公司  * @create 2021-09-26 9:10 */</span> <span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span><span class="token string">"用户信息实体"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"编号"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>     <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>     <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"年龄"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">=</span>id<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> name<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> age<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> id<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>             <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>             <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>             <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>             <span class="token string">'}'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>参数上，直接用 User user</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 添加测试  * @param user  * @return */</span> <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"测试添加"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>swagger控制台显示：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206202645911.png" alt="image-20211206202645911"></p><h3><span id="34-实例三-apiresponses-apiresponse"><strong>3.4</strong> <strong>实例三</strong> @ApiResponses <strong>，</strong> @ApiResponse</span></h3><p>我们搞一个根据id获取用户信息案例，通过 @PathVariable 获取id，返回User对象，以及通过</p><p>@ApiResponses ， @ApiResponse ，描述响应码对应的描述信息</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"根据ID获取用户信息"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"用户编号"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>paramType                       <span class="token operator">=</span> <span class="token string">"path"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiResponses</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token annotation punctuation">@ApiResponse</span><span class="token punctuation">(</span>code<span class="token operator">=</span><span class="token number">408</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">"指定业务得报错信息，返回客户端"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token annotation punctuation">@ApiResponse</span><span class="token punctuation">(</span>code<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">"请求参数没填好"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token annotation punctuation">@ApiResponse</span><span class="token punctuation">(</span>code<span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">"请求路径没有或页面跳转路径不对"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> User <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>swagger控制台显示：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206202930545.png" alt="image-20211206202930545"></p><p><strong>Schemas</strong>也对应有视图用户实体描述信息显示：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206203039407.png" alt="image-20211206203039407"></p><h2><span id="4-swagger3-接口测试"><strong>4 Swagger3</strong> <strong>接口测试</strong></span></h2><p>swagger-ui图形客户端提供了接口测试功能；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206203128020.png" alt="image-20211206203128020"></p><p>默认情况下，这些参数都不能填写，禁用的；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206203150526.png" alt="image-20211206203150526"></p><p>我们点击“Try it out”按钮；即可开启接口测试功能；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206203229128.png" alt="image-20211206203229128"></p><p>输入请求参数后，点击“Execute‘按钮，即可执行，下方是后端返回信息；</p><p>类似的，我们可以测试添加功能；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206203259782.png" alt="image-20211206203259782"></p><p>说明：很多时候，前后端分离，传的是json，键值对，用swagger-ui提供的简陋接口测试工具很难用，</p><p>所以接口测试我们还是用专业的 postman</p><h2><span id="5-swagger3-api信息配置"><strong>5 Swagger3 API信息配置</strong></span></h2><p>默认情况，显示的API信息如下：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206203417735.png" alt="image-20211206203417735"></p><p>通过源码，我们可以看到：这个信息是通过 springfox.documentation.service.ApiInfo.java 类来</p><p>构造的；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206203503233.png" alt="image-20211206203503233"></p><p>最终通过 springfox.documentation.spring.web.plugins.Docket.java 类的构造方法传入</p><p>ApiInfo 类来最终构造；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206203552254.png" alt="image-20211206203552254"></p><p>我们要修改API信息默认配置的话，可以通过新建一个 com.java1234.config.Swagger3Config.java</p><p>配置类，重写 ApiInfo 实现，以及重写 Docket 实现并且设置apiInfo； </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>config<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span> <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ApiInfo<span class="token punctuation">;</span> <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Contact<span class="token punctuation">;</span> <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>DocumentationType<span class="token punctuation">;</span> <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** * @author java1234_小锋  * @site www.java1234.com  * @company 南通小锋网络科技有限公司* @create 2021-09-21 10:42 */</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swagger3Config</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/*** 配置swagger的Docket bean * @return */</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>OAS_30<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定swagger3.0版本 </span>            <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">createApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** * 配置swagger的ApiInfo bean  * @return */</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> ApiInfo <span class="token function">createApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span><span class="token string">"Java1234 Swagger"</span>                            <span class="token punctuation">,</span><span class="token string">"Java1234 Api Documentation"</span>                            <span class="token punctuation">,</span><span class="token string">"3.0"</span>                            <span class="token punctuation">,</span><span class="token string">"http://www.java1234.vip"</span>                            <span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"小锋"</span><span class="token punctuation">,</span> <span class="token string">"http://www.java1234.vip"</span><span class="token punctuation">,</span>                                         <span class="token string">"caofeng2012@126.com"</span><span class="token punctuation">)</span>                            <span class="token punctuation">,</span><span class="token string">"Apache 2.0"</span>                            <span class="token punctuation">,</span><span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span>                            <span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>重启项目，我们发现，APIInfo信息变了；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206203839980.png" alt="image-20211206203839980"></p><p>这个API信息主要作用是让前端开发人员看的，谁开发的接口，或者哪个小组负责，有问题方便联系沟</p><p>通；</p><h2><span id="6-swagger3-docket开关amp过滤amp分组-配置详解"><strong>6 Swagger3 Docket开关&amp;过滤&amp;分组 配置详解</strong></span></h2><p>我们可以通过设置Docket，可以配置很多功能，比如是否开启swagger，过滤，分组等；</p><h3><span id="61-开关设置enable"><strong>6.1 开关设置enable</strong></span></h3><p>一般情况，我们只有在开发环境才会用到swagger，正式环境需要关闭swagger，一个是安全问题，还</p><p>有一个是用了swagger会影响系统运行速度；</p><p>我们通过设置Docket对象的enable即可；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 配置swagger的Docket bean  * @return */</span> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>OAS_30<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定swagger3.0版本 </span>        <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 开关 </span>        <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">createApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>设置后，重启项目，发现已经看不到API信息了；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206204047084.png" alt="image-20211206204047084"></p><h3><span id="62-设置过滤"><strong>6.2 设置过滤</strong></span></h3><p>有些情况，我们需要指定固定包路径下的类生成API，或者根据前端用户路径请求过滤；</p><p>使用过滤，必须先调用 select 方法；</p><p>通过apis方法， basePackage 可以根据包路径来生成特定类的API， </p><p>any 方法是默认所有都有效， none 方法都无效；</p><p>withClassAnnotation 根据类注解， withMethodAnnotation 是根据方法注解；</p><p>一般我们用的是 basePackage 方法；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206204138661.png" alt="image-20211206204138661"></p><p>具体实例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 配置swagger的Docket bean  * @return */</span> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>OAS_30<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定swagger3.0版本 </span>        <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 开关 </span>        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.java1234.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定扫描 </span>        的包 常用方式        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">createApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>最后要加 build() 方法；</p><p>类似的还有一个根据请求路径的 paths 方法；</p><p>一般用 ant 匹配路径；</p><p>any 是匹配任意路径， none 是都不匹配， regex 是正则匹配；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206204240925.png" alt="image-20211206204240925"></p><p>具体实例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 配置swagger的Docket bean * @return */</span> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>OAS_30<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定swagger3.0版本 </span>        <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 开关 </span>        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/java1234/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 匹配 /java1234/**请求路径 </span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">createApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>swagger-ui视图只显示过滤后的API接口信息；</p><h3><span id="63-设置分组"><strong>6.3 设置分组</strong></span></h3><p>在实际项目开发中，把复杂项目划分多模块给多个小组或者多个人负责开发，所以每个小组或者个人要</p><p>实现自己的分组，方便查找到API接口开发负责人，沟通和处理问题；</p><p>我们通过 groupName 方法可以设置组名；</p><p>实例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 配置swagger的Docket bean * @return */</span> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>OAS_30<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定swagger3.0版本 </span>        <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"开发组001"</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 开关 </span>        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">createApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>刷新界面：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206204917170.png" alt="image-20211206204917170"></p><p>发现组名变了；</p><p>现在话，我们结合前面学过的过滤，通过apis的basePackage方法，搞两个组，分别扫描不同的包路</p><p>径；</p><p>模拟分组开发，controller包下建两个子包，分别是one和two包，用来模拟两个业务模块；</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206204949483.png" alt="image-20211206204949483"></p><p>简单搞个 HelloWorldController2 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>two<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>*<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** @author java1234_小锋 * @site www.java1234.com * @company 南通小锋网络科技有限公司* @create 2021-09-22 15:46 */</span> <span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags<span class="token operator">=</span><span class="token string">"helloWorld2类测试"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldController2</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**    * helloWorld测试     * @return     */</span>     <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"测试方法2"</span><span class="token punctuation">)</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/helloWorld2"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> String <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">"helloWorld2"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>我们搞两个 Docket 和两个 ApiInfo </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java1234<span class="token punctuation">.</span>config<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span> <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>RequestHandlerSelectors<span class="token punctuation">;</span> <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ApiInfo<span class="token punctuation">;</span> <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Contact<span class="token punctuation">;</span> <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>DocumentationType<span class="token punctuation">;</span> <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** @author java1234_小锋 * @site www.java1234.com * @company 南通小锋网络科技有限公司 * @create 2021-09-21 10:42 */</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swagger3Config</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**    * 配置swagger的Docket bean     * @return     */</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>OAS_30<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定swagger3.0版本 </span>            <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"开发组001"</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.java1234.controller.one"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指 </span>            定扫描的包 常用方式            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">createApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 配置swagger的Docket bean     * @return     */</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> Docket <span class="token function">createRestApi2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>OAS_30<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定swagger3.0版本 </span>            <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"开发组002"</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.java1234.controller.two"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指 </span>            定扫描的包 常用方式            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">createApiInfo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 配置swagger的ApiInfo bean     * @return     */</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> ApiInfo <span class="token function">createApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span><span class="token string">"Java1234 Swagger"</span>                            <span class="token punctuation">,</span><span class="token string">"Java1234 Api Documentation"</span>                            <span class="token punctuation">,</span><span class="token string">"3.0"</span>                            <span class="token punctuation">,</span><span class="token string">"http://www.java1234.vip"</span>                            <span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"小锋"</span><span class="token punctuation">,</span> <span class="token string">"http://www.java1234.vip"</span><span class="token punctuation">,</span>                                         <span class="token string">"caofeng2012@126.com"</span><span class="token punctuation">)</span>                            <span class="token punctuation">,</span><span class="token string">"Apache 2.0"</span>                            <span class="token punctuation">,</span><span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span>                            <span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 配置swagger的ApiInfo bean     * @return     */</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> ApiInfo <span class="token function">createApiInfo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span><span class="token string">"Java1234 Swagger"</span>                            <span class="token punctuation">,</span><span class="token string">"Java1234 Api Documentation"</span>                            <span class="token punctuation">,</span><span class="token string">"3.0"</span>                            <span class="token punctuation">,</span><span class="token string">"http://www.java1234.vip"</span>                            <span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"小丽"</span><span class="token punctuation">,</span> <span class="token string">"http://www.java1234.vip"</span><span class="token punctuation">,</span>                                         <span class="token string">"caofeng2012@126.com"</span><span class="token punctuation">)</span>                            <span class="token punctuation">,</span><span class="token string">"Apache 2.0"</span>                            <span class="token punctuation">,</span><span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span>                            <span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>启动项目运行；</p><p>开发组001</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206205356742.png" alt="image-20211206205356742"></p><p>开发组002</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20211206205453734.png" alt="image-20211206205453734"></p><p>测试OK;</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Swagger3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息系统项目管理师-学习笔记</title>
      <link href="/2021/12/05/ruan-kao-gao-ji-xin-xi-xi-tong-xiang-mu-guan-li-shi/"/>
      <url>/2021/12/05/ruan-kao-gao-ji-xin-xi-xi-tong-xiang-mu-guan-li-shi/</url>
      
        <content type="html"><![CDATA[<h2><span id="信息系统项目管理师-高级">信息系统项目管理师-高级</span></h2><p>[TOC]</p><h2><span id="论文">论文</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210726212849141.png" alt="image-20210726212849141"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210726212916331.png" alt="image-20210726212916331"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/image-20211229200437550-16407794826791.png" alt="image-20211229200437550"></p><hr><h2><span id="第01章信息化与信息系统">【第01章】信息化与信息系统</span></h2><h3><span id="11信息系统与信息化"><strong>1.1信息系统与信息化</strong></span></h3><h4><span id="信息的质量属性"><strong>信息的质量属性</strong></span></h4><p>①精确性：对事物状态描述的==精准程度==<br>②完整性：对事物状态描述的==全面程度==,完整信息应包括所有重要事实<br>③可靠性：指信息的来源、采集方法、传输过程是可以==信任的==，==符合预期==<br>④及时性：指获得信息的时刻与事件发生时刻的==间隔长短==<br>⑤经济性：指信息获取、传输带来的==成本==在可以接受的范围之内<br>⑥可验证性：指信息的主要质量属性可以被==证实或者证伪==的程度<br>⑦安全性：信息可以被==非授权访问==的可能性，可能性越低，安全性越高</p><h4><span id="信息技术"><strong>信息技术</strong></span></h4><p>核心是==传输技术==</p><ol><li>信源：产生信息的实体，信息产生后，由这个实体向外传播。如==QQ使用者==</li><li>信宿：信息的==归宿或接收者==,如使用QQ的另一方(当然这一方也是信源) ,他通过计算机屏幕接收QQ使用者发送的文字(如:你好! )。</li><li>信道：传送信息的通道，如==TCP/IP网络==</li><li>编码器 ：对编码信息进行加密再编码，如==量化器、压缩编码器、调制器==等</li><li>译码器：把信道上送来的信号(原始信息与噪声的叠加)转换成信宿能接受的信号,可包括==解调器、译码器、数模转换器==等</li><li>噪声：==干扰==:可以来自于信息系统分层结构的任何一-层，当噪声携带的信息大到一定程度的时候， 在信道中传输的信息可以被噪声掩盖导致传输失败。</li></ol><h4><span id="信息化五个层次">信息化五个层次</span></h4><p>①产品信息化：智能电视、智能灯具<br>②企业信息化：生产制造系统、==ERP、 CRM==、SCM<br>③产业信息化：农业、工业、交通运输业、生产制造业、服务业等==传统产业==<br>④国民经济信息化：金融、贸易、投资、计划、通关、营销等组成-一个信息大系统;<br>⑤社会生活信息化：==智慧城市、互联网金融==</p><h4><span id="信息化">信息化</span></h4><ul><li>主体：==全体社会成员==，包括政府、企业、事业、团体和个人</li><li>手段：基于==现代信息技术==的先进社会生产工具</li><li>途径：创建信息时代的社会生产力，推动社会生产关系及社会上层建筑的改革</li><li>目标：使==国家的综合实力、社会的文明素质和人民的生活质量==全面提升</li></ul><h4><span id="信息化体系六要素">信息化体系六要素</span></h4><p>①信息技术==应==用:龙==头==(==主阵地==)<br>②信息==资==源:核==心==任务<br>③信息==网==络：==基==础设施<br>④信息==技==术和产业：物质==基==础<br>⑤信息化==人==才：成功之==本==<br>⑥信息化==法==规：==保==障</p><p>==图形记忆法:    鹰上(应用)、下鸡(技术)、左人 (人才)、右龟(规范)==</p><p>==(记忆小技巧:    鹰头、鸡基、人本、法保、织-炽热的心、网基)==</p><h4><span id="信息系统生命周期">信息系统生命周期</span></h4><p>系统规==划==（可行性分析与项目开发计划）、</p><p>系统==分==析（需求分析）、</p><p>系统设==计==（概要设计、详细设计）、</p><p>系统==实==施（编码、测试）、</p><p>运==行==维护</p><p>==<strong>记忆技巧：划分即实行</strong>==</p><p>①系统规==划==阶段：对组织的环境、目标及现行系统的状况进行初步调查，根据组织目标和发展战略，确定信息系统的==发展战略==，对建设新系统的需求做出分析和预测，研究建设新系统的==必要性和可能性==。给出拟建系统的==备选方案==，写出==可行性研究报告==。(<strong>重要输出</strong>：可行性研究报告、系统设计任务书)</p><p>②系统==分==析阶段：根据系统设计任务书所确定的范围，对现行系统进行详细调查，描述现行系统的业务流程，指出现行系统的局限性和不足之处，确定新系统的基本目标和逻辑功能要求，即==提出新系统的逻辑模型。（做什么）==(<strong>重要输出</strong>：系统说明书)</p><p>③系统设==计==阶段：根据系统说明书中规定的功能要求，考虑实际条件，具体设计实现逻辑模型的技术方案，也就是==设计新系统的物理模型==。又称为物理设计阶段，可分为==总体设计（概要设计）和详细设计==两个子阶段。技术文档是==系统设计说明书。（怎么做）==（<strong>重要输出</strong>：系统设计说明书）</p><p>④系统==实==施阶段：将==设计的系统付诸实施==的阶段。任务包括计算机等设备的购置、安装和调试、程序的编写和调试、人员培训、数据文件转换、系统调试与转换等。这个阶段的特点是几个互相联系、互相制约的任务同时展开，必须精心安排、合理组织。系统实施是按实施计划分阶段完成的，每个阶段应写出==实施进展报告==。系统测试之后写出系统测试分析报告。（<strong>重要输出</strong>：实施进展报告、系统测试分析报告）</p><p>⑤系统运==行==和维护阶段：系统投入运行后，需要经常进行==维护和评价==，记录系统运行的情况，根据一定的规则对系统进行必要的修改，评价系统的工作质量和经济效益。（<strong>重要输出</strong>：系统运行情况）</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210807164739204.png" alt="image-20210807164739204"></p><h3><span id="12信息系统开发方法"><strong>1.2信息系统开发方法</strong></span></h3><p>开发方法包括==结构化==方法、==面向对象==方法、==原型化==方法、==面向服务==的方法</p><h4><span id="结构化方法">结构化方法</span></h4><h5><span id="精髓">精髓</span></h5><p>==自顶向下、逐步求精和模块化设计==</p><h5><span id="原理">原理</span></h5><p>一般是先把系统功能视为一 个大的模块，再根据系统分析与设计的要求对其进行进一步的模块分解或组合</p><h5><span id="主要特点">主要特点</span></h5><p>①开发目标清晰化<br>②开发工作阶段化<br>③开发文档规范化<br>④设计方法结构化</p><h5><span id="主要缺点">主要缺点</span></h5><p>①开发周期长<br>②难以适应需求变化<br>③很少考虑数据结构</p><h4><span id="面向对象oo方法">面向对象(OO)方法</span></h4><h5><span id="阶段">阶段</span></h5><p>==系统分析、系统设计和系统实现==三个阶段之间已经没有”缝隙”</p><h5><span id="特点">特点</span></h5><ol><li>使系统的描述及信息模型的表示与客观实体相对应，==符合人们的思维习惯==</li><li>有利于系统开发过程中用户与开发人员的==交流和沟通==，==缩短开发周期==</li></ol><h5><span id="适用范围">适用范围</span></h5><ul><li>可以普遍适用于==各类信息系统的开发==</li><li>使用==结构化方法==进行自顶向下的==整体划分==，自底向上地采用==OO方法进行开发==</li><li>结构化方法和00方法仍是两种在系统开发领域中==相互依存的、不可替代的方法==</li></ul><h5><span id="特征">特征</span></h5><p>==封装性==<br>系统的测试必须考虑到信息隐蔽原则对测试的影响，以及对象状态与类的测试序列</p><p>==继承性==<br>系统的测试必须考虑到继承对测试充分性的影响,以及误用引起的错误</p><p>==多态性==<br>系统的测试必须考虑到动态绑定对测试充分性的影响、抽象类的测试，以及误用对测试的影响</p><h5><span id="补充">补充</span></h5><p>1、面向对象(00)方法认为，客观世界是由各种对象组成的，任何事物都是对象<br>2、与结构化方法类似，00方法也划分阶段，但其中的==系统分析、系统设计和系统实现==三个阶段之间已经没有”缝隙”。也就是说，这三个阶段的界限变得不明确<br>3、OO方法使系统的描述及信息模型的表示与客观实体相对应，==符合人们的思维习惯==，有利于系统开发过程中用户与开发人员的交流和沟通,缩短开发周期。面向对象设计主要有三大特征:==封装性、继承性和多态性==，使用面向对象方法构造的系统具有更好的复用性<br>4、一些大型信息系统的开发,通常是将结构化方法和00方法结合起来。首先，使用==结构化方法==进行==自顶向下==的整体划分;然后，==自底向上==地采用==00方法==进行开发。因此，结构化方法和00方法仍是两种在系统开发领域中相互依存的、不可替代的方法。</p><p>面向对象方法00:对象、类、集成、封装、消息、多态。关键点:==在于是否建立一个全面、合理、统一的模型既能反应问题域又被计算机系统求解域所接受==<br>(1)面向对象的分析OOA:了解问题涉及的对象、对象的关系与操作，构造问题的对象模型<br>(2)面向对象的设计OOD:对OOA结果整理<br>(3)面向对象的程序设计OOP:系统功能的编码。<br>OO方法的分支: Coad/Yourdon、 Booch、 OMT (系统分析、系统设计、对象设计和实现)、OOSE</p><h4><span id="原型方法">原型方法</span></h4><h5><span id="原理">原理</span></h5><ul><li>系统开发初期必须明确系统的功能要求，确定系统边界</li><li>根据用户初步需求，利用系统开发工具，快速地建立一个系统模型展示给用户，在此基础_上与用户交流，最终实现用户需求的信息系统快速开发的方法</li></ul><h5><span id="分类">分类</span></h5><h6><span id="是否实现功能">是否实现功能</span></h6><p>水平原型</p><ul><li>也称为<strong>行为原型</strong>，用来探索预期系统的一些特定行为,并达到细化需求的目的</li><li>通常只是功能的导航，但并未真实实现功能</li><li>主要用在==界面==上</li></ul><p>垂直原型</p><ul><li>也称为<strong>结构化原型</strong>，实现了-部分功能</li><li>主要用在复杂的==算法==实现上</li></ul><h6><span id="最终结果">最终结果</span></h6><p>抛弃式原型</p><ul><li>用在解决需求==不确定性==、二义性、不完整性、含糊性</li></ul><p>演化式原型</p><ul><li>为开发==增量式==产品提供基础，逐步将原型演化成最终系统</li><li>必须易于升级和优化的场合，特别适用于==Web项目==</li></ul><h5><span id="特点">特点</span></h5><p>①使系统开发的周期缩短、成本和风险降低、速度加快，获得较高的综合开发效益。<br>②以用户为中心来开发系统的，用户参与的程度大大提高，开发的系统符合用户的需求，因而增加了用户的满意度，提高了系统开发的成功率。<br>③由于用户参与了系统开发的全过程，对系统的功能和结构容易理解和接受,有利于系统的移交，有利于系统的运行与维护。</p><h5><span id="优点">优点</span></h5><ul><li>主要在于能更有效地确认用户需求</li><li>用于那些需求不明确的系统开发</li><li>对于分析层面难度大、技术层面难度不大的系统，适合于原型法开发</li><li>而对于技术层面的困难远大于其分析层面的系统，则不宜用原型法。</li></ul><h4><span id="面向服务的方法">面向服务的方法</span></h4><ul><li>对于跨构件的功能调用，则采用接口的形式暴露出来。</li><li>进一步将接口的定义与实现进行解耦，则催生了服务和面向服务(SO) 的开发方法。</li><li>如何使信息系统快速响应需求与环境变化，==提高系统可复用性、信息资源共享和系统之间的互操作性==，成为影响信息化建设效率的关键问题，而SO的思维方式恰好满足了这种需求。</li></ul><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210807163434511.png" alt="image-20210807163434511"></p><h3><span id="13常规信息系统集成技术"><strong>1.3常规信息系统集成技术</strong></span></h3><h4><span id="osi模型">OSI模型</span></h4><p><strong>==口诀：物链网传会表应==</strong></p><p>①==物==理层：该层包括==物理连网媒介==，如电缆连线连接器。该层的协议产生并检测电压以便发送和接收携带数据的信号。有RS232、V. 35、RJ-45、FDDI。</p><p>②数据==链==路层：它控制网络层与物理层之间的通信。它的主要功能是将从网络层接收到的数据分割成特定的可被物理层传输的==帧==。协议有IEEE802.3/.2、HDLC、PPP、ATM。</p><p>③==网==络层：其主要功能是==将网络地址（例如，IP地址）翻译成对应的物理地址（例如，网卡地址）==，并决定如何将数据从发送方路由到接收方。有IP、ICMP、IGMP、IPX、ARP等。</p><p>④==传==输层：主要负责==确保数据可靠、顺序、无错地从A点传输到B点==。如提供建立、维护和拆除传送连接的功能；选择网络层提供最合适的服务；在系统之间提供可靠的透明的数据传送，提供端到端的错误恢复和流量控制。有TCP、UDP、SPX。</p><p>⑤==会==话层：负责在网络中的两节点之间建立和维持通信，以及提供交互会话的管理功能，如三种数据流方向的控制，即一路交互、两路交替和两路同时会话模式。有RPC、SQL、NFS。</p><p>⑥==表==示层：如同应用程序和网络之间的翻译官，数据将按照网络能理解的方案进行格式化；==管理数据的解密加密、数据转换、格式化和文本压缩==。有JPEG、ASCII、GIf、DES、MPEG。</p><p>⑦==应==用层：负责对软件提供接口以使程序能使用网络服务，如==事务处理程序、文件传送协议和网络管理==等。有HTTP、Telnet、FTP、SMTP。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210727215938148.png" alt="image-20210727215938148"></p><h4><span id="tcpip">==TCP/IP==</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210807163316362.png" alt="image-20210807163316362"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210807165231033.png" alt="image-20210807165231033"></p><h4><span id="网络存储技术">网络存储技术</span></h4><h5><span id="1直接附加存储das">①直接附加存储(DAS)</span></h5><ul><li>存储设备通过SCSI电缆直接连到服务器</li><li>其本身是硬件的堆叠，存储操作依赖于服务器，不带有任何存储操作系统</li><li>当存储容量增加时，==采用直接附加存储(DAS)方式很难扩容==</li><li>==<strong>小型计算机系统接口(SCSI)</strong>== 是一种用于计算机及其周边设备之间(硬盘、软驱、光驱、打印机、扫描仪等)系统级接口的独立处理器标准</li></ul><h5><span id="2网络附加存储nas">②网络附加存储(NAS)</span></h5><ol><li>通过网络接口与网络直接相连,由用户通过网络访问，支持==即插即用==;</li><li>NAS存储设备类似于一个专用的文件服务器，去掉了通用服务器的大多数计算功能，而==仅仅提供文件系统功能==，从而降低了设备的成本，不仅响应速度快，而且数据传输速率也很高。</li><li>支持多种==TCP/IP协议==，主要是NFS (网络文件系统)和CIFS (通用Internet文件系统)来进行文件访问，性能特点是进行==小文件级的共享存取==</li><li>可经济地解决存储容量不足的问题，但难以获得满意的性能</li></ol><h5><span id="3存储区域网络san">③存储区域网络(SAN)</span></h5><h6><span id="特点">特点</span></h6><ul><li>通过高速==光纤连接，极度可扩展型==;通过专用交换机将磁盘阵列与服务器连接起来的高速专用子网。</li><li>它==没有==采用文件共享存取方式，而是采用==块(block) 级别存储==</li></ul><h6><span id="分类">分类</span></h6><h6><span id="fcsan光纤通道fcfibre-channel">FCSAN（（FC，Fibre Channel））</span></h6><ul><li>热插拔性、高速带宽、远程连接、连接设备数量大等</li><li>==缺陷:成本高和非常复杂==</li></ul><h6><span id="ipsan">IPSAN</span></h6><ul><li>基于IP网络实现数据块级别存储方式的存储网络。==设备成本低，配置技术简单，可共享和使用大容量的存储空间==</li><li>使用TCP/IP协议对SCSI指令进行封装</li><li>可以使指令能够通过IP网络进行传输，而过程==完全不依赖于地点==</li></ul><h6><span id="ibsan-infiniband是一种交换结构-io技术">IBSAN  (InfiniBand是一种交换结构 I/O技术)</span></h6><ul><li>结构设计得非常紧密，大大提高了系统的性能、可靠性和有效性，能缓解各硬件设备之间的数据流量拥塞</li></ul><h4><span id="网络工程">网络工程</span></h4><h5><span id="网络规划">网络规划</span></h5><ul><li>网络需求分析</li><li>可行性分析</li><li>对现有网络的分析与描述</li></ul><h5><span id="网络设计">网络设计</span></h5><h6><span id="核心层">核心层</span></h6><p>通过高速转发通信，提供优化、可靠的==骨干传输结构==</p><h6><span id="汇聚层">汇聚层</span></h6><p>核心层和接入层的分界面，完成网络访问策略控制、==数据包处理、过滤、寻址，以及其他数据处理的任务==</p><h6><span id="接入层">接入层</span></h6><p>允许==终端用户连接到网络==</p><h4><span id="信息安全的基本要素">信息安全的基本要素</span></h4><ol><li>机密性：确保信息==不暴露给未授权==的实体或进程</li><li>完整性：只有得到允许的人才能修改数据,并且能够判别出数据==是否己被篡改==</li><li>可用性：得到授权的实体在需要时==可访问数据==，==攻击者==不能占用所有资源而阻碍授权者工作</li><li>可控性：可以==控制授权==范围内的信息流向及行为方式</li><li>可审查性：对出现的网络安全问题==提供调查的依据和手段==</li></ol><h5><span id="可用性可靠性">可用性/可靠性</span></h5><h6><span id="可用性">可用性</span></h6><ul><li>**平均无故障时间(MTTF)**（mean time to failure）</li><li>系统的可用性越高，平均无故障时间越长</li><li>==MTTF/ (MTTF+MTTR) *100%==系统保持正常运行时间的百分比</li></ul><h6><span id="可靠性">可靠性</span></h6><ul><li>**平均维修时间(MTTR)**（mean time to repair）</li><li>系统的可维护性越好，平均维修时间越短</li></ul><h5><span id="补充">补充</span></h5><h6><span id="华为芯片">华为芯片</span></h6><ul><li>麒麟 :华为在手机上搭载的CPU处理器芯片</li><li>巴龙:5G手机上搭载的调制解调器，支持NSA和SA组网方式,超过了高通x50基带|</li><li>异腾:华为推出的人工智能芯片，也是华为将在AI技术上的布局</li><li>鲲鹏:ARM处理器，是由华为研发设计的处理器芯片，在2019年推出的鲲鹏920基于7nm工艺打造，支持64个内核，也是华为在计算机电脑领域的布局</li></ul><h6><span id="华为操作系统">华为操作系统</span></h6><ul><li>鸿蒙:分布式操作系统</li></ul><h3><span id="14软件工程"><strong>1.4软件工程</strong></span></h3><h4><span id="软件需求">软件需求</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728210535271.png" alt="image-20210728210535271"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728210628083.png" alt="image-20210728210628083"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728210701677.png" alt="image-20210728210701677"></p><h4><span id="uml">UML</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728210822371.png" alt="image-20210728210822371"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210816140646695.png" alt="image-20210816140646695"></p><p>UML常用图的几种关系的总结</p><p><a href="https://blog.csdn.net/suxinpingtao51/article/details/8011335">https://blog.csdn.net/suxinpingtao51/article/details/8011335</a></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728211047546.png" alt="image-20210728211047546"></p><h4><span id="软件架构">软件架构</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728211543773.png" alt="image-20210728211543773"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728212029057.png" alt="image-20210728212029057"></p><h4><span id="软件设计">软件设计</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728212102613.png" alt="image-20210728212102613"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728212136297.png" alt="image-20210728212136297"></p><h4><span id="能力成熟度模型集成">==能力成熟度模型集成==</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728212415036.png" alt="image-20210728212415036"></p><p>==<strong>软考高项记忆小妙招—CMMI</strong>==</p><p><a href="https://blog.51cto.com/u_13886554/3089662">https://blog.51cto.com/u_13886554/3089662</a></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/f4151df27d09f30535726eb43638c9c4.png" alt="img"></p><h4><span id="软件测试">软件测试</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728212727158.png" alt="image-20210728212727158"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728212850663.png" alt="image-20210728212850663"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728213004374.png" alt="image-20210728213004374"></p><h4><span id="eai">==EAI==</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210727230107090.png" alt="image-20210727230107090"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822114123889.png" alt="image-20210822114123889"></p><h3><span id="15新一代信息技术"><strong>1.5新一代信息技术</strong></span></h3><h4><span id="物联网"><strong>物联网</strong></span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728214012818.png" alt="image-20210728214012818"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728214138463.png" alt="image-20210728214138463"></p><h4><span id="云计算"><strong>云计算</strong></span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728214234419.png" alt="image-20210728214234419"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728214359032.png" alt="image-20210728214359032"></p><h4><span id="大数据">大数据</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728223946912.png" alt="image-20210728223946912"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728223908387.png" alt="image-20210728223908387"></p><h4><span id="移动互联网"><strong>移动互联网</strong></span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728224121192.png" alt="image-20210728224121192"></p><h4><span id="智慧城市"><strong>智慧城市</strong></span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728224228899.png" alt="image-20210728224228899"></p><h4><span id="互联网"><strong>互联网+</strong></span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728224323606.png" alt="image-20210728224323606"></p><h4><span id="智能制造2025"><strong>智能制造2025</strong></span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728224454394.png" alt="image-20210728224454394"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728224610443.png" alt="image-20210728224610443"></p><h4><span id="区块链技术"><strong>区块链技术</strong></span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728224656986.png" alt="image-20210728224656986"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728224841509.png" alt="image-20210728224841509"></p><h4><span id="十四五规划">==十四五规划==</span></h4><p><strong>已考点</strong></p><p>展望2035年，我国将基本实现社会主义现代化。经济实力、科技实力、综合国力将大幅跃升，经济总量和城乡居民人均收入将再迈上新的大台阶，关键核心技术实现重大突破，进入创新型国家前列。基本实现新型工业化、信息化、城镇化、==<strong>农业现代化</strong>==，建成现代化经济体系。</p><p>完善技术创新市场导向机制，强化企业创新主体地位，促进各类创新要素向企业集聚，形成以==<strong>企业</strong>==为主体、==<strong>市场</strong>==为导向、产学研用深度融合的技术创新体系。</p><p><strong>可能考点</strong></p><ul><li><p>“十四五”时期推动高质量发展，必须立足<strong>新发展阶段</strong>、贯彻<strong>新发展理念</strong>、构建<strong>新发展格局</strong>。</p></li><li><p> “十四五”时期经济社会发展主要目标：<strong>经济发展</strong>取得新成效、<strong>改革开放</strong>迈出新步伐、<strong>社会文明程度</strong>得到新提高、<strong>生态文明建设</strong>实现新进步、<strong>民生福祉</strong>达到新水平、<strong>国家治理效能</strong>得到新提升</p></li><li><p>贯彻<strong>尊重劳动</strong>、<strong>尊重知识</strong>、<strong>尊重人才</strong>、<strong>尊重创造</strong>方针，深化人才发展体制机制改革，全方位培养、引进、用好人才，充分发挥人才第一资源的作用。</p></li><li><p>深入推进<strong>科技体制</strong>改革，完善国家<strong>科技治理</strong>体系，优化国家<strong>科技计划体系和运行机制</strong>，推动重点领域项目、基地、人才、资金一体化配置。</p></li><li><p>坚持把发展经济着力点放在实体经济上，加快推进制造强国、质量强国建设，促进先进制造业和现代服务业深度融合，强化基础设施支撑引领作用，构建实体经济、科技创新、现代金融、人力资源协同发展的现代产业体系。</p></li><li><p>坚持自主可控、安全高效，推进<strong>产业基础高级化</strong>、<strong>产业链现代化</strong>，保持制造业比重基本稳定，增强制造业竞争优势，推动制造业高质量发展。</p></li><li><p>坚持扩大内需这个战略基点，加快培育完整内需体系，把实施扩大内需战略同深化供给侧结构性改革有机结合起来，以创新驱动、高质量供给引领和创造新需求，加快构建以国内大循环为主体、国内国际双循环相互促进的新发展格局。</p></li><li><p>迎接数字时代，激活数据要素潜能，推进网络强国建设，加快建设<strong>数字经济</strong>、<strong>数字社会</strong>、<strong>数字政府</strong>，以数字化转型整体驱动生产方式、生活方式和治理方式变革。</p></li><li><p>充分发挥海量数据和丰富应用场景优势，促进<strong>数字技术</strong>与<strong>实体经济</strong>深度融合，赋能传统产业转型升级，催生新产业新业态新模式，壮大经济发展新引擎。</p></li></ul><p><strong>打造数字经济新优势</strong></p><ul><li>第一节 <strong>加强关键数字技术创新应用</strong></li></ul><p>聚焦高端芯片、操作系统、人工智能关键算法、传感器等关键领域，加快推进基础理论、基础算法、装备材料等研发突破与迭代应用。加强通用处理器、云计算系统和软件核心技术一体化研发。加快布局量子计算、量子通信、神经芯片、DNA存储等前沿技术，加强信息科学与生命科学、材料等基础学科的交叉创新，支持数字技术开源社区等创新联合体发展，完善开源知识产权和法律体系，鼓励企业开放软件源代码、硬件设计和应用服务。</p><ul><li>第二节 <strong>加快推动数字产业化</strong></li></ul><p>培育壮大人工智能、大数据、区块链、云计算、网络安全等新兴数字产业，提升通信设备、核心电子元器件、关键软件等产业水平。构建基于5G的应用场景和产业生态，在智能交通、智慧物流、智慧能源、智慧医疗等重点领域开展试点示范。鼓励企业开放搜索、电商、社交等数据，发展第三方大数据服务产业。促进共享经济、平台经济健康发展。</p><ul><li>第三节 <strong>推进产业数字化转型</strong></li></ul><p>实施“上云用数赋智”行动，推动数据赋能全产业链协同转型。在重点行业和区域建设若干国际水准的工业互联网平台和数字化转型促进中心，深化研发设计、生产制造、经营管理、市场服务等环节的数字化应用，培育发展个性定制、柔性制造等新模式，加快产业园区数字化改造。深入推进服务业数字化转型，培育众包设计、智慧物流、新零售等新增长点。加快发展智慧农业，推进农业生产经营和管理服务数字化改造。</p><ul><li>将数字技术广泛应用于政府管理服务，推动政府治理<strong>流程再造</strong>和<strong>模式优化</strong>，<strong>不断提高决策科学性</strong>和<strong>服务效率</strong>。</li><li>坚持放管并重，促进发展与规范管理相统一，构建数字规则体系，营造<strong>开放</strong>、<strong>健康</strong>、<strong>安全</strong>的数字生态。</li></ul><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202112/image-20220108124213624.png" alt="image-20220108124213624"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202201/image-20220108124413976.png" alt="image-20220108124413976"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202201/image-20220108124444958.png" alt="image-20220108124444958"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202201/image-20220108124504070.png" alt="image-20220108124504070"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202201/image-20220108124523555.png" alt="image-20220108124523555"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202201/image-20220108124551293.png" alt="image-20220108124551293"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202201/image-20220108124609510.png" alt="image-20220108124609510"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202201/image-20220108124641885.png" alt="image-20220108124641885"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202201/image-20220108124700476.png" alt="image-20220108124700476"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img_202201/image-20220108124727635.png" alt="image-20220108124727635"></p><h3><span id="16信息系统安全技术"><strong>1.6信息系统安全技术</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728225429513.png" alt="image-20210728225429513"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728225601878.png" alt="image-20210728225601878"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728225740249.png" alt="image-20210728225740249"><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728230101127.png" alt="image-20210728230101127"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728230400298.png" alt="image-20210728230400298"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728230948452.png" alt="image-20210728230948452"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728230913953.png" alt="image-20210728230913953"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728231118298.png" alt="image-20210728231118298"></p><h3><span id="17信息化发展与应用"><strong>1.7信息化发展与应用</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728231346612.png" alt="image-20210728231346612"></p><h4><span id="电子政务"><strong>电子政务</strong></span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728231504019.png" alt="image-20210728231504019"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728231539900.png" alt="image-20210728231539900"></p><h4><span id="电子商务">电子商务</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728231627087.png" alt="image-20210728231627087"></p><h4><span id="两化融合">==<strong>两化融合</strong>==</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728231655261.png" alt="image-20210728231655261"></p><h4><span id="智慧城市">智慧城市</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728231918469.png" alt="image-20210728231918469"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728232005192.png" alt="image-20210728232005192"></p><h3><span id="18信息系统服务管理"><strong>1.8信息系统服务管理</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728232128979.png" alt="image-20210728232128979"></p><h4><span id="信息系统监理"><strong>信息系统监理</strong></span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728232217940.png" alt="image-20210728232217940"></p><h4><span id="it服务管理">IT服务管理</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728232511042.png" alt="image-20210728232511042"></p><h3><span id="19信息系统规划">==<strong>1.9信息系统规划</strong>==</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728232716556.png" alt="image-20210728232716556"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728232925829.png" alt="image-20210728232925829"></p><h4><span id="规划工具">==规划工具==</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728233008145.png" alt="image-20210728233008145"></p><h3><span id="110企业首席信息官及其职责"><strong>1.10企业首席信息官及其职责</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210728233110347.png" alt="image-20210728233110347"></p><hr><h2><span id="第02章项目管理基础">【第02章】项目管理基础</span></h2><h3><span id="21项目管理基础"><strong>2.1项目管理基础</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729204542189.png" alt="image-20210729204542189"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729204717417.png" alt="image-20210729204717417"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729204904943.png" alt="image-20210729204904943"></p><h3><span id="22-24项目管理知识体系构成-pmp-prince2"><strong>2.2-2.4项目管理知识体系构成、PMP、PRINCE2</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729205009641.png" alt="image-20210729205009641"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729205025508.png" alt="image-20210729205025508"></p><h3><span id="25组织结构对项目的影响"><strong>2.5组织结构对项目的影响</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210809212617328.png" alt="image-20210809212617328"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729205244258.png" alt="image-20210729205244258"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729205305725.png" alt="image-20210729205305725"></p><h3><span id="26信息系统项目的生命周期"><strong>2.6信息系统项目的生命周期</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729205732984.png" alt="image-20210729205732984"></p><h3><span id="27信息系统项目典型生命周期模型"><strong>2.7信息系统项目典型生命周期模型</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729215317676.png" alt="image-20210729215317676"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729215415871.png" alt="image-20210729215415871"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729215728159.png" alt="image-20210729215728159"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729220102620.png" alt="image-20210729220102620"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729220227239.png" alt="image-20210729220227239"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729220413553.png" alt="image-20210729220413553"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729220845687.png" alt="image-20210729220845687"></p><p><strong>Scrum敏捷开发流程主要包扩三个角色、四个会议和个三物件。</strong></p><p>Scrum团队中包括三个角色，他们分别是产品负责人、开发团队和项目的直接管理者（Scrum Master）。</p><p>四个会议指的是Sprint计划会议、每日例会、Sprint评审会议和Sprint回顾会议。</p><p>三个物件指的是产品待办事项列表（Product Backlog）、Sprint Backlog和燃尽图</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729222233434.png" alt="image-20210729222233434"></p><h3><span id="28单个项目管理过程"><strong>2.8单个项目管理过程</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729222423565.png" alt="image-20210729222423565"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729222523227.png" alt="image-20210729222523227"></p><hr><h2><span id="第03章项目立项管理">【第03章】项目立项管理</span></h2><h3><span id="项目立项管理"><strong>项目立项管理</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729222959520.png" alt="image-20210729222959520"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729223436206.png" alt="image-20210729223436206"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729223845530.png" alt="image-20210729223845530"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729224114617.png" alt="image-20210729224114617"></p><p>可行性研究<strong>阶段划分</strong></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729224300134.png" alt="image-20210729224300134"></p><h3><span id="项目论证">项目论证</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729225424339.png" alt="image-20210729225424339"></p><h3><span id="项目评估">项目评估</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729225631002.png" alt="image-20210729225631002"></p><h3><span id="案例分析储备记忆要点"><strong>案例分析储备记忆要点</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210729225913408.png" alt="image-20210729225913408"></p><hr><h2><span id="第16章项目变更管理">【第16章】项目变更管理</span></h2><h3><span id="161项目变更管理的基本概念"><strong>16.1项目变更管理的基本概念</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802221417908.png" alt="image-20210802221417908"></p><h3><span id="162项目变更管理原则"><strong>16.2项目变更管理原则</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802221539256.png" alt="image-20210802221539256"></p><h3><span id="163变更管理组织机构与工作程序"><strong>16.3变更管理组织机构与工作程序</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802221716121.png" alt="image-20210802221716121"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802221744994.png" alt="image-20210802221744994"></p><h3><span id="164项目变更管理的工作内容了解"><strong>16.4项目变更管理的工作内容</strong>【了解】</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802221954502.png" alt="image-20210802221954502"></p><hr><h2><span id="第04章项目整体管理">【第04章】项目整体管理</span></h2><h3><span id="ito共性总结"><strong>ITO共性总结</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802222223401.png" alt="image-20210802222223401"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802222343232.png" alt="image-20210802222343232"></p><h3><span id="整体管理过程"><strong>整体管理过程</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802222459581.png" alt="image-20210802222459581"></p><h3><span id="整体管理ito口诀版"><strong>整体管理*ITO口诀版</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802222704057.png" alt="image-20210802222704057"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802222721730.png" alt="image-20210802222721730"></p><h3><span id="0项目整体管理概述"><strong>0.项目整体管理概述</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802222835823.png" alt="image-20210802222835823"></p><h3><span id="1制定项目章程">1.制定项目章程</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802222917391.png" alt="image-20210802222917391"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802223129648.png" alt="image-20210802223129648"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802223210290.png" alt="image-20210802223210290"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802223237832.png" alt="image-20210802223237832"></p><h3><span id="2制订项目管理计划">2.制订项目管理计划</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802223455173.png" alt="image-20210802223455173"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802223534308.png" alt="image-20210802223534308"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802223705880.png" alt="image-20210802223705880"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802223746786.png" alt="image-20210802223746786"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802224533067.png" alt="image-20210802224533067"></p><h3><span id="项目管理信息系统"><strong>项目管理信息系统</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802223835845.png" alt="image-20210802223835845"></p><h3><span id="3指导与管理项目执行">3.<strong>指导与管理项目执行</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802224727289.png" alt="image-20210802224727289"></p><h3><span id="项目绩效"><strong>项目绩效</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802224753975.png" alt="image-20210802224753975"></p><h3><span id="4监控项目工作">4.<strong>监控项目工作</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802225034376.png" alt="image-20210802225034376"></p><h3><span id="5实施整体变更控制"><strong>5.实施整体变更控制</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802225449277.png" alt="image-20210802225449277"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802225406969.png" alt="image-20210802225406969"></p><h3><span id="6收尾管理">6.<strong>收尾管理</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802225557335.png" alt="image-20210802225557335"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210802225617008.png" alt="image-20210802225617008"></p><hr><h2><span id="第05章项目范围管理">【第05章】项目范围管理</span></h2><h3><span id="项目范围管理"><strong>项目范围管理</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804214632033.png" alt="image-20210804214632033"></p><h3><span id="项目范围管理ito口诀版"><strong>项目范围管理*ITO口诀版</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804214748008.png" alt="image-20210804214748008"></p><h3><span id="51范围管理概述"><strong>5.1范围管理概述</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804214840807.png" alt="image-20210804214840807"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804215043585.png" alt="image-20210804215043585"></p><h3><span id="52规划范围管理"><strong>5.2规划范围管理</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804215349242.png" alt="image-20210804215349242"></p><h3><span id="53收集需求"><strong>5.3收集需求</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804215443943.png" alt="image-20210804215443943"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804215657922.png" alt="image-20210804215657922"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804215734429.png" alt="image-20210804215734429"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804215758079.png" alt="image-20210804215758079"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804215854539.png" alt="image-20210804215854539"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804220132325.png" alt="image-20210804220132325"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804220210023.png" alt="image-20210804220210023"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804220809949.png" alt="image-20210804220809949"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804220831858.png" alt="image-20210804220831858"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804221030885.png" alt="image-20210804221030885"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804221514193.png" alt="image-20210804221514193"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804221547922.png" alt="image-20210804221547922"></p><h3><span id="54定义范围"><strong>5.4定义范围</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804221802282.png" alt="image-20210804221802282"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804221902454.png" alt="image-20210804221902454"></p><h3><span id="55创建工作分解结构wbs"><strong>5.5创建工作分解结构（WBS）</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804222114211.png" alt="image-20210804222114211"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804222316984.png" alt="image-20210804222316984"><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804222544085.png" alt="image-20210804222544085"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804222945329.png" alt="image-20210804222945329"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804223304471.png" alt="image-20210804223304471"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804223427448.png" alt="image-20210804223427448"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804223501383.png" alt="image-20210804223501383"></p><h3><span id="56确认范围"><strong>5.6确认范围</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804223937764.png" alt="image-20210804223937764"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804224055298.png" alt="image-20210804224055298"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804224215419.png" alt="image-20210804224215419"></p><h3><span id="57控制范围"><strong>5.7控制范围</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804224253138.png" alt="image-20210804224253138"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804224333180.png" alt="image-20210804224333180"></p><h3><span id="项目范围管理案例分析"><strong>项目范围管理案例分析</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210804224411129.png" alt="image-20210804224411129"></p><hr><h2><span id="第06章项目进度管理">【第06章】项目进度管理</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806212422092.png" alt="image-20210806212422092"></p><h3><span id="61概述"><strong>6.1概述</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806212541904.png" alt="image-20210806212541904"></p><h3><span id="62项目进度管理过程"><strong>6.2项目进度管理过程</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806212650396.png" alt="image-20210806212650396"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806212841477.png" alt="image-20210806212841477"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806212904855.png" alt="image-20210806212904855"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806212925243.png" alt="image-20210806212925243"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806212947101.png" alt="image-20210806212947101"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806213005290.png" alt="image-20210806213005290"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806213024331.png" alt="image-20210806213024331"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806213045481.png" alt="image-20210806213045481"></p><h3><span id="63项目进度管理的技术和工具"><strong>6.3项目进度管理的技术和工具</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806213142361.png" alt="image-20210806213142361"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806213402890.png" alt="image-20210806213402890"></p><h4><span id="确定依赖关系">==确定依赖关系==</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806213541904.png" alt="image-20210806213541904"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806213623582.png" alt="image-20210806213623582"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806213747412.png" alt="image-20210806213747412"><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806214041635.png" alt="image-20210806214041635"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806214155155.png" alt="image-20210806214155155"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806214247070.png" alt="image-20210806214247070"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806214344909.png" alt="image-20210806214344909"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806214511093.png" alt="image-20210806214511093"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806214620122.png" alt="image-20210806214620122"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806214649519.png" alt="image-20210806214649519"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806214728063.png" alt="image-20210806214728063"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210806214747389.png" alt="image-20210806214747389"></p><hr><h2><span id="第07章项目成本管理"><strong>【第07章】项目成本管理</strong></span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808205417152.png" alt="image-20210808205417152"></p><h3><span id="71概述"><strong>7.1概述</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808205512908.png" alt="image-20210808205512908"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808205554133.png" alt="image-20210808205554133"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808205717522.png" alt="image-20210808205717522"></p><h3><span id="应急储备和管理储备">==<strong>应急储备和管理储备</strong>==</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808205804565.png" alt="image-20210808205804565"></p><h3><span id="成本估算和预算的区别">==<strong>成本估算和预算的区别</strong>==</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808205920552.png" alt="image-20210808205920552"></p><h3><span id="72项目成本管理过程"><strong>7.2项目成本管理过程</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808210436963.png" alt="image-20210808210436963"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808210522752.png" alt="image-20210808210522752"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808214538280.png" alt="image-20210808214538280"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808214624047.png" alt="image-20210808214624047"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808214643836.png" alt="image-20210808214643836"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808214714735.png" alt="image-20210808214714735"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808214731146.png" alt="image-20210808214731146"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808214850443.png" alt="image-20210808214850443"></p><h3><span id="73项目成本管理的技术和工具"><strong>7.3项目成本管理的技术和工具</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808214923312.png" alt="image-20210808214923312"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808214940182.png" alt="image-20210808214940182"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808215043425.png" alt="image-20210808215043425"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808215156829.png" alt="image-20210808215156829"></p><h3><span id="挣值分析计算"><strong>挣值分析计算</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808215248048.png" alt="image-20210808215248048"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210808215302393.png" alt="image-20210808215302393"></p><hr><h2><span id="第08章项目质量管理"><strong>【第08章】项目质量管理</strong></span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810180413278.png" alt="image-20210810180413278"></p><p>重点看 ==<strong>输入输出</strong>==</p><h3><span id="81质量管理基础"><strong>8.1质量管理基础</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810210253825.png" alt="image-20210810210253825"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810210403402.png" alt="image-20210810210403402"></p><h3><span id="82项目质量管理过程"><strong>8.2项目质量管理过程</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810210731474.png" alt="image-20210810210731474"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810210551717.png" alt="image-20210810210551717"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810214927670.png" alt="image-20210810214927670"></p><h3><span id="qa和qc的区别"><strong>QA和QC的区别</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810210638458.png" alt="image-20210810210638458"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810210754707.png" alt="image-20210810210754707"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810210818427.png" alt="image-20210810210818427"></p><h3><span id="83项目质量管理的技术和工具"><strong>8.3项目质量管理的技术和工具</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810210951042.png" alt="image-20210810210951042"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810211019820.png" alt="image-20210810211019820"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810211044483.png" alt="image-20210810211044483"></p><h3><span id="教材涉及到的审计区别"><strong>教材涉及到的审计区别</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810211111095.png" alt="image-20210810211111095"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810211200325.png" alt="image-20210810211200325"></p><h3><span id="老七工具">老七工具</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810211222030.png" alt="image-20210810211222030"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810211241544.png" alt="image-20210810211241544"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810211326212.png" alt="image-20210810211326212"></p><h3><span id="新七工具">新七工具</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810211346857.png" alt="image-20210810211346857"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810211757739.png" alt="image-20210810211757739"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810211932705.png" alt="image-20210810211932705"></p><p>SIPOC其中每个字母各代表：Supplier 供应者；Input 输入；Process 流程；Output 输出；Customer 客户</p><h3><span id="补充学习的内容"><strong>补充学习的内容</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810212443105.png" alt="image-20210810212443105"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810212501216.png" alt="image-20210810212501216"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810212524368.png" alt="image-20210810212524368"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810212542743.png" alt="image-20210810212542743"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810212600635.png" alt="image-20210810212600635"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810212711364.png" alt="image-20210810212711364"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210810212644569.png" alt="image-20210810212644569"></p><hr><h2><span id="第09章项目人力资源管理">【第09章】项目人力资源管理</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812211943428.png" alt="image-20210812211943428"></p><h3><span id="91项目人力资源管理概念"><strong>9.1项目人力资源管理概念</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812212019960.png" alt="image-20210812212019960"></p><h3><span id="92项目人力资源管理过程"><strong>9.2项目人力资源管理过程</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812212040752.png" alt="image-20210812212040752"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812212203449.png" alt="image-20210812212203449"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812212229612.png" alt="image-20210812212229612"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812212259633.png" alt="image-20210812212259633"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812212700187.png" alt="image-20210812212700187"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210815180104263.png" alt="image-20210815180104263"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210815175923050.png" alt="image-20210815175923050"></p><h3><span id="93项目人力资源管理工具"><strong>9.3项目人力资源管理工具</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812214430612.png" alt="image-20210812214430612"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812215728416.png" alt="image-20210812215728416"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812220051949.png" alt="image-20210812220051949"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812220208888.png" alt="image-20210812220208888"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812220404230.png" alt="image-20210812220404230"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812220717530.png" alt="image-20210812220717530"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812220746935.png" alt="image-20210812220746935"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812220831745.png" alt="image-20210812220831745"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812221016827.png" alt="image-20210812221016827"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812221039972.png" alt="image-20210812221039972"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812221059158.png" alt="image-20210812221059158"></p><h3><span id="94项目人力资源管理文件"><strong>9.4项目人力资源管理文件</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812221253890.png" alt="image-20210812221253890"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812221454158.png" alt="image-20210812221454158"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210812222020130.png" alt="image-20210812222020130"></p><hr><h2><span id="第10章项目沟通和干系人管理">【第10章】项目沟通和干系人管理</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814212201695.png" alt="image-20210814212201695"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814212251850.png" alt="image-20210814212251850"></p><h3><span id="101项目沟通管理基础"><strong>10.1项目沟通管理基础</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814212337418.png" alt="image-20210814212337418"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814212403298.png" alt="image-20210814212403298"></p><h3><span id="102项目沟通管理过程"><strong>10.2项目沟通管理过程</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814212439695.png" alt="image-20210814212439695"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814212458382.png" alt="image-20210814212458382"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814212537818.png" alt="image-20210814212537818"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210815105215458.png" alt="image-20210815105215458"></p><h3><span id="103项目沟通管理的技术和工具"><strong>10.3项目沟通管理的技术和工具</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814214700299.png" alt="image-20210814214700299"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814214734715.png" alt="image-20210814214734715"></p><h3><span id="干系人管理"><strong>干系人管理</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814214826845.png" alt="image-20210814214826845"></p><h3><span id="104项目干系人管理基础"><strong>10.4项目干系人管理基础</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814215113251.png" alt="image-20210814215113251"></p><h3><span id="105项目干系人管理过程"><strong>10.5项目干系人管理过程</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814215218558.png" alt="image-20210814215218558"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814215244026.png" alt="image-20210814215244026"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814215352280.png" alt="image-20210814215352280"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814215408339.png" alt="image-20210814215408339"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814215543615.png" alt="image-20210814215543615"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210815110620971.png" alt="image-20210815110620971"></p><h3><span id="106项目干系人管理的技术和工具"><strong>10.6项目干系人管理的技术和工具</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814215638907.png" alt="image-20210814215638907"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814215703976.png" alt="image-20210814215703976"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210814215735380.png" alt="image-20210814215735380"></p><hr><h2><span id="第11章项目风险管理">【第11章】项目风险管理</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210817195937870.png" alt="image-20210817195937870"></p><h3><span id="111项目风险管理概述"><strong>11.1项目风险管理概述</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210817200012090.png" alt="image-20210817200012090"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210817200033578.png" alt="image-20210817200033578"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210817200348941.png" alt="image-20210817200348941"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210817200813516.png" alt="image-20210817200813516"></p><h3><span id="112规划风险管理"><strong>11.2规划风险管理</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210817201103237.png" alt="image-20210817201103237"></p><h3><span id="113识别风险"><strong>11.3识别风险</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210817222049870.png" alt="image-20210817222049870"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821170732108.png" alt="image-20210821170732108"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821171015097.png" alt="image-20210821171015097"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821171046846.png" alt="image-20210821171046846"></p><h3><span id="114实施定性风险分析"><strong>11.4实施定性风险分析</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821171454058.png" alt="image-20210821171454058"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821171902595.png" alt="image-20210821171902595"></p><h3><span id="115实施定量风险分析"><strong>11.5实施定量风险分析</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821172333881.png" alt="image-20210821172333881"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821172353577.png" alt="image-20210821172353577"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821173044728.png" alt="image-20210821173044728"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821173100189.png" alt="image-20210821173100189"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821173222450.png" alt="image-20210821173222450"></p><h3><span id="116规划风险应对"><strong>11.6规划风险应对</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821173603907.png" alt="image-20210821173603907"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821173717574.png" alt="image-20210821173717574"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821174207651.png" alt="image-20210821174207651"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821174306205.png" alt="image-20210821174306205"></p><h3><span id="117控制风险"><strong>11.7控制风险</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821174535960.png" alt="image-20210821174535960"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821174803865.png" alt="image-20210821174803865"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210821174935004.png" alt="image-20210821174935004"></p><hr><h2><span id="第12章项目采购管理">【第12章】项目采购管理</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210818204554933.png" alt="image-20210818204554933"></p><h3><span id="122战略合作管理"><strong>12.2战略合作管理</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210819104033780.png" alt="image-20210819104033780"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210819104208971.png" alt="image-20210819104208971"></p><h3><span id="123采购管理过程"><strong>12.3采购管理过程</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210819104441221.png" alt="image-20210819104441221"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210819135101233.png" alt="image-20210819135101233"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210819142637067.png" alt="image-20210819142637067"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210819142824346.png" alt="image-20210819142824346"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210819144040595.png" alt="image-20210819144040595"></p><h3><span id="124采购管理技术和工具"><strong>12.4采购管理技术和工具</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210819144319226.png" alt="image-20210819144319226"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210819151339488.png" alt="image-20210819151339488"></p><hr><h2><span id="第13章项目合同管理">【第13章】项目合同管理</span></h2><h3><span id="131合同管理相关基础概念"><strong>13.1合同管理相关基础概念</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210820201959712.png" alt="image-20210820201959712"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210820202032411.png" alt="image-20210820202032411"></p><h3><span id="合同类型的比较">==<strong>合同类型的比较</strong>==</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210820202144149.png" alt="image-20210820202144149"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210820202200360.png" alt="image-20210820202200360"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210820202218136.png" alt="image-20210820202218136"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210820202238958.png" alt="image-20210820202238958"></p><h3><span id="132合同管理过程"><strong>13.2合同管理过程</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210820202257911.png" alt="image-20210820202257911"></p><hr><h2><span id="第14章文档和配置管理">【第14章】文档和配置管理</span></h2><h3><span id="141信息系统项目文档及其管理"><strong>14.1信息系统项目文档及其管理</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202018996.png" alt="image-20210822202018996"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202036790.png" alt="image-20210822202036790"></p><h3><span id="142配置管理"><strong>14.2配置管理</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202307198.png" alt="image-20210822202307198"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202325494.png" alt="image-20210822202325494"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202345243.png" alt="image-20210822202345243"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202408036.png" alt="image-20210822202408036"></p><h3><span id="配置库"><strong>配置库</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202448809.png" alt="image-20210822202448809"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202506348.png" alt="image-20210822202506348"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202526552.png" alt="image-20210822202526552"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202545083.png" alt="image-20210822202545083"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202604492.png" alt="image-20210822202604492"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202623358.png" alt="image-20210822202623358"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202644912.png" alt="image-20210822202644912"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202713191.png" alt="image-20210822202713191"></p><h3><span id="143文档管理-配置管理工具"><strong>14.3文档管理、配置管理工具：</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210822202743363.png" alt="image-20210822202743363"></p><hr><h2><span id="第15章知识管理">【第15章】知识管理</span></h2><h3><span id="151知识和知识管理的概念"><strong>15.1知识和知识管理的概念</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824222821720.png" alt="image-20210824222821720"></p><h3><span id="152知识管理常用的方法和工具">15.2知识管理常用的方法和工具</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824222956911.png" alt="image-20210824222956911"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824223044295.png" alt="image-20210824223044295"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824223212793.png" alt="image-20210824223212793"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824223259193.png" alt="image-20210824223259193"></p><h3><span id="153知识产权保护"><strong>15.3知识产权保护</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824223401862.png" alt="image-20210824223401862"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824223425412.png" alt="image-20210824223425412"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824223442865.png" alt="image-20210824223442865"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824223512582.png" alt="image-20210824223512582"></p><hr><h2><span id="第17章战略管理">【第17章】战略管理</span></h2><h3><span id="171组织战略管理"><strong>17.1组织战略管理</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824223712208.png" alt="image-20210824223712208"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824223842244.png" alt="image-20210824223842244"></p><h3><span id="172组织战略类型和层次"><strong>17.2组织战略类型和层次</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824223928019.png" alt="image-20210824223928019"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824224203367.png" alt="image-20210824224203367"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824224229212.png" alt="image-20210824224229212"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824224255668.png" alt="image-20210824224255668"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824224726210.png" alt="image-20210824224726210"></p><hr><h2><span id="第18章组织级项目管理">【第18章】组织级项目管理</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824224846442.png" alt="image-20210824224846442"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824224909068.png" alt="image-20210824224909068"></p><hr><h2><span id="第19章流程管理">【第19章】流程管理</span></h2><h3><span id="191流程管理基础">19.1流程管理基础</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824225346519.png" alt="image-20210824225346519"></p><h3><span id="192流程分析-设计-实施与评估"><strong>19.2流程分析、设计、实施与评估</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824225410253.png" alt="image-20210824225410253"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824225435157.png" alt="image-20210824225435157"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824225459460.png" alt="image-20210824225459460"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824225527785.png" alt="image-20210824225527785"></p><h3><span id="193流程重构与改进"><strong>19.3流程重构与改进</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824225302664.png" alt="image-20210824225302664"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824225317988.png" alt="image-20210824225317988"></p><h3><span id="194项目管理流程的管理和优化"><strong>19.4项目管理流程的管理和优化</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824225138874.png" alt="image-20210824225138874"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210824225240255.png" alt="image-20210824225240255"></p><hr><h2><span id="第20章项目集管理">【第20章】项目集管理</span></h2><h3><span id="项目集和组合管理的区别"><strong>项目集和组合管理的区别</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826205238371.png" alt="image-20210826205238371"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826205328309.png" alt="image-20210826205328309"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826205440365.png" alt="image-20210826205440365"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826205552448.png" alt="image-20210826205552448"></p><h3><span id="项目集管理"><strong>项目集管理</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826205658064.png" alt="image-20210826205658064"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826205721788.png" alt="image-20210826205721788"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826210023026.png" alt="image-20210826210023026"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826210130504.png" alt="image-20210826210130504"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826210321615.png" alt="image-20210826210321615"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826210406869.png" alt="image-20210826210406869"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826210547434.png" alt="image-20210826210547434"></p><hr><h2><span id="第21章项目组合管理"><strong>【第21章】项目组合管理</strong></span></h2><h3><span id="项目组合管理"><strong>项目组合管理</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826210745445.png" alt="image-20210826210745445"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826210805150.png" alt="image-20210826210805150"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826210913199.png" alt="image-20210826210913199"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826211009782.png" alt="image-20210826211009782"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826211137453.png" alt="image-20210826211137453"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826211247977.png" alt="image-20210826211247977"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826211347936.png" alt="image-20210826211347936"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826211438842.png" alt="image-20210826211438842"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826211516488.png" alt="image-20210826211516488"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826211543000.png" alt="image-20210826211543000"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210826211608751.png" alt="image-20210826211608751"></p><hr><h2><span id="第22章安全管理">【第22章】安全管理</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828214714937.png" alt="image-20210828214714937"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828214749523.png" alt="image-20210828214749523"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828214813041.png" alt="image-20210828214813041"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828215304379.png" alt="image-20210828215304379"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828215345436.png" alt="image-20210828215345436"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828215418515.png" alt="image-20210828215418515"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828215458085.png" alt="image-20210828215458085"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828215630481.png" alt="image-20210828215630481"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828215709943.png" alt="image-20210828215709943"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828220024681.png" alt="image-20210828220024681"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828220207728.png" alt="image-20210828220207728"></p><hr><h2><span id="第23章综合测试与管理">【第23章】综合测试与管理</span></h2><h3><span id="案例分析"><strong>案例分析</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828220523483.png" alt="image-20210828220523483"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828220557269.png" alt="image-20210828220557269"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828220826433.png" alt="image-20210828220826433"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828221255883.png" alt="image-20210828221255883"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828221553426.png" alt="image-20210828221553426"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828221850548.png" alt="image-20210828221850548"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828221917273.png" alt="image-20210828221917273"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828221945079.png" alt="image-20210828221945079"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828222156163.png" alt="image-20210828222156163"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828222524183.png" alt="image-20210828222524183"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828222541487.png" alt="image-20210828222541487"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828222628396.png" alt="image-20210828222628396"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828223105536.png" alt="image-20210828223105536"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828223133604.png" alt="image-20210828223133604"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828223259125.png" alt="image-20210828223259125"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828223414625.png" alt="image-20210828223414625"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828223440667.png" alt="image-20210828223440667"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828223638599.png" alt="image-20210828223638599"></p><hr><h2><span id="第24章成熟度模型">【第24章】成熟度模型</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828223953721.png" alt="image-20210828223953721"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828224141958.png" alt="image-20210828224141958"></p><h3><span id="opm3的三维模型"><strong>OPM3的三维模型</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828224259676.png" alt="image-20210828224259676"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210828224501514.png" alt="image-20210828224501514"></p><hr><h2><span id="第25章量化项目管理">【第25章】量化项目管理</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829090254061.png" alt="image-20210829090254061"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829090309703.png" alt="image-20210829090309703"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829090413855.png" alt="image-20210829090413855"></p><hr><h2><span id="第26章法律法规">【第26章】法律法规</span></h2><h3><span id="合同法"><strong>合同法</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829211250642.png" alt="image-20210829211250642"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829211332437.png" alt="image-20210829211332437"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829211347287.png" alt="image-20210829211347287"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829211406706.png" alt="image-20210829211406706"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829211421934.png" alt="image-20210829211421934"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829211439235.png" alt="image-20210829211439235"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829211454436.png" alt="image-20210829211454436"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829211509167.png" alt="image-20210829211509167"></p><h3><span id="法规时间总结"><strong>法规时间总结</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829211733456.png" alt="image-20210829211733456"></p><h3><span id="招投标法"><strong>招投标法</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829211812601.png" alt="image-20210829211812601"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829212026401.png" alt="image-20210829212026401"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829212044930.png" alt="image-20210829212044930"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829212100612.png" alt="image-20210829212100612"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829212116331.png" alt="image-20210829212116331"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829212137376.png" alt="image-20210829212137376"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829212153037.png" alt="image-20210829212153037"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829212207796.png" alt="image-20210829212207796"></p><h3><span id="著作权法"><strong>著作权法</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829212334952.png" alt="image-20210829212334952"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829212612037.png" alt="image-20210829212612037"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829212720209.png" alt="image-20210829212720209"></p><h3><span id="政府采购法"><strong>政府采购法</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829212852307.png" alt="image-20210829212852307"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829213112148.png" alt="image-20210829213112148"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829213159159.png" alt="image-20210829213159159"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829213235180.png" alt="image-20210829213235180"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210829213258755.png" alt="image-20210829213258755"></p><h3><span id="软件工程国家标准"><strong>软件工程国家标准</strong></span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210830221945125.png" alt="image-20210830221945125"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210830222020050.png" alt="image-20210830222020050"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210830222103038.png" alt="image-20210830222103038"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210830222127018.png" alt="image-20210830222127018"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210830222328810.png" alt="image-20210830222328810"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210830222509563.png" alt="image-20210830222509563"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210830222534732.png" alt="image-20210830222534732"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210830222557421.png" alt="image-20210830222557421"></p><h4><span id="软件质量特性">==<strong>软件质量特性</strong>==</span></h4><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210830222744953.png" alt="image-20210830222744953"></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210830222905832.png" alt="image-20210830222905832"></p><h2><span id="第27章运筹学计算">【第27章】运筹学计算</span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210919180329434.png" alt="image-20210919180329434"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> 高级项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 命名规范</title>
      <link href="/2021/12/05/java-ming-ming-gui-fan/"/>
      <url>/2021/12/05/java-ming-ming-gui-fan/</url>
      
        <content type="html"><![CDATA[<h1><span id="java-命名规范">Java 命名规范</span></h1><h2><span id="简介">简介</span></h2><p>在本文中，将从大到小，从外到内，总结Java编程中的命名规范。文中将会涉及到日常工作中常见的命名示例，如包命名，类命名，接口命名，方法命名，变量命名，常类命名，抽象类命名，异常类命名以及扩展类命名等。我将按照项目工程目录结构，从包，类(接口，抽象类，异常类)，方法，变量和常量的顺序展开介绍。</p><h2><span id="1-包命名规范">1. 包命名规范</span></h2><p>包(Package)的作用是将功能相似或相关的类或者接口进行分组管理，便于类的定位和查找，同时也可以使用包来避免类名的冲突和访问控制，使代码更容易维护。通常，包命使用小写英文字母进行命名，并使用“.”进行分割，每个被分割的单元只能包含一个名词。一般地，包命名常采用顶级域名作为前缀，例如com，net，org，edu，gov，cn，io等，随后紧跟公司/组织/个人名称以及功能模块名称。下面是一些包命名示例：</p><pre><code>package org.springframework.boot.autoconfigure.cloudpackage org.springframework.boot.utilpackage org.hibernate.actionpackage org.hibernate.cfgpackage com.alibaba.druidpackage com.alibaba.druid.filterpackage com.alibaba.nacos.client.configpackage com.ramostear.blog.web</code></pre><p>下面是Oracle Java的一些常见包命名例子：</p><pre><code>package java.beanspackage java.iopackage java.langpackage java.netpackage java.utilpackage javax.annotation</code></pre><h2><span id="2-类命名规范">2. 类命名规范</span></h2><p>类(Class)通常采用名词进行命名，且首字母大写，如果一个类名包含两个以上名词，建议使用驼峰命名(Camel-Case)法书写类名,每个名词首字母也应该大写。一般地，类名的书写尽量使其保持简单和描述的完整性，因此在书写类名时不建议使用缩写(一些约定俗成的命名除外，例如Internationalization and Localization缩写成i18n，Uniform Resource Identifier缩写成URI，Data Access Object缩写成DAO，JSON Web Token缩写成JWT，HyperText Markup Language缩写成HTML等等)。下列是一些常见的类命名示例：</p><pre><code>public class UserDTO&#123;    //TODO...&#125;class EmployeeService&#123;    //TODO...&#125;class StudentDAO&#123;    //TODO...&#125;class OrderItemEntity&#123;    //TODO...&#125;public class UserServiceImpl&#123;    //TODO...&#125;public class OrderItemController&#123;    //TODO...&#125;</code></pre><p>下面是Oracle Java中的一些标准命名示例：</p><pre><code>public class HTMLEditorKit&#123;    //...&#125;public abstract class HttpContext&#123;    //...&#125;public interface ImageObserver&#123;    //...&#125;public class ArrayIndexOutOfBoundsException&#123;    //...&#125;public class enum Thread.State&#123;    //...&#125;</code></pre><h3><span id="21-接口命名规范">2.1 接口命名规范</span></h3><p>首先，接口(Interface)是一种表述某一类型对象动作的特殊类；简单来说，接口也是类(不太严谨)，所以，接口的名称的书写也应该符合类名书写规范，首字母应该大写，与普通类名不同的是，接口命名时通常采用形容词或动词来描述接口的动作行为。下列是Oracle Java中一些标准库的接口使用形容词命名示例：</p><pre><code>public interface Closeable&#123;    //...&#125;public interface Cloneable&#123;    //...&#125;public interface Runnable&#123;    //...&#125;public interface Comparable&lt;T&gt;&#123;    //...&#125;public interface CompletionService&lt;V&gt;&#123;    //...&#125;public interface Iterable&lt;T&gt;&#123;    //...&#125;public interface EventListener&#123;    //...&#125;</code></pre><p>在Spring Framework标准库中，通常采用名词+动词/形容词的组合方式来命名接口，下列是Spring Framework中一些接口命名示例：</p><pre><code>public interface AfterAdvice&#123;    //...&#125;public interface TargetClassAware&#123;    //...&#125;public interface ApplicationContextAware&#123;    //...&#125;public interface MessageSourceResolvable&#123;    //...&#125;</code></pre><h3><span id="22-抽象类命名规范">2.2 抽象类命名规范</span></h3><p>抽象类(Abstract Class)是一种特殊的类，其命名与普通类的命名规范相当。一般地，为了将抽象类与普通类和接口做出区别，提高抽象类的可读性，在命名抽象类时，会以“Abstract”/“Base”作为类命的前缀。下面是编程中一些常规的命名示例：</p><pre><code>public abstract class AbstractRepository&lt;T&gt;&#123;    //...&#125;public abstract class AbstractController&#123;    //...&#125;public abstract class BaseDao&lt;T,ID&gt;&#123;    //...&#125;public abstract class AbstractCommonService&lt;T&gt;&#123;    //...&#125;</code></pre><p>以下是Spring Framework中常见的抽象类示例：</p><pre><code>public abstract class AbstractAspectJAdvice&#123;    //...&#125;public abstract class AbstractSingletonProxyFactoryBean&#123;    //...&#125;public abstract class AbstractBeanFactoryPointcutAdvisor&#123;    //...&#125;public abstract class AbstractCachingConfiguration&#123;    //...&#125;public abstract class AbstractContextLoaderInitializer&#123;    //...&#125;</code></pre><h3><span id="23-异常类命名规范">2.3 异常类命名规范</span></h3><p>异常类(Exception Class)也是类的一种，但与普通类命名不同的是，异常类在命名时需要使用“Exception”作为其后缀。下面是常见的异常类命名示例：</p><pre><code>public class FileNotFoundException&#123;    //...&#125;public class UserAlreadyExistException&#123;    //...&#125;public class TransactionException&#123;    //...&#125;public class ClassNotFoundException&#123;    //...&#125;public class IllegalArgumentException&#123;    //...&#125;public class IndexOutOfBoundsException&#123;    //...&#125;</code></pre><p>另外，在Java中还有另外一类异常类，它们属于系统异常，这一类异常类的命名使用“Error”作为其后缀，以区分Exception(编码，环境，操作等异常)。下面是系统异常(非检查异常)的命名示例：</p><pre><code>public abstract class VirtualMachineError&#123;    //...&#125;public class StackOverflowError&#123;    //...&#125;public class OutOfMemoryError&#123;    //...&#125;public class IllegalAccessError&#123;    //...&#125;public class NoClassDefFoundError&#123;    //...&#125;public class NoSuchFieldError&#123;    //...&#125;public class NoSuchMethodError&#123;    //...&#125;</code></pre><h2><span id="3方法命名规范">3.方法命名规范</span></h2><p>方法(Method)命名时,其首字母应该小写，如果方法签名由多个单词组成，则从第二个单词起，使用驼峰命名法进行书写。一般地，在对方法进行命名时，通常采用动词/动词+名词的组合，下面是方法命名的一些常见示例。</p><h3><span id="31-表述获取">3.1 表述获取</span></h3><p>如果一个方法用于获取某个值，通常使用“get”作为其前缀，例如：</p><pre><code>public String getUserName()&#123;    //...&#125;public List&lt;Integer&gt; getUserIds()&#123;    //...&#125;public User getOne()&#123;    //...&#125;</code></pre><h3><span id="32-表述查询">3.2 表述查询</span></h3><p>如果方法需要通过查询或筛选的方式获取某个数据，通常使用“find”/“query”作为其前缀，例如：</p><pre><code>public List&lt;User&gt; findOne(Integer id)&#123;    //...&#125;public List&lt;Integer&gt; findAll()&#123;    //...&#125; public List&lt;String&gt; queryOrders()&#123;    //...&#125;</code></pre><h3><span id="33-表述条件">3.3 表述条件</span></h3><p>如果一个方法需要一些条件参数，则可以使用“by”/“with”等字符作为方法名中条件的连接符，例如：</p><pre><code>public User findByUsername(String username)&#123;    //...&#125;public List&lt;Integer&gt; getUserIdsWithState(boolean state)&#123;    //...&#125;public List&lt;User&gt; findAllByUsernameOrderByIdDesc(String username)&#123;    //...&#125;</code></pre><h3><span id="34-表述设置">3.4 表述设置</span></h3><p>如果一个方法是要设置，插入，修改，删除等操作，应该将对应的动词(set,insert,update,delete)作为其名词的前缀，例如：</p><pre><code>public void setName(String name)&#123;    //...&#125;public User insert(User user)&#123;    //...&#125;public void update(User user)&#123;    //...&#125;public void clearAll()&#123;    //...&#125;</code></pre><h3><span id="35-其他规范">3.5 其他规范</span></h3><p>如果一个方法用于获取某组数据的长度或数量，则该方法应该使用length或size命名；如果方法的返回值为布尔类型(Boolean)，则该方法应该使用“is”或”has”作为前缀；如果方法用于将一种类型的数据转换为另一种数据数类型，则可以使用“to”作为前缀。下面是综合示例：</p><pre><code>public long length()&#123;    //...&#125;public int size()&#123;    //...&#125;public boolean isOpen()&#123;    //...&#125;public boolean isNotEmpty()&#123;    //...&#125;public boolean hasLength()&#123;    //...&#125;public Set&lt;Integer&gt; mapToSet(Map map)&#123;    //...&#125;public UserDto convertTo(User user)&#123;    //...&#125;public String toString(Object obj)&#123;    //...&#125;</code></pre><h2><span id="4-变量命名规范">4. 变量命名规范</span></h2><p>变量(Variable)命名包括参数名称，成员变量和局部变量。变量命名通常以小写字母开头，如果变量名由多个单词构成，则从第二个单词起首字母需要大写，在变量命名过程中，不建议使用“_”作为前缀或者单词之间的分割符号。下面是一些常见的变量命名示例：</p><pre><code>private String nickName;private String mobileNumber;private Long id;private String username;private Long orderId;private Long orderItemId;</code></pre><h2><span id="5-常量命名规范">5. 常量命名规范</span></h2><p>一般地，常量名称采用全部大写的英文单词书写，如果常量名称由多个单词组成，则单词之间统一使用“_”进行分割，下面是常量命名示例：</p><pre><code>public static final String LOGIN_USER_SESSION_KEY = &quot;current_login_user&quot;;public static final int MAX_AGE_VALUE = 120;public static final int DEFAULT_PAGE_NO = 1;public static final long MAX_PAGE_SIZE = 1000;public static final boolean HAS_LICENSE = false;public static final boolean IS_CHECKED = false;</code></pre><h2><span id="6-枚举命名规范">6. 枚举命名规范</span></h2><p>枚举(Enum)类是一种特殊的类，其命名规范遵循普通类的命名约束条件，首字母大写，采用驼峰命名法；枚举类中定义的值的名称遵循常量的命名规范，且枚举值的名称需要与类名有一定的关联性，下面是枚举的一些示例：</p><pre><code>public enum Color&#123;    RED,YELLOW,BLUE,GREEN,WHITE;&#125;public enum PhysicalSize&#123;    TINY,SMALL,MEDIUM,LARGE,HUGE,GIGANTIC;&#125;</code></pre><p>下面是Oracle Java标准库中的一个示例：</p><pre><code>public enum ElementType&#123;    TYPE,    FIELD,    METHOD,    PARAMETER,    CONSTRUCTOR,    LOCAL_VARIABLE,    ANNOTATION_TYPE,    PACKAGE,    TYPE_PARAMETER,    TYPE_USE;&#125;</code></pre><h2><span id="7-其他命名规范">7. 其他命名规范</span></h2><h3><span id="71-数组">7.1 数组</span></h3><p>在定义数组时，为了便于阅读，尽量保持以下的书写规范：</p><pre><code>int[] array = new int[10];int[] idArray =&#123;1,2,3,4,5&#125;;String[] nameArray = &#123;&quot;First&quot;,&quot;Yellow&quot;,&quot;Big&quot;&#125;public List&lt;String&gt; getNameById(Integer[] ids)&#123;    //...&#125;//或者public List&lt;String&gt; getNameById(Integer...ids)&#123;    //...&#125;</code></pre><h3><span id="72-表述复数或者集合">7.2 表述复数或者集合</span></h3><p>如果一个变量用于描述多个数据时，尽量使用单词的复数形式进行书写，例如：</p><pre><code>Collection&lt;Order&gt; orders;int[] values;List&lt;Item&gt; items;</code></pre><p>另外，如果表述的是一个Map数据，则应使用“map”作为其后缀，例如：</p><pre><code>Map&lt;String,User&gt; userMap;Map&lt;String,List&lt;Object&gt;&gt; listMap;</code></pre><h3><span id="73-泛型类">7.3 泛型类</span></h3><p>在书写泛型类时，通常做以下的约定：</p><ul><li>E表示Element，通常用在集合中；</li><li>ID用于表示对象的唯一标识符类型</li><li>T表示Type(类型)，通常指代类；</li><li>K表示Key(键),通常用于Map中；</li><li>V表示Value(值),通常用于Map中，与K结对出现；</li><li>N表示Number,通常用于表示数值类型；</li><li>？表示不确定的Java类型；</li><li>X用于表示异常；</li><li>U,S表示任意的类型。</li></ul><p>下面时泛型类的书写示例：</p><pre><code>public class HashSet&lt;E&gt; extends AbstractSet&lt;E&gt;&#123;    //...&#125;public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt;&#123;    //...&#125;public class ThreadLocal&lt;T&gt;&#123;    //...&#125;public interface Functor&lt;T,X extends Throwable&gt;&#123;    T val() throws X;&#125;public class Container&lt;K,V&gt;&#123;    private K key;    private V value;    Container(K key,V value)&#123;        this.key = key;        this.value = value;    &#125;    //getter and setter ...&#125;public interface BaseRepository&lt;T,ID&gt;&#123;    T findById(ID id);    void update(T t);    List&lt;T&gt; findByIds(ID...ids);&#125;public static &lt;T&gt; List&lt;T&gt; methodName(Class&lt;T&gt; clz)&#123;    List&lt;T&gt; dataList = getByClz(clz);    return dataList;&#125;</code></pre><h3><span id="74-接口实现类">7.4 接口实现类</span></h3><p>为了便于阅读，在通常情况下，建议接口实现类使用“Impl作为后缀”，不建议使用大写的“I”作为接口前缀，下面是接口和接口实现类的书写示例。</p><p>推荐写法：</p><pre><code>public interface OrderService&#123;    //...&#125;public class OrderServiceImpl implements OrderService&#123;    //...&#125;</code></pre><p>不建议的写法：</p><pre><code>public interface IOrderService&#123;    //...&#125;public class OrderService implements IOrderService&#123;    //...&#125;</code></pre><h3><span id="75-测试类和测试方法">7.5 测试类和测试方法</span></h3><p>在项目中，测试类采用被测试业务模块名/被测试接口/被测试类+“Test”的方法进行书写，测试类中的测试函数采用“test”+用例操作_状态的组合方式进行书写，例如：</p><pre><code>public class UserServiceTest&#123;    public void testFindByUsernameAndPassword()&#123;        //...    &#125;    public void testUsernameExist_notExist()&#123;        //...    &#125;    public void testDeleteById_isOk()&#123;        //...    &#125;&#125;</code></pre><h2><span id="8-扩展速记java开发中的各种o">8 扩展：速记Java开发中的各种O</span></h2><p>最后，通过一张表和图快速对Java中的<code>BO</code>,<code>DTO</code>,<code>DAO</code>,<code>PO</code>,<code>POJO</code>,<code>VO</code>之间的含义，区别以及联系进行梳理。</p><table><thead><tr><th>名称</th><th>使用范围</th><th>解释说明</th></tr></thead><tbody><tr><td>BO</td><td>用于Service,Manager,Business等业务相关类的命名</td><td>Business Object业务处理对象，主要作用是把业务逻辑封装成一个对象。</td></tr><tr><td>DTO</td><td>经过加工后的PO对象，其内部属性可能增加或减少</td><td>Data Transfer Object数据传输对象，主要用于远程调用等需要大量传输数据的地方，例如，可以将一个或多个PO类的部分或全部属性封装为DTO进行传输</td></tr><tr><td>DAO</td><td>用于对数据库进行读写操作的类进行命名</td><td>Data Access Object数据访问对象，主要用来封装对数据库的访问，通过DAO可以将POJO持久化为PO，也可以利用PO封装出VO和DTO</td></tr><tr><td>PO</td><td>Bean,Entity等类的命名</td><td>Persistant Object持久化对象，数据库表中的数据在Java对象中的映射状态，可以简单的理解为一个PO对象即为数据库表中的一条记录</td></tr><tr><td>POJO</td><td>POJO是DO/DTO/BO/VO的统称</td><td>Plain Ordinary Java Object 简单Java对象，它是一个简单的普通Java对象，禁止将类命名为XxxxPOJO</td></tr><tr><td>VO</td><td>通常是视图控制层和模板引擎之间传递的数据对象</td><td>Value Object 值对象，主要用于视图层，视图控制器将视图层所需的属性封装成一个对象，然后用一个VO对象在视图控制器和视图之间进行数据传输。</td></tr><tr><td>AO</td><td>应用层对象</td><td>Application Object，在Web层与Service层之间抽象的复用对象模型，很少用。</td></tr></tbody></table><p>下面将通过一张图来理解上述几种O之间相互转换的关系：</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211205195350.png" alt="微信图片_20211205195350"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> java </tag>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot学习笔记</title>
      <link href="/2021/12/05/springboot-jing-dian-xue-xi-bi-ji/"/>
      <url>/2021/12/05/springboot-jing-dian-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2><span id="导读课程概览">导读：课程概览</span></h2><h3><span id="1-spring-boot是什么">1. Spring Boot是什么</span></h3><p>我们知道，从 2002 年开始，Spring 一直在飞速的发展，如今已经成为了在Java EE（Java Enterprise Edition）开发中真正意义上的标准，但是随着技术的发展，Java EE使用 Spring 逐渐变得笨重起来，大量的 XML 文件存在于项目之中。<strong>繁琐的配置，整合第三方框架的配置问题，导致了开发和部署效率的降低</strong>。  </p><p>2012 年 10 月，Mike Youngstrom 在 Spring jira 中创建了一个功能请求，要求<strong>在 Spring 框架中支持无容器 Web 应用程序体系结构</strong>。他谈到了在主容器引导 spring 容器内配置 Web 容器服务。这是 jira 请求的摘录：</p><blockquote><p>我认为 Spring 的 Web 应用体系结构可以大大简化，如果它提供了从上到下利用 Spring 组件和配置模型的工具和参考体系结构。在简单的 <code>main()</code>方法引导的 Spring 容器内嵌入和统一这些常用Web 容器服务的配置。 </p></blockquote><p>这一要求促使了 2013 年初开始的 Spring Boot 项目的研发，到今天，Spring Boot 的版本已经到了 2.0.3 RELEASE。Spring Boot 并不是用来替代 Spring 的解决方案，而<strong>是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具</strong>。</p><p>它集成了大量常用的第三方库配置，Spring Boot应用中这些第三方库几乎可以是零配置的开箱即用（out-of-the-box），大部分的 Spring Boot 应用都只需要非常少量的配置代码（基于 Java 的配置），开发者能够更加专注于业务逻辑。   </p><h3><span id="2-为什么学习spring-boot">2. 为什么学习Spring Boot</span></h3><h4><span id="21-从spring官方来看">2.1 从Spring官方来看</span></h4><p>我们打开 Spring 的<a href="http://spring.io/">官方网站</a>，可以看到下图：  </p><p><img src="https://images.gitbook.cn/98fda7f0-8656-11e8-8675-5537a701ae7d" alt="Spring官网首图"></p><p>我们可以看到图中官方对 Spring Boot 的定位：<em>Build Anything</em>， Build任何东西。Spring Boot旨在尽可能快地启动和运行，并且只需最少的 Spring 前期配置。  同时我们也来看一下官方对后面两个的定位：  </p><p>SpringCloud：<em>Coordinate Anything</em>，协调任何事情；<br>SpringCloud Data Flow：<em>Connect everything</em>，连接任何东西。</p><p>仔细品味一下，Spring 官网对 Spring Boot、SpringCloud 和 SpringCloud Data Flow三者定位的措辞非常有味道，同时也可以看出，Spring 官方对这三个技术非常重视，是现在以及今后学习的重点（SpringCloud 相关达人课课程届时也会上线）。</p><h4><span id="22-从spring-boot的优点来看">2.2 从Spring Boot的优点来看</span></h4><p>Spring Boot 有哪些优点？主要给我们解决了哪些问题呢？我们以下图来说明：</p><p><img src="https://images.gitbook.cn/e17b8c40-8656-11e8-8a91-d70bc2d847c5" alt="Spring Boot的优点"></p><h5><span id="221-良好的基因">2.2.1 良好的基因</span></h5><p>Spring Boot 是伴随着 Spring 4.0 诞生的，从字面理解，Boot是引导的意思，因此 Spring Boot 旨在帮助开发者快速搭建 Spring 框架。Spring Boot 继承了原有 Spring 框架的优秀基因，使 Spring 在使用中更加方便快捷。</p><p><img src="https://images.gitbook.cn/00078650-8657-11e8-87de-d910a3ee087e" alt="Spring Boot与Spring"></p><h5><span id="222-简化编码">2.2.2 简化编码</span></h5><p>举个例子，比如我们要创建一个 web 项目，使用 Spring 的朋友都知道，在使用 Spring 的时候，需要在 pom 文件中添加多个依赖，而 Spring Boot 则会帮助开发着快速启动一个 web 容器，在 Spring Boot 中，我们只需要在 pom 文件中添加如下一个 starter-web 依赖即可。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>我们点击进入该依赖后可以看到，Spring Boot 这个 starter-web 已经包含了多个依赖，包括之前在 Spring 工程中需要导入的依赖，我们看一下其中的一部分，如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- .....省略其他依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>由此可以看出，Spring Boot 大大简化了我们的编码，我们不用一个个导入依赖，直接一个依赖即可。</p><h5><span id="223-简化配置">2.2.3 简化配置</span></h5><p>Spring 虽然使Java EE轻量级框架，但由于其繁琐的配置，一度被人认为是“配置地狱”。各种XML、Annotation配置会让人眼花缭乱，而且配置多的话，如果出错了也很难找出原因。Spring Boot更多的是采用 Java Config 的方式，对 Spring 进行配置。举个例子：</p><p>我新建一个类，但是我不用 <code>@Service</code>注解，也就是说，它是个普通的类，那么我们如何使它也成为一个 Bean 让 Spring 去管理呢？只需要<code>@Configuration</code> 和<code>@Bean</code>两个注解即可，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello Spring Boot!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> TestService <span class="token function">getTestService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TestService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>@Configuration</code>表示该类是个配置类，<code>@Bean</code>表示该方法返回一个 Bean。这样就把<code>TestService</code>作为 Bean 让 Spring 去管理了，在其他地方，我们如果需要使用该 Bean，和原来一样，直接使用<code>@Resource</code>注解注入进来即可使用，非常方便。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> TestService testService<span class="token punctuation">;</span></code></pre><p>另外，部署配置方面，原来 Spring 有多个 xml 和 properties配置，在 Spring Boot 中只需要个 application.yml即可。</p><h5><span id="224-简化部署">2.2.4 简化部署</span></h5><p>在使用 Spring 时，项目部署时需要我们在服务器上部署 tomcat，然后把项目打成 war 包扔到 tomcat里，在使用 Spring Boot 后，我们不需要在服务器上去部署 tomcat，因为 Spring Boot 内嵌了 tomcat，我们只需要将项目打成 jar 包，使用 <code>java -jar xxx.jar</code>一键式启动项目。</p><p>另外，也降低对运行环境的基本要求，环境变量中有JDK即可。</p><h5><span id="225-简化监控">2.2.5 简化监控</span></h5><p>我们可以引入 spring-boot-start-actuator 依赖，直接使用 REST 方式来获取进程的运行期性能参数，从而达到监控的目的，比较方便。但是 Spring Boot 只是个微框架，没有提供相应的服务发现与注册的配套功能，没有外围监控集成方案，没有外围安全管理方案，所以在微服务架构中，还需要 Spring Cloud 来配合一起使用。</p><h4><span id="23-从未来发展的趋势来看">2.3 从未来发展的趋势来看</span></h4><p>微服务是未来发展的趋势，项目会从传统架构慢慢转向微服务架构，因为微服务可以使不同的团队专注于更小范围的工作职责、使用独立的技术、更安全更频繁地部署。而 继承了 Spring 的优良特性，与 Spring 一脉相承，而且 支持各种REST API 的实现方式。Spring Boot 也是官方大力推荐的技术，可以看出，Spring Boot 是未来发展的一个大趋势。</p><h3><span id="3-本课程能学到什么">3. 本课程能学到什么</span></h3><p>本课程使用目前 Spring Boot 最新版本2.0.3 RELEASE，课程文章均为作者在实际项目中剥离出来的场景和demo，目标是带领学习者快速上手 Spring Boot，将 Spring Boot 相关技术点快速运用在微服务项目中。全篇分为两部分：基础篇和进阶篇。  </p><p>基础篇（01—10课）主要介绍 Spring Boot 在项目中最常使用的一些功能点，旨在带领学习者快速掌握 Spring Boot 在开发时需要的知识点，能够把 Spring Boot 相关技术运用到实际项目架构中去。该部分以 Spring Boot 框架为主线，内容包括Json数据封装、日志记录、属性配置、MVC支持、在线文档、模板引擎、异常处理、AOP 处理、持久层集成等等。  </p><p>进阶篇（11—17课）主要是介绍 Spring Boot 在项目中拔高一些的技术点，包括集成的一些组件，旨在带领学习者在项目中遇到具体的场景时能够快速集成，完成对应的功能。该部分以 Spring Boot 框架为主线，内容包括拦截器、监听器、缓存、安全认证、分词插件、消息队列等等。  </p><p>认真读完该系列文章之后，学习者会快速了解并掌握 Spring Boot 在项目中最常用的技术点，作者课程的最后，会基于课程内容搭建一个 Spring Boot 项目的空架构，该架构也是从实际项目中剥离出来，学习者可以运用该架构于实际项目中，具备使用 Spring Boot 进行实际项目开发的能力。  </p><p>课程所有源码提供免费下载：<a href="https://gitee.com/eson15/springboot_study">下载地址</a>。</p><h3><span id="4-适合阅读的人群">4. 适合阅读的人群</span></h3><p>本课程适合以下人群阅读：</p><ul><li>有一定的Java语言基础，了解Spring、Maven的在校学生或自学者</li><li>有传统项目经验，想往微服务方向发展的工作人员</li><li>热衷于新技术并对 Spring Boot 感兴趣的人员</li><li>希望了解 Spring Boot 2.0.3 的研究人员<h3><span id="5-本课程开发环境和插件">5. 本课程开发环境和插件</span></h3></li></ul><p>本课程的开发环境：</p><ul><li>开发工具：IDEA 2017</li><li>JDK版本： JDK 1.8</li><li>Spring Boot版本：2.0.3 RELEASE</li><li>Maven版本：3.5.2</li></ul><p>涉及到的插件：</p><ul><li>FastJson</li><li>Swagger2</li><li>Thymeleaf</li><li>MyBatis</li><li>Redis</li><li>ActiveMQ</li><li>Shiro</li><li>Lucence</li></ul><h3><span id="6-课程目录">6. 课程目录</span></h3><ul><li>导读：课程概览</li><li>第01课：Spring Boot开发环境搭建和项目启动</li><li>第02课：Spring Boot返回Json数据及数据封装</li><li>第03课：Spring Boot使用slf4j进行日志记录</li><li>第04课：Spring Boot中的项目属性配置</li><li>第05课：Spring Boot中的MVC支持</li><li>第06课：Spring Boot集成Swagger2展现在线接口文档</li><li>第07课：Spring Boot集成Thymeleaf模板引擎</li><li>第08课：Spring Boot中的全局异常处理</li><li>第09课：Spring Boot中的切面AOP处理</li><li>第10课：Spring Boot中集成MyBatis</li><li>第11课：Spring Boot事务配置管理</li><li>第12课：Spring Boot中使用监听器</li><li>第13课：Spring Boot中使用拦截器</li><li>第14课：Spring Boot中集成Redis</li><li>第15课：Spring Boot中集成ActiveMQ</li><li>第16课：Spring Boot中集成Shiro</li><li>第17课：Spring Boot中结成Lucence</li><li>第18课：Spring Boot搭建实际项目开发中的架构</li></ul><h2><span id="第01课spring-boot开发环境搭建和项目启动">第01课：Spring Boot开发环境搭建和项目启动</span></h2><p>上一节对 SpringBoot 的特性做了一个介绍，本节主要对 <strong>jdk 的配置、Spring Boot工程的构建和项目的启动、Spring Boot 项目工程的结构做一下讲解和分析</strong>。</p><h3><span id="1-jdk-的配置">1. jdk 的配置</span></h3><p>本课程是使用 IDEA 进行开发，在IDEA 中配置 jdk 的方式很简单，打开<code>File-&gt;Project Structure</code>，如下图所：</p><p><img src="https://images.gitbook.cn/9befde80-8659-11e8-9b0d-95de449dc107" alt="IDEA中配置jdk"></p><ol><li>选择 SDKs</li><li>在 JDK home path 中选择本地 jdk 的安装目录</li><li>在 Name 中为 jdk 自定义名字</li></ol><p>通过以上三步骤，即可导入本地安装的 jdk。如果是使用 STS 或者 eclipse 的朋友，可以通过两步骤添加：</p><ul><li><code>window-&gt;preference-&gt;java-&gt;Instralled JRES</code>来添加本地 jdk。</li><li><code>window--&gt;preference--&gt;java--&gt;Compiler</code>选择 jre，和 jdk 保持一致。</li></ul><h3><span id="2-spring-boot-工程的构建">2. Spring Boot 工程的构建</span></h3><h4><span id="21-idea-快速构建">2.1 IDEA 快速构建</span></h4><p>IDEA 中可以通过<code>File-&gt;New-&gt;Project</code>来快速构建 Spring Boot 工程。如下，选择 Spring Initializr，在 Project SDK 中选择刚刚我们导入的 jdk，点击 Next，到了项目的配置信息。</p><ul><li>Group：填企业域名，本课程使用com.itcodai</li><li>Artifact：填项目名称，本课程中每一课的工程名以<code>course+课号</code>命令，这里使用 course01</li><li>Dependencies：可以添加我们项目中所需要的依赖信息，根据实际情况来添加，本课程只需要选择 Web 即可。</li></ul><h4><span id="22-官方构建">2.2 官方构建</span></h4><p>第二种方式可以通过官方构建，步骤如下：</p><ul><li>访问 <a href="http://start.spring.io/%E3%80%82">http://start.spring.io/。</a></li><li>在页面上输入相应的 Spring Boot 版本、Group 和 Artifact 信息以及项目依赖，然后创建项目。</li><li><img src="https://images.gitbook.cn/014a1ba0-865b-11e8-956e-f528114b28bd" alt="创建Spring Boot工程"></li><li>解压后，使用 IDEA 导入该 maven 工程：<code>File-&gt;New-&gt;Model from Existing Source</code>，然后选择解压后的项目文件夹即可。如果是使用 eclipse 的朋友，可以通过<code>Import-&gt;Existing Maven Projects-&gt;Next</code>，然后选择解压后的项目文件夹即可。</li></ul><h4><span id="23-maven配置">2.3 maven配置</span></h4><p>创建了 Spring Boot 项目之后，需要进行 maven 配置。打开<code>File-&gt;settings</code>，搜索 maven，配置一下本地的 maven 信息。如下：</p><p><img src="https://images.gitbook.cn/2ff7b930-865b-11e8-8675-5537a701ae7d" alt="maven配置"></p><p>在 Maven home directory 中选择本地 Maven 的安装路径；在 User settings file 中选择本地 Maven 的配置文件所在路径。在配置文件中，我们配置一下国内阿里的镜像，这样在下载 maven 依赖时，速度很快。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre><p>如果是使用 eclipse 的朋友，可以通过<code>window--&gt;preference--&gt;Maven--&gt;User Settings</code>来配置，配置方式和上面一致。</p><h4><span id="24-编码配置">2.4 编码配置</span></h4><p>同样地，新建项目后，我们一般都需要配置编码，这点非常重要，很多初学者都会忘记这一步，所以要养成良好的习惯。</p><p>IDEA 中，仍然是打开<code>File-&gt;settings</code>，搜索 encoding，配置一下本地的编码信息。如下：</p><p><img src="https://images.gitbook.cn/57564e60-865b-11e8-8a91-d70bc2d847c5" alt="编码配置"></p><p>如果是使用 eclipse 的朋友，有两个地方需要设置一下编码：</p><ul><li>window–&gt; perferences–&gt;General–&gt;Workspace，将Text file encoding改成utf-8</li><li>window–&gt;perferences–&gt;General–&gt;content types，选中Text，将Default encoding填入utf-8</li></ul><p>OK，编码设置完成即可启动项目工程了。</p><h3><span id="3-spring-boot-项目工程结构">3. Spring Boot 项目工程结构</span></h3><p>Spring Boot 项目总共有三个模块，如下图所示：</p><p><img src="https://images.gitbook.cn/8b32fa80-865b-11e8-9d13-03ea4b4d8504" alt="Spring Boot项目工程结构"></p><ul><li>src/main/java路径：主要编写业务程序</li><li>src/main/resources路径：存放静态文件和配置文件</li><li>src/test/java路径：主要编写测试程序</li></ul><p>默认情况下，如上图所示会创建一个启动类 Course01Application，该类上面有个<code>@SpringBootApplication</code>注解，该启动类中有个 main 方法，没错，Spring Boot 启动只要运行该 main 方法即可，非常方便。另外，Spring Boot 内部集成了 tomcat，不需要我们人为手动去配置 tomcat，开发者只需要关注具体的业务逻辑即可。</p><p>到此为止，Spring Boot 就启动成功了，为了比较清楚的看到效果，我们写一个 Controller 来测试一下，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itcodai<span class="token punctuation">.</span>course01<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/start"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/springboot"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">startSpringBoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Welcome to the world of Spring Boot!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重新运行 main 方法启动项目，在浏览器中输入 <code>localhost:8080/start/springboot</code>，如果看到 <code>“Welcome to the world of Spring Boot!”</code>，那么恭喜你项目启动成功！Spring Boot 就是这么简单方便！端口号默认是8080，如果想要修改，可以在 application.yml 文件中使用 <code>server.port</code> 来人为指定端口，如8001端口：</p><pre class=" language-xml"><code class="language-xml">server:  port: 8001</code></pre><h3><span id="4-总结">4. 总结</span></h3><p>本节我们快速学习了如何在 IDEA 中导入 jdk，以及使用 IDEA 如何配置 maven 和编码，如何快速的创建和启动 Spring Boot 工程。IDEA 对 Spring Boot 的支持非常友好，建议大家使用 IDEA 进行 Spring Boot 的开发，从下一课开始，我们真正进入 Spring Boot 的学习中。<br>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第02课spring-boot返回json数据及数据封装">第02课：Spring Boot返回Json数据及数据封装</span></h2><p>在项目开发中，接口与接口之间，前后端之间数据的传输都使用 Json 格式，在 Spring Boot 中，接口返回 Json 格式的数据很简单，在 Controller 中使用<code>@RestController</code>注解即可返回 Json 格式的数据，<code>@RestController</code>也是 Spring Boot 新增的一个注解，我们点进去看一下该注解都包含了哪些东西。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RestController</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看出， <code>@RestController</code> 注解包含了原来的 <code>@Controller</code> 和 <code>@ResponseBody</code> 注解，使用过 Spring 的朋友对 <code>@Controller</code> 注解已经非常了解了，这里不再赘述， <code>@ResponseBody</code> 注解是将返回的数据结构转换为 Json 格式。所以在默认情况下，使用了 <code>@RestController</code> 注解即可将返回的数据结构转换成 Json 格式，Spring Boot 中默认使用的 Json 解析技术框架是 jackson。我们点开 pom.xml 中的 <code>spring-boot-starter-web</code> 依赖，可以看到一个 <code>spring-boot-starter-json</code> 依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>Spring Boot 中对依赖都做了很好的封装，可以看到很多 <code>spring-boot-starter-xxx</code> 系列的依赖，这是 Spring Boot 的特点之一，不需要人为去引入很多相关的依赖了，starter-xxx 系列直接都包含了所必要的依赖，所以我们再次点进去上面这个 <code>spring-boot-starter-json</code> 依赖，可以看到：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.datatype<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-datatype-jdk8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.datatype<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-datatype-jsr310<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-module-parameter-names<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>到此为止，我们知道了 Spring Boot 中默认使用的 json 解析框架是 jackson。下面我们看一下默认的 jackson 框架对常用数据类型的转 Json 处理。</p><h3><span id="1-spring-boot-默认对json的处理">1. Spring Boot 默认对Json的处理</span></h3><p>在实际项目中，常用的数据结构无非有类对象、List对象、Map对象，我们看一下默认的 jackson 框架对这三个常用的数据结构转成 json 后的格式如何。</p><h4><span id="11-创建-user-实体类">1.1 创建 User 实体类</span></h4><p>为了测试，我们需要创建一个实体类，这里我们就用 User 来演示。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 省略get、set和带参构造方法 */</span><span class="token punctuation">}</span></code></pre><h4><span id="12-创建controller类">1.2 创建Controller类</span></h4><p>然后我们创建一个 Controller，分别返回 <code>User</code>对象、<code>List&lt;User&gt;</code> 和 <code>Map&lt;String, Object&gt;</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>itcodai<span class="token punctuation">.</span>course02<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/json"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"倪升武"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"倪升武"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"达人课"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/map"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"倪升武"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"作者信息"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"博客地址"</span><span class="token punctuation">,</span> <span class="token string">"http://blog.itcodai.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CSDN地址"</span><span class="token punctuation">,</span> <span class="token string">"http://blog.csdn.net/eson_15"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"粉丝数量"</span><span class="token punctuation">,</span> <span class="token number">4153</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4><span id="13-测试不同数据类型返回的json">1.3 测试不同数据类型返回的json</span></h4><p>OK，写好了接口，分别返回了一个 User 对象、一个 List 集合和一个 Map 集合，其中 Map 集合中的 value 存的是不同的数据类型。接下来我们依次来测试一下效果。</p><p>在浏览器中输入：<code>localhost:8080/json/user</code> 返回 json 如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"倪升武"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"123456"</span><span class="token punctuation">}</span></code></pre><p>在浏览器中输入：<code>localhost:8080/json/list</code> 返回 json 如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"倪升武"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"123456"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"达人课"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"123456"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>在浏览器中输入：<code>localhost:8080/json/map</code> 返回 json 如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"作者信息"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"倪升武"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"123456"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"CSDN地址"</span><span class="token operator">:</span><span class="token string">"http://blog.csdn.net/eson_15"</span><span class="token punctuation">,</span><span class="token property">"粉丝数量"</span><span class="token operator">:</span><span class="token number">4153</span><span class="token punctuation">,</span><span class="token property">"博客地址"</span><span class="token operator">:</span><span class="token string">"http://blog.itcodai.com"</span><span class="token punctuation">}</span></code></pre><p>可以看出，map 中不管是什么数据类型，都可以转成相应的 json 格式，这样就非常方便。</p><h4><span id="14-jackson-中对null的处理">1.4 jackson 中对null的处理</span></h4><p>在实际项目中，我们难免会遇到一些 null 值出现，我们转 json 时，是不希望有这些 null 出现的，比如我们期望所有的 null 在转 json 时都变成 “” 这种空字符串，那怎么做呢？在 Spring Boot 中，我们做一下配置即可，新建一个 jackson 的配置类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JsonGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>JsonSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>SerializerProvider<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnMissingBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Primary<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>json<span class="token punctuation">.</span>Jackson2ObjectMapperBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ObjectMapper <span class="token function">jacksonObjectMapper</span><span class="token punctuation">(</span>Jackson2ObjectMapperBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ObjectMapper objectMapper <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createXmlMapper</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">getSerializerProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNullValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsonSerializer</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> JsonGenerator jsonGenerator<span class="token punctuation">,</span> SerializerProvider serializerProvider<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                jsonGenerator<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> objectMapper<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后我们修改一下上面返回 map 的接口，将几个值改成 null 测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/map"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"倪升武"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"作者信息"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"博客地址"</span><span class="token punctuation">,</span> <span class="token string">"http://blog.itcodai.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CSDN地址"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"粉丝数量"</span><span class="token punctuation">,</span> <span class="token number">4153</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> map<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>重启项目，再次输入：<code>localhost:8080/json/map</code>，可以看到 jackson 已经将所有 null 字段转成了空字符串了。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"作者信息"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"倪升武"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"CSDN地址"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"粉丝数量"</span><span class="token operator">:</span><span class="token number">4153</span><span class="token punctuation">,</span><span class="token property">"博客地址"</span><span class="token operator">:</span><span class="token string">"http://blog.itcodai.com"</span><span class="token punctuation">}</span></code></pre><h3><span id="2-使用阿里巴巴fastjson的设置">2. 使用阿里巴巴FastJson的设置</span></h3><h4><span id="21-jackson-和-fastjson-的对比">2.1 jackson 和 fastJson 的对比</span></h4><p>有很多朋友习惯于使用阿里巴巴的 fastJson 来做项目中 json 转换的相关工作，目前我们项目中使用的就是阿里的 fastJson，那么 jackson 和 fastJson 有哪些区别呢？根据网上公开的资料比较得到下表。<br>| 选项 | fastJson | jackson |<br>| :-: | :-: | :-: |<br>| 上手难易程度 | 容易 | 中等 |<br>| 高级特性支持 | 中等 | 丰富 |<br>| 官方文档、Example支持 | 中文 | 英文 |<br>| 处理json速度 | 略快 | 快 |</p><p>关于 fastJson 和 jackson 的对比，网上有很多资料可以查看，主要是根据自己实际项目情况来选择合适的框架。从扩展上来看，fastJson 没有 jackson 灵活，从速度或者上手难度来看，fastJson 可以考虑，我们项目中目前使用的是阿里的 fastJson，挺方便的。</p><h4><span id="22-fastjson依赖导入">2.2 fastJson依赖导入</span></h4><p>使用 fastJson 需要导入依赖，本课程使用 1.2.35 版本，依赖如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.35<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4><span id="22-使用-fastjson-处理-null">2.2 使用 fastJson 处理 null</span></h4><p>使用 fastJson 时，对 null 的处理和 jackson 有些不同，需要继承  <code>WebMvcConfigurationSupport</code> 类，然后覆盖 <code>configureMessageConverters</code> 方法，在方法中，我们可以选择对要实现 null 转换的场景，配置好即可。如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>SerializerFeature<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>support<span class="token punctuation">.</span>config<span class="token punctuation">.</span>FastJsonConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>support<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>FastJsonHttpMessageConverter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>MediaType<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>HttpMessageConverter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurationSupport<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">fastJsonConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用阿里 FastJson 作为JSON MessageConverter     * @param converters     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FastJsonHttpMessageConverter converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FastJsonConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setSerializerFeatures</span><span class="token punctuation">(</span>                <span class="token comment" spellcheck="true">// 保留map空的字段</span>                SerializerFeature<span class="token punctuation">.</span>WriteMapNullValue<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 将String类型的null转成""</span>                SerializerFeature<span class="token punctuation">.</span>WriteNullStringAsEmpty<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 将Number类型的null转成0</span>                SerializerFeature<span class="token punctuation">.</span>WriteNullNumberAsZero<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 将List类型的null转成[]</span>                SerializerFeature<span class="token punctuation">.</span>WriteNullListAsEmpty<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 将Boolean类型的null转成false</span>                SerializerFeature<span class="token punctuation">.</span>WriteNullBooleanAsFalse<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 避免循环引用</span>                SerializerFeature<span class="token punctuation">.</span>DisableCircularReferenceDetect<span class="token punctuation">)</span><span class="token punctuation">;</span>        converter<span class="token punctuation">.</span><span class="token function">setFastJsonConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        converter<span class="token punctuation">.</span><span class="token function">setDefaultCharset</span><span class="token punctuation">(</span>Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>MediaType<span class="token operator">></span> mediaTypeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解决中文乱码问题，相当于在Controller上的@RequestMapping中加了个属性produces = "application/json"</span>        mediaTypeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        converter<span class="token punctuation">.</span><span class="token function">setSupportedMediaTypes</span><span class="token punctuation">(</span>mediaTypeList<span class="token punctuation">)</span><span class="token punctuation">;</span>        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="3-封装统一返回的数据结构">3. 封装统一返回的数据结构</span></h3><p>以上是 Spring Boot 返回 json 的几个代表的例子，但是在实际项目中，除了要封装数据之外，我们往往需要在返回的 json 中添加一些其他信息，比如返回一些状态码 code ，返回一些 msg 给调用者，这样调用者可以根据 code 或者 msg 做一些逻辑判断。所以在实际项目中，我们需要封装一个统一的 json 返回结构存储返回信息。 </p><h4><span id="31-定义统一的-json-结构">3.1 定义统一的 json 结构</span></h4><p>由于封装的 json 数据的类型不确定，所以在定义统一的 json 结构时，我们需要用到泛型。统一的 json 结构中属性包括数据、状态码、提示信息即可，构造方法可以根据实际业务需求做相应的添加即可，一般来说，应该有默认的返回结构，也应该有用户指定的返回结构。如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonResult</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">private</span> String code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 若没有数据返回，默认状态码为0，提示信息为：操作成功！     */</span>    <span class="token keyword">public</span> <span class="token function">JsonResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"操作成功！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 若没有数据返回，可以人为指定状态码和提示信息     * @param code     * @param msg     */</span>    <span class="token keyword">public</span> <span class="token function">JsonResult</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有数据返回时，状态码为0，默认提示信息为：操作成功！     * @param data     */</span>    <span class="token keyword">public</span> <span class="token function">JsonResult</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"操作成功！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有数据返回，状态码为0，人为指定提示信息     * @param data     * @param msg     */</span>    <span class="token keyword">public</span> <span class="token function">JsonResult</span><span class="token punctuation">(</span>T data<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 省略get和set方法</span><span class="token punctuation">}</span></code></pre><h4><span id="32-修改-controller-中的返回值类型及测试">3.2 修改 Controller 中的返回值类型及测试</span></h4><p>由于 JsonResult 使用了泛型，所以所有的返回值类型都可以使用该统一结构，在具体的场景将泛型替换成具体的数据类型即可，非常方便，也便于维护。在实际项目中，还可以继续封装，比如状态码和提示信息可以定义一个枚举类型，以后我们只需要维护这个枚举类型中的数据即可（在本课程中就不展开了）。根据以上的 JsonResult，我们改写一下 Controller，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/jsonresult"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonResultController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonResult<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"倪升武"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonResult<span class="token operator">&lt;</span>List<span class="token operator">></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"倪升武"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"达人课"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>userList<span class="token punctuation">,</span> <span class="token string">"获取用户列表成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/map"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonResult<span class="token operator">&lt;</span>Map<span class="token operator">></span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"倪升武"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"作者信息"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"博客地址"</span><span class="token punctuation">,</span> <span class="token string">"http://blog.itcodai.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CSDN地址"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"粉丝数量"</span><span class="token punctuation">,</span> <span class="token number">4153</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们重新在浏览器中输入：<code>localhost:8080/jsonresult/user</code> 返回 json 如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token property">"data"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"倪升武"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"操作成功！"</span><span class="token punctuation">}</span></code></pre><p>输入：<code>localhost:8080/jsonresult/list</code>，返回 json 如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token property">"data"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"倪升武"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"达人课"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"获取用户列表成功"</span><span class="token punctuation">}</span></code></pre><p>输入：<code>localhost:8080/jsonresult/map</code>，返回 json 如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token property">"data"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"作者信息"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"倪升武"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"CSDN地址"</span><span class="token operator">:</span><span class="token null">null</span><span class="token punctuation">,</span><span class="token property">"粉丝数量"</span><span class="token operator">:</span><span class="token number">4153</span><span class="token punctuation">,</span><span class="token property">"博客地址"</span><span class="token operator">:</span><span class="token string">"http://blog.itcodai.com"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"操作成功！"</span><span class="token punctuation">}</span></code></pre><p>通过封装，我们不但将数据通过 json 传给前端或者其他接口，还带上了状态码和提示信息，这在实际项目场景中应用非常广泛。</p><h3><span id="4-总结">4. 总结</span></h3><p>本节主要对 Spring Boot 中 json 数据的返回做了详细的分析，从 Spring Boot 默认的 jackson 框架到阿里巴巴的 fastJson 框架，分别对它们的配置做了相应的讲解。另外，结合实际项目情况，总结了实际项目中使用的 json 封装结构体，加入了状态码和提示信息，使得返回的 json 数据信息更加完整。<br>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第03课spring-boot使用slf4j进行日志记录">第03课：Spring Boot使用slf4j进行日志记录</span></h2><p>在开发中，我们经常使用 <code>System.out.println()</code> 来打印一些信息，但是这样不好，因为大量的使用 <code>System.out</code> 会增加资源的消耗。我们实际项目中使用的是 slf4j 的 logback 来输出日志，效率挺高的，Spring Boot 提供了一套日志系统，logback 是最优的选择。</p><h3><span id="1-slf4j-介绍">1. slf4j 介绍</span></h3><p>引用百度百科里的一段话：</p><blockquote><p>SLF4J，即简单日志门面（Simple Logging Facade for Java），不是具体的日志解决方案，它只服务于各种各样的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志系统。</p></blockquote><p>这段的大概意思是：你只需要按统一的方式写记录日志的代码，而无需关心日志是通过哪个日志系统，以什么风格输出的。因为它们取决于部署项目时绑定的日志系统。例如，在项目中使用了 slf4j 记录日志，并且绑定了 log4j（即导入相应的依赖），则日志会以 log4j 的风格输出；后期需要改为以 logback 的风格输出日志，只需要将 log4j 替换成 logback 即可，不用修改项目中的代码。这对于第三方组件的引入的不同日志系统来说几乎零学习成本，况且它的优点不仅仅这一个而已，还有简洁的占位符的使用和日志级别的判断。</p><p>正因为 sfl4j 有如此多的优点，阿里巴巴已经将 slf4j 作为他们的日志框架了。在《阿里巴巴Java开发手册(正式版)》中，日志规约一项第一条就强制要求使用 slf4j：</p><blockquote><p>1.【强制】应用中不可直接使用日志系统（Log4j、Logback）中的API，而应依赖使用日志框架SLF4J中的API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p></blockquote><p>“强制”两个字体现出了 slf4j 的优势，所以建议在实际项目中，使用 slf4j 作为自己的日志框架。使用 slf4j 记录日志非常简单，直接使用  LoggerFactory 创建即可。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ……</span><span class="token punctuation">}</span></code></pre><h3><span id="2-applicationyml-中对日志的配置">2. application.yml 中对日志的配置</span></h3><p>Spring Boot 对 slf4j 支持的很好，内部已经集成了 slf4j，一般我们在使用的时候，会对slf4j 做一下配置。<code>application.yml</code> 文件是 Spring Boot 中唯一一个需要配置的文件，一开始创建工程的时候是 <code>application.properties</code> 文件，个人比较细化用 yml 文件，因为 yml 文件的层次感特别好，看起来更直观，但是 yml 文件对格式要求比较高，比如英文冒号后面必须要有个空格，否则项目估计无法启动，而且也不报错。用 properties 还是 yml 视个人习惯而定，都可以。本课程使用 yml。</p><p>我们看一下 application.yml 文件中对日志的配置：</p><pre class=" language-xml"><code class="language-xml">logging:  config: logback.xml  level:    com.itcodai.course03.dao: trace</code></pre><p><code>logging.config</code> 是用来指定项目启动的时候，读取哪个配置文件，这里指定的是日志配置文件是根路径下的 <code>logback.xml</code> 文件，关于日志的相关配置信息，都放在 <code>logback.xml</code> 文件中了。<code>logging.level</code> 是用来指定具体的 mapper 中日志的输出级别，上面的配置表示 <code>com.itcodai.course03.dao</code> 包下的所有 mapper 日志输出级别为 trace，会将操作数据库的 sql 打印出来，开发时设置成 trace 方便定位问题，在生产环境上，将这个日志级别再设置成 error 级别即可（本节课不讨论 mapper 层，在后面 Spring Boot 集成 MyBatis 时再详细讨论）。</p><p>常用的日志级别按照从高到低依次为：ERROR、WARN、INFO、DEBUG。</p><h3><span id="3-logbackxml-配置文件解析">3. logback.xml 配置文件解析</span></h3><p>在上面 <code>application.yml</code> 文件中，我们指定了日志配置文件 <code>logback.xml</code>，<code>logback.xml</code> 文件中主要用来做日志的相关配置。在 <code>logback.xml</code> 中，我们可以定义日志输出的格式、路径、控制台输出格式、文件大小、保存时长等等。下面来分析一下：</p><h4><span id="31-定义日志输出格式和存储路径">3.1 定义日志输出格式和存储路径</span></h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG_PATTERN<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%date{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILE_PATH<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>D:/logs/course03/demo.%d{yyyy-MM-dd}.%i.log<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>我们来看一下这个定义的含义：首先定义一个格式，命名为 “LOG_PATTERN”，该格式中 <code>%date</code> 表示日期，<code>%thread</code> 表示线程名，<code>%-5level</code> 表示级别从左显示5个字符宽度，<code>%logger&#123;36&#125;</code>  表示 logger 名字最长36个字符，<code>%msg</code> 表示日志消息，<code>%n</code> 是换行符。</p><p>然后再定义一下名为 “FILE_PATH” 文件路径，日志都会存储在该路径下。<code>%i</code> 表示第 i 个文件，当日志文件达到指定大小时，会将日志生成到新的文件里，这里的 i 就是文件索引，日志文件允许的大小可以设置，下面会讲解。这里需要注意的是，不管是 windows 系统还是 Linux 系统，日志存储的路径必须要是绝对路径。</p><h4><span id="32-定义控制台输出">3.2 定义控制台输出</span></h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 按照上面配置的LOG_PATTERN来打印日志 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>使用 <code>&lt;appender&gt;</code> 节点设置个控制台输出（<code>class=&quot;ch.qos.logback.core.ConsoleAppender&quot;</code>）的配置，定义为 “CONSOLE”。使用上面定义好的输出格式（LOG_PATTERN）来输出，使用 <code>$&#123;&#125;</code> 引用进来即可。</p><h4><span id="33-定义日志文件的相关参数">3.3 定义日志文件的相关参数</span></h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 按照上面配置的FILE_PATH路径来保存日志 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${FILE_PATH}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 日志保存15天 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 单个日志文件的最大，超过则新建日志文件存储 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>10MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 按照上面配置的LOG_PATTERN来打印日志 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>使用 <code>&lt;appender&gt;</code> 定义一个名为 “FILE” 的文件配置，主要是配置日志文件保存的时间、单个日志文件存储的大小、以及文件保存的路径和日志的输出格式。</p><h4><span id="34-定义日志输出级别">3.4 定义日志输出级别</span></h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itcodai.course03<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>有了上面那些定义后，最后我们使用 <code>&lt;logger&gt;</code> 来定义一下项目中默认的日志输出级别，这里定义级别为 INFO，然后针对 INFO 级别的日志，使用 <code>&lt;root&gt;</code> 引用上面定义好的控制台日志输出和日志文件的参数。这样 logback.xml 文件中的配置就设置完了。</p><h3><span id="4-使用logger在项目中打印日志">4. 使用Logger在项目中打印日志</span></h3><p>在代码中，我们一般使用 Logger 对象来打印出一些 log 信息，可以指定打印出的日志级别，也支持占位符，很方便。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>TestController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/log"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"=====测试日志debug级别打印===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"======测试日志info级别打印====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"=====测试日志error级别打印===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"======测试日志warn级别打印====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可以使用占位符打印出一些参数信息</span>        String str1 <span class="token operator">=</span> <span class="token string">"blog.itcodai.com"</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> <span class="token string">"blog.csdn.net/eson_15"</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"======倪升武的个人博客：{}；倪升武的CSDN博客：{}"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动该项目，在浏览器中输入 <code>localhost:8080/test/log</code> 后可以看到控制台的日志记录：</p><blockquote><p>======测试日志info级别打印=====<br>=====测试日志error级别打印====<br>======测试日志warn级别打印=====<br>======倪升武的个人博客：blog.itcodai.com；倪升武的CSDN博客：blog.csdn.net/eson_15</p></blockquote><p>因为 INFO 级别比 DEBUG 级别高，所以 debug 这条没有打印出来，如果将 logback.xml 中的日志级别设置成 DEBUG，那么四条语句都会打印出来，这个大家自己去测试了。同时可以打开 D:\logs\course03\ 目录，里面有刚刚项目启动，以后后面生成的所有日志记录。在项目部署后，我们大部分都是通过查看日志文件来定位问题。</p><h3><span id="5-总结">5. 总结</span></h3><p>本节课主要对 slf4j 做了一个简单的介绍，并且对 Spring Boot 中如何使用 slf4j 输出日志做了详细的说明，着重分析了 <code>logback.xml</code> 文件中对日志相关信息的配置，包括日志的不同级别。最后针对这些配置，在代码中使用 Logger 打印出一些进行测试。在实际项目中，这些日志都是排查问题的过程中非常重要的资料。<br>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第04课spring-boot中的项目属性配置">第04课：Spring Boot中的项目属性配置</span></h2><p>我们知道，在项目中，很多时候需要用到一些配置的信息，这些信息可能在测试环境和生产环境下会有不同的配置，后面根据实际业务情况有可能还会做修改，针对这种情况，我们不能将这些配置在代码中写死，最好就是写到配置文件中。比如可以把这些信息写到 <code>application.yml</code> 文件中。   </p><h3><span id="1-少量配置信息的情形">1. 少量配置信息的情形</span></h3><p>举个例子，在微服务架构中，最常见的就是某个服务需要调用其他服务来获取其提供的相关信息，那么在该服务的配置文件中需要配置被调用的服务地址，比如在当前服务里，我们需要调用订单微服务获取订单相关的信息，假设 订单服务的端口号是 8002，那我们可以做如下配置：</p><pre class=" language-xml"><code class="language-xml">server:  port: 8001# 配置微服务的地址url:  # 订单微服务的地址  orderUrl: http://localhost:8002</code></pre><p>然后在业务代码中如何获取到这个配置的订单服务地址呢？我们可以使用 <code>@Value</code> 注解来解决。在对应的类中加上一个属性，在属性上使用 <code>@Value</code> 注解即可获取到配置文件中的配置信息，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConfigController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${url.orderUrl}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String orderUrl<span class="token punctuation">;</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/config"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=====获取的订单服务地址为：{}"</span><span class="token punctuation">,</span> orderUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>@Value</code> 注解上通过 <code>$&#123;key&#125;</code> 即可获取配置文件中和 key 对应的 value 值。我们启动一下项目，在浏览器中输入 <code>localhost:8080/test/config</code> 请求服务后，可以看到控制台会打印出订单服务的地址：</p><pre><code>=====获取的订单服务地址为：http://localhost:8002</code></pre><p>说明我们成功获取到了配置文件中的订单微服务地址，在实际项目中也是这么用的，后面如果因为服务器部署的原因，需要修改某个服务的地址，那么只要在配置文件中修改即可。  </p><h3><span id="2-多个配置信息的情形">2. 多个配置信息的情形</span></h3><p>这里再引申一个问题，随着业务复杂度的增加，一个项目中可能会有越来越多的微服务，某个模块可能需要调用多个微服务获取不同的信息，那么就需要在配置文件中配置多个微服务的地址。可是，在需要调用这些微服务的代码中，如果这样一个个去使用 <code>@Value</code> 注解引入相应的微服务地址的话，太过于繁琐，也不科学。</p><p>所以，在实际项目中，业务繁琐，逻辑复杂的情况下，需要考虑封装一个或多个配置类。举个例子：假如在当前服务中，某个业务需要同时调用订单微服务、用户微服务和购物车微服务，分别获取订单、用户和购物车相关信息，然后对这些信息做一定的逻辑处理。那么在配置文件中，我们需要将这些微服务的地址都配置好：</p><pre class=" language-xml"><code class="language-xml"># 配置多个微服务的地址url:  # 订单微服务的地址  orderUrl: http://localhost:8002  # 用户微服务的地址  userUrl: http://localhost:8003  # 购物车微服务的地址  shoppingUrl: http://localhost:8004</code></pre><p>也许实际业务中，远远不止这三个微服务，甚至十几个都有可能。对于这种情况，我们可以先定义一个 <code>MicroServiceUrl</code> 类来专门保存微服务的 url，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"url"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MicroServiceUrl</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String orderUrl<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userUrl<span class="token punctuation">;</span>    <span class="token keyword">private</span> String shoppingUrl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 省去get和set方法</span><span class="token punctuation">}</span></code></pre><p>细心的朋友应该可以看到，使用 <code>@ConfigurationProperties</code> 注解并且使用 prefix 来指定一个前缀，然后该类中的属性名就是配置中去掉前缀后的名字，一一对应即可。即：前缀名 + 属性名就是配置文件中定义的 key。同时，该类上面需要加上 <code>@Component</code> 注解，把该类作为组件放到Spring容器中，让 Spring 去管理，我们使用的时候直接注入即可。</p><p>需要注意的是，使用 <code>@ConfigurationProperties</code> 注解需要导入它的依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>OK，到此为止，我们将配置写好了，接下来写个 Controller 来测试一下。此时，不需要在代码中一个个引入这些微服务的 url 了，直接通过 <code>@Resource</code> 注解将刚刚写好配置类注入进来即可使用了，非常方便。如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>TestController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> MicroServiceUrl microServiceUrl<span class="token punctuation">;</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/config"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=====获取的订单服务地址为：{}"</span><span class="token punctuation">,</span> microServiceUrl<span class="token punctuation">.</span><span class="token function">getOrderUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=====获取的用户服务地址为：{}"</span><span class="token punctuation">,</span> microServiceUrl<span class="token punctuation">.</span><span class="token function">getUserUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=====获取的购物车服务地址为：{}"</span><span class="token punctuation">,</span> microServiceUrl<span class="token punctuation">.</span><span class="token function">getShoppingUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再次启动项目，请求一下可以看到，控制台打印出如下信息，说明配置文件生效，同时正确获取配置文件内容：</p><pre><code>=====获取的订单服务地址为：http://localhost:8002=====获取的订单服务地址为：http://localhost:8002=====获取的用户服务地址为：http://localhost:8003=====获取的购物车服务地址为：http://localhost:8004</code></pre><h3><span id="3-指定项目配置文件">3. 指定项目配置文件</span></h3><p>我们知道，在实际项目中，一般有两个环境：开发环境和生产环境。开发环境中的配置和生产环境中的配置往往不同，比如：环境、端口、数据库、相关地址等等。我们不可能在开发环境调试好之后，部署到生产环境后，又要将配置信息全部修改成生产环境上的配置，这样太麻烦，也不科学。</p><p>最好的解决方法就是开发环境和生产环境都有一套对用的配置信息，然后当我们在开发时，指定读取开发环境的配置，当我们将项目部署到服务器上之后，再指定去读取生产环境的配置。</p><p>我们新建两个配置文件： <code>application-dev.yml</code> 和 <code>application-pro.yml</code>，分别用来对开发环境和生产环境进行相关配置。这里为了方便，我们分别设置两个访问端口号，开发环境用 8001，生产环境用 8002.</p><pre class=" language-xml"><code class="language-xml"># 开发环境配置文件server:  port: 8001</code></pre><pre class=" language-xml"><code class="language-xml"># 开发环境配置文件server:  port: 8002</code></pre><p>然后在 <code>application.yml</code> 文件中指定读取哪个配置文件即可。比如我们在开发环境下，指定读取 <code>applicationn-dev.yml</code> 文件，如下：</p><pre class=" language-xml"><code class="language-xml">spring:  profiles:    active:    - dev</code></pre><p>这样就可以在开发的时候，指定读取  <code>application-dev.yml</code> 文件，访问的时候使用 8001 端口，部署到服务器后，只需要将 <code>application.yml</code> 中指定的文件改成 <code>application-pro.yml</code> 即可，然后使用 8002 端口访问，非常方便。</p><h3><span id="4-总结">4. 总结</span></h3><p>本节课主要讲解了 Spring Boot 中如何在业务代码中读取相关配置，包括单一配置和多个配置项，在微服务中，这种情况非常常见，往往会有很多其他微服务需要调用，所以封装一个配置类来接收这些配置是个很好的处理方式。除此之外，例如数据库相关的连接参数等等，也可以放到一个配置类中，其他遇到类似的场景，都可以这么处理。最后介绍了开发环境和生产环境配置的快速切换方式，省去了项目部署时，诸多配置信息的修改。<br>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第05课spring-boot中的mvc支持">第05课：Spring Boot中的MVC支持</span></h2><p>Spring Boot 的 MVC 支持主要来介绍实际项目中最常用的几个注解，包括 <code>@RestController</code>、 <code>@RequestMapping</code>、<code>@PathVariable</code>、<code>@RequestParam</code> 以及 <code>@RequestBody</code>。主要介绍这几个注解常用的使用方式和特点。  </p><h3><span id="1-restcontroller">1. @RestController</span></h3><p><code>@RestController</code> 是 Spring Boot 新增的一个注解，我们看一下该注解都包含了哪些东西。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RestController</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看出， <code>@RestController</code> 注解包含了原来的 <code>@Controller</code> 和 <code>@ResponseBody</code> 注解，使用过 Spring 的朋友对 <code>@Controller</code> 注解已经非常了解了，这里不再赘述， <code>@ResponseBody</code> 注解是将返回的数据结构转换为 Json 格式。所以 <code>@RestController</code> 可以看作是 <code>@Controller</code> 和 <code>@ResponseBody</code> 的结合体，相当于偷个懒，我们使用 <code>@RestController</code> 之后就不用再使用 <code>@Controller</code> 了。但是需要注意一个问题：如果是前后端分离，不用模板渲染的话，比如 Thymeleaf，这种情况下是可以直接使用<code>@RestController</code> 将数据以 json 格式传给前端，前端拿到之后解析；但如果不是前后端分离，需要使用模板来渲染的话，一般 Controller 中都会返回到具体的页面，那么此时就不能使用<code>@RestController</code>了，比如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"user"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其实是需要返回到 user.html 页面的，如果使用 <code>@RestController</code> 的话，会将 user 作为字符串返回的，所以这时候我们需要使用 <code>@Controller</code> 注解。这在下一节 Spring Boot 集成 Thymeleaf 模板引擎中会再说明。</p><h3><span id="2-requestmapping">2. @RequestMapping</span></h3><p><code>@RequestMapping</code> 是一个用来处理请求地址映射的注解，它可以用于类上，也可以用于方法上。在类的级别上的注解会将一个特定请求或者请求模式映射到一个控制器之上，表示类中的所有响应请求的方法都是以该地址作为父路径；在方法的级别表示进一步指定到处理方法的映射关系。</p><p>该注解有6个属性，一般在项目中比较常用的有三个属性：value、method 和 produces。</p><ul><li>value 属性：指定请求的实际地址，value 可以省略不写</li><li>method 属性：指定请求的类型，主要有 GET、PUT、POST、DELETE，默认为 GET</li><li>produces属性：指定返回内容类型，如 produces = “application/json; charset=UTF-8”</li></ul><p><code>@RequestMapping</code> 注解比较简单，举个例子：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/test"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"application/json; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/get"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个很简单，启动项目在浏览器中输入 <code>localhost:8080/test/get</code> 测试一下即可。</p><p>针对四种不同的请求方式，是有相应注解的，不用每次在 <code>@RequestMapping</code> 注解中加 method 属性来指定，上面的 GET 方式请求可以直接使用 <code>@GetMapping(&quot;/get&quot;)</code> 注解，效果一样。相应地，PUT 方式、POST 方式和 DELETE 方式对应的注解分别为 <code>@PutMapping</code>、<code>@PostMapping</code> 和 <code>DeleteMapping</code>。</p><h3><span id="3-pathvariable">3. @PathVariable</span></h3><p><code>@PathVariable</code> 注解主要是用来获取 url 参数，Spring Boot 支持 restfull 风格的 url，比如一个 GET 请求携带一个参数 id 过来，我们将 id 作为参数接收，可以使用 <code>@PathVariable</code> 注解。如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testPathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到的id为："</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里需要注意一个问题，如果想要 url 中占位符中的 id 值直接赋值到参数 id 中，需要保证 url 中的参数和方法接收参数一致，否则就无法接收。如果不一致的话，其实也可以解决，需要用 <code>@PathVariable</code> 中的 value 属性来指定对应关系。如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{idd}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testPathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"idd"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到的id为："</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于访问的 url，占位符的位置可以在任何位置，不一定非要在最后，比如这样也行：<code>/xxx/&#123;id&#125;/user</code>。另外，url 也支持多个占位符，方法参数使用同样数量的参数来接收，原理和一个参数是一样的，例如：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{idd}/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testPathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"idd"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到的id为："</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到的name为："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>运行项目，在浏览器中请求 <code>localhost:8080/test/user/2/zhangsan</code> 可以看到控制台输出如下信息：</p><pre><code>获取到的id为：2获取到的name为：zhangsan</code></pre><p>所以支持多个参数的接收。同样地，如果 url 中的参数和方法中的参数名称不同的话，也需要使用 value 属性来绑定两个参数。</p><h3><span id="4-requestparam">4. @RequestParam</span></h3><p><code>@RequestParam</code> 注解顾名思义，也是获取请求参数的，上面我们介绍了 <code>@PathValiable</code> 注解也是获取请求参数的，那么 <code>@RequestParam</code> 和 <code>@PathVariable</code> 有什么不同呢？主要区别在于： <code>@PathValiable</code> 是从 url 模板中获取参数值， 即这种风格的 url：<code>http://localhost:8080/user/&#123;id&#125;</code> ；而 <code>@RequestParam</code> 是从 request 里面获取参数值，即这种风格的 url：<code>http://localhost:8080/user?id=1</code>  。我们使用该 url 带上参数 id 来测试一下如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testRequestParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到的id为："</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以正常从控制台打印出 id 信息。同样地，url 上面的参数和方法的参数需要一致，如果不一致，也需要使用 value 属性来说明，比如 url 为：<code>http://localhost:8080/user?idd=1</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testRequestParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"idd"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到的id为："</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>除了 value 属性外，还有个两个属性比较常用：</p><ul><li>required 属性：true 表示该参数必须要传，否则就会报 404 错误，false 表示可有可无。</li><li>defaultValue 属性：默认值，表示如果请求中没有同名参数时的默认值。</li></ul><p>从 url 中可以看出，<code>@RequestParam</code> 注解用于 GET 请求上时，接收拼接在 url 中的参数。除此之外，该注解还可以用于 POST 请求，接收前端表单提交的参数，假如前端通过表单提交 username 和 password 两个参数，那我们可以使用 <code>@RequestParam</code> 来接收，用法和上面一样。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/form1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testForm</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String username<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到的username为："</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到的password为："</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>我们使用 postman 来模拟一下表单提交，测试一下接口：</p><p><img src="https://img-blog.csdnimg.cn/20200215043749282.png" alt="使用postman测试表单提交"></p><p>那么问题来了，如果表单数据很多，我们不可能在后台方法中写上很多参数，每个参数还要 <code>@RequestParam</code> 注解。针对这种情况，我们需要封装一个实体类来接收这些参数，实体中的属性名和表单中的参数名一致即可。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// set get</span><span class="token punctuation">}</span></code></pre><p>使用实体接收的话，我们不能在前面加 <code>@RequestParam</code> 注解了，直接使用即可。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/form2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testForm</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到的username为："</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到的password为："</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用 postman 再次测试一下表单提交，观察一下返回值和控制台打印出的日志即可。在实际项目中，一般都是封装一个实体类来接收表单数据，因为实际项目中表单数据一般都很多。</p><h3><span id="5-requestbody">5. @RequestBody</span></h3><p><code>@RequestBody</code> 注解用于接收前端传来的实体，接收参数也是对应的实体，比如前端通过 json 提交传来两个参数 username 和 password，此时我们需要在后端封装一个实体来接收。在传递的参数比较多的情况下，使用 <code>@RequestBody</code> 接收会非常方便。例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// set get</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testRequestBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到的username为："</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到的password为："</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们使用 postman 工具来测试一下效果，打开 postman，然后输入请求地址和参数，参数我们用 json 来模拟，如下图所有，调用之后返回 success。</p><p><img src="https://img-blog.csdnimg.cn/20200215043853532.png" alt="使用Postman测试requestBody"></p><p>同时看一下后台控制台输出的日志：</p><pre><code>获取到的username为：倪升武获取到的password为：123456</code></pre><p>可以看出，<code>@RequestBody</code> 注解用于 POST 请求上，接收 json 实体参数。它和上面我们介绍的表单提交有点类似，只不过参数的格式不同，一个是 json 实体，一个是表单提交。在实际项目中根据具体场景和需要使用对应的注解即可。</p><h3><span id="6-总结">6. 总结</span></h3><p>本节课主要讲解了 Spring Boot 中对 MVC 的支持，分析了 <code>@RestController</code>、 <code>@RequestMapping</code>、<code>@PathVariable</code>、 <code>@RequestParam</code> 和 <code>@RequestBody</code> 四个注解的使用方式，由于 <code>@RestController</code> 中集成了 <code>@ResponseBody</code> 所以对返回 json 的注解不再赘述。以上四个注解是使用频率很高的注解，在所有的实际项目中基本都会遇到，要熟练掌握。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第06课spring-boot集成-swagger2-展现在线接口文档">第06课：Spring Boot集成 Swagger2 展现在线接口文档</span></h2><h3><span id="1-swagger-简介">1. Swagger 简介</span></h3><h4><span id="11-解决的问题">1.1 解决的问题</span></h4><p>随着互联网技术的发展，现在的网站架构基本都由原来的后端渲染，变成了前后端分离的形态，而且前端技术和后端技术在各自的道路上越走越远。前端和后端的唯一联系，变成了 API 接口，所以 API 文档变成了前后端开发人员联系的纽带，变得越来越重要。</p><p>那么问题来了，随着代码的不断更新，开发人员在开发新的接口或者更新旧的接口后，由于开发任务的繁重，往往文档很难持续跟着更新，Swagger 就是用来解决该问题的一款重要的工具，对使用接口的人来说，开发人员不需要给他们提供文档，只要告诉他们一个 Swagger 地址，即可展示在线的 API 接口文档，除此之外，调用接口的人员还可以在线测试接口数据，同样地，开发人员在开发接口时，同样也可以利用 Swagger 在线接口文档测试接口数据，这给开发人员提供了便利。</p><h4><span id="12-swagger-官方">1.2 Swagger 官方</span></h4><p>我们打开 <a href="https://swagger.io/">Swagger 官网</a>，官方对 Swagger 的定义为：</p><blockquote><p>The Best APIs are Built with Swagger Tools </p></blockquote><p>翻译成中文是：“最好的 API 是使用 Swagger 工具构建的”。由此可见，Swagger 官方对其功能和所处的地位非常自信，由于其非常好用，所以官方对其定位也合情合理。如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/20200215043936444.png" alt="官方对swagger的定位"></p><p>本文主要讲解在 Spring Boot 中如何导入 Swagger2 工具来展现项目中的接口文档。本节课使用的 Swagger 版本为 2.2.2。下面开始进入 Swagger2 之旅。</p><h3><span id="2-swagger2-的-maven-依赖">2. Swagger2 的 maven 依赖</span></h3><p>使用 Swagger2 工具，必须要导入 maven 依赖，当前官方最高版本是 2.8.0，我尝试了一下，个人感觉页面展示的效果不太好，而且不够紧凑，不利于操作。另外，最新版本并不一定是最稳定版本，当前我们实际项目中使用的是 2.2.2 版本，该版本稳定，界面友好，所以本节课主要围绕着 2.2.2 版本来展开，依赖如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3><span id="3-swagger2-的配置">3. Swagger2 的配置</span></h3><p>使用 Swagger2 需要进行配置，Spring Boot 中对 Swagger2 的配置非常方便，新建一个配置类，Swagger2 的配置类上除了添加必要的 <code>@Configuration</code> 注解外，还需要添加 <code>@EnableSwagger2</code> 注解。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>ApiInfoBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>PathSelectors<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>RequestHandlerSelectors<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ApiInfo<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>DocumentationType<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableSwagger2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author shengwu ni */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 指定构建api文档的详细信息的方法：apiInfo()</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 指定要生成api接口的包路径，这里把controller作为包路径，生成controller中的所有接口</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.itcodai.course06.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 构建api文档的详细信息     * @return     */</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置页面标题</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Spring Boot集成Swagger2接口总览"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置接口描述</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"一起学Spring Boot第06课"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置联系方式</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token string">"倪升武，"</span> <span class="token operator">+</span> <span class="token string">"CSDN：http://blog.csdn.net/eson_15"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置版本</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 构建</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在该配置类中，已经使用注释详细解释了每个方法的作用了，在此不再赘述。到此为止，我们已经配置好了 Swagger2 了。现在我们可以测试一下配置有没有生效，启动项目，在浏览器中输入 <code>localhost:8080/swagger-ui.html</code>，即可看到 swagger2 的接口页面，如下图所示，说明Swagger2 集成成功。</p><p><img src="https://img-blog.csdnimg.cn/20200215044013383.png" alt="swagger2页面"></p><p>结合该图，对照上面的 Swagger2 配置文件中的配置，可以很明确的知道配置类中每个方法的作用。这样就很容易理解和掌握 Swagger2 中的配置了，也可以看出，其实 Swagger2 配置很简单。</p><p>【友情提示】可能有很多朋友在配置 Swagger 的时候会遇到下面的情况，而且还关不掉的，这是因为浏览器缓存引起的，清空一下浏览器缓存即可解决问题。</p><p><img src="http://p99jlm9k5.bkt.clouddn.com/blog/images/1/error.png" alt="错误页面-倪升武的博客-图2"></p><h3><span id="4-swagger2-的使用">4. Swagger2 的使用</span></h3><p>上面我们已经配置好了 Swagger2，并且也启动测试了一下，功能正常，下面我们开始使用 Swagger2，主要来介绍 Swagger2 中的几个常用的注解，分别在实体类上、 Controller 类上以及 Controller 中的方法上，最后我们看一下 Swagger2 是如何在页面上呈现在线接口文档的，并且结合 Controller 中的方法在接口中测试一下数据。</p><h4><span id="41-实体类注解">4.1 实体类注解</span></h4><p>本节我们建一个 User 实体类，主要介绍一下 Swagger2 中的 <code>@ApiModel</code> 和 <code>@ApiModelProperty</code> 注解，同时为后面的测试做准备。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiModel<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiModelProperty<span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户实体类"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户唯一标识"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户姓名"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户密码"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 省略set和get方法</span><span class="token punctuation">}</span></code></pre><p>解释下 <code>@ApiModel</code> 和 <code>@ApiModelProperty</code> 注解：</p><blockquote><p><code>@ApiModel</code> 注解用于实体类，表示对类进行说明，用于参数用实体类接收。<br><code>@ApiModelProperty</code> 注解用于类中属性，表示对 model 属性的说明或者数据操作更改。</p></blockquote><p>该注解在在线 API 文档中的具体效果在下文说明。</p><h4><span id="42-controller-类中相关注解">4.2 Controller 类中相关注解</span></h4><p>我们写一个 TestController，再写几个接口，然后学习一下 Controller 中和 Swagger2 相关的注解。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>itcodai<span class="token punctuation">.</span>course06<span class="token punctuation">.</span>entiy<span class="token punctuation">.</span>JsonResult<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itcodai<span class="token punctuation">.</span>course06<span class="token punctuation">.</span>entiy<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Api<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiOperation<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiParam<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/swagger"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"Swagger2 在线接口文档"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get/{id}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"根据用户唯一标识获取用户信息"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonResult<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户唯一标识"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 模拟数据库中根据id获取User信息</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"倪升武"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们来学习一下 <code>@Api</code> 、 <code>@ApiOperation</code> 和 <code>@ApiParam</code> 注解。</p><blockquote><p><code>@Api</code> 注解用于类上，表示标识这个类是 swagger 的资源。<br><code>@ApiOperation</code> 注解用于方法，表示一个 http 请求的操作。<br><code>@ApiParam</code> 注解用于参数上，用来标明参数信息。</p></blockquote><p>这里返回的是 JsonResult，是第02课中学习返回 json 数据时封装的实体。以上是 Swagger 中最常用的 5 个注解，接下来运行一下项目工程，在浏览器中输入 <code>localhost:8080/swagger-ui.html</code> 看一下 Swagger 页面的接口状态。</p><p><img src="https://img-blog.csdnimg.cn/20200215044156305.png" alt="swagger接口展示"></p><p>可以看出，Swagger 页面对该接口的信息展示的非常全面，每个注解的作用以及展示的地方在上图中已经标明，通过页面即可知道该接口的所有信息，那么我们直接在线测试一下该接口返回的信息，输入id为1，看一下返回数据：</p><p><img src="https://img-blog.csdnimg.cn/20200215044226292.png" alt="返回数据测试"></p><p>可以看出，直接在页面返回了 json 格式的数据，开发人员可以直接使用该在线接口来测试数据的正确与否，非常方便。上面是对于单个参数的输入，如果输入参数为某个对象这种情况，Swagger 是什么样子呢？我们再写一个接口。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/insert"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"添加用户信息"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonResult<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户信息"</span><span class="token punctuation">)</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理添加逻辑</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>重启项目，在浏览器中输入 <code>localhost:8080/swagger-ui.html</code> 看一下效果：</p><p><img src="https://img-blog.csdnimg.cn/20200215044256579.png" alt="swagger接口展示"></p><h3><span id="5-总结">5. 总结</span></h3><p>OK，本节课详细分析了 Swagger 的优点，以及 Spring Boot 如何集成 Swagger2，包括配置，相关注解的讲解，涉及到了实体类和接口类，以及如何使用。最后通过页面测试，体验了 Swagger 的强大之处，基本上是每个项目组中必备的工具之一，所以要掌握该工具的使用，也不难。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第07课spring-boot集成thymeleaf模板引擎">第07课：Spring Boot集成Thymeleaf模板引擎</span></h2><h3><span id="1-thymeleaf-介绍">1. Thymeleaf 介绍</span></h3><blockquote><p>Thymeleaf 是适用于 Web 和独立环境的现代服务器端 Java 模板引擎。<br>Thymeleaf 的主要目标是为您的开发工作流程带来优雅的自然模板 - 可以在浏览器中正确显示的HTML，也可以用作静态原型，从而在开发团队中实现更强大的协作。  </p></blockquote><p>以上翻译自 Thymeleaf 官方网站。传统的 JSP+JSTL 组合是已经过去了，Thymeleaf 是现代服务端的模板引擎，与传统的 JSP 不同，Thymeleaf 可以使用浏览器直接打开，因为可以忽略掉拓展属性，相当于打开原生页面，给前端人员也带来一定的便利。   </p><p>什么意思呢？就是说在本地环境或者有网络的环境下，Thymeleaf 均可运行。由于 thymeleaf 支持 html 原型，也支持在 html 标签里增加额外的属性来达到 “模板+数据” 的展示方式，所以美工可以直接在浏览器中查看页面效果，当服务启动后，也可以让后台开发人员查看带数据的动态页面效果。比如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui right aligned basic segment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui orange basic label<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${blog.flag}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>静态原创信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui center aligned header<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${blog.title}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是静态标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><p>类似与上面这样，在静态页面时，会展示静态信息，当服务启动后，动态获取数据库中的数据后，就可以展示动态数据，<code>th:text</code> 标签是用来动态替换文本的，这会在下文说明。该例子说明浏览器解释 html 时会忽略 html 中未定义的标签属性（比如 <code>th:text</code>），所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示数据。 </p><h3><span id="2-依赖导入">2. 依赖导入</span></h3><p>在 Spring Boot 中使用 thymeleaf 模板需要引入依赖，可以在创建项目工程时勾选 Thymeleaf，也可以创建之后再手动导入，如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>另外，在 html 页面上如果要使用 thymeleaf 模板，需要在页面标签中引入：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3><span id="3-thymeleaf相关配置">3. Thymeleaf相关配置</span></h3><p>因为 Thymeleaf 中已经有默认的配置了，我们不需要再对其做过多的配置，有一个需要注意一下，Thymeleaf 默认是开启页面缓存的，所以在开发的时候，需要关闭这个页面缓存，配置如下。</p><pre class=" language-yml"><code class="language-yml">spring:  thymeleaf:    cache: false #关闭缓存</code></pre><p>否则会有缓存，导致页面没法及时看到更新后的效果。 比如你修改了一个文件，已经 update 到 tomcat 了，但刷新页面还是之前的页面，就是因为缓存引起的。</p><h3><span id="4-thymeleaf-的使用">4. Thymeleaf 的使用</span></h3><h4><span id="41-访问静态页面">4.1 访问静态页面</span></h4><p>这个和 Thymeleaf 没啥关系，应该说是通用的，我把它一并写到这里的原因是一般我们做网站的时候，都会做一个 404 页面和 500 页面，为了出错时给用户一个友好的展示，而不至于一堆异常信息抛出来。Spring Boot 中会自动识别模板目录（templates/）下的 404.html 和 500.html 文件。我们在 templates/ 目录下新建一个 error 文件夹，专门放置错误的 html 页面，然后分别打印些信息。以 404.html 为例：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    这是404页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>我们再写一个 controller 来测试一下 404 和 500 页面：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/thymeleaf"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThymeleafController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test404"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test404</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test500"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test500</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>当我们在浏览器中输入 <code>localhost:8080/thymeleaf/test400</code> 时，故意输入错误，找不到对应的方法，就会跳转到 404.html 显示。<br>当我们在浏览器中输入 <code>localhost:8088/thymeleaf/test505</code> 时，会抛出异常，然后会自动跳转到 500.html 显示。</p></blockquote><p>【注】这里有个问题需要注意一下，前面的课程中我们说了微服务中会走向前后端分离，我们在 Controller 层上都是使用的 <code>@RestController</code> 注解，自动会把返回的数据转成 json 格式。但是在使用模板引擎时，Controller 层就不能用 <code>@RestController</code> 注解了，因为在使用 thymeleaf 模板时，返回的是视图文件名，比如上面的 Controller 中是返回到 index.html 页面，如果使用 <code>@RestController</code> 的话，会把 index 当作 String 解析了，直接返回到页面了，而不是去找 index.html 页面，大家可以试一下。所以在使用模板时要用 <code>@Controller</code> 注解。</p><h4><span id="42-thymeleaf-中处理对象">4.2 Thymeleaf 中处理对象</span></h4><p>我们来看一下 thymeleaf 模板中如何处理对象信息，假如我们在做个人博客的时候，需要给前端传博主相关信息来展示，那么我们会封装成一个博主对象，比如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blogger</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pass<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 省去set和get</span><span class="token punctuation">}</span></code></pre><p>然后在controller层中初始化一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getBlogger"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">getBlogger</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Blogger blogger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blogger</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"倪升武"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"blogger"</span><span class="token punctuation">,</span> blogger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"blogger"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们先初始化一个 Blogger 对象，然后将该对象放到 Model 中，然后返回到 blogger.html 页面去渲染。接下来我们再写一个 blogger.html 来渲染 blogger 信息：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>博主信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${blogger}<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    用户编号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${blogger.id}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    用户姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${blogger.getName()}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    登陆密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{pass}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>可以看出，在 thymeleaf 模板中，使用 <code>th:object=&quot;$&#123;&#125;&quot;</code> 来获取对象信息，然后在表单里面可以有三种方式来获取对象属性。如下：</p><blockquote><p>使用 <code>th:value=&quot;*&#123;属性名&#125;&quot;</code><br>使用 <code>th:value=&quot;$&#123;对象.属性名&#125;&quot;</code>，对象指的是上面使用 <code>th:object</code> 获取的对象<br>使用 <code>th:value=&quot;$&#123;对象.get方法&#125;&quot;</code>，对象指的是上面使用 <code>th:object</code> 获取的对象</p></blockquote><p>可以看出，在 Thymeleaf 中可以像写 java 一样写代码，很方便。我们在浏览器中输入 <code>localhost:8080/thymeleaf/getBlogger</code> 来测试一下数据：</p><p><img src="https://img-blog.csdnimg.cn/20200215044353803.jpg" alt="thymeleaf中处理对象"></p><h4><span id="43-thymeleaf-中处理-list">4.3 Thymeleaf 中处理 List</span></h4><p>处理 List 的话，和处理上面介绍的对象差不多，但是需要在 thymeleaf 中进行遍历。我们先在 Controller 中模拟一个 List。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getList"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">getList</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Blogger blogger1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blogger</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"倪升武"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Blogger blogger2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blogger</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span> <span class="token string">"达人课"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Blogger<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blogger1<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blogger2<span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"list"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接下来我们写一个 list.html 来获取该 list 信息，然后在 list.html 中遍历这个list。如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>博主信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blogger : ${list}<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    用户编号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${blogger.id}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    用户姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${blogger.name}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    登录密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${blogger.getPass()}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>可以看出，其实和处理单个对象信息差不多，Thymeleaf 使用 <code>th:each</code> 进行遍历，<code>$&#123;&#125;</code> 取 model 中传过来的参数，然后自定义 list 中取出来的每个对象，这里定义为 blogger。表单里面可以直接使用 <code>$&#123;对象.属性名&#125;</code> 来获取 list 中对象的属性值，也可以使用 <code>$&#123;对象.get方法&#125;</code> 来获取，这点和上面处理对象信息是一样的，但是不能使用 <code>*&#123;属性名&#125;</code> 来获取对象中的属性，thymeleaf 模板获取不到。    </p><h4><span id="44-其他常用-thymeleaf-操作">4.4 其他常用 thymeleaf 操作</span></h4><p>我们来总结一下 thymeleaf 中的一些常用的标签操作，如下：</p><table><thead><tr><th>标签</th><th>功能</th><th>例子</th></tr></thead><tbody><tr><td><code>th:value</code></td><td>给属性赋值</td><td><code>&lt;input th:value=&quot;$&#123;blog.name&#125;&quot; /&gt; </code></td></tr><tr><td><code>th:style</code></td><td>设置样式</td><td><code>th:style=&quot;&#39;display:&#39;+@&#123;($&#123;sitrue&#125;?&#39;none&#39;:&#39;inline-block&#39;)&#125; + &#39;&#39;&quot;</code></td></tr><tr><td><code>th:onclick</code></td><td>点击事件</td><td><code>th:onclick=&quot;&#39;getInfo()&#39;&quot;</code></td></tr><tr><td><code>th:if</code></td><td>条件判断</td><td><code>&lt;a th:if=&quot;$&#123;userId == collect.userId&#125;&quot; &gt;</code></td></tr><tr><td><code>th:href</code></td><td>超链接</td><td><code>&lt;a th:href=&quot;@&#123;/blogger/login&#125;&quot;&gt;Login&lt;/a&gt; /&gt;</code></td></tr><tr><td><code>th:unless</code></td><td>条件判断和<code>th:if</code>相反</td><td><code>&lt;a th:href=&quot;@&#123;/blogger/login&#125;&quot; th:unless=$&#123;session.user != null&#125;&gt;Login&lt;/a&gt;</code></td></tr><tr><td><code>th:switch</code></td><td>配合<code>th:case</code></td><td><code>&lt;div th:switch=&quot;$&#123;user.role&#125;&quot;&gt;</code></td></tr><tr><td><code>th:case</code></td><td>配合<code>th:switch</code></td><td><code>&lt;p th:case=&quot;&#39;admin&#39;&quot;&gt;administator&lt;/p&gt;</code></td></tr><tr><td><code>th:src</code></td><td>地址引入</td><td><code>&lt;img alt=&quot;csdn logo&quot; th:src=&quot;@&#123;/img/logo.png&#125;&quot; /&gt;</code></td></tr><tr><td><code>th:action</code></td><td>表单提交的地址</td><td><code>&lt;form th:action=&quot;@&#123;/blogger/update&#125;&quot;&gt;</code></td></tr></tbody></table><p>Thymeleaf 还有很多其他用法，这里就不总结了，具体的可以参考Thymeleaf的<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">官方文档（v3.0）</a>。主要要学会如何在 Spring Boot 中去使用 thymeleaf，遇到对应的标签或者方法，查阅官方文档即可。</p><h3><span id="5-总结">5. 总结</span></h3><p>Thymeleaf 在 Spring Boot 中使用非常广泛，本节课主要分析了 thymeleaf 的优点，以及如何在 Spring Boot 中集成并使用 thymeleaf 模板，包括依赖、配置，相关数据的获取、以及一些注意事项等等。最后列举了一些 thymeleaf 中常用的标签，在实际项目中多使用，多查阅就能熟练掌握，thymeleaf 中的一些标签或者方法不用死记硬背，用到什么去查阅什么，关键是要会在 Spring Boot 中集成，用的多了就熟能生巧。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第08课spring-boot中的全局异常处理">第08课：Spring Boot中的全局异常处理</span></h2><p>在项目开发过程中，不管是对底层数据库的操作过程，还是业务层的处理过程，还是控制层的处理过程，都不可避免会遇到各种可预知的、不可预知的异常需要处理。如果对每个过程都单独作异常处理，那系统的代码耦合度会变得很高，此外，开发工作量也会加大而且不好统一，这也增加了代码的维护成本。<br>针对这种实际情况，我们需要将所有类型的异常处理从各处理过程解耦出来，这样既保证了相关处理过程的功能单一，也实现了异常信息的统一处理和维护。同时，我们也不希望直接把异常抛给用户，应该对异常进行处理，对错误信息进行封装，然后返回一个友好的信息给用户。这节主要总结一下项目中如何使用 Spring Boot 如何拦截并处理全局的异常。</p><h3><span id="1-定义返回的统一-json-结构">1. 定义返回的统一 json 结构</span></h3><p>前端或者其他服务请求本服务的接口时，该接口需要返回对应的 json 数据，一般该服务只需要返回请求着需要的参数即可，但是在实际项目中，我们需要封装更多的信息，比如状态码 code、相关信息 msg 等等，这一方面是在项目中可以有个统一的返回结构，整个项目组都适用，另一方面是方便结合全局异常处理信息，因为异常处理信息中一般我们需要把状态码和异常内容反馈给调用方。<br>这个统一的 json 结构这可以参考<a href="https://gitbook.cn/gitchat/column/5b3c9f35a3442272491a176a">第02课：Spring Boot 返回 JSON 数据及数据封装</a>中封装的统一 json 结构，本节内容我们简化一下，只保留状态码 code 和异常信息 msg即可。如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonResult</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 异常码     */</span>    <span class="token keyword">protected</span> String code<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 异常信息     */</span>    <span class="token keyword">protected</span> String msg<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">JsonResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token string">"200"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"操作成功"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">JsonResult</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get set</span><span class="token punctuation">}</span></code></pre><h3><span id="2-处理系统异常">2. 处理系统异常</span></h3><p>新建一个 GlobalExceptionHandler 全局异常处理类，然后加上 <code>@ControllerAdvice</code> 注解即可拦截项目中抛出的异常，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 打印log</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>GlobalExceptionHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ……</span><span class="token punctuation">}</span></code></pre><p>我们点开 <code>@ControllerAdvice</code> 注解可以看到，<code>@ControllerAdvice</code> 注解包含了 <code>@Component</code> 注解，说明在 Spring Boot 启动时，也会把该类作为组件交给 Spring 来管理。除此之外，该注解还有个 <code>basePackages</code> 属性，该属性是用来拦截哪个包中的异常信息，一般我们不指定这个属性，我们拦截项目工程中的所有异常。<code>@ResponseBody</code> 注解是为了异常处理完之后给调用方输出一个 json 格式的封装数据。<br>在项目中如何使用呢？Spring Boot 中很简单，在方法上通过 <code>@ExceptionHandler</code> 注解来指定具体的异常，然后在方法中处理该异常信息，最后将结果通过统一的 json 结构体返回给调用者。下面我们举几个例子来说明如何来使用。</p><h4><span id="21-处理参数缺失异常">2.1 处理参数缺失异常</span></h4><p>在前后端分离的架构中，前端请求后台的接口都是通过 rest 风格来调用，有时候，比如 POST 请求 需要携带一些参数，但是往往有时候参数会漏掉。另外，在微服务架构中，涉及到多个微服务之间的接口调用时，也可能出现这种情况，此时我们需要定义一个处理参数缺失异常的方法，来给前端或者调用方提示一个友好信息。  </p><p>参数缺失的时候，会抛出 <code>HttpMessageNotReadableException</code>，我们可以拦截该异常，做一个友好处理，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 缺少请求参数异常* @param ex HttpMessageNotReadableException* @return*/</span><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MissingServletRequestParameterException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>value <span class="token operator">=</span> HttpStatus<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span><span class="token keyword">public</span> JsonResult <span class="token function">handleHttpMessageNotReadableException</span><span class="token punctuation">(</span>    MissingServletRequestParameterException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"缺少请求参数，{}"</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token string">"400"</span><span class="token punctuation">,</span> <span class="token string">"缺少必要的请求参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们来写个简单的 Controller 测试一下该异常，通过 POST 请求方式接收两个参数：姓名和密码。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/exception"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ExceptionController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonResult <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span>                           <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"pass"</span><span class="token punctuation">)</span> String pass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"name：{}"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"pass：{}"</span><span class="token punctuation">,</span> pass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后使用 Postman 来调用一下该接口，调用的时候，只传姓名，不传密码，就会抛缺少参数异常，该异常被捕获之后，就会进入我们写好的逻辑，给调用方返回一个友好信息，如下：</p><p><img src="https://img-blog.csdnimg.cn/2020021504443480.png" alt="缺失参数异常"></p><h4><span id="22-处理空指针异常">2.2 处理空指针异常</span></h4><p>空指针异常是开发中司空见惯的东西了，一般发生的地方有哪些呢？<br>先来聊一聊一些注意的地方，比如在微服务中，经常会调用其他服务获取数据，这个数据主要是 json 格式的，但是在解析 json 的过程中，可能会有空出现，所以我们在获取某个 jsonObject 时，再通过该 jsonObject 去获取相关信息时，应该要先做非空判断。<br>还有一个很常见的地方就是从数据库中查询的数据，不管是查询一条记录封装在某个对象中，还是查询多条记录封装在一个 List 中，我们接下来都要去处理数据，那么就有可能出现空指针异常，因为谁也不能保证从数据库中查出来的东西就一定不为空，所以在使用数据时一定要先做非空判断。<br>对空指针异常的处理很简单，和上面的逻辑一样，将异常信息换掉即可。如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>GlobalExceptionHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 空指针异常     * @param ex NullPointerException     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>NullPointerException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>value <span class="token operator">=</span> HttpStatus<span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonResult <span class="token function">handleTypeMismatchException</span><span class="token punctuation">(</span>NullPointerException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"空指针异常，{}"</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token string">"500"</span><span class="token punctuation">,</span> <span class="token string">"空指针异常了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个我就不测试了，代码中 ExceptionController 有个 <code>testNullPointException</code> 方法，模拟了一个空指针异常，我们在浏览器中请求一下对应的 url 即可看到返回的信息：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"500"</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"空指针异常了"</span><span class="token punctuation">}</span></code></pre><h4><span id="23-一劳永逸">2.3 一劳永逸？</span></h4><p>当然了，异常很多，比如还有 RuntimeException，数据库还有一些查询或者操作异常等等。由于 Exception 异常是父类，所有异常都会继承该异常，所以我们可以直接拦截 Exception 异常，一劳永逸：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>GlobalExceptionHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 系统异常 预期以外异常     * @param ex     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>value <span class="token operator">=</span> HttpStatus<span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonResult <span class="token function">handleUnexpectedServer</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"系统异常："</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token string">"500"</span><span class="token punctuation">,</span> <span class="token string">"系统发生异常，请联系管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>但是项目中，我们一般都会比较详细的去拦截一些常见异常，拦截 Exception 虽然可以一劳永逸，但是不利于我们去排查或者定位问题。实际项目中，可以把拦截 Exception 异常写在 GlobalExceptionHandler 最下面，如果都没有找到，最后再拦截一下 Exception 异常，保证输出信息友好。</p><h3><span id="3-拦截自定义异常">3. 拦截自定义异常</span></h3><p>在实际项目中，除了拦截一些系统异常外，在某些业务上，我们需要自定义一些业务异常，比如在微服务中，服务之间的相互调用很平凡，很常见。要处理一个服务的调用时，那么可能会调用失败或者调用超时等等，此时我们需要自定义一个异常，当调用失败时抛出该异常，给 GlobalExceptionHandler 去捕获。</p><h4><span id="31-定义异常信息">3.1 定义异常信息</span></h4><p>由于在业务中，有很多异常，针对不同的业务，可能给出的提示信息不同，所以为了方便项目异常信息管理，我们一般会定义一个异常信息枚举类。比如：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 业务异常提示信息枚举类 * @author shengwu ni */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> BusinessMsgEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** 参数异常 */</span>    <span class="token function">PARMETER_EXCEPTION</span><span class="token punctuation">(</span><span class="token string">"102"</span><span class="token punctuation">,</span> <span class="token string">"参数异常!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** 等待超时 */</span>    <span class="token function">SERVICE_TIME_OUT</span><span class="token punctuation">(</span><span class="token string">"103"</span><span class="token punctuation">,</span> <span class="token string">"服务调用超时！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** 参数过大 */</span>    <span class="token function">PARMETER_BIG_EXCEPTION</span><span class="token punctuation">(</span><span class="token string">"102"</span><span class="token punctuation">,</span> <span class="token string">"输入的图片数量不能超过50张!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** 500 : 一劳永逸的提示也可以在这定义 */</span>    <span class="token function">UNEXPECTED_EXCEPTION</span><span class="token punctuation">(</span><span class="token string">"500"</span><span class="token punctuation">,</span> <span class="token string">"系统发生异常，请联系管理员！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 还可以定义更多的业务异常</span>    <span class="token comment" spellcheck="true">/**     * 消息码     */</span>    <span class="token keyword">private</span> String code<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 消息内容     */</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">BusinessMsgEnum</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// set get方法</span><span class="token punctuation">}</span></code></pre><h4><span id="32-拦截自定义异常">3.2 拦截自定义异常</span></h4><p>然后我们可以定义一个业务异常，当出现业务异常时，我们就抛这个自定义的业务异常即可。比如我们定义一个 BusinessErrorException 异常，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义业务异常 * @author shengwu ni */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessErrorException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>7480022450501760611L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 异常码     */</span>    <span class="token keyword">private</span> String code<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 异常提示信息     */</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BusinessErrorException</span><span class="token punctuation">(</span>BusinessMsgEnum businessMsgEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> businessMsgEnum<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> businessMsgEnum<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get set方法</span><span class="token punctuation">}</span></code></pre><p>在构造方法中，传入我们上面自定义的异常枚举类，所以在项目中，如果有新的异常信息需要添加，我们直接在枚举类中添加即可，很方便，做到统一维护，然后再拦截该异常时获取即可。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>GlobalExceptionHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 拦截业务异常，返回业务异常信息     * @param ex     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>BusinessErrorException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>value <span class="token operator">=</span> HttpStatus<span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonResult <span class="token function">handleBusinessError</span><span class="token punctuation">(</span>BusinessErrorException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String code <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在业务代码中，我们可以直接模拟一下抛出业务异常，测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/exception"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ExceptionController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/business"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonResult <span class="token function">testException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessErrorException</span><span class="token punctuation">(</span>BusinessMsgEnum<span class="token punctuation">.</span>UNEXPECTED_EXCEPTION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行一下项目，测试一下，返回 json 如下，说明我们自定义的业务异常捕获成功：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"500"</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"系统发生异常，请联系管理员！"</span><span class="token punctuation">}</span></code></pre><h3><span id="4-总结">4. 总结</span></h3><p>本节课程主要讲解了Spring Boot 的全局异常处理，包括异常信息的封装、异常信息的捕获和处理，以及在实际项目中，我们用到的自定义异常枚举类和业务异常的捕获与处理，在项目中运用的非常广泛，基本上每个项目中都需要做全局异常处理。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第09课spring-boot中的切面aop处理">第09课：Spring Boot中的切面AOP处理</span></h2><h3><span id="1-什么是aop">1. 什么是AOP</span></h3><p>AOP：Aspect Oriented Programming 的缩写，意为：面向切面编程。面向切面编程的目标就是分离关注点。什么是关注点呢？就是关注点，就是你要做的事情。假如你是一位公子哥，没啥人生目标，每天衣来伸手，饭来张口，整天只知道一件事：玩（这就是你的关注点，你只要做这一件事）！但是有个问题，你在玩之前，你还需要起床、穿衣服、穿鞋子、叠被子、做早饭等等等等，但是这些事情你不想关注，也不用关注，你只想想玩，那么怎么办呢？  </p><p>对！这些事情通通交给下人去干。你有一个专门的仆人 A 帮你穿衣服，仆人 B 帮你穿鞋子，仆人 C 帮你叠好被子，仆人 D 帮你做饭，然后你就开始吃饭、去玩（这就是你一天的正事），你干完你的正事之后，回来，然后一系列仆人又开始帮你干这个干那个，然后一天就结束了！  </p><p>这就是 AOP。AOP 的好处就是你只需要干你的正事，其它事情别人帮你干。也许有一天，你想裸奔，不想穿衣服，那么你把仆人 A 解雇就是了！也许有一天，出门之前你还想带点钱，那么你再雇一个仆人 E 专门帮你干取钱的活！这就是AOP。每个人各司其职，灵活组合，达到一种可配置的、可插拔的程序结构。</p><h3><span id="2-spring-boot-中的-aop-处理">2. Spring Boot 中的 AOP 处理</span></h3><h4><span id="21-aop-依赖">2.1 AOP 依赖</span></h4><p>使用AOP，首先需要引入AOP的依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4><span id="22-实现-aop-切面">2.2 实现 AOP 切面</span></h4><p>Spring Boot 中使用 AOP 非常简单，假如我们要在项目中打印一些 log，在引入了上面的依赖之后，我们新建一个类 LogAspectHandler，用来定义切面和处理方法。只要在类上加个<code>@Aspect</code>注解即可。<code>@Aspect</code> 注解用来描述一个切面类，定义切面类的时候需要打上这个注解。<code>@Component</code> 注解让该类交给 Spring 来管理。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspectHandler</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>这里主要介绍几个常用的注解及使用：</p><blockquote><p>1.@Pointcut：定义一个切面，即上面所描述的关注的某件事入口。<br>2.@Before：在做某件事之前做的事。<br>3.@After：在做某件事之后做的事。<br>4.@AfterReturning：在做某件事之后，对其返回值做增强处理。<br>5.@AfterThrowing：在做某件事抛出异常时，处理。</p></blockquote><h5><span id="221-pointcut-注解">2.2.1 @Pointcut 注解</span></h5><p><code>@Pointcut</code> 注解：用来定义一个切面（切入点），即上文中所关注的某件事情的入口。切入点决定了连接点关注的内容，使得我们可以控制通知什么时候执行。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspectHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义一个切面，拦截com.itcodai.course09.controller包和子包下的所有方法     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itcodai.course09.controller..*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>@Pointcut</code> 注解指定一个切面，定义需要拦截的东西，这里介绍两个常用的表达式：一个是使用 <code>execution()</code>，另一个是使用 <code>annotation()</code>。<br>以 <code>execution(* com.itcodai.course09.controller..*.*(..)))</code> 表达式为例，语法如下：</p><blockquote><p><code>execution()</code> 为表达式主体<br>第一个 <code>*</code> 号的位置：表示返回值类型，<code>*</code> 表示所有类型<br>包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，<code>com.itcodai.course09.controller</code> 包、子包下所有类的方法<br>第二个 <code>*</code> 号的位置：表示类名，<code>*</code> 表示所有类<br><code>*(..)</code> ：这个星号表示方法名，<code>*</code> 表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数</p></blockquote><p><code>annotation()</code> 方式是针对某个注解来定义切面，比如我们对具有<code>@GetMapping</code>注解的方法做切面，可以如下定义切面：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(org.springframework.web.bind.annotation.GetMapping)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">annotationCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>然后使用该切面的话，就会切入注解是 <code>@GetMapping</code> 的方法。因为在实际项目中，可能对于不同的注解有不同的逻辑处理，比如 <code>@GetMapping</code>、<code>@PostMapping</code>、<code>@DeleteMapping</code> 等。所以这种按照注解的切入方式在实际项目中也很常用。</p><h5><span id="222-before-注解">2.2.2 @Before 注解</span></h5><p><code>@Before</code> 注解指定的方法在切面切入目标方法之前执行，可以做一些 log 处理，也可以做一些信息的统计，比如获取用户的请求 url 以及用户的 ip 地址等等，这个在做个人站点的时候都能用得到，都是常用的方法。例如：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspectHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在上面定义的切面方法之前执行该方法     * @param joinPoint jointPoint     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====doBefore方法进入了===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取签名</span>        Signature signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取切入的包名</span>        String declaringTypeName <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getDeclaringTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取即将执行的方法名</span>        String funcName <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"即将执行方法为: {}，属于{}包"</span><span class="token punctuation">,</span> funcName<span class="token punctuation">,</span> declaringTypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 也可以用来记录一些信息，比如获取请求的url和ip</span>        ServletRequestAttributes attributes <span class="token operator">=</span> <span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest request <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取请求url</span>        String url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取请求ip</span>        String ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户请求的url为：{}，ip地址为：{}"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>JointPoint 对象很有用，可以用它来获取一个签名，然后利用签名可以获取请求的包名、方法名，包括参数（通过 <code>joinPoint.getArgs()</code> 获取）等等。</p><h5><span id="223-after-注解">2.2.3 @After 注解</span></h5><p><code>@After</code> 注解和 <code>@Before</code>  注解相对应，指定的方法在切面切入目标方法之后执行，也可以做一些完成某方法之后的 log 处理。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspectHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 定义一个切面，拦截com.itcodai.course09.controller包下的所有方法     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itcodai.course09.controller..*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在上面定义的切面方法之后执行该方法     * @param joinPoint jointPoint     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfter</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====doAfter方法进入了===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Signature signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String method <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"方法{}已经执行完"</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>到这里，我们来写一个 Controller 来测试一下执行结果，新建一个 AopController 如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/aop"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testAop</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动项目，在浏览器中输入 <code>localhost:8080/aop/CSDN</code>，观察一下控制台的输出信息：</p><pre><code>====doBefore方法进入了====  即将执行方法为: testAop，属于com.itcodai.course09.controller.AopController包  用户请求的url为：http://localhost:8080/aop/name，ip地址为：0:0:0:0:0:0:0:1  ====doAfter方法进入了====  方法testAop已经执行完</code></pre><p>从打印出来的 log 中可以看出程序执行的逻辑与顺序，可以很直观的掌握 <code>@Before</code> 和 <code>@After</code> 两个注解的实际作用。</p><h5><span id="224-afterreturning-注解">2.2.4 @AfterReturning 注解</span></h5><p><code>@AfterReturning</code> 注解和 <code>@After</code> 有些类似，区别在于 <code>@AfterReturning</code> 注解可以用来捕获切入方法执行完之后的返回值，对返回值进行业务逻辑上的增强处理，例如：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspectHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在上面定义的切面方法返回后执行该方法，可以捕获返回对象或者对返回对象进行增强     * @param joinPoint joinPoint     * @param result result     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterReturning</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Object result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Signature signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String classMethod <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"方法{}执行完毕，返回参数为：{}"</span><span class="token punctuation">,</span> classMethod<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 实际项目中可以根据业务做具体的返回值增强</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"对返回参数进行业务上的增强：{}"</span><span class="token punctuation">,</span> result <span class="token operator">+</span> <span class="token string">"增强版"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>需要注意的是：在 <code>@AfterReturning</code>注解 中，属性 <code>returning</code> 的值必须要和参数保持一致，否则会检测不到。该方法中的第二个入参就是被切方法的返回值，在 <code>doAfterReturning</code> 方法中可以对返回值进行增强，可以根据业务需要做相应的封装。我们重启一下服务，再测试一下（多余的 log 我不贴出来了）：</p><pre><code>方法testAop执行完毕，返回参数为：Hello CSDN  对返回参数进行业务上的增强：Hello CSDN增强版</code></pre><h5><span id="225-afterthrowing-注解">2.2.5 @AfterThrowing 注解</span></h5><p>顾名思义，<code>@AfterThrowing</code> 注解是当被切方法执行时抛出异常时，会进入 <code>@AfterThrowing</code> 注解的方法中执行，在该方法中可以做一些异常的处理逻辑。要注意的是 <code>throwing</code> 属性的值必须要和参数一致，否则会报错。该方法中的第二个入参即为抛出的异常。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用AOP处理log * @author shengwu ni * @date 2018/05/04 20:24 */</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspectHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在上面定义的切面方法执行抛异常时，执行该方法     * @param joinPoint jointPoint     * @param ex ex     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"ex"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Throwable ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Signature signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String method <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理异常的逻辑</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行方法{}出错，异常为：{}"</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>该方法我就不测试了，大家可以自行测试一下。</p><h3><span id="3-总结">3. 总结</span></h3><p>本节课针对 Spring Boot 中的切面 AOP 做了详细的讲解，主要介绍了 Spring Boot 中 AOP 的引入，常用注解的使用，参数的使用，以及常用 api 的介绍。AOP 在实际项目中很有用，对切面方法执行前后都可以根据具体的业务，做相应的预处理或者增强处理，同时也可以用作异常捕获处理，可以根据具体业务场景，合理去使用 AOP。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第10课spring-boot集成mybatis">第10课：Spring Boot集成MyBatis</span></h2><h3><span id="1-mybatis-介绍">1. MyBatis 介绍</span></h3><p>大家都知道，MyBatis 框架是一个持久层框架，是 Apache 下的顶级项目。Mybatis 可以让开发者的主要精力放在 sql 上，通过 Mybatis 提供的映射方式，自由灵活的生成满足需要的 sql 语句。使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs 映射成数据库中的记录，在国内可谓是占据了半壁江山。本节课程主要通过两种方式来对 Spring Boot 集成 MyBatis 做一讲解。重点讲解一下基于注解的方式。因为实际项目中使用注解的方式更多一点，更简洁一点，省去了很多 xml 配置（这不是绝对的，有些项目组中可能也在使用 xml 的方式）。</p><h3><span id="2-mybatis-的配置">2. MyBatis 的配置</span></h3><h4><span id="21-依赖导入">2.1 依赖导入</span></h4><p>Spring Boot 集成 MyBatis，需要导入 <code>mybatis-spring-boot-starter</code> 和 mysql 的依赖，这里我们使用的版本时 1.3.2，如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>我们点开 <code>mybatis-spring-boot-starter</code> 依赖，可以看到我们之前使用 Spring 时候熟悉的依赖，就像我在课程的一开始介绍的那样，Spring Boot 致力于简化编码，使用 starter 系列将相关依赖集成在一起，开发者不需要关注繁琐的配置，非常方便。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 省去其他 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4><span id="22-propertiesyml配置">2.2 properties.yml配置</span></h4><p>我们再来看一下，集成 MyBatis 时需要在 properties.yml 配置文件中做哪些基本配置呢？</p><pre class=" language-xml"><code class="language-xml"># 服务端口号server:  port: 8080# 数据库地址datasource:  url: localhost:3306/blog_testspring:  datasource: # 数据库配置    driver-class-name: com.mysql.jdbc.Driver    url: jdbc:mysql://${datasource.url}?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;maxReconnects=10    username: root    password: 123456    hikari:      maximum-pool-size: 10 # 最大连接池数      max-lifetime: 1770000mybatis:  # 指定别名设置的包为所有entity  type-aliases-package: com.itcodai.course10.entity  configuration:    map-underscore-to-camel-case: true # 驼峰命名规范  mapper-locations: # mapper映射文件位置    - classpath:mapper/*.xml</code></pre><p>我们来简单介绍一下上面的这些配置：关于数据库的相关配置，我就不详细的解说了，这点相信大家已经非常熟练了，配置一下用户名、密码、数据库连接等等，这里使用的连接池是 Spring Boot 自带的 hikari，感兴趣的朋友可以去百度或者谷歌搜一搜，了解一下。  </p><p>这里说明一下 <code>map-underscore-to-camel-case: true</code>， 用来开启驼峰命名规范，这个比较好用，比如数据库中字段名为：<code>user_name</code>， 那么在实体类中可以定义属性为 <code>userName</code> （甚至可以写成 <code>username</code>，也能映射上），会自动匹配到驼峰属性，如果不这样配置的话，针对字段名和属性名不同的情况，会映射不到。</p><h3><span id="3-基于-xml-的整合">3. 基于 xml 的整合</span></h3><p>使用原始的 xml 方式，需要新建 UserMapper.xml 文件，在上面的 application.yml 配置文件中，我们已经定义了 xml 文件的路径：<code>classpath:mapper/*.xml</code>，所以我们在 resources 目录下新建一个 mapper 文件夹，然后创建一个 UserMapper.xml 文件。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itcodai.course10.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itcodai.course10.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select * from user where user_name = #{username}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>这和整合 Spring 一样的，namespace 中指定的是对应的 Mapper， <code>&lt;resultMap&gt;</code> 中指定对应的实体类，即 User。然后在内部指定表的字段和实体的属性相对应即可。这里我们写一个根据用户名查询用户的 sql。  </p><p>实体类中有 id，username 和 password，我不在这贴代码，大家可以下载源码查看。UserMapper.java 文件中写一个接口即可：</p><pre class=" language-java"><code class="language-java">User <span class="token function">getUserByName</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>中间省略 service 的代码，我们写一个 Controller 来测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getUserByName/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUserByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动项目，在浏览器中输入：<code>http://localhost:8080/getUserByName/CSDN</code> 即可查询到数据库表中用户名为 CSDN 的用户信息（事先搞两个数据进去即可）：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"CSDN"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"123456"</span><span class="token punctuation">}</span></code></pre><p>这里需要注意一下：Spring Boot 如何知道这个 Mapper 呢？一种方法是在上面的 mapper 层对应的类上面添加 <code>@Mapper</code> 注解即可，但是这种方法有个弊端，当我们有很多个 mapper 时，那么每一个类上面都得添加 <code>@Mapper</code> 注解。另一种比较简便的方法是在 Spring Boot 启动类上添加<code>@MaperScan</code> 注解，来扫描一个包下的所有 mapper。如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.itcodai.course10.dao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Course10Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Course10Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样的话，<code>com.itcodai.course10.dao</code> 包下的所有 mapper 都会被扫描到了。</p><h3><span id="4-基于注解的整合">4. 基于注解的整合</span></h3><p>基于注解的整合就不需要 xml 配置文件了，MyBatis 主要提供了 <code>@Select</code>， <code>@Insert</code>， <code>@Update</code>， <code>Delete</code> 四个注解。这四个注解是用的非常多的，也很简单，注解后面跟上对应的 sql 语句即可，我们举个例子：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id}"</span><span class="token punctuation">)</span>User <span class="token function">getUser</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这跟 xml 文件中写 sql 语句是一样的，这样就不需要 xml 文件了，但是有个问题，有人可能会问，如果是两个参数呢？如果是两个参数，我们需要使用 <code>@Param</code> 注解来指定每一个参数的对应关系，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id} and user_name=#{name}"</span><span class="token punctuation">)</span>User <span class="token function">getUserByIdAndName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String username<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以看出，<code>@Param</code> 指定的参数应该要和 sql 中 <code>#&#123;&#125;</code> 取的参数名相同，不同则取不到。可以在 controller 中自行测试一下，接口都在源码中，文章中我就不贴测试代码和结果了。  </p><p>有个问题需要注意一下，一般我们在设计表字段后，都会根据自动生成工具生成实体类，这样的话，基本上实体类是能和表字段对应上的，最起码也是驼峰对应的，由于在上面配置文件中开启了驼峰的配置，所以字段都是能对的上的。但是，万一有对不上的呢？我们也有解决办法，使用 <code>@Results</code> 注解来解决。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"user_name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>User <span class="token function">getUser</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>@Results</code> 中的 <code>@Result</code> 注解是用来指定每一个属性和字段的对应关系，这样的话就可以解决上面说的这个问题了。  </p><p>当然了，我们也可以 xml 和注解相结合使用，目前我们实际的项目中也是采用混用的方式，因为有时候 xml 方便，有时候注解方便，比如就上面这个问题来说，如果我们定义了上面的这个 UserMapper.xml，那么我们完全可以使用 <code>@ResultMap</code> 注解来替代 <code>@Results</code> 注解，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span><span class="token string">"BaseResultMap"</span><span class="token punctuation">)</span>User <span class="token function">getUser</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>@ResultMap</code> 注解中的值从哪来呢？对应的是 UserMapper.xml 文件中定义的 <code>&lt;resultMap&gt;</code> 时对应的 id 值：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itcodai.course10.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>这种 xml 和注解结合着使用的情况也很常见，而且也减少了大量的代码，因为 xml 文件可以使用自动生成工具去生成，也不需要人为手动敲，所以这种使用方式也很常见。</p><h3><span id="5-总结">5. 总结</span></h3><p>本节课主要系统的讲解了 Spring Boot 集成 MyBatis 的过程，分为基于 xml 形式和基于注解的形式来讲解，通过实际配置手把手讲解了 Spring Boot 中 MyBatis 的使用方式，并针对注解方式，讲解了常见的问题已经解决方式，有很强的实战意义。在实际项目中，建议根据实际情况来确定使用哪种方式，一般 xml 和注解都在用。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第11课spring-boot事务配置管理">第11课：Spring Boot事务配置管理</span></h2><h3><span id="1-事务相关">1. 事务相关</span></h3><p>场景：我们在开发企业应用时，由于数据操作在顺序执行的过程中，线上可能有各种无法预知的问题，任何一步操作都有可能发生异常，异常则会导致后续的操作无法完成。此时由于业务逻辑并未正确的完成，所以在之前操作过数据库的动作并不可靠，需要在这种情况下进行数据的回滚。  </p><p>事务的作用就是为了保证用户的每一个操作都是可靠的，事务中的每一步操作都必须成功执行，只要有发生异常就回退到事务开始未进行操作的状态。这很好理解，转账、购票等等，必须整个事件流程全部执行完才能人为该事件执行成功，不能转钱转到一半，系统死了，转账人钱没了，收款人钱还没到。</p><p>事务管理是 Spring Boot 框架中最为常用的功能之一，我们在实际应用开发时，基本上在 service 层处理业务逻辑的时候都要加上事务，当然了，有时候可能由于场景需要，也不用加事务（比如我们就要往一个表里插数据，相互没有影响，插多少是多少，不能因为某个数据挂了，把之前插的全部回滚）。</p><h3><span id="2-spring-boot-事务配置">2. Spring Boot 事务配置</span></h3><h4><span id="21-依赖导入">2.1 依赖导入</span></h4><p>在 Spring Boot 中使用事务，需要导入 mysql 依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>导入了 mysql 依赖后，Spring Boot 会自动注入 DataSourceTransactionManager，我们不需要任何其他的配置就可以用 <code>@Transactional</code> 注解进行事务的使用。关于 mybatis 的配置，在上一节课中已经说明了，这里还是使用上一节课中的 mybatis 配置即可。  </p><h4><span id="22-事务的测试">2.2 事务的测试</span></h4><p>我们首先在数据库表中插入一条数据：<br>|id|user_name|password|<br>|:–:|:–:|:–:|<br>|1|倪升武|123456|</p><p>然后我们写一个插入的 mapper：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into user (user_name, password) values (#{username}, #{password})"</span><span class="token punctuation">)</span>    Integer <span class="token function">insertUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>OK，接下来我们来测试一下 Spring Boot 中的事务处理，在 service 层，我们手动抛出个异常来模拟实际中出现的异常，然后观察一下事务有没有回滚，如果数据库中没有新的记录，则说明事务回滚成功。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">isertUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 插入用户信息</span>        userMapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 手动抛出异常</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们来测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/adduser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>            userService<span class="token punctuation">.</span><span class="token function">isertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"false"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们使用 postman 调用一下该接口，因为在程序中抛出了个异常，会造成事务回滚，我们刷新一下数据库，并没有增加一条记录，说明事务生效了。事务很简单，我们平时在使用的时候，一般不会有多少问题，但是并不仅仅如此……</p><h3><span id="3-常见问题总结">3. 常见问题总结</span></h3><p>从上面的内容中可以看出，Spring Boot 中使用事务非常简单，<code>@Transactional</code> 注解即可解决问题，说是这么说，但是在实际项目中，是有很多小坑在等着我们，这些小坑是我们在写代码的时候没有注意到，而且正常情况下不容易发现这些小坑，等项目写大了，某一天突然出问题了，排查问题非常困难，到时候肯定是抓瞎，需要费很大的精力去排查问题。  </p><p>这一小节，我专门针对实际项目中经常出现的，和事务相关的细节做一下总结，希望读者在读完之后，能够落实到自己的项目中，能有所受益。</p><h4><span id="31-异常并没有被-捕获-到">3.1 异常并没有被 ”捕获“ 到</span></h4><p>首先要说的，就是异常并没有被 ”捕获“ 到，导致事务并没有回滚。我们在业务层代码中，也许已经考虑到了异常的存在，或者编辑器已经提示我们需要抛出异常，但是这里面有个需要注意的地方：并不是说我们把异常抛出来了，有异常了事务就会回滚，我们来看一个例子：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">isertUser2</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 插入用户信息</span>        userMapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 手动抛出异常</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">"数据库异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们看上面这个代码，其实并没有什么问题，手动抛出一个 <code>SQLException</code> 来模拟实际中操作数据库发生的异常，在这个方法中，既然抛出了异常，那么事务应该回滚，实际却不如此，读者可以使用我源码中 controller 的接口，通过 postman 测试一下，就会发现，仍然是可以插入一条用户数据的。  </p><p>那么问题出在哪呢？因为 Spring Boot 默认的事务规则是遇到运行异常（RuntimeException）和程序错误（Error）才会回滚。比如上面我们的例子中抛出的 RuntimeException 就没有问题，但是抛出 SQLException 就无法回滚了。针对非运行时异常，如果要进行事务回滚的话，可以在 <code>@Transactional</code> 注解中使用 <code>rollbackFor</code> 属性来指定异常，比如 <code>@Transactional(rollbackFor = Exception.class)</code>，这样就没有问题了，所以在实际项目中，一定要指定异常。</p><h4><span id="32-异常被-吃-掉">3.2 异常被 ”吃“ 掉</span></h4><p>这个标题很搞笑，异常怎么会被吃掉呢？还是回归到现实项目中去，我们在处理异常时，有两种方式，要么抛出去，让上一层来捕获处理；要么把异常 try catch 掉，在异常出现的地方给处理掉。就因为有这中 try…catch，所以导致异常被 ”吃“ 掉，事务无法回滚。我们还是看上面那个例子，只不过简单修改一下代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">isertUser3</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 插入用户信息</span>            userMapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 手动抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">"数据库异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 异常处理逻辑</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>读者可以使用我源码中 controller 的接口，通过 postman 测试一下，就会发现，仍然是可以插入一条用户数据，说明事务并没有因为抛出异常而回滚。这个细节往往比上面那个坑更难以发现，因为我们的思维很容易导致 try…catch 代码的产生，一旦出现这种问题，往往排查起来比较费劲，所以我们平时在写代码时，一定要多思考，多注意这种细节，尽量避免给自己埋坑。  </p><p>那这种怎么解决呢？直接往上抛，给上一层来处理即可，千万不要在事务中把异常自己 ”吃“ 掉。</p><h4><span id="33-事务的范围">3.3 事务的范围</span></h4><p>事务范围这个东西比上面两个坑埋的更深！我之所以把这个也写上，是因为这是我之前在实际项目中遇到的，该场景在这个课程中我就不模拟了，我写一个 demo 让大家看一下，把这个坑记住即可，以后在写代码时，遇到并发问题，就会注意这个坑了，那么这节课也就有价值了。  </p><p>我来写个 demo：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">isertUser4</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实际中的具体业务……</span>        userMapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，因为要考虑并发问题，我在业务层代码的方法上加了个 synchronized 关键字。我举个实际的场景，比如一个数据库中，针对某个用户，只有一条记录，下一个插入动作过来，会先判断该数据库中有没有相同的用户，如果有就不插入，就更新，没有才插入，所以理论上，数据库中永远就一条同一用户信息，不会出现同一数据库中插入了两条相同用户的信息。  </p><p>但是在压测时，就会出现上面的问题，数据库中确实有两条同一用户的信息，分析其原因，在于事务的范围和锁的范围问题。  </p><p>从上面方法中可以看到，方法上是加了事务的，那么也就是说，在执行该方法开始时，事务启动，执行完了后，事务关闭。但是 synchronized 没有起作用，其实根本原因是因为事务的范围比锁的范围大。也就是说，在加锁的那部分代码执行完之后，锁释放掉了，但是事务还没结束，此时另一个线程进来了，事务没结束的话，第二个线程进来时，数据库的状态和第一个线程刚进来是一样的。即由于mysql Innodb引擎的默认隔离级别是可重复读（在同一个事务里，SELECT的结果是事务开始时时间点的状态），线程二事务开始的时候，线程一还没提交完成，导致读取的数据还没更新。第二个线程也做了插入动作，导致了脏数据。  </p><p>这个问题可以避免，第一，把事务去掉即可（不推荐）；第二，在调用该 service 的地方加锁，保证锁的范围比事务的范围大即可。</p><h3><span id="4-总结">4. 总结</span></h3><p>本章主要总结了 Spring Boot 中如何使用事务，只要使用 <code>@Transactional</code> 注解即可使用，非常简单方便。除此之外，重点总结了三个在实际项目中可能遇到的坑点，这非常有意义，因为事务这东西不出问题还好，出了问题比较难以排查，所以总结的这三点注意事项，希望能帮助到开发中的朋友。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第12课spring-boot中使用监听器">第12课：Spring Boot中使用监听器</span></h2><h3><span id="1-监听器介绍">1. 监听器介绍</span></h3><p>什么是 web 监听器？web 监听器是一种 Servlet 中特殊的类，它们能帮助开发者监听 web 中特定的事件，比如 ServletContext, HttpSession, ServletRequest 的创建和销毁；变量的创建、销毁和修改等。可以在某些动作前后增加处理，实现监控。</p><h3><span id="2-spring-boot中监听器的使用">2. Spring Boot中监听器的使用</span></h3><p>web 监听器的使用场景很多，比如监听 servlet 上下文用来初始化一些数据、监听 http session 用来获取当前在线的人数、监听客户端请求的 servlet request 对象来获取用户的访问信息等等。这一节中，我们主要通过这三个实际的使用场景来学习一下 Spring Boot 中监听器的使用。</p><h4><span id="21-监听servlet上下文对象">2.1 监听Servlet上下文对象</span></h4><p>监听 servlet 上下文对象可以用来初始化数据，用于缓存。什么意思呢？我举一个很常见的场景，比如用户在点击某个站点的首页时，一般都会展现出首页的一些信息，而这些信息基本上或者大部分时间都保持不变的，但是这些信息都是来自数据库。如果用户的每次点击，都要从数据库中去获取数据的话，用户量少还可以接受，如果用户量非常大的话，这对数据库也是一笔很大的开销。  </p><p>针对这种首页数据，大部分都不常更新的话，我们完全可以把它们缓存起来，每次用户点击的时候，我们都直接从缓存中拿，这样既可以提高首页的访问速度，又可以降低服务器的压力。如果做的更加灵活一点，可以再加个定时器，定期的来更新这个首页缓存。就类似与 CSDN 个人博客首页中排名的变化一样。</p><p>下面我们针对这个功能，来写一个 demo，在实际中，读者可以完全套用该代码，来实现自己项目中的相关逻辑。首先写一个 Service，模拟一下从数据库查询数据：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取用户信息     * @return     */</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实际中会根据具体的业务场景，从数据库中查询对应的信息</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"倪升武"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后写一个监听器，实现 <code>ApplicationListener&lt;ContextRefreshedEvent&gt;</code> 接口，重写 <code>onApplicationEvent</code> 方法，将 ContextRefreshedEvent 对象传进去。如果我们想在加载或刷新应用上下文时，也重新刷新下我们预加载的资源，就可以通过监听 ContextRefreshedEvent 来做这样的事情。如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用ApplicationListener来初始化一些数据到application域中的监听器 * @author shengni ni * @date 2018/07/05 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletContextListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>ContextRefreshedEvent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ContextRefreshedEvent contextRefreshedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先获取到application上下文</span>        ApplicationContext applicationContext <span class="token operator">=</span> contextRefreshedEvent<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取对应的service</span>        UserService userService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取application域对象，将查到的信息放到application域中</span>        ServletContext application <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ServletContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>正如注释中描述的一样，首先通过 contextRefreshedEvent 来获取 application 上下文，再通过 application 上下文来获取 UserService 这个 bean，项目中可以根据实际业务场景，也可以获取其他的 bean，然后再调用自己的业务代码获取相应的数据，最后存储到 application 域中，这样前端在请求相应数据的时候，我们就可以直接从 application 域中获取信息，减少数据库的压力。下面写一个 Controller 直接从 application 域中获取 user 信息来测试一下。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/listener"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServletContext application <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> application<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动项目，在浏览器中输入 <code>http://localhost:8080/listener/user</code> 测试一下即可，如果正常返回 user 信息，那么说明数据已经缓存成功。不过 application 这种是缓存在内存中，对内存会有消耗，后面的课程中我会讲到 redis，到时候再给大家介绍一下 redis 的缓存。</p><h4><span id="22-监听http会话-session对象">2.2 监听HTTP会话 Session对象</span></h4><p>监听器还有一个比较常用的地方就是用来监听 session 对象，来获取在线用户数量，现在有很多开发者都有自己的网站，监听 session 来获取当前在下用户数量是个很常见的使用场景，下面来介绍一下如何来使用。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用HttpSessionListener统计在线用户数的监听器 * @author shengwu ni * @date 2018/07/05 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHttpSessionListener</span> <span class="token keyword">implements</span> <span class="token class-name">HttpSessionListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MyHttpSessionListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 记录在线的用户数量     */</span>    <span class="token keyword">public</span> Integer count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span>HttpSessionEvent httpSessionEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"新用户上线了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        httpSessionEvent<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span>HttpSessionEvent httpSessionEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户下线了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        httpSessionEvent<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出，首先该监听器需要实现 HttpSessionListener 接口，然后重写 <code>sessionCreated</code> 和 <code>sessionDestroyed</code> 方法，在 <code>sessionCreated</code> 方法中传递一个 HttpSessionEvent 对象，然后将当前 session 中的用户数量加1，<code>sessionDestroyed</code> 方法刚好相反，不再赘述。然后我们写一个 Controller 来测试一下。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/listener"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取当前在线人数，该方法有bug     * @param request     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/total"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getTotalUser</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer count <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"当前在线人数："</span> <span class="token operator">+</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>该 Controller 中是直接获取当前 session 中的用户数量，启动服务器，在浏览器中输入 <code>localhost:8080/listener/total</code> 可以看到返回的结果是1，再打开一个浏览器，请求相同的地址可以看到 count 是 2 ，这没有问题。但是如果关闭一个浏览器再打开，理论上应该还是2，但是实际测试却是 3。原因是 session 销毁的方法没有执行（可以在后台控制台观察日志打印情况），当重新打开时，服务器找不到用户原来的 session，于是又重新创建了一个 session，那怎么解决该问题呢？我们可以将上面的 Controller 方法改造一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/total2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">getTotalUser</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Cookie cookie<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 把sessionId记录在浏览器中</span>        cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">,</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置cookie有效期为2天，设置长一点</span>        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span> <span class="token number">48</span><span class="token operator">*</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Integer count <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"当前在线人数："</span> <span class="token operator">+</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看出，该处理逻辑是让服务器记得原来那个 session，即把原来的 sessionId 记录在浏览器中，下次再打开时，把这个 sessionId 传过去，这样服务器就不会重新再创建了。重启一下服务器，在浏览器中再次测试一下，即可避免上面的问题。</p><h4><span id="23-监听客户端请求servlet-request对象">2.3 监听客户端请求Servlet Request对象</span></h4><p>使用监听器获取用户的访问信息比较简单，实现 ServletRequestListener 接口即可，然后通过 request 对象获取一些信息。如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用ServletRequestListener获取访问信息 * @author shengwu ni * @date 2018/07/05 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletRequestListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletRequestListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MyServletRequestListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestInitialized</span><span class="token punctuation">(</span>ServletRequestEvent servletRequestEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequestEvent<span class="token punctuation">.</span><span class="token function">getServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"session id为：{}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestedSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"request url为：{}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"倪升武"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestDestroyed</span><span class="token punctuation">(</span>ServletRequestEvent servletRequestEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"request end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequestEvent<span class="token punctuation">.</span><span class="token function">getServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"request域中保存的name值为：{}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个比较简单，不再赘述，接下来写一个 Controller 测试一下即可。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/request"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">getRequestInfo</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"requestListener中的初始化的name数据："</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3><span id="3-spring-boot中自定义事件监听">3. Spring Boot中自定义事件监听</span></h3><p>在实际项目中，我们往往需要自定义一些事件和监听器来满足业务场景，比如在微服务中会有这样的场景：微服务 A 在处理完某个逻辑之后，需要通知微服务 B 去处理另一个逻辑，或者微服务 A 处理完某个逻辑之后，需要将数据同步到微服务 B，这种场景非常普遍，这个时候，我们可以自定义事件以及监听器来监听，一旦监听到微服务 A 中的某事件发生，就去通知微服务 B 处理对应的逻辑。</p><h4><span id="31-自定义事件">3.1 自定义事件</span></h4><p>自定义事件需要继承 ApplicationEvent 对象，在事件中定义一个 User 对象来模拟数据，构造方法中将 User 对象传进来初始化。如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义事件 * @author shengwu ni * @date 2018/07/05 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> User user<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyEvent</span><span class="token punctuation">(</span>Object source<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 省去get、set方法</span><span class="token punctuation">}</span></code></pre><h4><span id="32-自定义监听器">3.2 自定义监听器</span></h4><p>接下来，自定义一个监听器来监听上面定义的 MyEvent 事件，自定义监听器需要实现 <code>ApplicationListener</code> 接口即可。如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义监听器，监听MyEvent事件 * @author shengwu ni * @date 2018/07/05 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEventListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>MyEvent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>MyEvent myEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 把事件中的信息获取到</span>        User user <span class="token operator">=</span> myEvent<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理事件，实际项目中可以通知别的微服务或者处理其他逻辑等等</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名："</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码："</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后重写 <code>onApplicationEvent</code> 方法，将自定义的 MyEvent 事件传进来，因为该事件中，我们定义了 User 对象（该对象在实际中就是需要处理的数据，在下文来模拟），然后就可以使用该对象的信息了。</p><p>OK，定义好了事件和监听器之后，需要手动发布事件，这样监听器才能监听到，这需要根据实际业务场景来触发，针对本文的例子，我写个触发逻辑，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * UserService * @author shengwu ni */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发布事件     * @return     */</span>    <span class="token keyword">public</span> User <span class="token function">getUser2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"倪升武"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发布事件</span>        MyEvent event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationContext<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 service 中注入 ApplicationContext，在业务代码处理完之后，通过 ApplicationContext 对象手动发布 MyEvent 事件，这样我们自定义的监听器就能监听到，然后处理监听器中写好的业务逻辑。</p><p>最后，在 Controller 中写一个接口来测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/request"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">getRequestInfo</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"requestListener中的初始化的name数据："</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在浏览器中输入 <code>http://localhost:8080/listener/publish</code>，然后观察一下控制台打印的用户名和密码，即可说明自定义监听器已经生效。</p><h3><span id="4-总结">4. 总结</span></h3><p>本课系统的介绍了监听器原理，以及在 Spring Boot 中如何使用监听器，列举了监听器的三个常用的案例，有很好的实战意义。最后讲解了项目中如何自定义事件和监听器，并结合微服务中常见的场景，给出具体的代码模型，均能运用到实际项目中去，希望读者认真消化。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第13课spring-boot中使用拦截器">第13课：Spring Boot中使用拦截器</span></h2><p>拦截器的原理很简单，是 AOP 的一种实现，专门拦截对动态资源的后台请求，即拦截对控制层的请求。使用场景比较多的是判断用户是否有权限请求后台，更拔高一层的使用场景也有，比如拦截器可以结合 websocket 一起使用，用来拦截 websocket 请求，然后做相应的处理等等。拦截器不会拦截静态资源，Spring Boot 的默认静态目录为 resources/static，该目录下的静态页面、js、css、图片等等，不会被拦截（也要看如何实现，有些情况也会拦截，我在下文会指出）。</p><h3><span id="1-拦截器的快速使用">1. 拦截器的快速使用</span></h3><p>使用拦截器很简单，只需要两步即可：定义拦截器和配置拦截器。在配置拦截器中，Spring Boot 2.0 以后的版本和之前的版本有所不同，我会重点讲解一下这里可能出现的坑。</p><h4><span id="11-定义拦截器">1.1 定义拦截器</span></h4><p>定义拦截器，只需要实现 <code>HandlerInterceptor</code> 接口，<code>HandlerInterceptor</code> 接口是所有自定义拦截器或者 Spring Boot 提供的拦截器的鼻祖，所以，首先来了解下该接口。该接口中有三个方法： <code>preHandle(……)</code>、<code>postHandle(……)</code> 和 <code>afterCompletion(……)</code> 。</p><blockquote><p><code>preHandle(……)</code> 方法：该方法的执行时机是，当某个 url 已经匹配到对应的 Controller 中的某个方法，且在这个方法执行之前。所以 <code>preHandle(……)</code> 方法可以决定是否将请求放行，这是通过返回值来决定的，返回 true 则放行，返回 false 则不会向后执行。<br><code>postHandle(……)</code> 方法：该方法的执行时机是，当某个 url 已经匹配到对应的 Controller 中的某个方法，且在执行完了该方法，但是在 DispatcherServlet 视图渲染之前。所以在这个方法中有个 ModelAndView 参数，可以在此做一些修改动作。<br><code>afterCompletion(……)</code> 方法：顾名思义，该方法是在整个请求处理完成后（包括视图渲染）执行，这时做一些资源的清理工作，这个方法只有在 <code>preHandle(……)</code> 被成功执行后并且返回 true 才会被执行。  </p></blockquote><p>了解了该接口，接下来自定义一个拦截器。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义拦截器 * @author shengwu ni * @date 2018/08/03 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MyInterceptor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token punctuation">(</span>HandlerMethod<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>        Method method <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====拦截到了方法：{}，在该方法执行之前执行===="</span><span class="token punctuation">,</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回true才会继续执行，返回false则取消当前请求</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>OK，到此为止，拦截器已经定义完成，接下来就是对该拦截器进行拦截配置。</p><h4><span id="12-配置拦截器">1.2 配置拦截器</span></h4><p>在 Spring Boot 2.0 之前，我们都是直接继承 WebMvcConfigurerAdapter 类，然后重写 <code>addInterceptors</code> 方法来实现拦截器的配置。但是在 Spring Boot 2.0 之后，该方法已经被废弃了（当然，也可以继续用），取而代之的是 WebMvcConfigurationSupport 方法，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptorConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在该配置中重写 <code>addInterceptors</code> 方法，将我们上面自定义的拦截器添加进去，<code>addPathPatterns</code> 方法是添加要拦截的请求，这里我们拦截所有的请求。这样就配置好拦截器了，接下来写一个 Controller 测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/interceptor"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>让其跳转到 hello.html 页面，直接在 hello.html 中输出 <code>hello interceptor</code> 即可。启动项目，在浏览器中输入 <code>localhost:8080/interceptor/test</code> 看一下控制台的日志：</p><pre><code>====拦截到了方法：test，在该方法执行之前执行====  执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染  整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了</code></pre><p>可以看出拦截器已经生效，并能看出其执行顺序。</p><h4><span id="13-解决静态资源被拦截问题">1.3 解决静态资源被拦截问题</span></h4><p>上文中已经介绍了拦截器的定义和配置，但是这样是否就没问题了呢？其实不然，如果使用上面这种配置的话，我们会发现一个缺陷，那就是静态资源被拦截了。可以在 resources/static/ 目录下放置一个图片资源或者 html 文件，然后启动项目直接访问，即可看到无法访问的现象。</p><p>也就是说，虽然 Spring Boot 2.0 废弃了WebMvcConfigurerAdapter，但是 WebMvcConfigurationSupport 又会导致默认的静态资源被拦截，这就需要我们手动将静态资源放开。</p><p>如何放开呢？除了在 MyInterceptorConfig 配置类中重写 <code>addInterceptors</code> 方法外，还需要再重写一个方法：<code>addResourceHandlers</code>，将静态资源放开：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 用来指定静态资源不被拦截，否则继承WebMvcConfigurationSupport这种方式会导致静态资源无法直接访问 * @param registry */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/static/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样配置好之后，重启项目，静态资源也可以正常访问了。如果你是个善于学习或者研究的人，那肯定不会止步于此，没错，上面这种方式的确能解决静态资源无法访问的问题，但是，还有更方便的方式来配置。</p><p>我们不继承 WebMvcConfigurationSupport 类，直接实现 WebMvcConfigurer 接口，然后重写 <code>addInterceptors</code> 方法，将自定义的拦截器添加进去即可，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实现WebMvcConfigurer不会导致静态资源被拦截</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样就非常方便了，实现 WebMvcConfigure 接口的话，不会拦截 Spring Boot 默认的静态资源。</p><p>这两种方式都可以，具体他们之间的细节，感兴趣的读者可以做进一步的研究，由于这两种方式的不同，继承 WebMvcConfigurationSupport 类的方式可以用在前后端分离的项目中，后台不需要访问静态资源（就不需要放开静态资源了）；实现 WebMvcConfigure 接口的方式可以用在非前后端分离的项目中，因为需要读取一些图片、css、js文件等等。</p><h3><span id="2-拦截器使用实例">2. 拦截器使用实例</span></h3><h4><span id="21-判断用户有没有登录">2.1 判断用户有没有登录</span></h4><p>一般用户登录功能我们可以这么做，要么往 session 中写一个 user，要么针对每个 user 生成一个 token，第二种要更好一点，那么针对第二种方式，如果用户登录成功了，每次请求的时候都会带上该用户的 token，如果未登录，则没有该 token，服务端可以检测这个 token 参数的有无来判断用户有没有登录，从而实现拦截功能。我们改造一下 <code>preHandle</code> 方法，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token punctuation">(</span>HandlerMethod<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>    Method method <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====拦截到了方法：{}，在该方法执行之前执行===="</span><span class="token punctuation">,</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断用户有没有登陆，一般登陆之后的用户都有一个对应的token</span>    String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> token <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户未登录，没有权限执行……请登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回true才会继续执行，返回false则取消当前请求</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>重启项目，在浏览器中输入 <code>localhost:8080/interceptor/test</code> 后查看控制台日志，发现被拦截，如果在浏览器中输入 <code>localhost:8080/interceptor/test?token=123</code> 即可正常往下走。</p><h4><span id="22-取消拦截操作">2.2 取消拦截操作</span></h4><p>根据上文，如果我要拦截所有 <code>/admin</code> 开头的 url 请求的话，需要在拦截器配置中添加这个前缀，但是在实际项目中，可能会有这种场景出现：某个请求也是 <code>/admin</code> 开头的，但是不能拦截，比如 <code>/admin/login</code> 等等，这样的话又需要去配置。那么，可不可以做成一个类似于开关的东西，哪里不需要拦截，我就在哪里弄个开关上去，做成这种灵活的可插拔的效果呢？</p><p>是可以的，我们可以定义一个注解，该注解专门用来取消拦截操作，如果某个 Controller 中的方法我们不需要拦截掉，即可在该方法上加上我们自定义的注解即可，下面先定义一个注解：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 该注解用来指定某个方法不用拦截 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">UnInterception</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>然后在 Controller 中的某个方法上添加该注解，在拦截器处理方法中添加该注解取消拦截的逻辑，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token punctuation">(</span>HandlerMethod<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>    Method method <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====拦截到了方法：{}，在该方法执行之前执行===="</span><span class="token punctuation">,</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过方法，可以获取该方法上的自定义注解，然后通过注解来判断该方法是否要被拦截</span>    <span class="token comment" spellcheck="true">// @UnInterception 是我们自定义的注解</span>    UnInterception unInterception <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>UnInterception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> unInterception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回true才会继续执行，返回false则取消当前请求</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Controller 中的方法代码可以参见源码，重启项目在浏览器中输入 <code>http://localhost:8080/interceptor/test2?token=123</code> 测试一下，可以看出，加了该注解的方法不会被拦截。</p><h3><span id="3-总结">3. 总结</span></h3><p>本节主要介绍了 Spring Boot 中拦截器的使用，从拦截器的创建、配置，到拦截器对静态资源的影响，都做了详细的分析。Spring Boot 2.0 之后拦截器的配置支持两种方式，可以根据实际情况选择不同的配置方式。最后结合实际中的使用，举了两个常用的场景，希望读者能够认真消化，掌握拦截器的使用。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第14课spring-boot-中集成redis">第14课：Spring Boot 中集成Redis</span></h2><h3><span id="1-redis-介绍">1. Redis 介绍</span></h3><p>Redis 是一种非关系型数据库（NoSQL），NoSQL 是以 key-value 的形式存储的，和传统的关系型数据库不一样，不一定遵循传统数据库的一些基本要求，比如说 SQL 标准，ACID 属性，表结构等等，这类数据库主要有以下特点：非关系型的、分布式的、开源的、水平可扩展的。<br>NoSQL 使用场景有：对数据高并发读写、对海量数据的高效率存储和访问、对数据的高可扩展性和高可用性等等。<br>Redis 的 key 可以是字符串、哈希、链表、集合和有序集合。value 类型很多，包括 String、list、set、zset。这些数据类型都支持 push/pop、add/remove、取交集和并集以及更多更丰富的操作，Redis 也支持各种不同方式的排序。为了保证效率，数据都是在缓存在内存中，它也可以周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件中。 有了 redis 有哪些好处呢？举个比较简单的例子，看下图： </p><p><img src="https://images.gitbook.cn/4258b9c0-9f93-11e8-a34f-d93da92347ea" alt="Redis使用场景"></p><p>Redis 集群和 Mysql 是同步的，首先会从 redis 中获取数据，如果 redis 挂了，再从 mysql 中获取数据，这样网站就不会挂掉。更多关于 redis 的介绍以及使用场景，可以谷歌和百度，在这就不赘述了。</p><h3><span id="2-redis-安装">2. Redis 安装</span></h3><p>本课程是在 vmvare 虚拟机中来安装的 redis （centos 7），学习的时候如果有自己的阿里云服务器，也可以在阿里云中来安装 redis，都可以。只要能 ping 的通云主机或者虚拟机的 ip，然后在虚拟机或者云主机中放行对应的端口（或者关掉防火墙）即可访问 redis。下面来介绍一下 redis 的安装过程：</p><ul><li>安装 gcc 编译</li></ul><p>因为后面安装redis的时候需要编译，所以事先得先安装gcc编译。阿里云主机已经默认安装了 gcc，如果是自己安装的虚拟机，那么需要先安装一下 gcc：</p><pre><code>yum install gcc-c++</code></pre><ul><li>下载 redis</li></ul><p>有两种方式下载安装包，一种是去官网上下载（<a href="https://redis.io),然后将安装包考到/">https://redis.io），然后将安装包考到</a> centos 中，另种方法是直接使用 wget 来下载：</p><pre><code>wget http://download.redis.io/releases/redis-3.2.8.tar.gz</code></pre><p>如果没有安装过 wget，可以通过如下命令安装：</p><pre><code>yum install wget</code></pre><ul><li>解压安装</li></ul><p>解压安装包：</p><pre><code>tar –vzxf redis-3.2.8.tar.gz</code></pre><p>然后将解压的文件夹 redis-3.2.8 放到 <code>/usr/local/</code> 下，一般安装软件都放在 <code>/usr/local</code> 下。然后进入 <code>/usr/local/redis-3.2.8/</code> 文件夹下，执行 <code>make</code> 命令即可完成安装。<br>【注】如果 make 失败，可以尝试如下命令：</p><pre><code>make MALLOC=libcmake install</code></pre><ul><li>修改配置文件</li></ul><p>安装成功之后，需要修改一下配置文件，包括允许接入的 ip，允许后台执行，设置密码等等。<br>打开 redis 配置文件：<code>vi redis.conf</code><br>在命令模式下输入 <code>/bind</code> 来查找 bind 配置，按 n 来查找下一个，找到配置后，将 bind 配置成 0.0.0.0，允许任意服务器来访问 redis，即：</p><pre><code>bind 0.0.0.0</code></pre><p>使用同样的方法，将 daemonize 改成 yes （默认为 no），允许 redis 在后台执行。<br>将 requirepass 注释打开，并设置密码为 123456（密码自己设置）。</p><ul><li>启动 redis</li></ul><p>在 redis-3.2.8 目录下，指定刚刚修改好的配置文件 redis.conf 来启动 redis：</p><pre><code>redis-server ./redis.conf</code></pre><p>再启动 redis 客户端：</p><pre><code>redis-cli</code></pre><p>由于我们设置了密码，在启动客户端之后，输入 <code>auth 123456</code> 即可登录进入客户端。<br>然后我们来测试一下，往 redis 中插入一个数据：</p><pre><code>set name CSDN</code></pre><p>然后来获取 name</p><pre><code>get name</code></pre><p>如果正常获取到 CSDN，则说明没有问题。</p><h3><span id="3-spring-boot-集成-redis">3. Spring Boot 集成 Redis</span></h3><h4><span id="31-依赖导入">3.1 依赖导入</span></h4><p>Spring Boot 集成 redis 很方便，只需要导入一个 redis 的 starter 依赖即可。如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--阿里巴巴fastjson --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.35<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这里也导入阿里巴巴的 fastjson 是为了在后面我们要存一个实体，为了方便把实体转换成 json 字符串存进去。</p><h4><span id="32-redis-配置">3.2 Redis 配置</span></h4><p>导入了依赖之后，我们在 application.yml 文件里配置 redis：</p><pre class=" language-yml"><code class="language-yml">server:  port: 8080spring:  #redis相关配置  redis:    database: 5    # 配置redis的主机地址，需要修改成自己的    host: 192.168.48.190    port: 6379    password: 123456    timeout: 5000    jedis:      pool:        # 连接池中的最大空闲连接，默认值也是8。        max-idle: 500        # 连接池中的最小空闲连接，默认值也是0。        min-idle: 50        # 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)        max-active: 1000        # 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException        max-wait: 2000</code></pre><h4><span id="33-常用-api-介绍">3.3 常用 api 介绍</span></h4><p>Spring Boot 对 redis 的支持已经非常完善了，丰富的 api 已经足够我们日常的开发，这里我介绍几个最常用的供大家学习，其他 api 希望大家自己多学习，多研究。用到会去查即可。</p><p>有两个 redis 模板：RedisTemplate 和 StringRedisTemplate。我们不使用 RedisTemplate，RedisTemplate 提供给我们操作对象，操作对象的时候，我们通常是以 json 格式存储，但在存储的时候，会使用 Redis 默认的内部序列化器；导致我们存进里面的是乱码之类的东西。当然了，我们可以自己定义序列化，但是比较麻烦，所以使用 StringRedisTemplate 模板。StringRedisTemplate 主要给我们提供字符串操作，我们可以将实体类等转成 json 字符串即可，在取出来后，也可以转成相应的对象，这就是上面我导入了阿里 fastjson 的原因。</p><h5><span id="331-redisstring-类型">3.3.1 redis:string 类型</span></h5><p>新建一个 RedisService，注入 StringRedisTemplate，使用 <code>stringRedisTemplate.opsForValue()</code> 可以获取 <code>ValueOperations&lt;String, String&gt;</code> 对象，通过该对象即可读写 redis 数据库了。如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * set redis: string类型     * @param key key     * @param value value     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setString</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span><span class="token punctuation">{</span>        ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> valueOperations <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valueOperations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * get redis: string类型     * @param key key     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">getString</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>该对象操作的是 string，我们也可以存实体类，只需要将实体类转换成 json 字符串即可。下面来测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Course14ApplicationTests</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Course14ApplicationTests<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RedisService redisService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//测试redis的string类型</span>        redisService<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token string">"weichat"</span><span class="token punctuation">,</span><span class="token string">"程序员私房菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我的微信公众号为：{}"</span><span class="token punctuation">,</span> redisService<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"weichat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果是个实体，我们可以使用json工具转成json字符串，</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"CSDN"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisService<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token string">"userInfo"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户信息：{}"</span><span class="token punctuation">,</span> redisService<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"userInfo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>先启动 redis，然后运行这个测试用例，观察控制台打印的日志如下：</p><pre><code>我的微信公众号为：程序员私房菜用户信息：&#123;&quot;password&quot;:&quot;123456&quot;,&quot;username&quot;:&quot;CSDN&quot;&#125;</code></pre><h5><span id="332-redishash-类型">3.3.2 redis:hash 类型</span></h5><p>hash 类型其实原理和 string 一样的，但是有两个 key，使用 <code>stringRedisTemplate.opsForHash()</code> 可以获取 <code>HashOperations&lt;String, Object, Object&gt;</code> 对象。比如我们要存储订单信息，所有订单信息都放在 order 下，针对不同用户的订单实体，可以通过用户的 id 来区分，这就相当于两个 key 了。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * set redis: hash类型     * @param key key     * @param filedKey filedkey     * @param value value     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHash</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String filedKey<span class="token punctuation">,</span> String value<span class="token punctuation">)</span><span class="token punctuation">{</span>        HashOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token punctuation">,</span> Object<span class="token operator">></span> hashOperations <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>filedKey<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * get redis: hash类型     * @param key key     * @param filedkey filedkey     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">getHash</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String filedkey<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> filedkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出，hash 和 string 没啥两样，只不过多了个参数，Spring Boot 中操作 redis 非常简单方便。来测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Course14ApplicationTests</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Course14ApplicationTests<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RedisService redisService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//测试redis的hash类型</span>        redisService<span class="token punctuation">.</span><span class="token function">setHash</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户姓名：{}"</span><span class="token punctuation">,</span> redisService<span class="token punctuation">.</span><span class="token function">getHash</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5><span id="333-redislist-类型">3.3.3 redis:list 类型</span></h5><p>使用 <code>stringRedisTemplate.opsForList()</code> 可以获取 <code>ListOperations&lt;String, String&gt; listOperations</code>  redis 列表对象，该列表是个简单的字符串列表，可以支持从左侧添加，也可以支持从右侧添加，一个列表最多包含 2 ^ 32 -1 个元素。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * set redis:list类型     * @param key key     * @param value value     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">setList</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span><span class="token punctuation">{</span>        ListOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> listOperations <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> listOperations<span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * get redis:list类型     * @param key key     * @param start start     * @param end end     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getList</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出，这些 api 都是一样的形式，方便记忆也方便使用。具体的 api 细节我就不展开了，大家可以自己看 api 文档。其实，这些 api 根据参数和返回值也能知道它们是做什么用的。来测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Course14ApplicationTests</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Course14ApplicationTests<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RedisService redisService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//测试redis的list类型</span>        redisService<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"football"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisService<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"basketball"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> valList <span class="token operator">=</span> redisService<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String value <span class="token operator">:</span>valList<span class="token punctuation">)</span><span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"list中有：{}"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3><span id="4-总结">4. 总结</span></h3><p>本节主要介绍了 redis 的使用场景、安装过程，以及 Spring Boot 中集成 redis 的详细步骤。在实际项目中，通常都用 redis 作为缓存，在查询数据库的时候，会先从 redis 中查找，如果有信息，则从 redis 中取；如果没有，则从数据库中查，并且同步到 redis 中，下次 redis 中就有了。更新和删除也是如此，都需要同步到 redis。redis 在高并发场景下运用的很多。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第15课-spring-boot中集成activemq">第15课： Spring Boot中集成ActiveMQ</span></h2><h3><span id="1-jms-和-activemq-介绍">1. JMS 和 ActiveMQ 介绍</span></h3><h4><span id="11-jms-是啥">1.1 JMS 是啥</span></h4><p>百度百科的解释：</p><blockquote><p>JMS 即 Java 消息服务（Java Message Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的 API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java 消息服务是一个与具体平台无关的 API，绝大多数 MOM 提供商都对 JMS 提供支持。</p></blockquote><p>JMS 只是接口，不同的提供商或者开源组织对其有不同的实现，ActiveMQ 就是其中之一，它支持JMS，是 Apache 推出的。JMS 中有几个对象模型：</p><blockquote><p>连接工厂：ConnectionFactory<br>JMS连接：Connection<br>JMS会话：Session<br>JMS目的：Destination<br>JMS生产者：Producer<br>JMS消费者：Consumer<br>JMS消息两种类型：点对点和发布/订阅。  </p></blockquote><p>可以看出 JMS 实际上和 JDBC 有点类似，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。本文主要使用 ActiveMQ。</p><h4><span id="12-activemq">1.2 ActiveMQ</span></h4><p>ActiveMQ 是 Apache 的一个能力强劲的开源消息总线。ActiveMQ 完全支持JMS1.1和J2EE 1.4规范，尽管 JMS 规范出台已经是很久的事情了，但是 JMS 在当今的 Java EE 应用中间仍然扮演着特殊的地位。ActiveMQ 用在异步消息的处理上，所谓异步消息即消息发送者无需等待消息接收者的处理以及返回，甚至无需关心消息是否发送成功。   </p><p>异步消息主要有两种目的地形式，队列（queue）和主题（topic），队列用于点对点形式的消息通信，主题用于发布/订阅式的消息通信。本章节主要来学习一下在 Spring Boot 中如何使用这两种形式的消息。</p><h3><span id="2-activemq安装">2. ActiveMQ安装</span></h3><p>使用 ActiveMQ 首先需要去官网下载，官网地址为：<a href="http://activemq.apache.org/">http://activemq.apache.org/</a><br>本课程使用的版本是 apache-activemq-5.15.3，下载后解压缩会有一个名为 apache-activemq-5.15.3 的文件夹，没错，这就安装好了，非常简单，开箱即用。打开文件夹会看到里面有个 <code>activemq-all-5.15.3.jar</code>，这个 jar 我们是可以加进工程里的，但是使用 maven 的话，这个 jar 我们不需要。</p><p>在使用 ActiveMQ 之前，首先得先启动，刚才解压后的目录中有个 bin 目录，里面有 win32 和 win64 两个目录，根据自己电脑选择其中一个打开运行里面的 activemq.bat 即可启动 ActiveMQ。<br>消息生产者生产消息发布到queue中，然后消息消费者从queue中取出，并且消费消息。这里需要注意：消息被消费者消费以后，queue中不再有存储，所以消息消费者不可消费到已经被消费的消息。Queue支持存在多个消息消费者，但是对一个消息而言，只会有一个消费者可以消费<br>启动完成后，在浏览器中输入 <code>http://127.0.0.1:8161/admin/</code> 来访问 ActiveMQ 的服务器，用户名和密码是 admin/admin。如下：</p><p><img src="https://images.gitbook.cn/cfb9c460-aa94-11e8-888f-df33be8ed191" alt="activemq"></p><p>我们可以看到有 Queues 和 Topics 这两个选项，这两个选项分别是点对点消息和发布/订阅消息的查看窗口。何为点对点消息和发布/订阅消息呢？</p><p>点对点消息：消息生产者生产消息发布到 queue 中，然后消息消费者从 queue 中取出，并且消费消息。这里需要注意：消息被消费者消费以后，queue 中不再有存储，所以消息消费者不可消费到已经被消费的消息。Queue 支持存在多个消息消费者，但是对一个消息而言，只会有一个消费者可以消费。</p><p>发布/订阅消息：消息生产者（发布）将消息发布到 topic 中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到 topic 的消息会被所有订阅者消费。下面分析具体的实现方式。</p><h3><span id="3-activemq集成">3. ActiveMQ集成</span></h3><h4><span id="31-依赖导入和配置">3.1 依赖导入和配置</span></h4><p>在 Spring Boot 中集成 ActiveMQ 需要导入如下 starter 依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>然后在 application.yml 配置文件中，对 activemq 做一下配置：</p><pre class=" language-yml"><code class="language-yml">spring:  activemq:      # activemq url    broker-url: tcp://localhost:61616    in-memory: true    pool:      # 如果此处设置为true，需要添加activemq-pool的依赖包，否则会自动配置失败，无法注入JmsMessagingTemplate      enabled: false</code></pre><h4><span id="32-queue-和-topic-的创建">3.2 Queue 和 Topic 的创建</span></h4><p>首先我们需要创建两种消息 Queue 和 Topic，这两种消息的创建，我们放到 ActiveMqConfig 中来创建，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * activemq的配置 * @author  shengwu ni */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActiveMqConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 发布/订阅模式队列名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TOPIC_NAME <span class="token operator">=</span> <span class="token string">"activemq.topic"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 点对点模式队列名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"activemq.queue"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Destination <span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQTopic</span><span class="token punctuation">(</span>TOPIC_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Destination <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出创建 Queue 和 Topic 两种消息，分别使用 <code>new ActiveMQQueue</code> 和 <code>new ActiveMQTopic</code> 来创建，分别跟上对应消息的名称即可。这样在其他地方就可以直接将这两种消息作为组件注入进来了。</p><h4><span id="33-消息的发送接口">3.3 消息的发送接口</span></h4><p>在 Spring Boot 中，我们只要注入 JmsMessagingTemplate 模板即可快速发送消息，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 消息发送者 * @author shengwu ni */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgProducer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>Destination destination<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        jmsMessagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>convertAndSend</code> 方法中第一个参数是消息发送的目的地，第二个参数是具体的消息内容。</p><h4><span id="34-点对点消息生产与消费">3.4 点对点消息生产与消费</span></h4><h5><span id="341-点对点消息的生产">3.4.1 点对点消息的生产</span></h5><p>消息的生产，我们放到 Controller 中来做，由于上面已经生成了 Queue 消息的组件，所以在 Controller 中我们直接注入进来即可。然后调用上文的消息发送方法 <code>sendMessage</code> 即可成功生产一条消息。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * ActiveMQ controller * @author shengwu ni */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/activemq"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActiveMqController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ActiveMqController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> MsgProducer producer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> Destination queue<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/send/queue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sendQueueMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"===开始发送点对点消息==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token string">"Queue: hello activemq!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5><span id="342-点对点消息的消费">3.4.2 点对点消息的消费</span></h5><p>点对点消息的消费很简单，只要我们指定目的地即可，jms 监听器一直在监听是否有消息过来，如果有，则消费。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 消息消费者 * @author shengwu ni */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueConsumer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 接收点对点消息     * @param msg     */</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> ActiveMqConfig<span class="token punctuation">.</span>QUEUE_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveQueueMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到的消息为："</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出，使用 <code>@JmsListener</code> 注解来指定要监听的目的地，在消息接收方法内部，我们可以根据具体的业务需求做相应的逻辑处理即可。</p><h5><span id="343-测试一下">3.4.3 测试一下</span></h5><p>启动项目，在浏览器中输入：<code>http://localhost:8081/activemq/send/queue</code>，观察控制台的输出日志，出现下面的日志说明消息发送和消费成功。</p><pre><code>收到的消息为：Queue: hello activemq!</code></pre><h4><span id="35-发布订阅消息的生产和消费">3.5 发布/订阅消息的生产和消费</span></h4><h5><span id="351-发布订阅消息的生产">3.5.1 发布/订阅消息的生产</span></h5><p>和点对点消息一样，我们注入 topic 并调用 producer 的 <code>sendMessage</code> 方法即可发送订阅消息，如下，不再赘述：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/activemq"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActiveMqController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ActiveMqController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> MsgProducer producer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> Destination topic<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/send/topic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sendTopicMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"===开始发送订阅消息==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token string">"Topic: hello activemq!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5><span id="352-发布订阅消息的消费">3.5.2 发布/订阅消息的消费</span></h5><p>发布/订阅消息的消费和点对点不同，订阅消息支持多个消费者一起消费。其次，Spring Boot 中默认的时点对点消息，所以在使用 topic 时，会不起作用，我们需要在配置文件 application.yml 中添加一个配置：</p><pre class=" language-yml"><code class="language-yml">spring:  jms:    pub-sub-domain: true</code></pre><p>该配置是 false 的话，则为点对点消息，也是 Spring Boot 默认的。这样是可以解决问题，但是如果这样配置的话，上面提到的点对点消息又不能正常消费了。所以二者不可兼得，这并非一个好的解决办法。</p><p>比较好的解决办法是，我们定义一个工厂，<code>@JmsListener</code> 注解默认只接收 queue 消息，如果要接收 topic 消息，需要设置一下 containerFactory。我们还在上面的那个 ActiveMqConfig 配置类中添加：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * activemq的配置 * * @author shengwu ni */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActiveMqConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略其他内容</span>    <span class="token comment" spellcheck="true">/**     * JmsListener注解默认只接收queue消息,如果要接收topic消息,需要设置containerFactory     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JmsListenerContainerFactory <span class="token function">topicListenerContainer</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultJmsListenerContainerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultJmsListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 相当于在application.yml中配置：spring.jms.pub-sub-domain=true</span>        factory<span class="token punctuation">.</span><span class="token function">setPubSubDomain</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>经过这样的配置之后，我们在消费的时候，在 <code>@JmsListener</code> 注解中指定这个容器工厂即可消费 topic 消息。如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Topic消息消费者 * @author shengwu ni */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicConsumer1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 接收订阅消息     * @param msg     */</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> ActiveMqConfig<span class="token punctuation">.</span>TOPIC_NAME<span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">"topicListenerContainer"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveTopicMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到的消息为："</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>指定 containerFactory 属性为上面我们自己配置的 topicListenerContainer 即可。由于 topic 消息可以多个消费，所以该消费的类可以拷贝几个一起测试一下，这里我就不贴代码了，可以参考我的源码测试。</p><h5><span id="353-测试一下">3.5.3 测试一下</span></h5><p>启动项目，在浏览器中输入：<code>http://localhost:8081/activemq/send/topic</code>，观察控制台的输出日志，出现下面的日志说明消息发送和消费成功。</p><pre><code>收到的消息为：Topic: hello activemq!收到的消息为：Topic: hello activemq!</code></pre><h3><span id="4-总结">4. 总结</span></h3><p>本章主要介绍了 jms 和 activemq 的相关概念、activemq 的安装与启动。详细分析了 Spring Boot 中点对点消息和发布/订阅消息两种方式的配置、消息生产和消费方式。ActiveMQ 是能力强劲的开源消息总线，在异步消息的处理上很有用，希望大家好好消化一下。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第16课spring-boot中集成-shiro">第16课：Spring Boot中集成 Shiro</span></h2><p>Shiro 是一个强大、简单易用的 Java 安全框架，主要用来更便捷的认证，授权，加密，会话管等等，可为任何应用提供安全保障。本课程主要来介绍 Shiro 的认证和授权功能。</p><h3><span id="1-shiro-三大核心组件">1. Shiro 三大核心组件</span></h3><p>Shiro 有三大核心的组件：<code>Subject</code>、<code>SecurityManager</code> 和 <code>Realm</code>。先来看一下它们之间的关系。</p><p><img src="https://images.gitbook.cn/2dd0f5f0-af4a-11e8-a51c-93c39f2785b1" alt="三大核心组件的关系"></p><ol><li>Subject：认证主体。它包含两个信息：Principals 和 Credentials。看一下这两个信息具体是什么。<blockquote><p>Principals：身份。可以是用户名，邮件，手机号码等等，用来标识一个登录主体身份；<br>Credentials：凭证。常见有密码，数字证书等等。</p></blockquote></li></ol><p>说白了，就是需要认证的东西，最常见的就是用户名密码了，比如用户在登录的时候，Shiro 需要去进行身份认证，就需要 Subject 认证主体。</p><ol start="2"><li><p>SecurityManager：安全管理员。这是 Shiro 架构的核心，它就像 Shiro 内部所有原件的保护伞一样。我们在项目中一般都会配置 SecurityManager，开发人员大部分精力主要是在 Subject 认证主体上面。我们在与 Subject 进行交互的时候，实际上是 SecurityManager 在背后做一些安全操作。</p></li><li><p>Realms：Realms 是一个域，它是连接 Shiro 和具体应用的桥梁，当需要与安全数据交互的时候，比如用户账户、访问控制等，Shiro 就会从一个或多个 Realms 中去查找。我们一般会自己定制 Realm，这在下文会详细说明。</p></li></ol><h4><span id="11-shiro-身份认证">1.1 Shiro 身份认证</span></h4><p>我们来分析一下 Shiro 身份认证的过程，看一下官方的一个认证图：</p><p><img src="https://images.gitbook.cn/f21c53a0-af4f-11e8-a51c-93c39f2785b1" alt="认证过程"></p><p>Step1：应用程序代码在调用 <code>Subject.login(token)</code> 方法后，传入代表最终用户的身份和凭证的 AuthenticationToken 实例 token。 </p><p>Step2：将 Subject 实例委托给应用程序的 SecurityManager（Shiro的安全管理）来开始实际的认证工作。这里开始真正的认证工作了。 </p><p>Step3，4，5：然后 SecurityManager 就会根据具体的 realm 去进行安全认证了。 从图中可以看出，realm 可以自定义（Custom Realm）。</p><h4><span id="12-shiro-权限认证">1.2 Shiro 权限认证</span></h4><p>权限认证，也就是访问控制，即在应用中控制谁能访问哪些资源。在权限认证中，最核心的三个要素是：权限，角色和用户。</p><blockquote><p>权限（permission）：即操作资源的权利，比如访问某个页面，以及对某个模块的数据的添加，修改，删除，查看的权利；<br>角色（role）：指的是用户担任的的角色，一个角色可以有多个权限；<br>用户（user）：在 Shiro 中，代表访问系统的用户，即上面提到的 Subject 认证主体。</p></blockquote><p>它们之间的的关系可以用下图来表示： </p><p><img src="https://images.gitbook.cn/44a68bc0-af75-11e8-85ef-dd986da3511e" alt="用户、角色和权限的关系"></p><p>一个用户可以有多个角色，而不同的角色可以有不同的权限，也可由有相同的权限。比如说现在有三个角色，1是普通角色，2也是普通角色，3是管理员，角色1只能查看信息，角色2只能添加信息，管理员都可以，而且还可以删除信息，类似于这样。</p><h3><span id="2-spring-boot-集成-shiro-过程">2. Spring Boot 集成 Shiro 过程</span></h3><h4><span id="21-依赖导入">2.1 依赖导入</span></h4><p>Spring Boot 2.0.3 集成 Shiro 需要导入如下 starter 依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4><span id="22-数据库表数据初始化">2.2 数据库表数据初始化</span></h4><p>这里主要涉及到三张表：用户表、角色表和权限表，其实在 demo 中，我们完全可以自己模拟一下，不用建表，但是为了更加接近实际情况，我们还是加入 mybatis，来操作数据库。下面是数据库表的脚本。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_role<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>rolename<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色名称'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">4</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_user<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户主键'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>role_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'外键关联role表'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>role_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>t_user_ibfk_1<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>t_role<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">4</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_permission<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>permissionname<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'权限名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>role_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'外键关联role'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>role_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>t_permission_ibfk_1<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>t_role<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8</code></pre><p>其中，t_user，t_role 和 t_permission，分别存储用户信息，角色信息和权限信息，表建立好了之后，我们往表里插入一些测试数据。<br>t_user 表：<br>|id|username|password|role_id|<br>|:–:|:–:|:–:|:–:|<br>|1|csdn1|123456|1|<br>|2|csdn2|123456|2|<br>|3|csdn3|123456|3|</p><p>t_role 表：<br>|id|rolename|<br>|:–:|:–:|<br>|1|admin|<br>|2|teacher|<br>|3|student|</p><p>t_permission 表：<br>|id|permissionname|role_id|<br>|:–:|:–:|:–:|<br>|1|<code>user:*</code>|1|<br>|2|<code>student:*</code>|2|</p><p>解释一下这里的权限：<code>user:*</code>表示权限可以是 <code>user:create</code> 或者其他，<code>*</code> 处表示一个占位符，我们可以自己定义，具体的会在下文 Shiro 配置那里说明。</p><h4><span id="22-自定义-realm">2.2 自定义 Realm</span></h4><p>有了数据库表和数据之后，我们开始自定义 realm，自定义 realm 需要继承 AuthorizingRealm 类，因为该类封装了很多方法，它也是一步步继承自 Realm 类的，继承了 AuthorizingRealm 类后，需要重写两个方法：</p><blockquote><p><code>doGetAuthenticationInfo()</code> 方法：用来验证当前登录的用户，获取认证信息<br><code>doGetAuthorizationInfo()</code> 方法：用来为当前登陆成功的用户授予权限和角色</p></blockquote><p>具体实现如下，相关的解释我放在代码的注释中，这样更加方便直观：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义realm * @author shengwu ni */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取用户名</span>        String username <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> principalCollection<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SimpleAuthorizationInfo authorizationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给该用户设置角色，角色信息存在t_role表中取</span>        authorizationInfo<span class="token punctuation">.</span><span class="token function">setRoles</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给该用户设置权限，权限信息存在t_permission表中取</span>        authorizationInfo<span class="token punctuation">.</span><span class="token function">setStringPermissions</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getPermissions</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> authorizationInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据token获取用户名，如果您不知道该该token怎么来的，先可以不管，下文会解释</span>        String username <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据用户名从数据库中查询该用户</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 把当前用户存到session中</span>            SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 传入用户名和密码进行身份认证，并返回认证信息</span>            AuthenticationInfo authcInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"myRealm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> authcInfo<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面两个方法中可以看出：验证身份的时候是根据用户输入的用户名先从数据库中查出该用户名对应的用户，这时候并没有涉及到密码，也就是说到这一步的时候，即使用户输入的密码不对，也是可以查出来该用户的，然后将该用户的正确信息封装到 authcInfo 中返回给 Shiro，接下来就是Shiro的事了，它会根据这里面的真实信息与用户前台输入的用户名和密码进行校验， 这个时候也要校验密码了，如果校验通过就让用户登录，否则跳转到指定页面。同理，权限验证的时候也是先根据用户名从数据库中获取与该用户名有关的角色和权限，然后封装到 authorizationInfo 中返回给 Shiro。</p><h4><span id="23-shiro-配置">2.3 Shiro 配置</span></h4><p>自定义的 realm 写好了，接下来需要对 Shiro 进行配置了。我们主要配置三个东西：自定义 realm、安全管理器 SecurityManager 和 Shiro 过滤器。如下：</p><p>配置自定义 realm：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ShiroConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 注入自定义的realm     * @return MyRealm     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MyRealm <span class="token function">myAuthRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyRealm myRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====myRealm注册完成====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> myRealm<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置安全管理器 SecurityManager：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ShiroConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 注入安全管理器     * @return SecurityManager     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SecurityManager <span class="token function">securityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将自定义realm加进来</span>        DefaultWebSecurityManager securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token function">myAuthRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====securityManager注册完成===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置 SecurityManager 时，需要将上面的自定义 realm 添加进来，这样的话 Shiro 才会走到自定义的 realm 中。</p><p>配置 Shiro 过滤器：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ShiroConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**     * 注入Shiro过滤器     * @param securityManager 安全管理器     * @return ShiroFilterFactoryBean     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">shiroFilter</span><span class="token punctuation">(</span>SecurityManager securityManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义shiroFactoryBean</span>        ShiroFilterFactoryBean shiroFilterFactoryBean<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置自定义的securityManager</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置默认登录的url，身份认证失败会访问该url</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置成功之后要跳转的链接</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置未授权界面，权限认证失败会访问该url</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setUnauthorizedUrl</span><span class="token punctuation">(</span><span class="token string">"/unauthorized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// LinkedHashMap是有序的，进行顺序拦截器配置</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> filterChainMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 配置可以匿名访问的地址，可以根据实际情况自己添加，放行一些静态资源等，anon表示放行</span>        filterChainMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/css/**"</span><span class="token punctuation">,</span> <span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChainMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/imgs/**"</span><span class="token punctuation">,</span> <span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChainMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/js/**"</span><span class="token punctuation">,</span> <span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChainMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/swagger-*/**"</span><span class="token punctuation">,</span> <span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChainMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/swagger-ui.html/**"</span><span class="token punctuation">,</span> <span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">/</span> 登录url 放行        filterChainMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">/</span> “<span class="token operator">/</span>user<span class="token operator">/</span>admin” 开头的需要身份认证，authc表示要身份认证        filterChainMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/admin*"</span><span class="token punctuation">,</span> <span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">/</span> “<span class="token operator">/</span>user<span class="token operator">/</span>student” 开头的需要角色认证，是“admin”才允许        filterChainMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/student*/**"</span><span class="token punctuation">,</span> <span class="token string">"roles[admin]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// “/user/teacher” 开头的需要权限认证，是“user:create”才允许</span>        filterChainMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/teacher*/**"</span><span class="token punctuation">,</span> <span class="token string">"perms[\"user:create\"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 配置logout过滤器</span>        filterChainMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">,</span> <span class="token string">"logout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置shiroFilterFactoryBean的FilterChainDefinitionMap</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>filterChainMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====shiroFilterFactoryBean注册完成===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> shiroFilterFactoryBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置 Shiro 过滤器时会传入一个安全管理器，可以看出，这是一环套一环，reaml -&gt; SecurityManager -&gt; filter。在过滤器中，我们需要定义一个 shiroFactoryBean，然后将 SecurityManager 添加进来，结合上面代码可以看出，要配置的东西主要有：</p><blockquote><p>默认登录的 url：身份认证失败会访问该 url<br>认证成功之后要跳转的 url<br>权限认证失败会访问该 url<br>需要拦截或者放行的 url：这些都放在一个 map 中</p></blockquote><p>从上述代码中可以看出，在 map 中，针对不同的 url，有不同的权限要求，这里总结一下常用的几个权限。<br>|Filter|说明|<br>|:–:|:–:|<br>|anon|开放权限，可以理解为匿名用户或游客，可以直接访问的|<br>|authc|需要身份认证的|<br>|logout|注销，执行后会直接跳转到 <code>shiroFilterFactoryBean.setLoginUrl();</code> 设置的 url，即登录页面|<br>|roles[admin]|参数可写多个，表示是某个或某些角色才能通过，多个参数时写 roles[“admin，user”]，当有多个参数时必须每个参数都通过才算通过|<br>|perms[user]|参数可写多个，表示需要某个或某些权限才能通过，多个参数时写 perms[“user, admin”]，当有多个参数时必须每个参数都通过才算通过|</p><h4><span id="24-使用-shiro-进行认证">2.4 使用 Shiro 进行认证</span></h4><p>到这里，我们对 Shiro 的准备工作都做完了，接下来开始使用 Shiro 进行认证工作。我们首先来设计几个接口：</p><blockquote><p>接口一： 使用 <code>http://localhost:8080/user/admin</code> 来验证身份认证<br>接口二： 使用 <code>http://localhost:8080/user/student</code> 来验证角色认证<br>接口三： 使用 <code>http://localhost:8080/user/teacher</code> 来验证权限认证<br>接口四： 使用 <code>http://localhost:8080/user/login</code> 来实现用户登录</p></blockquote><p>然后来一下认证的流程：</p><blockquote><p>流程一： 直接访问接口一（此时还未登录），认证失败，跳转到 login.html 页面让用户登录，登录会请求接口四，实现用户登录功能，此时 Shiro 已经保存了用户信息了。<br>流程二： 再次访问接口一（此时用户已经登录），认证成功，跳转到 success.html 页面，展示用户信息。<br>流程三： 访问接口二，测试角色认证是否成功。<br>流程四： 访问接口三，测试权限认证是否成功。</p></blockquote><h5><span id="241-身份-角色-权限认证接口">2.4.1 身份、角色、权限认证接口</span></h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 身份认证测试接口     * @param request     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/admin"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">admin</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object user <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 角色认证测试接口     * @param request     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/student"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">student</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 权限认证测试接口     * @param request     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/teacher"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">teacher</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这三个接口很简单，直接返回到指定页面展示即可，只要认证成功就会正常跳转，如果认证失败，就会跳转到上文 ShrioConfig 中配置的页面进行展示。</p><h5><span id="242-用户登录接口">2.4.2 用户登录接口</span></h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用户登录接口     * @param user user     * @param request request     * @return string     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据用户名和密码创建token</span>        UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取subject认证主体</span>        Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 开始认证，这一步会跳到我们自定义的realm中</span>            subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"用户名或密码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们重点分析一下这个登录接口，首先会根据前端传过来的用户名和密码，创建一个 token，然后使用 SecurityUtils 来创建一个认证主体，接下来开始调用 <code>subject.login(token)</code> 开始进行身份认证了，注意这里传了刚刚创建的 token，就如注释中所述，这一步会跳转到我们自定义的 realm 中，进入 <code>doGetAuthenticationInfo</code> 方法，所以到这里，您就会明白该方法中那个参数 token 了。然后就是上文分析的那样，开始进行身份认证。</p><h5><span id="243-测试一下">2.4.3 测试一下</span></h5><p>最后，启动项目，测试一下：<br>浏览器请求 <code>http://localhost:8080/user/admin</code> 会进行身份认证，因为此时未登录，所以会跳转到 IndexController 中的 <code>/login</code> 接口，然后跳转到 <code>login.html</code> 页面让我们登录，使用用户名密码为 csdn/123456 登录之后，我们在浏览器中请求 <code>http://localhost:8080/user/student</code> 接口，会进行角色认证，因为数据库中 csdn1 的用户角色是 admin，所以和配置中的吻合，认证通过；我们再请求 <code>http://localhost:8080/user/teacher</code> 接口，会进行权限认证，因为数据库中 csdn1 的用户权限为 <code>user:*</code>，满足配置中的 <code>user:create</code>，所以认证通过。</p><p>接下来，我们点退出，系统会注销重新让我们登录，我们使用 csdn2 这个用户来登录，重复上述操作，当在进行角色认证和权限认证这两步时，就认证不通过了，因为数据库中 csdn2 这个用户存的角色和权限与配置中的不同，所以认证不通过。</p><h3><span id="3-总结">3. 总结</span></h3><p>本节主要介绍了 Shiro 安全框架与 Spring Boot 的整合。先介绍了 Shiro 的三大核心组件已经它们的作用；然后介绍了 Shiro 的身份认证、角色认证和权限认证；最后结合代码，详细介绍了 Spring Boot 中是如何整合 Shiro 的，并设计了一套测试流程，逐步分析 Shiro 的工作流程和原理，让读者更直观地体会出 Shiro 的整套工作流程。Shiro 使用的很广泛，希望读者将其掌握，并能运用到实际项目中。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第17课spring-boot中集成lucence">第17课：Spring Boot中集成Lucence</span></h2><h3><span id="1-lucence-和全文检索">1. Lucence 和全文检索</span></h3><p>Lucene 是什么？看一下百度百科：</p><blockquote><p>Lucene是一套用于全文检索和搜寻的开源程式库，由 Apache 软件基金会支持和提供。Lucene 提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在 Java 开发环境里 Lucene 是一个成熟的免费开源工具。就其本身而言，Lucene 是当前以及最近几年最受欢迎的免费 Java 信息检索程序库。——《百度百科》</p></blockquote><h4><span id="11-全文检索">1.1 全文检索</span></h4><p>这里提到了全文检索的概念，我们先来分析一下什么是全文检索，理解了全文检索之后，再理解 Lucene 的原理就非常简单了。  </p><p>何为全文检索？举个例子，比如现在要在一个文件中查找某个字符串，最直接的想法就是从头开始检索，查到了就OK，这种对于小数据量的文件来说，很实用，但是对于大数据量的文件来说，就有点吃力了。或者说找包含某个字符串的文件，也是这样，如果在一个拥有几十个 G 的硬盘中找那效率可想而知，是很低的。   </p><p>文件中的数据是属于非结构化数据，也就是说它没有什么结构可言，要解决上面提到的效率问题，首先我们得将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对这些有一定结构的数据进行搜索，从而达到搜索相对较快的目的。这就叫全文搜索。即先建立索引，再对索引进行搜索的过程。 </p><h4><span id="12-lucene-建立索引的方式">1.2 Lucene 建立索引的方式</span></h4><p>那么 Lucene 中是如何建立索引的呢？假设现在有两篇文章，内容如下：</p><blockquote><p>文章1的内容为：Tom lives in Guangzhou, I live in Guangzhou too.<br>文章2的内容为：He once lived in Shanghai.</p></blockquote><p>首先第一步是将文档传给分词组件（Tokenizer），分词组件会将文档分成一个个单词，并去除标点符号和停词。所谓的停词指的是没有特别意义的词，比如英文中的 a，the，too 等。经过分词后，得到词元（Token） 。如下：</p><blockquote><p>文章1经过分词后的结果：<code>[Tom]</code> <code>[lives]</code> <code>[Guangzhou]</code> <code>[I]</code> <code>[live]</code> <code>[Guangzhou]</code><br>文章2经过分词后的结果：<code>[He]</code> <code>[lives]</code> <code>[Shanghai]</code></p></blockquote><p>然后将词元传给语言处理组件（Linguistic Processor），对于英语，语言处理组件一般会将字母变为小写，将单词缩减为词根形式，如 ”lives” 到 ”live” 等，将单词转变为词根形式，如 ”drove” 到 ”drive” 等。然后得到词（Term）。如下：</p><blockquote><p>文章1经过处理后的结果：<code>[tom]</code> <code>[live]</code> <code>[guangzhou]</code> <code>[i]</code> <code>[live]</code> <code>[guangzhou]</code><br>文章2经过处理后的结果：<code>[he]</code> <code>[live]</code> <code>[shanghai]</code></p></blockquote><p>最后将得到的词传给索引组件（Indexer），索引组件经过处理，得到下面的索引结构：</p><table><thead><tr><th align="center">关键词</th><th align="center">文章号[出现频率]</th><th align="center">出现位置</th></tr></thead><tbody><tr><td align="center">guangzhou</td><td align="center">1[2]</td><td align="center">3,6</td></tr><tr><td align="center">he</td><td align="center">2[1]</td><td align="center">1</td></tr><tr><td align="center">i</td><td align="center">1[1]</td><td align="center">4</td></tr><tr><td align="center">live</td><td align="center">1[2],2[1]</td><td align="center">2,5,2</td></tr><tr><td align="center">shanghai</td><td align="center">2[1]</td><td align="center">3</td></tr><tr><td align="center">tom</td><td align="center">1[1]</td><td align="center">1</td></tr></tbody></table><p>以上就是Lucene 索引结构中最核心的部分。它的关键字是按字符顺序排列的，因此 Lucene 可以用二元搜索算法快速定位关键词。实现时 Lucene 将上面三列分别作为词典文件（Term Dictionary）、频率文件（frequencies）和位置文件（positions）保存。其中词典文件不仅保存有每个关键词，还保留了指向频率文件和位置文件的指针，通过指针可以找到该关键字的频率信息和位置信息。<br>搜索的过程是先对词典二元查找、找到该词，通过指向频率文件的指针读出所有文章号，然后返回结果，然后就可以在具体的文章中根据出现位置找到该词了。所以 Lucene 在第一次建立索引的时候可能会比较慢，但是以后就不需要每次都建立索引了，就快了。</p><p>理解了 Lucene 的分词原理，接下来我们在 Spring Boot 中集成 Lucene 并实现索引和搜索的功能。</p><h3><span id="2-spring-boot-中集成-lucence">2. Spring Boot 中集成 Lucence</span></h3><h4><span id="21-依赖导入">2.1 依赖导入</span></h4><p>首先需要导入 Lucene 的依赖，它的依赖有好几个，如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Lucence核心包 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.lucene<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lucene-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Lucene查询解析包 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.lucene<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lucene-queryparser<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 常规的分词（英文） --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.lucene<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lucene-analyzers-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--支持分词高亮  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.lucene<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lucene-highlighter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--支持中文分词  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.lucene<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lucene-analyzers-smartcn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>最后一个依赖是用来支持中文分词的，因为默认是支持英文的。那个高亮的分词依赖是最后我要做一个搜索，然后将搜到的内容高亮显示，模拟当前互联网上的做法，大家可以运用到实际项目中去。</p><h4><span id="22-快速入门">2.2 快速入门</span></h4><p>根据上文的分析，全文检索有两个步骤，先建立索引，再检索。所以为了测试这个过程，我新建两个 java 类，一个用来建立索引的，另一个用来检索。</p><h5><span id="221-建立索引">2.2.1 建立索引</span></h5><p>我们自己弄几个文件，放到 <code>D:\lucene\data</code> 目录下，新建一个 Indexer 类来实现建立索引功能。首先在构造方法中初始化标准分词器和写索引实例。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Indexer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 写索引实例     */</span>    <span class="token keyword">private</span> IndexWriter writer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 构造方法，实例化IndexWriter     * @param indexDir     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token function">Indexer</span><span class="token punctuation">(</span>String indexDir<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Directory dir <span class="token operator">=</span> FSDirectory<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>indexDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//标准分词器，会自动去掉空格啊，is a the等单词</span>        Analyzer analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将标准分词器配到写索引的配置中</span>        IndexWriterConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriterConfig</span><span class="token punctuation">(</span>analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化写索引对象</span>        writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriter</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在构造放发中传一个存放索引的文件夹路径，然后构建标准分词器（这是英文的），再使用标准分词器来实例化写索引对象。接下来就开始建立索引了，我将解释放到代码注释里，方便大家跟进。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 索引指定目录下的所有文件 * @param dataDir * @return * @throws Exception */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexAll</span><span class="token punctuation">(</span>String dataDir<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取该路径下的所有文件</span>    File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dataDir<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用下面的indexFile方法，对每个文件进行索引</span>            <span class="token function">indexFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回索引的文件数</span>    <span class="token keyword">return</span> writer<span class="token punctuation">.</span><span class="token function">numDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 索引指定的文件 * @param file * @throws Exception */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">indexFile</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"索引文件的路径："</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用下面的getDocument方法，获取该文件的document</span>    Document doc <span class="token operator">=</span> <span class="token function">getDocument</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将doc添加到索引中</span>    writer<span class="token punctuation">.</span><span class="token function">addDocument</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 获取文档，文档里再设置每个字段，就类似于数据库中的一行记录 * @param file * @return * @throws Exception */</span><span class="token keyword">private</span> Document <span class="token function">getDocument</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    Document doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//开始添加字段</span>    <span class="token comment" spellcheck="true">//添加内容</span>    doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">"contents"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加文件名，并把这个字段存到索引文件里</span>    doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Field<span class="token punctuation">.</span>Store<span class="token punctuation">.</span>YES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加文件路径</span>    doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">"fullPath"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Field<span class="token punctuation">.</span>Store<span class="token punctuation">.</span>YES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> doc<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样就建立好索引了，我们在该类中写一个 main 方法测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//索引保存到的路径</span>        String indexDir <span class="token operator">=</span> <span class="token string">"D:\\lucene"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要索引的文件数据存放的目录</span>        String dataDir <span class="token operator">=</span> <span class="token string">"D:\\lucene\\data"</span><span class="token punctuation">;</span>        Indexer indexer <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> indexedNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录索引开始时间</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 开始构建索引</span>            indexer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Indexer</span><span class="token punctuation">(</span>indexDir<span class="token punctuation">)</span><span class="token punctuation">;</span>            indexedNum <span class="token operator">=</span> indexer<span class="token punctuation">.</span><span class="token function">indexAll</span><span class="token punctuation">(</span>dataDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> indexer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    indexer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//记录索引结束时间</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"索引耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"共索引了"</span> <span class="token operator">+</span> indexedNum <span class="token operator">+</span> <span class="token string">"个文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>我搞了两个 tomcat 相关的文件放到 <code>D:\lucene\data</code> 下了，执行完之后，看到控制台输出：</p><pre><code>索引文件的路径：D:\lucene\data\catalina.properties索引文件的路径：D:\lucene\data\logging.properties索引耗时882毫秒共索引了2个文件</code></pre><p>然后我们去 <code>D:\lucene\</code> 目录下可以看到一些索引文件，这些文件不能删除，删除了就需要重新构建索引，否则没了索引，就无法去检索内容了。</p><h5><span id="222-检索内容">2.2.2 检索内容</span></h5><p>上面把这两个文件的索引建立好了，接下来我们就可以写检索程序了，在这两个文件中查找特定的词。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Searcher</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span>String indexDir<span class="token punctuation">,</span> String q<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取要查询的路径，也就是索引所在的位置</span>        Directory dir <span class="token operator">=</span> FSDirectory<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>indexDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IndexReader reader <span class="token operator">=</span> DirectoryReader<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建IndexSearcher</span>        IndexSearcher searcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexSearcher</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//标准分词器，会自动去掉空格啊，is a the等单词</span>        Analyzer analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询解析器</span>        QueryParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryParser</span><span class="token punctuation">(</span><span class="token string">"contents"</span><span class="token punctuation">,</span> analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过解析要查询的String，获取查询对象，q为传进来的待查的字符串</span>        Query query <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录索引开始时间</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开始查询，查询前10条数据，将记录保存在docs中</span>        TopDocs docs <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录索引结束时间</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配"</span> <span class="token operator">+</span> q <span class="token operator">+</span> <span class="token string">"共耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询到"</span> <span class="token operator">+</span> docs<span class="token punctuation">.</span>totalHits <span class="token operator">+</span> <span class="token string">"条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出每条查询结果</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ScoreDoc scoreDoc <span class="token operator">:</span> docs<span class="token punctuation">.</span>scoreDocs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//scoreDoc.doc相当于docID,根据这个docID来获取文档</span>            Document doc <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>scoreDoc<span class="token punctuation">.</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//fullPath是刚刚建立索引的时候我们定义的一个字段，表示路径。也可以取其他的内容，只要我们在建立索引时有定义即可。</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"fullPath"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ok，这样我们检索的代码就写完了，每一步解释我写在代码中的注释上了，下面写个 main 方法来测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String indexDir <span class="token operator">=</span> <span class="token string">"D:\\lucene"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询这个字符串</span>    String q <span class="token operator">=</span> <span class="token string">"security"</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">search</span><span class="token punctuation">(</span>indexDir<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查一下 <code>security</code> 这个字符串，执行一下看控制台打印的结果：</p><pre><code>匹配security共耗时23毫秒查询到1条记录D:\lucene\data\catalina.properties</code></pre><p>可以看出，耗时了23毫秒在两个文件中找到了 security 这个字符串，并输出了文件的名称。上面的代码我写的很详细，这个代码已经比较全了，可以用在生产环境上。</p><h4><span id="23-中文分词检索高亮实战">2.3 中文分词检索高亮实战</span></h4><p>上文已经写了建立索引和检索的代码，但是在实际项目中，我们往往是结合页面做一些查询结果的展示，比如我要查某个关键字，查到了之后，将相关的信息点展示出来，并将查询的关键字高亮等等。这种需求在实际项目中非常常见，而且大多数网站中都会有这种效果。所以这一小节我们就使用 Lucene 来实现这种效果。</p><h5><span id="231-中文分词">2.3.1 中文分词</span></h5><p>我们新建一个 ChineseIndexer 类来建立中文索引，建立过程和英文索引一样的，不同的地方在于使用的是中文分词器。除此之外，这里我们不用通过读取文件去建立索引，我们模拟一下用字符串来建立，因为在实际项目中，绝大部分情况是获取到一些文本字符串，然后根据一些关键字去查询相关内容等等。代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChineseIndexer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 存放索引的位置     */</span>    <span class="token keyword">private</span> Directory dir<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//准备一下用来测试的数据</span>    <span class="token comment" spellcheck="true">//用来标识文档</span>    <span class="token keyword">private</span> Integer ids<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String citys<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">,</span> <span class="token string">"青岛"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String descs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"上海是个繁华的城市。"</span><span class="token punctuation">,</span>            <span class="token string">"南京是一个文化的城市南京，简称宁，是江苏省会，地处中国东部地区，长江下游，濒江近海。全市下辖11个区，总面积6597平方公里，2013年建成区面积752.83平方公里，常住人口818.78万，其中城镇人口659.1万人。[1-4] “江南佳丽地，金陵帝王州”，南京拥有着6000多年文明史、近2600年建城史和近500年的建都史，是中国四大古都之一，有“六朝古都”、“十朝都会”之称，是中华文明的重要发祥地，历史上曾数次庇佑华夏之正朔，长期是中国南方的政治、经济、文化中心，拥有厚重的文化底蕴和丰富的历史遗存。[5-7] 南京是国家重要的科教中心，自古以来就是一座崇文重教的城市，有“天下文枢”、“东南第一学”的美誉。截至2013年，南京有高等院校75所，其中211高校8所，仅次于北京上海；国家重点实验室25所、国家重点学科169个、两院院士83人，均居中国第三。[8-10] 。"</span><span class="token punctuation">,</span>            <span class="token string">"青岛是一个美丽的城市。"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 生成索引     * @param indexDir     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">index</span><span class="token punctuation">(</span>String indexDir<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        dir <span class="token operator">=</span> FSDirectory<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>indexDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先调用 getWriter 获取IndexWriter对象</span>        IndexWriter writer <span class="token operator">=</span> <span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ids<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Document doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把上面的数据都生成索引，分别用id、city和desc来标识</span>            doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IntField</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> ids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> Field<span class="token punctuation">.</span>Store<span class="token punctuation">.</span>YES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringField</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">,</span> citys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> Field<span class="token punctuation">.</span>Store<span class="token punctuation">.</span>YES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">"desc"</span><span class="token punctuation">,</span> descs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> Field<span class="token punctuation">.</span>Store<span class="token punctuation">.</span>YES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//添加文档</span>            writer<span class="token punctuation">.</span><span class="token function">addDocument</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//close了才真正写到文档中</span>        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取IndexWriter实例     * @return     * @throws Exception     */</span>    <span class="token keyword">private</span> IndexWriter <span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用中文分词器</span>        SmartChineseAnalyzer analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmartChineseAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将中文分词器配到写索引的配置中</span>        IndexWriterConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriterConfig</span><span class="token punctuation">(</span>analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化写索引对象</span>        IndexWriter writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriter</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> writer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">ChineseIndexer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"D:\\lucene2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里我们用 id、city、desc 分别代表 id、城市名称和城市描述，用他们作为关键字来建立索引，后面我们获取内容的时候，主要来获取城市描述。南京的描述我故意写的长一点，因为下文检索的时候，根据不同的关键字会检索到不同部分的信息，有个权重的概念在里面。<br>然后执行一下 main 方法，将索引保存到 <code>D:\lucene2\</code> 中。 </p><h5><span id="232-中文分词查询">2.3.2 中文分词查询</span></h5><p>中文分词查询代码逻辑和默认的查询差不多，有一些区别在于，我们需要将查询出来的关键字标红加粗等需要处理，需要计算出一个得分片段，这是什么意思呢？比如我搜索 “南京文化” 跟搜索 “南京文明”，这两个搜索结果应该根据关键字出现的位置，返回的结果不一样才对，这在下文会测试。我们先看一下代码和注释：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChineseSearch</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ChineseSearch<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">search</span><span class="token punctuation">(</span>String indexDir<span class="token punctuation">,</span> String q<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取要查询的路径，也就是索引所在的位置</span>        Directory dir <span class="token operator">=</span> FSDirectory<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>indexDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IndexReader reader <span class="token operator">=</span> DirectoryReader<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>        IndexSearcher searcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexSearcher</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用中文分词器</span>        SmartChineseAnalyzer analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmartChineseAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由中文分词器初始化查询解析器</span>        QueryParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryParser</span><span class="token punctuation">(</span><span class="token string">"desc"</span><span class="token punctuation">,</span> analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过解析要查询的String，获取查询对象</span>        Query query <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录索引开始时间</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开始查询，查询前10条数据，将记录保存在docs中</span>        TopDocs docs <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录索引结束时间</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"匹配{}共耗时{}毫秒"</span><span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"查询到{}条记录"</span><span class="token punctuation">,</span> docs<span class="token punctuation">.</span>totalHits<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果不指定参数的话，默认是加粗，即&lt;b>&lt;b/></span>        SimpleHTMLFormatter simpleHTMLFormatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleHTMLFormatter</span><span class="token punctuation">(</span><span class="token string">"&lt;b>&lt;font color=red>"</span><span class="token punctuation">,</span><span class="token string">"&lt;/font>&lt;/b>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据查询对象计算得分，会初始化一个查询结果最高的得分</span>        QueryScorer scorer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryScorer</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据这个得分计算出一个片段</span>        Fragmenter fragmenter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleSpanFragmenter</span><span class="token punctuation">(</span>scorer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将这个片段中的关键字用上面初始化好的高亮格式高亮</span>        Highlighter highlighter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Highlighter</span><span class="token punctuation">(</span>simpleHTMLFormatter<span class="token punctuation">,</span> scorer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置一下要显示的片段</span>        highlighter<span class="token punctuation">.</span><span class="token function">setTextFragmenter</span><span class="token punctuation">(</span>fragmenter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出每条查询结果</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ScoreDoc scoreDoc <span class="token operator">:</span> docs<span class="token punctuation">.</span>scoreDocs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//scoreDoc.doc相当于docID,根据这个docID来获取文档</span>            Document doc <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>scoreDoc<span class="token punctuation">.</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"city:{}"</span><span class="token punctuation">,</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"desc:{}"</span><span class="token punctuation">,</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"desc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String desc <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//显示高亮</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>desc <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                TokenStream tokenStream <span class="token operator">=</span> analyzer<span class="token punctuation">.</span><span class="token function">tokenStream</span><span class="token punctuation">(</span><span class="token string">"desc"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String summary <span class="token operator">=</span> highlighter<span class="token punctuation">.</span><span class="token function">getBestFragment</span><span class="token punctuation">(</span>tokenStream<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"高亮后的desc:{}"</span><span class="token punctuation">,</span> summary<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>summary<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>每一步的注释我写的很详细，在这就不赘述了。接下来我们来测试一下效果。</p><h5><span id="233-测试一下">2.3.3 测试一下</span></h5><p>这里我们使用 thymeleaf 来写个简单的页面来展示获取到的数据，并高亮展示。在 controller 中我们指定索引的目录和需要查询的字符串，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/lucene"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 索引所在的目录</span>        String indexDir <span class="token operator">=</span> <span class="token string">"D:\\lucene2"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 要查询的字符</span><span class="token comment" spellcheck="true">//        String q = "南京文明";</span>        String q <span class="token operator">=</span> <span class="token string">"南京文化"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> ChineseSearch<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>indexDir<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>            model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"result"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>直接返回到 result.html 页面，该页面主要来展示一下 model 中的数据即可。</p><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>desc : ${list}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${desc}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这里注意一下，不能使用 <code>th:test</code>，否则字符串中的 html 标签都会被转义，不会被渲染到页面。下面启动服务，在浏览器中输入 <code>http://localhost:8080/lucene/test</code>，测试一下效果，我们搜索的是 “南京文化”。</p><p><img src="https://images.gitbook.cn/83b3f810-b377-11e8-88bf-23cb78d1fb4f" alt="南京文化"></p><p>再将 controller 中的搜索关键字改成 “南京文明”，看下命中的效果。</p><p><img src="https://images.gitbook.cn/8ef8a4a0-b377-11e8-911d-27cc5f059829" alt="南京文明"></p><p>可以看出，不同的关键词，它会计算一个得分片段，也就是说不同的关键字会命中不同位置的内容，然后将关键字根据我们自己设定的形式高亮显示。从结果中可以看出，Lucene 也可以很智能的将关键字拆分命中，这在实际项目中会很好用。</p><h3><span id="3-总结">3. 总结</span></h3><p>本节课首先详细的分析了全文检索的理论规则，然后结合 Lucene，系统的讲述了在 Spring Boot 的集成步骤，首先快速带领大家从直观上感受 Lucene 如何建立索引已经如果检索，其次通过中文检索的具体实例，展示了 Lucene 在全文检索中的广泛应用。Lucene 不难，主要就是步骤比较多，代码不用死记硬背，拿到项目中根据实际情况做对应的修改即可。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="第18课spring-boot搭建实际项目开发中的架构">第18课：Spring Boot搭建实际项目开发中的架构</span></h2><p>前面的课程中，我主要给大家讲解了 Spring Boot 中常用的一些技术点，这些技术点在实际项目中可能不会全部用得到，因为不同的项目可能使用的技术不同，但是希望大家都能掌握如何使用，并能自己根据实际项目中的需求进行相应的扩展。</p><p>不知道大家了不了解单片机，单片机里有个最小系统，这个最小系统搭建好了之后，就可以在此基础上进行人为的扩展。这节课我们要做的就是搭建一个 “Spring Boot 最小系统架构” 。拿着这个架构，可以在此基础上根据实际需求做相应的扩展。</p><p>从零开始搭建一个环境，主要要考虑几点：统一封装的数据结构、可调式的接口、json的处理、模板引擎的使用（本文不写该项，因为现在大部分项目都前后端分离了，但是考虑到也还有非前后端分离的项目，所以我在源代码里也加上了 thymeleaf）、持久层的集成、拦截器（这个也是可选的）和全局异常处理。一般包括这些东西的话，基本上一个 Spring Boot 项目环境就差不多了，然后就是根据具体情况来扩展了。</p><p>结合前面的课程和以上的这些点，本节课手把手带领大家搭建一个实际项目开发中可用的 Spring Boot 架构。整个项目工程如下图所示，学习的时候，可以结合我的源码，这样效果会更好。</p><p><img src="https://images.gitbook.cn/6f23c980-b89e-11e8-87f1-559c9b456754" alt="工程架构"></p><h3><span id="1-统一的数据封装">1. 统一的数据封装</span></h3><p>由于封装的 json 数据的类型不确定，所以在定义统一的 json 结构时，我们需要用到泛型。统一的 json 结构中属性包括数据、状态码、提示信息即可，构造方法可以根据实际业务需求做相应的添加即可，一般来说，应该有默认的返回结构，也应该有用户指定的返回结构。如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 统一返回对象 * @author shengwu ni * @param &lt;T> */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonResult</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">private</span> String code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 若没有数据返回，默认状态码为0，提示信息为：操作成功！     */</span>    <span class="token keyword">public</span> <span class="token function">JsonResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"操作成功！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 若没有数据返回，可以人为指定状态码和提示信息     * @param code     * @param msg     */</span>    <span class="token keyword">public</span> <span class="token function">JsonResult</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有数据返回时，状态码为0，默认提示信息为：操作成功！     * @param data     */</span>    <span class="token keyword">public</span> <span class="token function">JsonResult</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"操作成功！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有数据返回，状态码为0，人为指定提示信息     * @param data     * @param msg     */</span>    <span class="token keyword">public</span> <span class="token function">JsonResult</span><span class="token punctuation">(</span>T data<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 使用自定义异常作为参数传递状态码和提示信息     * @param msgEnum     */</span>    <span class="token keyword">public</span> <span class="token function">JsonResult</span><span class="token punctuation">(</span>BusinessMsgEnum msgEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> msgEnum<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msgEnum<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 省去get和set方法</span><span class="token punctuation">}</span></code></pre><p>大家可以根据自己项目中所需要的一些东西，合理的修改统一结构中的字段信息。</p><h3><span id="2-json的处理">2. json的处理</span></h3><p>Json 处理工具很多，比如阿里巴巴的 fastjson，不过 fastjson 对有些未知类型的 null 无法转成空字符串，这可能是 fastjson 自身的缺陷，可扩展性也不是太好，但是使用起来方便，使用的人也蛮多的。这节课里面我们主要集成 Spring Boot 自带的 jackson。主要是对 jackson 做一下对 null 的配置即可，然后就可以在项目中使用了。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * jacksonConfig * @author shengwu ni */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ObjectMapper <span class="token function">jacksonObjectMapper</span><span class="token punctuation">(</span>Jackson2ObjectMapperBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ObjectMapper objectMapper <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createXmlMapper</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">getSerializerProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNullValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsonSerializer</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> JsonGenerator jsonGenerator<span class="token punctuation">,</span> SerializerProvider serializerProvider<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                jsonGenerator<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> objectMapper<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里先不测试，等下面 swagger2 配置好了之后，我们一起来测试一下。</p><h3><span id="3-swagger2在线可调式接口">3. swagger2在线可调式接口</span></h3><p>有了 swagger，开发人员不需要给其他人员提供接口文档，只要告诉他们一个 Swagger 地址，即可展示在线的 API 接口文档，除此之外，调用接口的人员还可以在线测试接口数据，同样地，开发人员在开发接口时，同样也可以利用 Swagger 在线接口文档测试接口数据，这给开发人员提供了便利。使用 swagger 需要对其进行配置：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * swagger配置 * @author shengwu ni */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 指定构建api文档的详细信息的方法：apiInfo()</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 指定要生成api接口的包路径，这里把controller作为包路径，生成controller中的所有接口</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.itcodai.course18.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 构建api文档的详细信息     * @return     */</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置页面标题</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Spring Boot搭建实际项目中开发的架构"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置接口描述</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"一起学Spring Boot第18课"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置联系方式</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token string">"倪升武，"</span> <span class="token operator">+</span> <span class="token string">"微信公众号：程序员私房菜"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置版本</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 构建</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>到这里，可以先测试一下，写一个 Controller，弄一个静态的接口测试一下上面集成的内容。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户信息接口"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser/{id}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"根据用户唯一标识获取用户信息"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonResult<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户唯一标识"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"倪升武"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后启动项目，在浏览器中输入 <code>localhost:8080/swagger-ui.html</code> 即可看到 swagger 接口文档页面，调用一下上面这个接口，即可看到返回的 json 数据。</p><h3><span id="4-持久层集成">4. 持久层集成</span></h3><p>每个项目中是必须要有持久层的，与数据库交互，这里我们主要来集成 mybatis，集成 mybatis 首先要在 application.yml 中进行配置。</p><pre class=" language-yml"><code class="language-yml"># 服务端口号server:  port: 8080# 数据库地址datasource:  url: localhost:3306/blog_testspring:  datasource: # 数据库配置    driver-class-name: com.mysql.jdbc.Driver    url: jdbc:mysql://${datasource.url}?useSSL=false&useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&autoReconnect=true&failOverReadOnly=false&maxReconnects=10    username: root    password: 123456    hikari:      maximum-pool-size: 10 # 最大连接池数      max-lifetime: 1770000mybatis:  # 指定别名设置的包为所有entity  type-aliases-package: com.itcodai.course18.entity  configuration:    map-underscore-to-camel-case: true # 驼峰命名规范  mapper-locations: # mapper映射文件位置    - classpath:mapper/*.xml</code></pre><p>配置好了之后，接下来我们来写一下 dao 层，实际中我们使用注解比较多，因为比较方便，当然也可以使用 xml 的方式，甚至两种同时使用都行，这里我们主要使用注解的方式来集成，关于 xml 的方式，大家可以查看前面课程，实际中根据项目情况来定。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"user_name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    User <span class="token function">getUser</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id} and user_name=#{name}"</span><span class="token punctuation">)</span>    User <span class="token function">getUserByIdAndName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>关于 service 层我就不在文章中写代码了，大家可以结合我的源代码学习，这一节主要带领大家来搭建一个 Spring Boot 空架构。最后别忘了在启动类上添加注解扫描 <code>@MapperScan(&quot;com.itcodai.course18.dao&quot;)</code></p><h3><span id="5-拦截器">5. 拦截器</span></h3><p>拦截器在项目中使用的是非常多的（但不是绝对的），比如拦截一些置顶的 url，做一些判断和处理等等。除此之外，还需要将常用的静态页面或者 swagger 页面放行，不能将这些静态资源给拦截了。首先先自定义一个拦截器。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MyInterceptor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行方法之前执行(Controller方法调用之前)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后将自定义的拦截器加入到拦截器配置中。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实现WebMvcConfigurer不会导致静态资源被拦截</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 拦截所有url</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 放行swagger</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/swagger-resources/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 Spring Boot 中，我们通常会在如下目录里存放一些静态资源：</p><blockquote><p>classpath:/static<br>classpath:/public<br>classpath:/resources<br>classpath:/META-INF/resources  </p></blockquote><p>上面代码中配置的 <code>/**</code> 是对所有 url 都进行了拦截，但我们实现了 WebMvcConfigurer 接口，不会导致 Spring Boot 对上面这些目录下的静态资源实施拦截。但是我们平时访问的 swagger 会被拦截，所以要将其放行。swagger 页面在 swagger-resources 目录下，放行该目录下所有文件即可。</p><p>然后在浏览器中输入一下 swagger 页面，若能正常显示 swagger，说明放行成功。同时可以根据后台打印的日志判断代码执行的顺序。</p><h3><span id="6-全局异常处理">6. 全局异常处理</span></h3><p>全局异常处理是每个项目中必须用到的东西，在具体的异常中，我们可能会做具体的处理，但是对于没有处理的异常，一般会有一个统一的全局异常处理。在异常处理之前，最好维护一个异常提示信息枚举类，专门用来保存异常提示信息的。如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> BusinessMsgEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** 参数异常 */</span>    <span class="token function">PARMETER_EXCEPTION</span><span class="token punctuation">(</span><span class="token string">"102"</span><span class="token punctuation">,</span> <span class="token string">"参数异常!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** 等待超时 */</span>    <span class="token function">SERVICE_TIME_OUT</span><span class="token punctuation">(</span><span class="token string">"103"</span><span class="token punctuation">,</span> <span class="token string">"服务调用超时！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** 参数过大 */</span>    <span class="token function">PARMETER_BIG_EXCEPTION</span><span class="token punctuation">(</span><span class="token string">"102"</span><span class="token punctuation">,</span> <span class="token string">"输入的图片数量不能超过50张!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** 500 : 发生异常 */</span>    <span class="token function">UNEXPECTED_EXCEPTION</span><span class="token punctuation">(</span><span class="token string">"500"</span><span class="token punctuation">,</span> <span class="token string">"系统发生异常，请联系管理员！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 消息码     */</span>    <span class="token keyword">private</span> String code<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 消息内容     */</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">BusinessMsgEnum</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在全局统一异常处理类中，我们一般会对自定义的业务异常最先处理，然后去处理一些常见的系统异常，最后会来一个一劳永逸（Exception 异常）。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>GlobalExceptionHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 拦截业务异常，返回业务异常信息     * @param ex     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>BusinessErrorException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>value <span class="token operator">=</span> HttpStatus<span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonResult <span class="token function">handleBusinessError</span><span class="token punctuation">(</span>BusinessErrorException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String code <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 空指针异常     * @param ex NullPointerException     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>NullPointerException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>value <span class="token operator">=</span> HttpStatus<span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonResult <span class="token function">handleTypeMismatchException</span><span class="token punctuation">(</span>NullPointerException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"空指针异常，{}"</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span><span class="token string">"500"</span><span class="token punctuation">,</span> <span class="token string">"空指针异常了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 系统异常 预期以外异常     * @param ex     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>value <span class="token operator">=</span> HttpStatus<span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonResult <span class="token function">handleUnexpectedServer</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"系统异常："</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span>BusinessMsgEnum<span class="token punctuation">.</span>UNEXPECTED_EXCEPTION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中，BusinessErrorException 是自定义的业务异常，继承一下 RuntimeException 即可，具体可以看我的源代码，文章中就不贴代码了。<br>在 UserController 中有个 testException 方法，用来测试全局异常的，打开 swagger 页面，调用一下该接口，可以看出返回用户提示信息：”系统发生异常，请联系管理员！“。当然了，实际情况中，需要根据不同的业务提示不同的信息。</p><h3><span id="7-总结">7. 总结</span></h3><p>本文主要手把手带领大家快速搭建一个项目中可以使用的 Spring Boot 空架构，主要从统一封装的数据结构、可调式的接口、json的处理、模板引擎的使用（代码中体现）、持久层的集成、拦截器和全局异常处理。一般包括这些东西的话，基本上一个 Spring Boot 项目环境就差不多了，然后就是根据具体情况来扩展了。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p><h2><span id="附作者信息">附：作者信息</span></h2><p>本课程首发于 CSDN GitChat 达人课，该文档为课程详细笔记<br>作者：倪升武（武哥）<br>微信公众号：武哥聊编程</p><blockquote><p>版权申明：本课程已经免费，但版权属于 CSDN 和作者，未经允许，不得将该笔记用于商业用途，否则追究法律责任。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink学习笔记</title>
      <link href="/2021/12/05/flink-xue-xi-bi-ji/"/>
      <url>/2021/12/05/flink-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2><span id="apache-flink学习笔记">Apache <strong>Flink学习笔记</strong></span></h2><hr><p>[TOC]</p><h2><span id="0序言"><strong>0.序言</strong></span></h2><p>数据时代，从数据中获取业务需要的信息才能创造价值，这类工作就需要计算框架来完成。<strong>传统的数据处理流程中，总是先收集数据，然后将数据放到DB中。当人们需要的时候通过DB对数据做query，得到答案或进行相关的处理。</strong>这样看起来虽然非常合理，但是结果却非常紧凑，尤其是在一些实时搜索应用环境中的某些具体问题，类似于MapReduce方式的离线处理并不能很好地解决。</p><p>基于此，一种新的数据计算结构—流计算方式出现了，它可以很好地对大规模流动数据在不断变化的运动过程中实时地进行分析，捕捉到可能有用的信息，并把结果发送到下一计算节点。</p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210731222818942.png" alt="image-20210731222818942"></p><p>时下，对信息高时效性、可操作性的需求不断增长，这要求软件系统在更少的时间内能处理更多的数据。<strong>传统的大数据处理模型将在线事务处理和离线分析从时序上将两者完全分割开来，但显然该架构目前已经越来越落后于人们对于大数据实时处理的需求。</strong></p><p>流计算的产生即来源于对于上述数据加工时效性的严苛需求:数据的业务价值随着时间的流失而迅速降低，因此在数据发生后必须尽快对其进行计算和处理。而传统的大数据处理模式对于数据加工均遵循传统日清日毕模式，即以小时甚至以天为计算周期对当前数据进行累计并处理，显然这类处理方式无法满足数据实时计算的需求。在诸如实时大数据分析、风控预警、实时预测、金融交易等诸多业务场景领域，批量(或者说离线)处理对于上述对于数据处理时延要求苛刻的应用领域而言是完全无法胜任其业务需求的。而<strong>流计算作为一类针对流数据的实时计算模型，可有效地缩短全链路数据流时延、实时化计算逻辑、平摊计算成本，最终有效满足实时处理大数据的业务需求</strong>。</p><p>通常而言，流计算具备<strong>三大类特点</strong>：</p><p><strong>实时(realtime)且无界(unbounded)的数据流</strong>。流计算面对计算的 是实时且流式的，流数据是按照时间发生顺序地被流计算订阅和消费。且由于数据发生的持续性，数据流将长久且持续地集成进入流计算系统。例如，对于网站的访问点击日志流，只要网站不关闭其点击日志流将一直不停产生并进入流计算系统。因此，对于流系统而言，数据是实时且不终止(无界)的。</p><p><strong>持续(continuos)且高效的计算。</strong>流计算是一种”事件触发”的计算模式，触发源就是上述的无界流式数据。一旦有新的流数据进入流计算，流计算立刻发起并进行一次计算任务，因此整个流计算是持续进行的计算。</p><p><strong>流式(streaming)且实时的数据集成。</strong>流数据触发一次流计算的计算结果，可以被直接写入目的数据存储，例如将计算后的报表数据直接写入RDS进行报表展示。因此流数据的计算结果可以类似流式数据一样持续写入目的数据存储。</p><p>==Storm==</p><p>Storm是一个分布式的、容错的实时计算系统，做作为最早的一个实时计算框架，早期应用于各大互联网公司。在Storm出现之前，进行实时处理是非常痛苦的事情，我们主要的时间都花在关注往哪里发消息，从哪里接收消息，消息如何序列化，真正的业务逻辑只占了源代码的一小部分。一个应用程序的逻辑运行在很多worker上，但这些worker需要各自单独部署，还需要部署消息队列。最大问题是系统很脆弱，而且不是容错的：需要自己保证消息队列和worker进程工作正常。Storm具有编程简单、高性能，低延迟、分布式、可扩展、容错、消息不丢失等特点。</p><p>但是，<strong>Storm没有提供exactly once的功能，并且开启ack功能后又会严重影响吞吐</strong>，所以会给大家一种印象：流式系统只适合吞吐相对较小的、低延迟不精确的计算；而精确的计算则需要由批处理系统来完成，所以出现了Lambda架构，同时运行两个系统：<strong>一个流式，一个批量</strong>，用批量计算的精确性来弥补流式计算的不足，但是这个架构存在一个问题就是需要同时维护两套系统，代价比较大。</p><p>==Spark streaming==</p><p><strong>Spark streaming采用小批量的方式，提高了吞吐性能</strong>。Spark streaming批量读取数据源中的数据，然后把每个batch转化成内部的RDD。Spark streaming以batch为单位进行计算），而不是以record为单位，大大减少了ack所需的开销，显著满足了高吞吐、低延迟的要求，同时也提供exactly once功能。但也因为处理数据的粒度变大，导致Spark streaming的数据延时不如Storm，<strong>Spark streaming是==秒级==返回结果（与设置的batch间隔有关），Storm则是==毫秒级==。</strong></p><p>==Flink==</p><p>Flink是一个针对流数据和批数据的分布式处理引擎，主要由Java代码实现。对 Flink 而言，其所要处理的主要场景就是流数据，批数据只是流数据的一个极限特例而已。Flink 可以支持本地的快速迭代，以及一些环形的迭代任务，并且可以定制化内存管理。在这点，如果要对比 Flink 和 Spark 的话，Flink 并没有将内存完全交给应用层。这也是为什么 Spark 相对于 Flink，更容易出现 OOM 的原因（out of memory）。就框架本身与应用场景来说，Flink 更相似与 Storm。</p><p>Apache Flink的特点有：</p><ul><li>低延迟的流处理器；</li><li>丰富的API能够帮助程序员快速开发流数据应用；</li><li>灵活的操作状态和流窗口；</li><li>高效的流与数据的容错。</li></ul><h2><span id="1flink-是什么"><strong>1.Flink 是什么</strong></span></h2><p>==Apache Flink 是一个框架和分布式处理引擎，用于在<em>无边界和有边界</em>数据流上进行有状态的计算==。Flink 能在所有常见集群环境中运行，并能以内存速度和任意规模进行计算。</p><p>接下来，我们来介绍一下 Flink 架构中的重要方面。</p><h3><span id="处理无界和有界数据">处理无界和有界数据</span></h3><p>任何类型的数据都可以形成一种事件流。信用卡交易、传感器测量、机器日志、网站或移动应用程序上的用户交互记录，所有这些数据都形成一种流。</p><p>数据可以被作为 <em>无界</em> 或者 <em>有界</em> 流来处理。</p><ol><li><strong>无界流</strong> ==有==定义流的==开始==，但==没有==定义流的==结束==。它们会无休止地产生数据。无界流的数据必须持续处理，即数据被摄取后需要立刻处理。我们不能等到所有数据都到达再处理，因为输入是无限的，在任何时候输入都不会完成。处理无界数据通常要求以特定顺序摄取事件，例如事件发生的顺序，以便能够推断结果的完整性。</li><li><strong>有界流</strong> ==有==定义流的==开始==，也==有==定义流的==结束==。有界流可以在摄取所有数据后再进行计算。有界流所有数据可以被排序，所以并不需要有序摄取。有界流处理通常被称为批处理</li></ol><p><img src="https://flink.apache.org/img/bounded-unbounded.png" alt="img"></p><p><strong>Apache Flink 擅长处理无界和有界数据集</strong> 精确的时间控制和状态化使得 Flink 的运行时(runtime)能够运行任何处理无界流的应用。有界流则由一些专为固定大小数据集特殊设计的算法和数据结构进行内部处理，产生了出色的性能。</p><p>通过探索 Flink 之上构建的 <a href="https://flink.apache.org/zh/usecases.html">用例</a> 来加深理解。</p><h3><span id="部署应用到任意地方">部署应用到任意地方</span></h3><p>Apache Flink 是一个分布式系统，它需要计算资源来执行应用程序。Flink 集成了所有常见的集群资源管理器，例如 <a href="https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/YARN.html">Hadoop YARN</a>、 <a href="https://mesos.apache.org/">Apache Mesos</a> 和 <a href="https://kubernetes.io/">Kubernetes</a>，但同时也可以作为独立集群运行。</p><p>Flink 被设计为能够很好地工作在上述每个资源管理器中，这是通过资源管理器特定(resource-manager-specific)的部署模式实现的。Flink 可以采用与当前资源管理器相适应的方式进行交互。</p><p>部署 Flink 应用程序时，Flink 会根据应用程序配置的并行性自动标识所需的资源，并从资源管理器请求这些资源。在发生故障的情况下，Flink 通过请求新资源来替换发生故障的容器。提交或控制应用程序的所有通信都是通过 REST 调用进行的，这可以简化 Flink 与各种环境中的集成。</p><h3><span id="运行任意规模应用">运行任意规模应用</span></h3><p>Flink 旨在任意规模上运行有状态流式应用。因此，应用程序被并行化为可能数千个任务，这些任务分布在集群中并发执行。所以应用程序能够充分利用无尽的 CPU、内存、磁盘和网络 IO。而且 Flink 很容易维护非常大的应用程序状态。其异步和增量的检查点算法对处理延迟产生最小的影响，同时保证精确一次状态的一致性。</p><p><a href="https://flink.apache.org/zh/poweredby.html">Flink 用户报告了其生产环境中一些令人印象深刻的扩展性数字</a></p><ul><li>处理<strong>每天处理数万亿的事件</strong>,</li><li>应用维护<strong>几TB大小的状态</strong>, 和</li><li>应用<strong>在数千个内核上运行</strong>。</li></ul><h3><span id="利用内存性能">利用内存性能</span></h3><p>有状态的 Flink 程序针对本地状态访问进行了优化。任务的状态始终保留在内存中，如果状态大小超过可用内存，则会保存在能高效访问的磁盘数据结构中。任务通过访问本地（通常在内存中）状态来进行所有的计算，从而产生非常低的处理延迟。Flink 通过定期和异步地对本地状态进行持久化存储来保证故障场景下精确一次的状态一致性。</p><p><img src="https://flink.apache.org/img/local-state.png" alt="img"></p><h3><span id="flink的全球热度">Flink的全球热度</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210731222940642.png" alt="image-20210731222940642"></p><h3><span id="apache-flink-用户">Apache Flink 用户</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210731223107727.png" alt="image-20210731223107727"></p><h2><span id="2flink-整体结构"><strong>2.Flink 整体结构</strong></span></h2><p><a href="https://zhisheng-blog.oss-cn-hangzhou.aliyuncs.com/images/Drsi9h.jpg"><img src="https://zhisheng-blog.oss-cn-hangzhou.aliyuncs.com/images/Drsi9h.jpg" alt="flink-stack-frontpage"></a></p><p>从下至上：</p><p>1、部署：Flink 支持本地运行、能在独立集群或者在被 YARN 或 Mesos 管理的集群上运行， 也能部署在云上。</p><p>2、运行：Flink 的核心是分布式流式数据引擎，意味着数据以一次一个事件的形式被处理。</p><p>3、API：DataStream、DataSet、Table、SQL API。</p><p>4、扩展库：Flink 还包括用于复杂事件处理，机器学习，图形处理和 Apache Storm 兼容性的专用代码库。</p><h2><span id="3flink-数据流编程模型"><strong>3.Flink 数据流编程模型</strong></span></h2><p>Flink 提供了不同的抽象级别以开发流式或批处理应用。</p><p><a href="https://zhisheng-blog.oss-cn-hangzhou.aliyuncs.com/images/ozmU46.jpg"><img src="https://zhisheng-blog.oss-cn-hangzhou.aliyuncs.com/images/ozmU46.jpg" alt="2018-10-14_09-34-17"></a></p><ul><li>最底层提供了有状态流。它将通过 过程函数（Process Function）嵌入到 DataStream API 中。它允许用户可以自由地处理来自一个或多个流数据的事件，并使用一致、容错的状态。除此之外，用户可以注册事件时间和处理事件回调，从而使程序可以实现复杂的计算。</li><li>DataStream / DataSet API 是 Flink 提供的核心 API ，DataSet 处理有界的数据集，DataStream 处理有界或者无界的数据流。用户可以通过各种方法（map / flatmap / window / keyby / sum / max / min / avg / join 等）将数据进行转换 / 计算。</li><li><strong>Table API</strong> 是以 <em>表</em> 为中心的声明式 DSL，其中表可能会动态变化（在表达流数据时）。Table API 提供了例如 select、project、join、group-by、aggregate 等操作，使用起来却更加简洁（代码量更少）。</li></ul><p>你可以在表与 <em>DataStream</em>/<em>DataSet</em> 之间无缝切换，也允许程序将 <em>Table API</em> 与 <em>DataStream</em> 以及 <em>DataSet</em> 混合使用。</p><ul><li>Flink 提供的最高层级的抽象是 <strong>SQL</strong> 。这一层抽象在语法与表达能力上与 <em>Table API</em> 类似，但是是以 SQL查询表达式的形式表现程序。SQL 抽象与 Table API 交互密切，同时 SQL 查询可以直接在 Table API 定义的表上执行。</li></ul><h2><span id="4flink-程序与数据流结构"><strong>4.Flink 程序与数据流结构</strong></span></h2><p><a href="https://zhisheng-blog.oss-cn-hangzhou.aliyuncs.com/images/u3RagR.jpg"><img src="https://zhisheng-blog.oss-cn-hangzhou.aliyuncs.com/images/u3RagR.jpg" alt="2018-10-14_09-51-09"></a></p><p>Flink 应用程序结构就是如上图所示：</p><p>1、Source: 数据源，Flink 在流处理和批处理上的 source 大概有 4 类：基于本地集合的 source、基于文件的 source、基于网络套接字的 source、自定义的 source。自定义的 source 常见的有 Apache kafka、Amazon Kinesis Streams、RabbitMQ、Twitter Streaming API、Apache NiFi 等，当然你也可以定义自己的 source。</p><p>2、Transformation：数据转换的各种操作，有 Map / FlatMap / Filter / KeyBy / Reduce / Fold / Aggregations / Window / WindowAll / Union / Window join / Split / Select / Project 等，操作很多，可以将数据转换计算成你想要的数据。</p><p>3、Sink：接收器，Flink 将转换计算后的数据发送的地点 ，你可能需要存储下来，Flink 常见的 Sink 大概有如下几类：写入文件、打印出来、写入 socket 、自定义的 sink 。自定义的 sink 常见的有 Apache kafka、RabbitMQ、MySQL、ElasticSearch、Apache Cassandra、Hadoop FileSystem 等，同理你也可以定义自己的 sink。</p><h2><span id="5分布式运行"><strong>5.分布式运行</strong></span></h2><p>flink 作业提交架构流程可见下图：</p><p><a href="https://zhisheng-blog.oss-cn-hangzhou.aliyuncs.com/images/p92UrK.jpg"><img src="https://zhisheng-blog.oss-cn-hangzhou.aliyuncs.com/images/p92UrK.jpg" alt="img"></a></p><p>1、Program Code：我们编写的 Flink 应用程序代码</p><p>2、Job Client：Job Client 不是 Flink 程序执行的内部部分，但它是任务执行的起点。 Job Client 负责接受用户的程序代码，然后创建数据流，将数据流提交给 Job Manager 以便进一步执行。 执行完成后，Job Client 将结果返回给用户</p><p><a href="https://zhisheng-blog.oss-cn-hangzhou.aliyuncs.com/images/T6JuaC.jpg"><img src="https://zhisheng-blog.oss-cn-hangzhou.aliyuncs.com/images/T6JuaC.jpg" alt="img"></a></p><p>3、Job Manager：主进程（也称为作业管理器）协调和管理程序的执行。 它的主要职责包括安排任务，管理checkpoint ，故障恢复等。机器集群中至少要有一个 master，master 负责调度 task，协调 checkpoints 和容灾，高可用设置的话可以有多个 master，但要保证一个是 leader, 其他是 standby; Job Manager 包含 Actor system、Scheduler、Check pointing 三个重要的组件</p><p>4、Task Manager：从 Job Manager 处接收需要部署的 Task。Task Manager 是在 JVM 中的一个或多个线程中执行任务的工作节点。 任务执行的并行性由每个 Task Manager 上可用的任务槽决定。 每个任务代表分配给任务槽的一组资源。 例如，如果 Task Manager 有四个插槽，那么它将为每个插槽分配 25％ 的内存。 可以在任务槽中运行一个或多个线程。 同一插槽中的线程共享相同的 JVM。 同一 JVM 中的任务共享 TCP 连接和心跳消息。Task Manager 的一个 Slot 代表一个可用线程，该线程具有固定的内存，注意 Slot 只对内存隔离，没有对 CPU 隔离。默认情况下，Flink 允许子任务共享 Slot，即使它们是不同 task 的 subtask，只要它们来自相同的 job。这种共享可以有更好的资源利用率。</p><p><a href="https://zhisheng-blog.oss-cn-hangzhou.aliyuncs.com/images/zRhtN3.jpg"><img src="https://zhisheng-blog.oss-cn-hangzhou.aliyuncs.com/images/zRhtN3.jpg" alt="img"></a></p><h2><span id="6flink本地安装与启动"><strong>6.Flink本地安装与启动</strong></span></h2><p>参考官网</p><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.9/getting-started/tutorials/local_setup.html">https://ci.apache.org/projects/flink/flink-docs-release-1.9/getting-started/tutorials/local_setup.html</a></p><p><strong>1、确认jdk版本  1.8以上</strong></p><p>java -version </p><p><strong>2、到包下载路径</strong></p><p>cd /home/data/</p><p><strong>3、解压文件</strong></p><p>tar xzf flink-*****.tgz </p><p><strong>4、剪切目录</strong></p><p>mv flink-1.9.1 /usr/local/</p><p><strong>5、进入bin目录并启动【需要配置 flink-conf.yaml （默认rest.port被注释了）】</strong> </p><p>./bin/start-cluster.sh</p><p><strong>6、查看日志</strong></p><p>tail -f log/flink-<em>-standalonesession-</em>.log -n 100</p><p><strong>7、访问前端页面</strong></p><p><a href="http://192.168.6.188:8081/#/overview">http://192.168.6.188:8081/#/overview</a></p><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/clipboard.png" alt="img"></p><p>命令行执行任务</p><p><strong>查看任务</strong></p><p> ./flink list </p><p>./flink list -all      ###查看全部任务</p><p><strong>启动nc</strong></p><p>nc -lk 9000</p><p><strong>执行任务</strong></p><p>./flink run -c  com.etol.flink.demo.wc.SocketWindowWordCountJava  -p 1 /root/flink-0.0.1-SNAPSHOT.jar</p><p><strong>取消任务</strong></p><p>./flink cancel 3e7bc334d540b312108086c5f7ab6af2</p><p><strong>8、进入bin目录停止服务</strong></p><p>./stop-cluster.sh</p><h2><span id="7flink-word-count"><strong>7.Flink Word Count</strong></span></h2><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210731223251883.png" alt="image-20210731223251883"></p><h3><span id="传统方式demo">传统方式Demo</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210731233514781.png" alt="image-20210731233514781"></p><h3><span id="flink-有界流demo">Flink 有界流Demo</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210731223517037.png" alt="image-20210731223517037"></p><h3><span id="flink-无界流demo">Flink 无界流Demo</span></h3><p><img src="https://gitee.com/CandyLoveYL/img/raw/master/img/image-20210731223545334.png" alt="image-20210731223545334"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Flink </tag>
            
            <tag> 流计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron学习笔记</title>
      <link href="/2021/12/05/electron-xue-xi-bi-ji/"/>
      <url>/2021/12/05/electron-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>Electron学习笔记</strong></p><hr><p>[TOC]</p><h2><span id="0序言"><strong>0.序言</strong></span></h2><p><strong>桌面客户端框架技术选型</strong></p><p>作为客户端的架构选型主要面临以下几个方面的需求：</p><ul><li>1.开发速度快，能够快速迭代，快速试错</li><li>2.客户端能够跨平台，同时适应Windows和Mac平台</li><li>3.用户界面友好，满足用户对界面的苛求</li><li>4.能够与快速与第三方的C++应用、Web应用集成</li><li>5.客户端安装包大小适中，减少用户的下载和安装时间</li><li>6.支持XP系统(国内还有近10%的用户是XP系统)</li><li>7.最大化利用公司现有的开发人员，减少因为技术选型引起的大规模人员变动</li></ul><p>客户端的开发技术/框架，主要以下有几种：</p><ol><li>纯Native开发, C++/C#/duilib+C++(Windows), Objective-c(Mac)</li><li>Qt(Windows/Mac)</li><li>NW.js/Electron(Windows/Mac)</li><li>CEF(Windows/Mac)</li></ol><p>分析几种开发技术/框架适用的场景和优缺点<br><strong>1.Native开发</strong></p><p>在桌面客户端开发中，纯Native开发是一直沿用至今，也是使用最多的技术。使用Native开发，能够实现最好的性能，可以比较容易的与第三方的C++应用集成。</p><p>优点：</p><p>•客户端性能比较好</p><p>•安装包比较小</p><p>•Windows比较容易兼容XP</p><p>缺点：</p><p>•界面开发复杂，开发周期长，无法实现快速迭代</p><p>•跨平台开发困难，需要针对Windows和Mac分别开发，人员投入大，后期维护困难</p><p>纯Native开发的优缺点，使得其适用于客户端性能要求高、界面简单、客户端安装包小、开发人员富足等场景。</p><hr><p><strong>2.Qt开发</strong></p><p>一直以来被许多用户作为跨平台客户端开发的首选，其功能强大、支持的操作系统丰富、与C++结合紧密，其在某些特定领域(如嵌入式领域、军工、安防监控领域等)非常受欢迎。<br><img src="https://img-blog.csdnimg.cn/20200410223919109.jpg" alt="在这里插入图片描述"><br>优点：</p><p>•支持的操作系统丰富、跨平台性好</p><p>•性能比较好，接近纯Native开发的性能</p><p>•功能丰富、具有各种成熟类库</p><p>缺点：</p><p>•Qt开发人员不足，市场上Qt的开发人员一直都很少</p><p>•库太大，导致安装包也会过大</p><p>•Qt学习成本高，需要花费很多的时间和成本才能达到熟练开发的程度</p><p>•界面开发效率不高，满足不了互联网快发迭代的要求</p><p>•Qt使用GPL授权协议，需要商业授权协议才能做商业应用</p><p>从使用的情况来看，Qt作为跨平台的桌面端开发框架，有其有力的方面，但缺点也制约了其快速发展和在客户端开发的大规模使用。</p><hr><p><strong>3.NW.js/Electron</strong></p><p>随着PC机不断提升的机器性能以及H5标准的发展，利用JS语言依靠Browser为载体的B/S体系软件，有着很强的交互表现力，使用Html/JS作为UI的开发语言，可以十分高效快速的完成各种复杂界面（尤其是各种动画效果）开发。</p><p>随着Nodejs和Chromium的CEF越来越成熟，出现了将Nodejs与Webkit集成的开源框架，比较成熟的有NW.js(前身node-webkit)和Electron(前身atom-shell), 该类型的框架既能使用Html/JS来开发UI界面，又能集成C++库来完成大计算量的任务，使得开发基于Web和Native混合的应用非常方便。<br><img src="https://img-blog.csdnimg.cn/20200410224119883.jpg" alt="在这里插入图片描述"></p><p>NW.js和Electron相比，各有优缺点，对比如下表：<br><img src="https://img-blog.csdnimg.cn/20200410224138619.jpg" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200410224202626.jpg" alt="在这里插入图片描述"></p><p>由于集成了Node.js和Webkit，以及丰富的Node.js第三方库，NW.js和Electron提供了完全使用Javascript来开发客户端的能力。只要熟悉前端Web开发，就能迅速开发出与传统客户端相媲美的客户端软件，开发速度和功能都能满足目前互联网时代的要求，大家的前端开发人员储备，海量的Web 框架和UI组件，使得它们成为了目前最炙手可热的客户端开发框架。</p><p><strong>Electron和NW.js相比较来说，Electron的发展更快、bug更少、贡献者更多、社区更活跃</strong>。参考知乎上的某篇问答： 维护一个大型开源项目是怎样的体验？ - zcbenz 的回答 ，根据NW和Electron的作者自己的回答，显然Electron比NW.js更好。<strong>如果不考虑支持XP系统，Electron更适合作为客户端的框架。</strong></p><p><img src="https://img-blog.csdnimg.cn/20200410224225704.jpg" alt="在这里插入图片描述"></p><p>优点：</p><p>•跨平台性好，可以同时支持Windows、Mac和Linux</p><p>•开发速度快，能够快速构建产品推向市场</p><p>•前端人员储备丰富，招聘开发人员容易</p><p>•框架开源，升级比较快</p><p>从开发桌面客户端的便捷性、跨平台性等来看，NW.js和Electron几乎满足互联网时代的客户端架构需求，但它们也存在一些不足。</p><p>•Electron支持的最低Windows版本是Windows 7， 当开发的产品需要支持XP系统时，只能选用NW.js</p><p>•NW.js和Electron对透明窗口支持不好，NW.js支持Vista、Electron支持Windows 7以上的系统，并且必须在DWM(Desktop Window Manager)打开的时候才能实现透明窗口，NW.js和Electron的透明窗口无法调整大小，Electron在Mac上，透明窗口的阴影显示不出来</p><p>•由于集成了Webkit浏览器，客户端安装包过大</p><p><strong>不考虑实现透明窗口，Nw.js和Electron是目前桌面客户端跨平台方案中最廉价和最通用的方案，因此，在做客户端框架选型时，可以优先考虑NW.js和Electron。</strong></p><p><img src="https://img-blog.csdnimg.cn/20200410224245968.jpg" alt="在这里插入图片描述"></p><hr><p><strong>4.CEF</strong></p><p>Chromium Embedded Framework (CEF)是个基于Google Chromium项目的开源Web browser控件（俗称谷歌亲儿子），支持Windows, Linux, Mac平台， 其包含C/C++程序接口，能够完美的与C++库集成，完善的支持Html5 Web页面开发，并且可以通过修改编译选项和源代码后编译的方式来实现剪裁CEF和提供原CEF没有的功能，定制自己的窗口类型。</p><p>优点：</p><p>•CEF可以通过编译和修改源代码的方式来定制</p><p>•可以通过C++控制窗口类型，支持透明窗口</p><p>•能够使用最新的CEF来兼容最新的Javascript标准和CSS，或者固定CEF的版本来支持Windows XP</p><p>•底层与C++集成容易</p><p>•可以使用Javascript来开发UI，C++实现大计算量的任务</p><p>缺点：</p><p>•与操作系统相关的功能，如读取注册表、写文件等功能，需要C++实现，增加了一些C++开发的工作量</p><p>•不经过裁剪的CEF，安装包会过大</p><p>对于要实现透明窗口和集成大量的C++模块的应用，CEF是个不错的选择。</p><p><img src="https://img-blog.csdnimg.cn/20200410224306175.jpg" alt="在这里插入图片描述"></p><p><em><strong>结论</strong></em></p><p>在互联网时代，选择一个合适的客户端框架，对于一个产品快速的推向市场，有着至关重要的作用。<strong>NW.js、Electron、CEF等Web brower模式的开发框架，能够完美复用现有的Web开发框架和技术，极大的提高开发速度，实现产品的快速迭代、最终实现产品的成功。</strong></p><h2><span id="1electron简介"><strong>1.Electron简介</strong></span></h2><p> 官网地址</p><p><a href="https://www.electronjs.org/">https://www.electronjs.org/</a></p><h3><span id="electron是什么"></span></h3><p>Electron是一个使用 JavaScript、HTML 和 CSS 构建桌面应用程序的框架。 嵌入 <a href="https://www.chromium.org/">Chromium</a> 和 <a href="https://nodejs.org/">Node.js</a> 到 二进制的 Electron 允许您保持一个 JavaScript 代码代码库并创建 在Windows上运行的跨平台应用 macOS和Linux——不需要本地开发 经验。</p><p>你只要记住下面这两句话就可以对Electron有个基本了解：</p><ul><li>Electron 是由 Github开发的开源框架</li><li>它允许开发者使用Web技术构建跨平台的桌面应用</li></ul><blockquote><p>Electron = Chromium + Node.js + Native API</p></blockquote><ul><li>Chromium : 为Electron提供了强大的UI能力，可以不考虑兼容性的情况下，利用强大的Web生态来开发界面。</li><li>Node.js ：让Electron有了底层的操作能力，比如文件的读写，甚至是集成C++等等操作，并可以使用大量开源的<code>npm</code>包来完成开发需求。</li><li>Native API ： Native API让Electron有了跨平台和桌面端的原生能力，比如说它有统一的原生界面，窗口、托盘这些。</li></ul><p>通过三者的巧妙组合，我们开发应用变的十分高效。</p><h3><span id="前提条件"></span></h3><p>熟悉该文档之前，需要你有Node.js和web开发经验。 如果您需要了解这两个方面的开发知识，我们推荐您使用以下学习资源：</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web">来自Mozilla开发社区(Mozilla Developer Network)的web入门教程</a></li><li><a href="https://nodejs.dev/learn">NodeJS官方入门指南</a></li></ul><p>此外，如果您熟悉Chromium进程模型，您将更好了解 Electron 的工作原理。 You can get a brief overview of Chrome architecture with the <a href="https://www.google.com/googlebooks/chrome/">Chrome comic</a>, which was released alongside Chrome’s launch back in 2008. 尽管Chrome发布十多年了，【Chrome comic】漫画中介绍的核心原理仍然有助于理解Electron。</p><h3><span id="electron-fiddle运行实例"></span></h3><p><a href="https://electronjs.org/fiddle">Electron Fiddle</a>是由Electron开发并由其维护者支持的沙盒程序。 我们强烈建议将其作为一个学习工具来安装，以便在开发过程中对Electron的api进行实验或对特性进行原型化。</p><p>Fiddle also integrates nicely with our documentation. When browsing through examples in our tutorials, you’ll frequently see an “Open in Electron Fiddle” button underneath a code block. If you have Fiddle installed, this button will open a <code>fiddle.electronjs.org</code> link that will automatically load the example into Fiddle, no copy-pasting required.</p><h3><span id="什么时候使用electron"></span></h3><ol><li>公司没有专门的桌面应用开发者，而需要前端兼顾来进行开发时，用Electron就是一个不错的选择。</li><li>一个应用同时开发Web端和桌面端的时候，那使用Electron来进行开发就对了。</li><li>开发一些效率工具，比如说我们的VSCode，比如说一些API类的工具，用Electron都是不错的选择。</li></ol><h3><span id="有哪些著名应用是用electron开发的"></span></h3><ul><li>VSCode ： 程序员最常用的开发者工具。</li><li>Atom : 是Github开发的文本编辑器，我想大部分的前端程序员都应该使用过。</li><li>slack ： 聊天群组 + 大规模工具集成 + 文件整合 + 搜索的一个工具。就是把很多你常用的工具整合到了一起。</li><li>wordPress ： 基于PHP开发的Blog搭建工具，新版本使用了Electron.</li></ul><h2><span id="2electron原理"><strong>2.Electron原理</strong></span></h2><p>简单来说，Electron为用纯JavaScript创建桌面应用提供了运行时。原理是，Electron调用你在package.json中定义的main文件并执行它。main文件（通常被命名为main.js）会创建一个内含渲染完的web页面的应用窗口，并添加与你操作系统的原生GUI（图形界面）交互的功能。</p><p>详细地说，当用Electron启动一个应用，会创建一个主进程。这个主进程负责与你系统原生的GUI进行交互并为你的应用创建GUI（在你的应用窗口）。</p><p><img src="/2021/12/05/electron-xue-xi-bi-ji/Typora文档\images\image-20210717144328954.png" alt="image-20210717144328954"></p><p>仅启动主进程并不能给你的应用用户创建应用窗口。窗口是通过main文件里的主进程调用叫BrowserWindow的模块创建的。每个浏览器窗口会运行自己的渲染进程。渲染进程会在窗口中渲染出web页面（引用了CSS，JavaScript，图片等的HTML文件）。web页面是<a href="https://www.chromium.org/">Chromium</a>渲染的，因为各系统下标准是统一的的，所以兼容性很好。</p><p>举例来说，如果你有一个计算器应用，主进程会初始化一个窗口来呈现实际的web页面（计算器）。虽说只有主进程才和系统原生GUI交互，还是有技术可以把部分任务转到渲染进程中运行。</p><p>主进程通过一套<a href="https://github.com/atom/electron/tree/master/docs/api">可直接调用的Electron模块</a>与原生GUI交互，桌面应用可以使用所有的Node模块，如用<a href="https://github.com/mikaelbr/node-notifier">node-notifier模块</a>来推送系统通知，<a href="https://www.npmjs.com/package/request">request模块</a>来发起HTTP请求等。</p><h2><span id="3electron开发环境搭建"><strong>3.Electron开发环境搭建</strong></span></h2><h3><span id="windows下安装nodejs"></span></h3><p>如果你是前端，安装Node应该是信手拈来，非常熟悉了，但是为了防止有小伙伴还不会安装这个，我简单的介绍一下.</p><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。什么事情驱动、非阻塞式I/O，适合高并发应用使用。</p></blockquote><p>Windows下安装也是非常简单，直接到官网去下载。</p><blockquote><p>官网地址：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p></blockquote><p>然后点击下载，选择长期支持版本，我这时的版本是12.14.1.</p><ul><li>长期支持版本：就是已经文档了，并且会一直维护下去的版本，比如有个小Bug啥的，官方会马上进行修复。</li><li>最新版本： 有很多功能，但是也会同时存在很多Bug或者说坑，如果你是个人学习，完全可以使用最新发布版，但是如果是公司，你还是尽量使用长期支持版本。</li></ul><p>点击下载后，安装过程和安装QQ基本一样，下一步、下一步，我就不作过多的介绍了。实在不会，你百度一下，有很多文章会教你如何安装Node。</p><p>安装后，可以使用下面两个命令进行检测，如果可以梳理出现邦本，说明你安装成功了。</p><ul><li>npm -v</li><li>node -v</li></ul><p>如果成功会出现当前的版本，最好使用<code>v10</code>以上版本。</p><h3><span id="electron安装">electron安装</span></h3><p>在命令行中输入以下命令，即可安装electron，使用淘宝NPM开发的cnpm进行package的安装</p><p>cnpm install -g electron</p><p>等待安装完成之后，在命令行输入<code>electron -v</code>能够显示版本号代表安装成功。</p><p>如果想删除 Electron，可以使用下面的命令。npm uninstall electron<br>如果想升级 Electron，则可以使用这个命令。npm update electron -g</p><p>直接执行 electron 命令，会显示如下图所示的窗口，该窗口包含了与 Electron 相关的信息，如 Electron 的版本号、Node.js 的版本号、API Demo 的下载链接等。<br><img src="/2021/12/05/electron-xue-xi-bi-ji/Typora文档\images\image-20210717214235191.png" alt="image-20210717214235191"></p><p>在你喜欢的盘符下，建立一个文件夹，这个文件可以是任何名字。然后用VSCode进行打开。打开终端，直接在终端中输入安装命令：</p><pre><code>npm install electron --save-dev</code></pre><p>然后就是耐心的等待，这个等待时间还是比较长的，等待全部完成后，可以使用下面两个命令进行检验。</p><pre><code>npx electron -v./node_modules/.bin/electron -vF:\technology\Electron\demo\node_modules\.bin&gt; .\electron.cmd -v</code></pre><p>如果安装成功，这两个命令都可以出现版本。</p><p>如果你还不放心，你可以直接在命令行启动一下Electron，如果能顺利启动，并出现这个图，说明你安装成功了。</p><pre><code>//启动命令./node_modules/.bin/electron</code></pre><p><img src="http://newimg.jspang.com/ElectronDemo2.png" alt="ElectronUI"></p><h2><span id="4electron-hello-world"><strong>4.Electron Hello World</strong></span></h2><p><a href="http://www.jspang.com/detailed?id=62#toc312">全局安装Electron</a></p><pre><code>npm install -g electron</code></pre><p>这个如果安装失败，你可以多安装两遍，你也可以使用cnpm来进行安装。安装后确实可以使用起来方便一点。</p><p><a href="http://www.jspang.com/detailed?id=62#toc313">新建index.html文件</a></p><p>新建一个文件夹，比如叫<code>ElectronDemo01</code>.</p><p>在项目的根目录中新建一个<code>index.html</code>文件，然后编写如下的代码(可以用快速生成的方式来写这段代码)。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><a href="http://www.jspang.com/detailed?id=62#toc314">新建main.js文件</a></p><p>在根目录下新建一个<code>main.js</code>文件，这个就是Electron的主进程文件。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> electron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//引入electron模块</span><span class="token keyword">var</span> app <span class="token operator">=</span> electron<span class="token punctuation">.</span>app   <span class="token comment" spellcheck="true">// 创建electron引用</span><span class="token keyword">var</span> BrowserWindow <span class="token operator">=</span> electron<span class="token punctuation">.</span>BrowserWindow<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建窗口引用</span><span class="token keyword">var</span> mainWindow <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//声明要打开的主窗口</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">,</span>height<span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//设置打开的窗口大小</span>    mainWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//加载那个页面</span>    <span class="token comment" spellcheck="true">//监听关闭事件，把主窗口设置为null</span>    mainWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'closed'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        mainWindow <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a href="http://www.jspang.com/detailed?id=62#toc315">创建package.json文件</a></p><p>写完后直接使用<code>npm init --yes</code>来初始化<code>package.json</code>文件，文件生成后如下：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"ElectronDemo1"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"keywords"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">}</span></code></pre><p>这时候<code>main</code>的值为<code>main.js</code>就正确了。</p><p>这时候你就可以打开终端，在终端里输入<code>electron .</code>就可以打开窗口了。</p><p>(windows系统) 注意后面的.</p><pre><code>electron.cmd  .</code></pre><h2><span id="5electron编写邀请小姐姐程序">5.Electron编写邀请小姐姐程序</span></h2><p><a href="http://www.jspang.com/detailed?id=62#toc317">Electron的运行流程</a></p><p><img src="http://newimg.jspang.com/electrondemo1.png" alt="electron"></p><ul><li>1.读取package.json的中的入口文件,这里我们是<code>main.js</code></li><li>2.main.js 主进程中创建渲染进程</li><li>3.读取应用页面的布局和样式</li><li>4.使用IPC在主进程执行任务并获取信息</li></ul><p>也许你现在还不能理解这个流程,但是你需要记住这个流程,只有我们记住这个流程后,在以后程序出现问题时,才可以很快的定位问题.</p><p><a href="http://www.jspang.com/detailed?id=62#toc318">Electron的主进程和渲染进程</a></p><p>我们可以理解<code>package.json</code>中定义的入口文件就是主进程,那一般一个程序只有一个主进程,而我们可以利用一个主进程,打开多个子窗口.</p><p>由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的渲染进程中,也就是我们说的渲染进程.</p><p>也就是说主进程控制渲染进程,一个主进程可以控制多个渲染进程.</p><p><img src="http://newimg.jspang.com/electronDemo08.png" alt="electron流程图"></p><p>如果你实在不理解,也没关系,你可以简单的把main.js看成主进程,我们写的html部分看成渲染进程.虽然这样不太严谨,但是方便我们记忆,我们目的是学会使用Electron,而不是成为Electron的专家.</p><p><a href="http://www.jspang.com/detailed?id=62#toc319">简单示例-读取小姐姐</a></p><p>在我们了解主进程和渲染进程后,我们来作一个读取小姐姐案例.现在项目根目录下建立一个<code>xiaojiejie.txt</code>的文件,然后写入几个小姐姐的名字.</p><p>代码如下:</p><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>麻里梨夏<span class="token number">2</span><span class="token punctuation">.</span>星野娜美<span class="token number">3</span><span class="token punctuation">.</span>高桥圣子</code></pre><p>有了这个文件,我们修改一下main.js文件,因为我们要使用node里的<code>fs</code>模块,所以在设置窗口时,增加全量使用node.js.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> electron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span> <span class="token keyword">var</span> app <span class="token operator">=</span> electron<span class="token punctuation">.</span>app   <span class="token keyword">var</span> BrowserWindow <span class="token operator">=</span> electron<span class="token punctuation">.</span>BrowserWindow<span class="token punctuation">;</span><span class="token keyword">var</span> mainWindow <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        width<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">,</span>        webPreferences<span class="token punctuation">:</span><span class="token punctuation">{</span>             nodeIntegration<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            enableRemoteModule<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//新版本需要增加</span>               contextIsolation<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">//新版本需要增加</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    mainWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>    mainWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'closed'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        mainWindow <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>修改完主进程,然后我们到<code>index.html</code>里边写一下界面.这里我们写了一个按钮,然后在按钮下方加一个<code>&lt;div&gt;</code>,这个DIV用来作读取过来内容的容器.</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, idivnitial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小姐姐请进来<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mybaby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>有了界面之后,我们可以单独新建一个<code>renderer</code>文件夹,一般约定俗成都会起这个名字.注意起这个名字意思是渲染进程中的操作. 文件夹建立完成后,在文件里新建<code>index.js</code>文件,然后再index.html页面里先进行引入.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后编写<code>index.js</code>里的代码,代码如下,具体含义我会在视频中进行讲解.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> btn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> mybaby <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#mybaby'</span><span class="token punctuation">)</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'xiaojiejie.txt'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            mybaby<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><p>写完这些,就可以在中台使用<code>electron .</code> 命令,跳出我们的界面,点击按钮,就可以看到我们的小姐姐进入了界面中.</p><p>==排坑==</p><p>新版本的electron解决 electron require()报错：Uncaught ReferenceError: require is not defined</p><p>主要是设置web属性：</p><pre class=" language-c"><code class="language-c">     nodeIntegration<span class="token punctuation">:</span> true<span class="token punctuation">,</span>    enableRemoteModule<span class="token punctuation">:</span> true<span class="token punctuation">,</span>    contextIsolation<span class="token punctuation">:</span> false</code></pre><h2><span id="6electron-remote模块的使用">6.Electron Remote模块的使用</span></h2><p>当我们知道了Electron有主进程和渲染进程后，我们还要知道一件事，就是Electron的API方法和模块也是分为可以在主进程和渲染进程中使用。那如果我们想在渲染进程中使用主进程中的模块方法时，可以使用<code>Electron Remote</code>解决在渲染和主进程间的通讯。这节我们就实现一个通过Web中的按钮打开新窗口。</p><p><a href="http://www.jspang.com/detailed?id=62#toc321">渲染进程中打开新窗口</a></p><p>那我们话不多说，直接按照上节课的程序进行改写,在项目根目录下，新建一个<code>demo2.html</code>文件，然后快速生成html的基本结构，编写一个按钮，引入渲染的js页面。代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>打开新的窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer/demo2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在<code>render</code>文件夹下，新建一个<code>demo2.js</code>文件，然后编写如下代码。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> btn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token keyword">const</span> BrowserWindow <span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>remote<span class="token punctuation">.</span>BrowserWindowwindow<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>         newWin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             width<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">,</span>             height<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">,</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>         newWin<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">'yellow.html'</span><span class="token punctuation">)</span>         newWin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>win<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这时候还没有<code>yellow.html</code>，在项目根目录下建立页面，然后写入下面的代码。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>X-UA-Compatible<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    yellow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>然后我们在终端中运行<code>electron .</code>,如果一切正常，就可以顺利打开一个新的窗口，这个窗口可以顺利打开主要的功劳就是<code>electron remote</code>。它让我们有了很多pc端的原生能力。</p><h2><span id="7electron创建菜单和基本使用">7.Electron创建菜单和基本使用</span></h2><p><a href="http://www.jspang.com/detailed?id=62#toc323">编写菜单模板</a></p><p>在<code>Electron</code>中编写菜单，需要先建立一个模板，这个目标很类似我们<code>JSON</code>或者类的数组。</p><p>我们打开项目，在项目的根目录下新建一个文件夹<code>main</code>，意思是主进程中用到的代码我们都写到这里。</p><p>然后新建一个<code>menu.js</code>文件,然后编写如下代码。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> Menu <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        label<span class="token punctuation">:</span><span class="token string">'凤来怡洗浴会所'</span><span class="token punctuation">,</span>        submenu<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>label<span class="token punctuation">:</span><span class="token string">'精品SPA'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>label<span class="token punctuation">:</span><span class="token string">'泰式按摩'</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        label<span class="token punctuation">:</span><span class="token string">'大浪淘沙洗浴中心'</span><span class="token punctuation">,</span>        submenu<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>label<span class="token punctuation">:</span><span class="token string">'牛奶玫瑰浴'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>label<span class="token punctuation">:</span><span class="token string">'爱情拍拍手'</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">var</span> m <span class="token operator">=</span> Menu<span class="token punctuation">.</span><span class="token function">buildFromTemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>Menu<span class="token punctuation">.</span><span class="token function">setApplicationMenu</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><p>然后再打开<strong>主进程<code>main.js</code>文件</strong>，在<code>ready</code>生命周期中，直接加入下面的代码，就可以实现自定义菜单了。</p><pre class=" language-js"><code class="language-js"> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./main/menu.js'</span><span class="token punctuation">)</span></code></pre><p>==需要注意的是，<code>Menu</code>属于是主线程下的模块，所以只能在主线程中使用，这个要记清楚。==</p><p><a href="http://www.jspang.com/detailed?id=62#toc324">使用菜单打开新窗口</a></p><p>有了菜单之后，可以在菜单中加入<code>click</code>事件，代码如下:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> Menu <span class="token punctuation">,</span>BrowserWindow<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        label<span class="token punctuation">:</span><span class="token string">'凤来怡洗浴会所'</span><span class="token punctuation">,</span>        submenu<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                label<span class="token punctuation">:</span><span class="token string">'精品SPA'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//主要代码--------------start</span>                click<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        width<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">,</span>                        height<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">,</span>                        webPreferences<span class="token punctuation">:</span><span class="token punctuation">{</span> nodeIntegration<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                    win<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">'yellow.html'</span><span class="token punctuation">)</span>                    win<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'closed'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        win <span class="token operator">=</span> <span class="token keyword">null</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//主要代码----------------end</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>label<span class="token punctuation">:</span><span class="token string">'泰式按摩'</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        label<span class="token punctuation">:</span><span class="token string">'大浪淘沙洗浴中心'</span><span class="token punctuation">,</span>        submenu<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>label<span class="token punctuation">:</span><span class="token string">'牛奶玫瑰浴'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>label<span class="token punctuation">:</span><span class="token string">'爱情拍拍手'</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">var</span> m <span class="token operator">=</span> Menu<span class="token punctuation">.</span><span class="token function">buildFromTemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>Menu<span class="token punctuation">.</span><span class="token function">setApplicationMenu</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><p>这时候我们打开终端输入<code>electron .</code>之后，就可以看到效果了，当然我们还可以绑定快捷键。</p><h2><span id="8electron制作右键菜单">8.Electron制作右键菜单</span></h2><p><a href="http://www.jspang.com/detailed?id=62#toc326">菜单快捷键绑定</a></p><p>绑定快捷键的属性是<code>accelerator</code>属性，比如我们新打开一个窗口，我们就的代码可以写成这样。</p><pre class=" language-js"><code class="language-js">accelerator<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`ctrl+n`</span></span></code></pre><p>全部代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> Menu <span class="token punctuation">,</span>BrowserWindow<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        label<span class="token punctuation">:</span><span class="token string">'凤来怡洗浴会所'</span><span class="token punctuation">,</span>        submenu<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                label<span class="token punctuation">:</span><span class="token string">'精品SPA'</span><span class="token punctuation">,</span>                accelerator<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`ctrl+n`</span></span><span class="token punctuation">,</span>                click<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        width<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">,</span>                        height<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">,</span>                        webPreferences<span class="token punctuation">:</span><span class="token punctuation">{</span> nodeIntegration<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                    win<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">'yellow.html'</span><span class="token punctuation">)</span>                    win<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'closed'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        win <span class="token operator">=</span> <span class="token keyword">null</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>label<span class="token punctuation">:</span><span class="token string">'泰式按摩'</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        label<span class="token punctuation">:</span><span class="token string">'大浪淘沙洗浴中心'</span><span class="token punctuation">,</span>        submenu<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>label<span class="token punctuation">:</span><span class="token string">'牛奶玫瑰浴'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>label<span class="token punctuation">:</span><span class="token string">'爱情拍拍手'</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span>chengxu<span class="token punctuation">]</span><span class="token keyword">var</span> m <span class="token operator">=</span> Menu<span class="token punctuation">.</span><span class="token function">buildFromTemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>Menu<span class="token punctuation">.</span><span class="token function">setApplicationMenu</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><p>写完代码后，在终端中输入<code>electron .</code> 运行程序，再用快捷键<code>ctrl+n</code>就可以新建一个页面了。这就实现了新建页面的方法。</p><p><a href="http://www.jspang.com/detailed?id=62#toc327">创建右键菜单</a></p><p>右键菜单的响应事件是写在渲染进程中的，也就是写在<code>menu.html</code>中的，所以要是使用，就用到到<code>remote</code>模块进行操作了。</p><p>先来看看右键的相应事件，我们打开<code>render</code>文件夹，然后打开<code>rightmenu.js</code>文件，编写一个右键菜单的监听事件，代码如下：</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'contextmenu'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>当我们要使用<code>Menu</code>模块,它是主线中的模块，**如果想在渲染线程中使用，就必须使用<code>remote</code>**。代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> remote<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token keyword">var</span> rigthTemplate <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token punctuation">{</span>        label<span class="token punctuation">:</span><span class="token string">'粘贴'</span><span class="token punctuation">,</span>        accelerator<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`ctrl+v`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        label<span class="token punctuation">:</span><span class="token string">'复制'</span><span class="token punctuation">,</span>        accelerator<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`ctrl+c`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">var</span> m <span class="token operator">=</span> remote<span class="token punctuation">.</span>Menu<span class="token punctuation">.</span><span class="token function">buildFromTemplate</span><span class="token punctuation">(</span>rigthTemplate<span class="token punctuation">)</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'contextmenu'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//阻止当前窗口默认事件</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把菜单模板添加到右键菜单</span>    m<span class="token punctuation">.</span><span class="token function">popup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>window<span class="token punctuation">:</span>remote<span class="token punctuation">.</span><span class="token function">getCurrentWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>现在就可以有右键菜单了，我们可以在终端中输入<code>electron .</code>打开程序进行测试。</p><p><a href="http://www.jspang.com/detailed?id=62#toc328">程序打开调试模式</a></p><p>由于我们已经定义了顶部菜单，没有了打开调试模式的菜单了，这时候可以使用程序来进行打开。在主进程中加入这句代码就可以了。</p><pre class=" language-js"><code class="language-js">mainWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">openDevTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>全部代码如下:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> electron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span> <span class="token keyword">var</span> app <span class="token operator">=</span> electron<span class="token punctuation">.</span>app   <span class="token keyword">var</span> BrowserWindow <span class="token operator">=</span> electron<span class="token punctuation">.</span>BrowserWindow<span class="token punctuation">;</span><span class="token keyword">var</span> mainWindow <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        width<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">,</span>        webPreferences<span class="token punctuation">:</span><span class="token punctuation">{</span> nodeIntegration<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    mainWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">openDevTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./main/menu.js'</span><span class="token punctuation">)</span>    mainWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">'demo2.html'</span><span class="token punctuation">)</span>    mainWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'closed'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        mainWindow <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这样就实现了打开窗口，直接进入调试模式，极大的提高了调试效率。</p><h2><span id="9electron中通过链接打开浏览器">9.Electron中通过链接打开浏览器</span></h2><p>在渲染进程中默认加入一个<code>&lt;a&gt;</code>标签，进行跳转默认是直接在窗口中打开，而不是在浏览器中打开的，如果我们想在默认浏览器中打开，要如何操作呢?</p><p><a href="http://www.jspang.com/detailed?id=62#toc330">默认案例演示</a></p><p>我们先来看一下，在electron 中默认打开一个链接是什么样的，在项目根目录，新建一个<code>demo2.html</code>文件，编写一个<code>&lt;a&gt;</code>标签，代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://jspang.com"</span><span class="token operator">></span>技术胖的博客<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>这时候我们运行程序，点击链接以后，可以看到是在窗口中直接打开的，而不是在浏览器中打开。我们现在要作的就是在浏览器中打开。</p><p><a href="http://www.jspang.com/detailed?id=62#toc331">使用Shell在浏览器中打开</a></p><p>如果想使用浏览器打开，我们可以直接在<code>&lt;a&gt;</code>标签中加入id,代码如下:</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>a id<span class="token operator">=</span><span class="token string">"aHref"</span> href<span class="token operator">=</span><span class="token string">"https://jspang.com"</span><span class="token operator">></span>技术胖的博客<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><p>然后在<code>render</code>文件夹下，新建一个<code>demo3.js</code>文件，先在文件首页中引入<code>shell</code>,然后编写响应事件<code>click</code>。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token punctuation">{</span> shell <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token keyword">var</span> aHref <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#aHref'</span><span class="token punctuation">)</span> aHref<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> href <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>    shell<span class="token punctuation">.</span><span class="token function">openExternal</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>编写完成，要记得在<code>html</code>中引入<code>demo3.js</code>文件。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./renderer/demo3.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>这里给出<code>demo3.html</code>全部代码，方便你的学习。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>a id<span class="token operator">=</span><span class="token string">"aHref"</span> href<span class="token operator">=</span><span class="token string">"https://jspang.com"</span><span class="token operator">></span>技术胖的博客<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./renderer/demo3.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h2><span id="10electron-中嵌入网页和打开子窗口">10.Electron 中嵌入网页和打开子窗口</span></h2><p><a href="http://www.jspang.com/detailed?id=62#toc333">在主进程中用BrowserView嵌入网页</a></p><p>打开根目录下打开<code>main.js</code>,直接引入并使用<code>BrowserView</code>就可以实现键入网页到应用中。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> BrowserView <span class="token operator">=</span> electron<span class="token punctuation">.</span>BrowserView <span class="token comment" spellcheck="true">//引入BrowserView</span><span class="token keyword">var</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//new出对象</span>mainWindow<span class="token punctuation">.</span><span class="token function">setBrowserView</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 在主窗口中设置view可用</span>view<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>width<span class="token punctuation">:</span><span class="token number">1200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//定义view的具体样式和位置</span>view<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token string">'https://jspang.com'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//wiew载入的页面</span></code></pre><p>这个使用起来非常简单，写完上面的代码，就可以在终端中输入一下<code>electron .</code>，运行程序，测试一下效果了。</p><p><a href="http://www.jspang.com/detailed?id=62#toc334">用window.open打开子窗口</a></p><p>我们以前使用过<code>BrowserWindow</code>,这个是有区别的，我们通常把<code>window.open</code>打开的窗口叫做子窗口。 在<code>demo3.html</code>中，加入一个按钮，代码如下：</p><pre class=" language-js"><code class="language-js"> <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"mybtn"</span> <span class="token operator">></span>打开子窗口<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> </code></pre><p>然后打开<code>demo3.js</code>,先获取<code>button</code>的DOM节点，然后监听onclick事件，代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mybtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#mybtn'</span><span class="token punctuation">)</span>mybtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'https://jspang.com'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2><span id="11electron-子窗口和父窗口间的通信">11.Electron 子窗口和父窗口间的通信</span></h2><p><a href="http://www.jspang.com/detailed?id=62#toc336">window.opener.postMessage 子窗口向父窗口传递消息</a></p><p><code>window.opener.postMessage(message,targetOrigin)</code>,是将消息发送给指定来源的父窗口，如果未指定来源则发送给<code>*</code>，即所有窗口。</p><ul><li>message : 传递的消息，是<code>String</code>类型的值</li><li>targetOrigin : 指定发送的窗口</li></ul><p>在传递消息时，你需要在子窗口的页面中设置一些内容，所以我们不能使用远程的页面，而需要自己建立一个。在项目根目录，建立一个<code>popup_page.html</code>文件。 代码如下(详细解释在视频中讲解):</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是弹出子窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>popBtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>向窗口传递信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> popBtn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#popBtn'</span><span class="token punctuation">)</span>    popBtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        window<span class="token punctuation">.</span>opener<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'我是子窗口的消息'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这样就可以从子窗口向父窗口发送信息了。</p><p><a href="http://www.jspang.com/detailed?id=62#toc337">window.addEventListener父窗口接收信息</a></p><p>先打开<code>demo3.html</code>,在代码最下面，加一个<code>&lt;div&gt;</code>标签，记得要给一个ID，这样就用JS控制这个层了。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mytext<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>父窗口接收信息需要通过<code>window.addEventListener</code>,例如现在我们打开<code>demo3.js</code>，也就是父窗口的JS代码部分，写入下面代码：</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> mytext <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#mytext'</span><span class="token punctuation">)</span>    mytext<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这样父窗口就可以顺利接收到子串口发送过来的信息了，也可以轻松的显示在子窗口中。</p><h2><span id="12electron选择文件对话框">12.Electron选择文件对话框</span></h2><p><a href="http://www.jspang.com/detailed?id=62#toc339">对话框相关API讲解</a></p><p>我们先来看一下打开对话框的相关API，打开文件选择对话框可以使用<code>dialog.showOpenDialog()</code>方法来打开，它有两个参数，一个是设置基本属性，另一个是回调函数，如果是异步可以使用<code>then</code>来实现。</p><ul><li>title ： String (可选)，对话框的标题</li><li>defaultPath ： String (可选),默认打开的路径</li><li>buttonLabel ： String (可选), 确认按钮的自定义标签，当为空时，将使用默认标签</li><li>filters ： 文件选择过滤器，定义后可以对文件扩展名进行筛选</li><li>properties：打开文件的属性，比如打开文件还是打开文件夹，甚至是隐藏文件。</li></ul><p>对基本的API了解以后，就可以写代码看看具体的效果了。</p><p><a href="http://www.jspang.com/detailed?id=62#toc340">选择对话框练习</a></p><p>在根目录新建一个<code>demo4.html</code>文件，然后编写一个按钮，点击按钮可以打开窗口选择文件。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"openBtn"</span><span class="token operator">></span>打开文件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>dialog<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>remote    <span class="token keyword">var</span> openBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'openBtn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    openBtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dialog<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">'请选择你喜欢的小姐姐照片'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>写完后记得把<code>main.js</code>中的引入页面改成<code>demo4.html</code>代码如下：</p><pre class=" language-js"><code class="language-js"> mainWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">"demo4.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用<code>electron .</code> 预览一下，可以看到，已经可以顺利打开文件选择窗口了。</p><p><a href="http://www.jspang.com/detailed?id=62#toc341">默认路径的设置</a></p><p>这时打开的窗口是没有默认文件的，比如我们想直接定位到小姐姐文件<code>xiaojiejie.jpg</code>，就可以用<code>defaultPath</code>来进行制作。 代码如下：</p><pre class=" language-js"><code class="language-js">dialog<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token string">'请选择你喜欢的小姐姐照片'</span><span class="token punctuation">,</span>    defaultPath<span class="token punctuation">:</span><span class="token string">'xiaojiejie.jpg'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a href="http://www.jspang.com/detailed?id=62#toc342">过滤器的使用</a></p><p>现在程序还是可以看到很多其他的文件，我们的原则就是想选择一个美女照片，然后显示在界面上，这时候就需要用到过滤器了。</p><pre class=" language-js"><code class="language-js">openBtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    dialog<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span><span class="token string">'请选择你喜欢的小姐姐照片'</span><span class="token punctuation">,</span>        defaultPath<span class="token punctuation">:</span><span class="token string">'xiaojiejie.jpg'</span><span class="token punctuation">,</span>        filters<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'jpg'</span><span class="token punctuation">,</span>extensions<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'jpg'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><a href="http://www.jspang.com/detailed?id=62#toc343">自定义确定按钮</a></p><p>可以直接使用<code>buttonLabel</code>来自定义确定按钮的文字，比如现在把文字改成’打开图片’。</p><pre class=" language-js"><code class="language-js">dialog<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token string">'请选择你喜欢的小姐姐照片'</span><span class="token punctuation">,</span>    defaultPath<span class="token punctuation">:</span><span class="token string">'xiaojiejie.jpg'</span><span class="token punctuation">,</span>    buttonLabel<span class="token punctuation">:</span><span class="token string">'打开图片'</span><span class="token punctuation">,</span>    filters<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'jpg'</span><span class="token punctuation">,</span>extensions<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'jpg'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a href="http://www.jspang.com/detailed?id=62#toc344">把小姐姐放到应用中</a></p><p>当我们选择到了一个文件后，<code>showOpenDialog</code>提供了回调函数，也就是我们的第二个参数。现在来看一下回调函数如何获得图片路径。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"openBtn"</span><span class="token operator">></span>打开文件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>img id<span class="token operator">=</span><span class="token string">"images"</span>  style<span class="token operator">=</span><span class="token string">"width:100%"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>dialog<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>remote    <span class="token keyword">var</span> openBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'openBtn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    openBtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dialog<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">'请选择你喜欢的小姐姐照片'</span><span class="token punctuation">,</span>            defaultPath<span class="token punctuation">:</span><span class="token string">'xiaojiejie.jpg'</span><span class="token punctuation">,</span>            filters<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'jpg'</span><span class="token punctuation">,</span>extensions<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'jpg'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">let</span> image <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'images'</span><span class="token punctuation">)</span>            image<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>filePaths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>这样完成了选择照片，并显示在界面上的功能，有的小伙伴这时候就会问了，我用html的选择文件也可以实现这个效果，确实是可以实现的，但我认为既然用了Electron就最好使用原生的形式打开。</p><h2><span id="13electron保存对话框的操作">13.Electron保存对话框的操作</span></h2><p><a href="http://www.jspang.com/detailed?id=62#toc346">制作一个保存按钮</a></p><p>先在<code>demo4.html</code>中，编写一个按钮：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"saveBtn"</span><span class="token operator">></span>保存文件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></code></pre><p>然后在<code>&lt;script&gt;</code>标签中加入下面的代码,这时候就可以顺利的弹出保存文件对话框了，我们可以随便写一个文件名，然后会在控制台给我们返回出来结果。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> saveBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'saveBtn'</span><span class="token punctuation">)</span>    saveBtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dialog<span class="token punctuation">.</span><span class="token function">showSaveDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">'保存文件'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>其实我们还可以作的更多，比如我们引入Node中的<code>fs</code>模块，然后进行文件流的操作，就可以真的生成一个文件。</p><p>先引入<code>fs</code>模块。</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span></code></pre><p>然后在保存后，向文件里写入内容。</p><pre class=" language-js"><code class="language-js">saveBtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    dialog<span class="token punctuation">.</span><span class="token function">showSaveDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span><span class="token string">'保存文件'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>filePath<span class="token punctuation">)</span>        fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>filePath<span class="token punctuation">,</span><span class="token string">'技术胖一个前端爱好者'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>写完这一步就可以在终端中输入<code>electron .</code> 来打开应用，进行预览了。这节课的内容就到这里了，内容不多。</p><h2><span id="14electron消息对话框的操作">14.Electron消息对话框的操作</span></h2><p><a href="http://www.jspang.com/detailed?id=62#toc348">showMessageBox 相关属性</a></p><p>它有太多的属性，这里我们也只挑一些常用的属性来讲解，如果你在工作中具体使用，可以先到官网查询相关的API后，再根据需求具体使用。</p><ul><li>type ：String类型，可以选，图标样式，有<code>none</code>、<code>info</code>、<code>error</code>、<code>question</code>和<code>warning</code></li><li>title: String类型，弹出框的标题</li><li>messsage : String 类型，必选 message box 的内容，这个是必须要写的</li><li>buttons: 数组类型，在案例中我会详细的讲解，返回的是一个索引数值（下标）</li></ul><p><a href="http://www.jspang.com/detailed?id=62#toc349">制作一个确认对话框</a></p><p>先在<code>Demo4.html</code>中增加一个按钮。</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messageBtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>弹出对话框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>然后这个对话框的内容也非常简单，就是简单的弹出一句话，用户可以点击“确定”或者“取消”。代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> messageBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'messageBtn'</span><span class="token punctuation">)</span>    messageBtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dialog<span class="token punctuation">.</span><span class="token function">showMessageBox</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type<span class="token punctuation">:</span><span class="token string">'warning'</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span><span class="token string">'去不去由你'</span><span class="token punctuation">,</span>            message<span class="token punctuation">:</span><span class="token string">'是不是要跟胖哥去红袖招?'</span><span class="token punctuation">,</span>            buttons<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'我要去'</span><span class="token punctuation">,</span><span class="token string">'不去了'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>可以看到回调中<code>result</code>里有一个<code>response</code>这个里会给我们返回按钮的数组下标。</p><p>为什么会鼓励使用<code>showMessageBox</code>，因为这样比JS里的<code>alert</code>更加灵活,比如可以设置按钮，可以设置title。</p><h2><span id="15electron断网提醒功能制作">15.Electron断网提醒功能制作</span></h2><p><a href="http://www.jspang.com/detailed?id=62#toc351">相关事件</a></p><p>其实这个是JavaScript的一种方式进行监听网络状态,监听的事件分别是<code>online</code>和<code>offline</code>。</p><ul><li>online : 如果链接上网络，就会触发该事件。</li><li>offline : 如果突然断网了，就会触发该事件。</li></ul><p><a href="http://www.jspang.com/detailed?id=62#toc352">案例演示</a></p><p>我们现在要做的就是当断网和重新链接到网络时，都给用户一个提示，方便用户即时得知网络状态。</p><p>新建一个文件，比如叫作<code>demo5.html</code>文件，然后编写下面的代码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span> JSPang<span class="token punctuation">.</span>com  断网提醒测试 <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'online'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'官人，我来了，我们继续哦！'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'offline'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'小女子先行离开一会，请稍等！'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>这样我们就完成了基本的网络情况监控，小伙伴们可以在终端中输入<code>electron .</code> 预览效果。</p><h2><span id="16electron底部通知消息的制作">16.Electron底部通知消息的制作</span></h2><p><a href="http://www.jspang.com/detailed?id=62#toc354">window.Notification的属性参数</a></p><ul><li>title: 通知的标题，可以显示在通知栏上</li><li>option: 消息通知的各种属性配置，以对象的形式进行配置。</li></ul><p>其实如果你想详细学习，完全可以看<code>H5</code>的<code>Notification</code>API进行学习。</p><p><a href="http://www.jspang.com/detailed?id=62#toc355">点击按钮提示消息</a></p><p>那直接来作一个实例，当我们点击一个按钮时，会自动给我i们弹出提示消息，告诉我们有新的订单。 新建一个<code>demo6.html</code>，然后编写如下代码。</p><pre class=" language-js"><code class="language-js"> <span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"notifyBtn"</span><span class="token operator">></span>通知消息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> notifyBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'notifyBtn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span><span class="token string">'小二,来订单了，出来接客了!'</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span><span class="token string">'有大官人刚翻了你的牌子'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    notifyBtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">new</span>  <span class="token class-name">window<span class="token punctuation">.</span>Notification</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>title<span class="token punctuation">,</span>option<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>然后改变一下<code>main.js</code>中的代码，让他渲染<code>demo5.html</code>。</p><pre class=" language-js"><code class="language-js">mainWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">"demo6.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后在终端中输入<code>electron .</code> 进行查看效果就可以了。</p><h2><span id="17electron注册全局快捷键">17.Electron注册全局快捷键</span></h2><p><a href="http://www.jspang.com/detailed?id=62#toc357">注册快捷键</a></p><p><code>globalShortcut</code>是主进程中的模块，而且注册的都是全局的快捷键，所以你尽量写在<code>main.js</code>中。打开<code>main.js</code>，然后先引入<code>globalShortcut</code>，代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span>  globalShortcut <span class="token operator">=</span> electron<span class="token punctuation">.</span>globalShortcut</code></pre><p>引入后，我们现在的需求是按快捷键<code>ctrl+e</code>键后，打开我的博客<code>https://jspang.com</code>。这时候使用<code>globalShortcut.register</code>方法就可以实现，全部代码如下:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> electron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span> <span class="token keyword">var</span> app <span class="token operator">=</span> electron<span class="token punctuation">.</span>app   <span class="token keyword">var</span>  globalShortcut <span class="token operator">=</span> electron<span class="token punctuation">.</span>globalShortcut<span class="token keyword">var</span> BrowserWindow <span class="token operator">=</span> electron<span class="token punctuation">.</span>BrowserWindow<span class="token punctuation">;</span>  <span class="token keyword">var</span> mainWindow <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">,</span>height<span class="token punctuation">:</span><span class="token number">600</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      globalShortcut<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'ctrl+e'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token string">'https://jspang.com'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    mainWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//监听关闭事件，把主窗口设置为null</span>    mainWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'closed'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        mainWindow <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这里需要注意的是，注册全局的快捷键必须在<code>ready</code>事件之后，才能注册成功。</p><p><a href="http://www.jspang.com/detailed?id=62#toc358">检测快捷键是否注册成功</a></p><p>可以使用<code>globalShortcut.isRegistered()</code>方法，来检测快捷键是否注册成功，因为你可能同时打开很多软件，它们已经占用了一些快捷键的组合，所以并不是你100%可以注册成功的。</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">let</span> isRegister<span class="token operator">=</span> globalShortcut<span class="token punctuation">.</span><span class="token function">isRegistered</span><span class="token punctuation">(</span><span class="token string">'ctrl+e'</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">'Register Success'</span><span class="token punctuation">:</span><span class="token string">'Register fail'</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'------->'</span><span class="token operator">+</span>isRegister<span class="token punctuation">)</span></code></pre><p>这样就进行了检测，如果你在实际开发中，可能当有冲突时，软件是支持可以修改快捷键。</p><p><a href="http://www.jspang.com/detailed?id=62#toc359">注销快捷键</a></p><p>因为我们注册的是全局的快捷键，所以当我们关闭软件或者窗口时，记得一定要注销我们的快捷键。防止关闭后打开其他软件和他们的快捷键冲突。</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'will-quit'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注销全局快捷键的监听</span>    globalShortcut<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token string">'ctrl+e'</span><span class="token punctuation">)</span>    globalShortcut<span class="token punctuation">.</span><span class="token function">unregisterAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>为了方便学习，给出全部<code>main.js</code>代码:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> electron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span> <span class="token keyword">var</span> app <span class="token operator">=</span> electron<span class="token punctuation">.</span>app   <span class="token keyword">var</span>  globalShortcut <span class="token operator">=</span> electron<span class="token punctuation">.</span>globalShortcut<span class="token keyword">var</span> BrowserWindow <span class="token operator">=</span> electron<span class="token punctuation">.</span>BrowserWindow<span class="token punctuation">;</span>  <span class="token keyword">var</span> mainWindow <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">,</span>height<span class="token punctuation">:</span><span class="token number">600</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      globalShortcut<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'ctrl+e'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token string">'https://jspang.com'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> isRegister<span class="token operator">=</span> globalShortcut<span class="token punctuation">.</span><span class="token function">isRegistered</span><span class="token punctuation">(</span><span class="token string">'ctrl+e'</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">'Register Success'</span><span class="token punctuation">:</span><span class="token string">'Register fail'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'------->'</span><span class="token operator">+</span>isRegister<span class="token punctuation">)</span>    mainWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//监听关闭事件，把主窗口设置为null</span>    mainWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'closed'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        mainWindow <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'will-quit'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注销全局快捷键的监听</span>    globalShortcut<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token string">'ctrl+e'</span><span class="token punctuation">)</span>    globalShortcut<span class="token punctuation">.</span><span class="token function">unregisterAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2><span id="18electron剪贴板事件的使用">18.Electron剪贴板事件的使用</span></h2><p><a href="http://www.jspang.com/detailed?id=62#toc361">复制激活码功能实现</a></p><p>现在要作一个激活码，然后旁边放一个按钮，点击按钮就可以复制这个激活码，你可以把激活码复制到任何地方。</p><p>先新建一个页面<code>demo7.html</code>,然后在里边先写相关的html代码。再里边放入一个文字的激活码，然后放入一个按钮。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        激活码：<span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"code"</span><span class="token operator">></span>jspangcom1234234242<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>复制激活码<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>然后编写<code>&lt;script&gt;</code>标签，首先分本获取<code>&lt;span&gt;</code>标签的DOM，然后再获取<code>&lt;button&gt;</code>的DOM,然后点击button时，触发事件，把内容复制到剪贴板中。代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>clipboard<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> code <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>code<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'复制成功'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>这时候就可以进行预览了，如果提示你的<code>require</code>没找到，记得在<code>main.js</code>中加入这句话。</p><pre class=" language-js"><code class="language-js">mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    width<span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span><span class="token number">600</span><span class="token punctuation">,</span>    webPreferences<span class="token punctuation">:</span><span class="token punctuation">{</span> nodeIntegration<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  </code></pre><p>这个在前面讲过，这个就是允许你在Electron中使用<code>node</code>，现在就应该可以了。</p><h2><span id="19electron打包electron-packager及electron-builder实现">19.electron打包：electron-packager及electron-builder实现</span></h2><h3><span id="electron-packager">electron-packager</span></h3><p>使用命令 <code>npm install electron-packager --save-dev</code> 安装好之后会在<code>package.json</code>中的<code>devDependencies</code>生成代码:</p><pre class=" language-json"><code class="language-json"><span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"electron-packager"</span><span class="token operator">:</span> <span class="token string">"^9.1.0"</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：</p><p>1、打包时要分清<code>devDependencies</code>与<code>dependencies</code>的区别，文章后会讲。<br>2、package.json 的额外字段 —— productName、author 和 description，虽然这几个字段并不是打包必备的，但它们会在 Windows 的 Squirrel 安装包（用于自动更新）中使用到，所以请读者根据实际情况添加。</p></blockquote><p>安装好模块之后，就可以对应用进行打包。electron-packager的打包基本命令是：</p><pre class=" language-xml"><code class="language-xml">electron-packager <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sourcedir</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appname</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>platform</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>architecture</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>electron</span> <span class="token attr-name">version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span> <span class="token attr-name">options</span><span class="token punctuation">></span></span></code></pre><p>参数说明：</p><ul><li>sourcedir：项目所在路径</li><li>appname：应用名称</li><li>platform：确定了你要构建哪个平台的应用（Windows、Mac 还是 Linux）</li><li>architecture：决定了使用 x86 还是 x64 还是两个架构都用</li><li>electron version：electron 的版本</li><li>optional options：可选选项</li></ul><p>为了方便起见，在<code>package.json</code>中添加代码：</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"package"</span><span class="token operator">:</span> <span class="token string">"electron-packager ./ myapp --out ./OutApp --version 1.7.9 --overwrite --icon=./app/img/icon/icon.ico"</span>  <span class="token punctuation">}</span></code></pre><p>然后在命令行中执行<code>npm run package</code></p><p><img src="https://segmentfault.com/img/bV6y4W?w=843&h=549" alt="命令行输出"></p><p>打包成功后，会在OutApp目录（此处的目录是在参数中配置的）下生成.exe，运行该文件，并且没有报错，则说明本次打包成功。</p><p><img src="https://segmentfault.com/img/bV6zDS?w=575&h=380" alt="可执行的exe程序"></p><blockquote><p>特点：</p><p>1、支持平台有：Windows (32/64 bit)、OS X (also known as macOS)、Linux (x86/x86_64);<br>2、进行应用更新时，使用electron内置的<code>autoUpdate</code>进行更新<br>3、支持CLI和JS API两种使用方式；</p></blockquote><h3><span id="electron-builder">electron-builder</span></h3><p>首先来看看什么是electron-builder，来自官方的解释：</p><blockquote><p>A complete solution to package and build a ready for distribution Electron, Proton Native or Muon app for macOS, Windows and Linux with “auto update” support out of the box.</p></blockquote><p>简单的说，electron-builder就是有比electron-packager有更丰富的的功能，支持更多的平台，同时也支持了自动更新。除了这几点之外，由electron-builder打出的包更为轻量，并且可以打包出不暴露源码的setup安装程序。考虑到以上几点，我果断选择了electron-builder &amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp （微笑</p><p>首先，依旧是安装依赖。<br><em>（这里官方<strong>强烈</strong>推荐使用yarn安装依赖包，但我使用了npm安装的依赖也可以正常打包，所以至于为什么官方强<strong>烈推</strong>荐用yarn，我还没搞懂其原因，还请了解缘由的大佬们赐教）</em></p><pre class=" language-livecodeserver"><code class="language-livecodeserver">yarn add electron-builder --save-dev</code></pre><p>在<code>package.json</code>中做如下配置</p><pre class=" language-json"><code class="language-json"><span class="token property">"build"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"appId"</span><span class="token operator">:</span> <span class="token string">"com.xxx.app"</span><span class="token punctuation">,</span>    <span class="token property">"mac"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"target"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"dmg"</span><span class="token punctuation">,</span><span class="token string">"zip"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"win"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"target"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"nsis"</span><span class="token punctuation">,</span><span class="token string">"zip"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"dist"</span><span class="token operator">:</span> <span class="token string">"electron-builder --win --x64"</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>在命令行中执行<code>npm run dist</code> ，执行结果如下：</p><p><img src="https://segmentfault.com/img/bV6AfM?w=843&h=549" alt="使用electron-builder打包"></p><p>打包后在dist目录生成如下文件：</p><p><img src="https://segmentfault.com/img/bV6Ah7?w=569&h=238" alt="图片描述"></p><p>解压zip包或执行setup安装文件，应用启动后且没有报错，则说明本次打包成功。</p><blockquote><p>特点：</p><p>1、electron-builder 可以打包成msi、exe、dmg文件，macOS系统，只能打包dmg文件，window系统才能打包exe，msi文件；<br>2、几乎支持了所有平台的所有格式；<br>3、支持Auto Update；<br>4、支持CLI和JS API两种使用方式；</p></blockquote><h3><span id="坑">坑</span></h3><p>研究electron打包的过程中踩了不少坑，打包涉及到不少系统级别的问题，从最初的选型到最后的成功打包，看似是个简单的过程，但其中仍有一些需要注意到的地方，我在这里分两点说明：</p><h4><span id="devdependencies与dependencies的区别">devDependencies与dependencies的区别</span></h4><p><code>dependencies</code> 表示我们要在生产环境下使用该依赖，<code>devDependencies</code> 则表示我们仅在开发环境使用该依赖。在打包时，一定要分清哪些包属于生产依赖，哪些属于开发依赖，尤其是在项目较大，依赖包较多的情况下。若在生产环境下错应或者少引依赖包，即便是成功打包，但在使用应用程序期间也会报错，导致打包好的程序无法正常运行。</p><h4><span id="npm与cnpm的区别">npm与cnpm的区别</span></h4><p>说到<code>npm</code>与<code>cnpm</code>的区别，可能大家都知道，但大家容易忽视的一点，是<code>cnpm</code>装的各种<code>node_module</code>，这种方式下所有的包都是扁平化的安装。一下子<code>node_modules</code>展开后有非常多的文件。导致了在打包的过程中非常慢。但是如果改用<code>npm</code>来安装<code>node_modules</code>的话，所有的包都是树状结构的，层级变深。</p><p>由于这个不同，对一些项目比较大的应用，很容易出现打包过程慢且node内存溢出的问题（这也是在解决electron打包过程中困扰我比较久的问题，最后想到了npm与cnpm的这点不同，解决了node打包内存溢出的问题，从打包一次一小时优化到打包一次一分钟，极大的提高了效率）。</p><p>所以建议大家在打包前，讲使用<code>cnpm</code>安装的依赖包删除，替换成<code>npm</code>安装的依赖包。</p><h2><span id="20electron-系统托盘图标任务通知栏图标右下角图标">20.Electron 系统托盘图标/任务通知栏图标/右下角图标</span></h2><p>打开main.js,添加上应用最小化隐藏到系统托盘功能所需要的代码后是这样的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span>app<span class="token punctuation">,</span> BrowserWindow<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//electron</span><span class="token keyword">const</span> electron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用一个 Tray 来表示一个图标,这个图标处于正在运行的系统的通知区 ，通常被添加到一个 context menu 上.</span><span class="token keyword">const</span> Menu <span class="token operator">=</span> electron<span class="token punctuation">.</span>Menu<span class="token punctuation">;</span><span class="token keyword">const</span> Tray <span class="token operator">=</span> electron<span class="token punctuation">.</span>Tray<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//托盘对象</span><span class="token keyword">var</span> appTray <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> win<span class="token punctuation">;</span>  <span class="token keyword">let</span> windowConfig <span class="token operator">=</span> <span class="token punctuation">{</span>      width<span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">,</span>      height<span class="token punctuation">:</span><span class="token number">600</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span>windowConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>      win<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`file://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/index.html`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//开启调试工具  </span>    win<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">openDevTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//系统托盘右键菜单</span>    <span class="token keyword">var</span> trayMenuTemplate <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            label<span class="token punctuation">:</span> <span class="token string">'设置'</span><span class="token punctuation">,</span>            click<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//打开相应页面</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            label<span class="token punctuation">:</span> <span class="token string">'帮助'</span><span class="token punctuation">,</span>            click<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            label<span class="token punctuation">:</span> <span class="token string">'关于'</span><span class="token punctuation">,</span>            click<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            label<span class="token punctuation">:</span> <span class="token string">'退出'</span><span class="token punctuation">,</span>             click<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为程序设定关闭为最小化，所以调用两次关闭，防止最大化时一次不能关闭的情况</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//系统托盘图标目录</span>    trayIcon <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//app是选取的目录</span>         appTray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tray</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>trayIcon<span class="token punctuation">,</span> <span class="token string">'app.ico'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//app.ico是app目录下的ico文件</span>         <span class="token comment" spellcheck="true">//图标的上下文菜单</span>    <span class="token keyword">const</span> contextMenu <span class="token operator">=</span> Menu<span class="token punctuation">.</span><span class="token function">buildFromTemplate</span><span class="token punctuation">(</span>trayMenuTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//设置此托盘图标的悬停提示内容</span>    appTray<span class="token punctuation">.</span><span class="token function">setToolTip</span><span class="token punctuation">(</span><span class="token string">'我的托盘图标'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//设置此图标的上下文菜单</span>    appTray<span class="token punctuation">.</span><span class="token function">setContextMenu</span><span class="token punctuation">(</span>contextMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//单击右下角小图标显示应用</span>    appTray<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        win<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        win<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//回收BrowserWindow对象</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>win<span class="token punctuation">.</span><span class="token function">isMinimized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            win <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            win<span class="token punctuation">.</span><span class="token function">minimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*win.on('resize',() => {          win.reload();      })*/</span>  <span class="token punctuation">}</span>  app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span>createWindow<span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'window-all-closed'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'activate'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>win <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2><span id="21electron应用任务栏图标闪烁提醒">21.electron应用任务栏图标闪烁提醒</span></h2><p>在 Electron 系统托盘图标/任务通知栏图标/右下角图标 的基础上增加 如下代码即可实现闪烁</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>timer<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>  timer<span class="token operator">=</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      count<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        appTray<span class="token punctuation">.</span><span class="token function">setImage</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>trayIcon<span class="token punctuation">,</span> <span class="token string">'empty.ico'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        appTray<span class="token punctuation">.</span><span class="token function">setImage</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>trayIcon<span class="token punctuation">,</span> <span class="token string">'app.ico'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2><span id="扩展"><strong>扩展</strong></span></h2><h3><span id="nativefier">Nativefier</span></h3><h4><span id="简介">简介</span></h4><p>Nativefier 是一个命令行工具，可以以最少的配置轻松地为任何网站创建桌面应用程序，把 Web 页面变成本地应用的命令行工具。通过 Electron + Chromium 把网站包装成本地 .app、.exe 等可执行文件，支持运行在 Windows、macOS 和 Linux 操作系统上。</p><p>例如，为 WhatsApp Web 制作可执行文件，只需要运行以下命令：</p><pre><code>nativefier &#39;web.whatsapp.com&#39;</code></pre><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/DSU8cv1j3ibQDC7UusanzGG2vnVbAb13WHiawn6MkT66tpDnTHUTpngp6rfVACaBYzDx6Eg1JhEJYAatdjGmxwKg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt="图片"></p><p>项目地址是：</p><p><a href="https://github.com/nativefier/nativefier">https://github.com/nativefier/nativefier</a></p><h4><span id="安装">安装</span></h4><ul><li><p>macOS 10.9 + Windows + Linux</p></li><li><p>Node.js &gt;= 12.9 并且 npm &gt;= 6.9</p></li><li><p>可选依赖</p></li><li><ul><li>使用 ImageMagick 或 GraphicsMagick来转换图标。确保 convert 和 identify 或 gm 在系统路径 $PATH 中。</li><li>Wine 在非 Windows 平台下打包 Windows 应用程序。确保wine在系统路径 $PATH 中。</li></ul></li></ul><p>然后，使用全局安装 Nativefier：</p><pre><code>npm install -g nativefier</code></pre><h4><span id="用法">用法</span></h4><p>要为 medium.com 创建本机桌面应用程序，只需执行以下命令：</p><pre><code>nativefier &quot;medium.com&quot;</code></pre><p>Nativefier 将默认设置应用程序名称以及许多其他选项。用户也可以覆盖这些选项。例如，要覆盖名称：</p><pre><code>nativefier --name &#39;My Medium App&#39; &#39;medium.com&#39;</code></pre><p>常见的命令行选项有以下这些：</p><pre><code>-h, --help                     打印使用信息-v, --version                  打印 nativefier 版本-a, --arch &lt;value&gt;             构建时的目标处理器架构，ia32, x64, armv7l, arm64-c, --conceal                  指定本地化应用程序中的源代码是否一并打包，默认为 false-e, --electron-version &lt;value&gt; 指定 Electron 版本-i, --icon &lt;path&gt;              指定应用程序图标为 Windows 打包时，必须是 .ico 文件的路径。为 Linux 打包时，必须是 .png 文件的路径。为 macOS 打包时，如果安装了可选的依赖项，则必须是一个 .icns 或一个 .png 文件。如果有图像转换工具（iconutil，或 ImageMagick 的 conver + identify，或 GraphicsMagick 的 gm），Nativefier 将把 .png 自动转换为 .icns-n, --name &lt;value&gt;             应用程序的名称，Linux 上使用时不要包含空格--no-overwrite                 指定目标目录是否不应被覆盖，默认为 false-p, --platform &lt;value&gt;         执行平台。默认为当前操作系统，也可以指定为 linux，windows，osx或mas--portable                     使应用程序将用户数据（cookie、缓存等）存储在应用程序文件夹中--always-on-top                应用程序启动时保持在屏幕最上层--background-color &lt;string&gt;    指定背景颜色，https://www.electronjs.org/docs/api/browser-window#setting-backgroundcolor--bookmarks-menu &lt;string&gt;      定义书签菜单的 JSON 文件的路径，如：&#123;    &quot;menuLabel&quot;: &quot;&amp;Music&quot;,    &quot;bookmarks&quot;: [        &#123;            &quot;title&quot;: &quot;lofi.cafe&quot;,            &quot;url&quot;: &quot;https://lofi.cafe/&quot;,            &quot;type&quot;: &quot;link&quot;,            &quot;shortcut&quot;: &quot;CmdOrCtrl+1&quot;        &#125;,        &#123;            &quot;title&quot;: &quot;beats to relax/study to&quot;,            &quot;url&quot;: &quot;https://www.youtube.com/watch?v=5qap5aO4i9A&quot;,            &quot;type&quot;: &quot;link&quot;,            &quot;shortcut&quot;: &quot;CmdOrCtrl+2&quot;        &#125;,        &#123;            &quot;type&quot;: &quot;separator&quot;        &#125;,        &#123;            &quot;title&quot;: &quot;RÜFÜS DU SOL Live from Joshua Tree&quot;,            &quot;type&quot;: &quot;link&quot;,            &quot;url&quot;: &quot;https://www.youtube.com/watch?v=Zy4KtD98S2c&quot;        &#125;    ]&#125;--disable-context-menu         禁用上下文菜单--disable-dev-tools            禁用 Chrome 开发者工具--full-screen                  使打包的应用程序全屏启动--height &lt;value&gt;               打包应用的高度，默认为800px--hide-window-frame            禁用窗口框架和控件--max-height &lt;value&gt;           打包应用的最大高度，默认为无限制--max-width &lt;value&gt;            打包应用的最大宽度，默认为无限制--maximize                     使打包的应用程序最大化启动--min-height &lt;value&gt;           打包应用的最小高度，默认为0-m, --show-menu-bar            是否应显示菜单栏--single-instance              单例，防止应用程序多次运行--title-bar-style &lt;value&gt;      设置应用标题栏的样式/* site.css *//* header is draggable... */header &#123;  -webkit-app-region: drag;&#125;/* but any buttons inside the header shouldn&#39;t be draggable */header button &#123;  -webkit-app-region: no-drag;&#125;/* perhaps move some items out of way for the traffic light */header div:first-child &#123;  margin-left: 100px;  margin-top: 25px;&#125;--x &lt;value&gt;                    打包应用程序窗口的 X 位置--y &lt;value&gt;                    打包应用程序窗口的 Y 位置--zoom &lt;value&gt;                 设置应用程序打开时要使用的默认缩放系数，默认为1.0--lang &lt;value&gt;                 设置语言，&quot;fr&quot;, &quot;en-US&quot;, &quot;es&quot;等</code></pre><h4><span id="与-docker-一起使用">与 Docker 一起使用</span></h4><p>Nativefier 也可以在 Docker 中使用。</p><ul><li>从 Docker Hub 拉取最新的稳定镜像：</li></ul><pre><code>docker pull nativefier/nativefier</code></pre><ul><li>或者自己构建镜像：</li></ul><pre><code>docker build -t local/nativefier .</code></pre><ul><li>使用 docker 构建本地应用：</li></ul><pre><code>docker run --rm -v ~/nativefier-apps:/target/ local/nativefier https://mail.google.com/ /target/</code></pre><h2><span id="书籍">书籍</span></h2><p>electron实战入门进阶与性能优化</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2021/12/05/di-yi-pian-bo-ke/"/>
      <url>/2021/12/05/di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>第一篇博客</p><p>​    说道写博客，一直一来都想开始动笔写，想搭建一个自己的博客。目的是用于记录生活的点点滴滴。也把学习的笔记记录其中，方便自己回顾，也方便分享给需要的人。一个偶然的机会在网上发现了一个搭建博客的视频，也算是帮助自己完成这次搭建博客的关键。</p><p>​    博客的名字纠结了半天，最终还是用了孩子的名字。虽然可能有点奇怪，不过也想用博客把她的成长记录一下。同时也时刻告诉自己，要做孩子的表率。</p><p>​    苟有恒,何必三更眠五更起;最无益,莫过一日暴十日寒。</p><p>​     我这个人有个毛病，做事多半不能从始至终，读数很少能从头到尾读完。很多时候觉得自己就是那种假自律，表面上给人一种很认真很好学的感觉，其实很多知识自己并没有掌握。</p><p>​     希望自己能通过博客，锻炼自己，让自己能够更加自律，给孩子做一个真正的好榜样。</p><p>​     这个小小的博客就当作自己自律的一个起点。</p><p>​                                                                                                                       2021-12-05 16:53:32</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
